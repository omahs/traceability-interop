{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b4330cec-868f-4200-af4d-7d82eea9ce75",
        "name": "Clear Cache",
        "item": [
          {
            "id": "09af2b54-e1b2-4234-b4f2-420815eb053e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "00bd818c-651d-42b3-b859-6c25ad8b4246",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "83c09d0b-455e-4e12-b678-d28047b3ad0d"
                }
              }
            ]
          },
          {
            "id": "c165770c-7b39-493b-a922-44234dceed54",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d90ad039-a58a-415c-a1da-f4f780dbd7ed",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fd3cdc03-6ead-4d62-9e53-6ba59ba79cfe"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "af6ad966-95fa-4793-8160-301b8d4828bc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "be00149f-f912-4f3c-a310-0c05ecd5a359",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7ca23b87-2cfd-4747-8c6f-4eeace1f4055",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee4d8034-ead3-44c5-b853-4483337f6ad9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f990aa03-f662-49f9-8915-4f9b1308a515"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ba5589b-9500-478d-b0f7-bf2b8abd1e0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07ea44bc-17a2-4864-8302-dca230ac08ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4337593c-be59-4283-adfc-69bb45a59280",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c39234e-e18c-4ff8-bf47-9ae0912a375e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fb4bd4e-efc2-4d2b-a664-5d5eb0cb7301",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4074ac88-c59f-4464-b289-36197a63ae15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0f7935f-6bb1-4717-85e6-b4153d2c53d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "433dcc58-754b-4286-a93b-a4dc174ae1aa"
            }
          }
        ]
      },
      {
        "id": "253afbc4-b0c1-4f2a-ba38-2967f3e16e20",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1afafe67-0ce6-41c4-adde-4546c3cdd502",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64112d26-6d48-41d3-8fd2-05c47d32d251",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1e84c7d5-59c0-40a6-9bb9-4db56d36c391",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b894d2a0-43aa-4b94-a026-df27632074bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ea72828-5f63-4fcc-943c-76b4b37e84cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99242225-8399-4ca4-a99c-5fa5eb986673",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c43d10-d18e-4951-a6ac-1d203f069cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85667be3-3c8f-418f-8c74-00d35dc9bfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecb58b8-68ce-4769-af0f-c9cfaafb8ade",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a82b144-aab0-4db3-9f2b-2585fdcca7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9295da8-8f17-4832-83fe-18ed06619287"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e3a8768d-f908-48ca-8c57-4d1c875fff7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c6d8c09-4d17-490a-b0d4-24c3039e1351",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7be66c6-fa66-451c-a11a-0d36bc8baa29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bdb0080-8a41-4f12-af16-b79ffb8a9919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8726192-155a-451f-82ca-ec252b28fe59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79b3c69-75c0-4010-b871-bce64a63f416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e286e1fc-8680-42c5-80d5-fd18294fba6e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c5e51a-10f7-4f87-abeb-3772011ad19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a245b0c-256f-458e-ac19-0d5fd8accb73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad12dfc8-b54b-4d7a-9a1b-73a076393511",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "39b3f349-635f-42de-a93a-a135a983b058"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f945292f-235d-4fdd-ad72-f60c9c5126d3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1d9e53fe-6173-472e-bbf6-2aa5c5bc3c17",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cd9681c-9421-4362-9364-0accf55cecb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "688d86bf-b59c-49bb-b490-573c2289e952"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "738b6985-816f-45c1-8af8-089f5ad948f7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b862fd28-da88-4d9a-8a6f-b7df6ea88902"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a623e08-8b7c-4fa8-bda1-d6e8e3b88182",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1ff14bc-0de7-46e0-9039-6267b1bf19ea"
            }
          }
        ]
      },
      {
        "id": "cd8d7dc0-9a47-4a54-a351-6fc3fa0552f3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0f35cb3f-6db9-4363-b0ca-ca9a200f4e54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1f2265a-1b4a-4a08-bf51-a08ea9d892a3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3e983282-e17a-408b-86ee-1b143400df3d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa180fa6-f6c1-4789-9533-2841a407dd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2177d64-ebae-4835-8bc5-3a515d50f7a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c08373-0908-45b3-ae6d-50678a96c1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d92c528-769b-4fd0-b6ba-5f9d1df06f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42257d21-2f6a-4220-923a-87562c8aeb5d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c3b735-eb88-42eb-93b4-02f1268beaf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8098f780-7f9e-4289-980d-114501d6124f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d453978-1eac-4312-85bd-1e2532b882d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a98318a3-103f-44d9-9a19-90635e087fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96db3ef5-e624-4425-8149-b87db5a0fa73",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682c43f6-19e6-458d-bbb7-667154c50a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0060a308-7b82-4601-b65b-fc94df394c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b535c38-356a-4b5f-b49d-50a3ad861ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bacc4e5d-52f4-43e1-8ab5-8e3819ae2154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b5a989-aa8c-4b01-ba6b-0ee8cdf148c8",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717a23ce-e04a-4d14-a976-e85db3d952f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ccb2ec-3b6b-4652-b10b-6ee113df6787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdc9c28-4548-42fd-8263-6e486b86ee07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad4a2c4a-57c7-44b6-b5ad-ca09b138f0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38f837c-29af-4347-8614-eedf1bab8a42",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e214b42-13dc-425a-b092-bc624235b545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a56cf7c-cabc-41cc-a9a4-e7e2295b14e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de49364-5078-4562-86f1-7e226077739d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0433e8f3-264c-4ebb-b628-1cfb5fbced02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9348dc60-1390-4d17-be77-79808e02a569",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010fe18f-ea32-4da3-bdb6-c735552d5417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ed4aae-5d93-478e-9d4c-d0e8121aa382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6157e1b-505b-419a-91ca-41088787b70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d8de069-10f1-4afb-95db-30aff55e720c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652fbad3-b2e7-4e4b-be14-4c3b995e4d09",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d9e7df-3cac-466d-a624-1cad73eede51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeec5d93-9831-44f3-9c15-0a4f420efe6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a6af19-5563-4215-be8d-37c48db5c520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b2e8229-3d51-4084-a101-ef3906b3d42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6054f7dd-e227-46ba-b372-99b2bb0e3f4d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308f5f02-01a9-4e22-b22d-3823fcbd59a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e2c7caa-15bc-43b5-a0fc-d2666a48f2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c435d3f-9094-4aa0-8c19-cb7393d41111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4ffa85d-cb33-42f8-adb2-5e6eab87c196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe88e65-3daa-4af8-84e9-b4922baf1f19",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347cfe4c-f5e9-4e84-9fec-f3b2efbcd4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ac675d9-0712-43ec-b4e2-2bdabcee1d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0e20d6-1d0b-4846-be38-375609c5a8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2148418-de34-4b85-bc40-aed65f166c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606edd47-574c-4d68-a5ab-48f47316ed97",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c43df4-ead8-47c0-a0b1-02191723540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac2b6ba-dbe3-4442-b8b2-93f75798fee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e41efa-71bb-4864-aabc-290f78d874a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6aae0334-a1c5-4aeb-b944-fb611162f912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844802ed-1018-43ee-94da-4f429c8dfb47",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837bda43-0ad0-4a44-af10-f5d8e06d0537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f5640e-2c34-4eee-ba43-c7843283e670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14fbf3f-5c75-4205-b563-a241a0415372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4780bdc-d113-411c-a3c2-d815400dac31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b39619-fbe0-4ade-871c-6c86a8c96df6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a2ff82-14bc-4456-bb5a-ec00a57ded91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f931470-1522-4f93-9878-46449a3d8692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1db89b2-78fd-4d9a-89cd-131b7736327e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a87d3fb-bcb6-4da0-91ab-b340d2207542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14d3e75-5b3d-4978-b53a-641d0318a60f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5e94f4-4f14-44cd-af02-aca5e2263570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b80503-ee01-4d73-bd01-057bbc935912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1abf0e-f613-4e0f-9918-5e6fa3700797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c319557c-477c-4bce-ba54-a073270b315c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ec562b-6eca-4d14-9ca3-9ff19310d8a7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0713f97a-9614-443b-9732-f3e8ba163bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047e6cc7-c356-4a04-85d2-c1cb1a225638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf9cc3d-6ead-4af0-8013-4a9637280c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cbf887a-1898-476c-b369-855d98260959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a246836-c191-4f75-8e3f-b3d814ad12c2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27216e39-6927-44d9-b15c-3c245f2cbfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aebb3c57-0723-4015-86cb-8a446a25654c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfe3e53-cefd-486e-bef3-1c931f4c4812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eefb4567-9018-4408-88d8-508b699fdb92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ee1420-632c-4305-89f3-a0b3fcb967bb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73eb4a1b-e428-45fa-957f-6c45345dcf2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deeffa43-34f1-4f08-8a8b-bb318593f5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6150d902-247f-44f4-8c71-1bdea6b090f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "009c3d48-ecec-44a3-91f5-70c9622cee0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ef869f-3080-4e9c-8630-146b7292a1fa",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07121f7-9cfa-4845-bbae-23edd64c26d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ad570c-e243-44dc-a40b-d8be4e73b6b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a55ec4a-d1f3-4e94-8f7c-59e719881987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93c6370a-be64-4bcc-9148-82f0cb819f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d862d948-f487-4bbd-b627-1d5c0ea50860",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70dbf50-e7f6-406f-a163-7d434b714811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887ce53b-ec75-4460-b9d1-1993c267cc26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb08c0b4-6a36-4a3d-9d57-bd61e6c836ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "811fbf50-a307-4261-abcc-cde411355434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324f549c-cf68-45fe-b710-e815758ad978",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f04163f-d7f2-4560-baf1-406010d57577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c6f031-455c-46f6-9a46-1ed57a98c383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7167088-b917-4065-a3a9-17c7892722d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a97e5b-5420-4c62-944d-3431a405598e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5f155d-999b-44fe-a746-80d46ae47826",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f71aa7-46bf-4f83-bc4f-ccf9ed9a0293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce58ec6-4e50-4633-89b0-e3fd31d41adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f17ebd5-f3d8-417f-9b82-433d7530cf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4035fa39-4679-4e4c-b1bc-f9eead3cee00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6da1460-288f-410c-b3aa-a0d49b9b6c39",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793f782b-0936-4fd3-8b74-fe28b7920025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf072e4-bc9f-47e9-9205-ea5458d557d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53054a1-2340-451b-ad65-fbef3497f5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68db9483-c12f-4313-b417-85819c464292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de994e78-c98a-45f4-abe0-401fe39405f7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f85c56-aaf3-432c-a164-00731a2dbd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44d94df-a6d6-44c4-aecd-069d9e9299e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8a4fce-3272-406a-a7ca-d5f22f08dca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "331c25f0-7f19-4033-879a-401d95180119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de6f166-4848-457e-8ca5-893b716f1612",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f109536-339a-4ce6-abdc-5270713097a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b0375e-9dde-4dce-b110-76c90bd51a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac8dbe6-593d-4f13-9837-4c664a271b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a865879a-6467-4974-8436-a73fc97295dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2988d3e-9a46-4f21-bfdf-ea53b0ca7dcc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff32eff-f41c-4769-89e9-086d07ddb035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b9de2f-b718-4506-8846-0b314c921661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531729aa-d6ee-4860-85f8-c34033c747d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a936327-8219-4f47-8229-cbc7dfbeb94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b0ea26-7131-4d0f-a3ae-0f9139e997b5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c07cddb-cdf9-4b40-9c0b-4aadfa1aad04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5a9ca8-839d-42a1-85bc-dd40ac156f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e93b31-127f-4a21-96cd-012fcb99535b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "afca66f2-0fe9-4fce-a6e9-5aa466c18a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48f9a3e-727b-40da-a640-741ec64bcec7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e694a1bd-3887-46bd-ad30-429c8363468e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2afd807-be8b-47e0-b3a5-c66ae8548363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330f0919-3c66-4fa2-bc09-6de03b6b438c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "604afb82-5d28-49d3-ac83-9befe2b92758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f30333e-b854-4f68-b768-6d21fa21d229",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe04dd1d-cc66-4527-81d3-9d4950c8a0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215c39ab-a4bb-4cff-a087-fab80fbdffaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e25945-e392-41df-9cea-ee21a4f8b414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67005a89-9543-4801-9cb9-d1312009a43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b81f94d-0394-4b2b-ace4-894e7789b616",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c07624a-4042-4adf-9e5f-26b5a763aa38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd26b06-35d8-4c14-a506-80f8fd1f8291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adaa6b6-113d-42db-9c9f-acf4f793ec4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eab674ce-fbc0-4d05-bad3-d538e27f4753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29c8d48-5fe1-47ca-9a7c-cb6a1f43c7a0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058d86b8-f550-4553-898f-6aa31062593a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "979632a5-ed5d-4ae0-b1a9-0e9346ea67c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea2cde9-ecd5-4a49-a396-7df1fb257c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "71282f13-cc3e-4ff3-8369-ad0df8bc8c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87aa17ad-e206-44de-a3bf-0ab58e602e51",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a8743e-c88f-4bd0-9f5d-31073849cdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b3f358-43a5-4a32-9e0b-0e1f79837137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25398f8-5194-461d-a0ad-78a7841f4906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ede856-9c66-4d9b-9bf8-eed639029f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e4c7a1-a863-4157-b4d6-76ed32ac65e1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381c3864-54ba-4f34-9ba2-68c60c48de35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f662da-477a-476e-8d8d-9b373c91f458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0143cc6-c07c-41f9-876f-8b082e0f774d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3947e41-89db-42d0-8047-c2193babcc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b06421f-82ee-4e9e-802d-8e2850b53eea",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa09bec0-6769-48f4-ad40-362203e19b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487cd4ba-fe91-4eeb-ba40-9f9e91b9f197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a97edbc-a933-4150-a14c-7ad639032366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3cfc2c-b472-4976-a8af-e5925c981c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2ef37b-4dcc-47ef-9ce1-0981529bf730",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b4593a-fc6f-4c0f-926d-9170d4a75c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c48dbd9-5858-4482-a428-a11a27c63b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e00140-f962-4314-a159-c3ad28149dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "638462cc-f250-455a-afaf-35dd543f2a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d71e219-22d2-4f1c-a0bb-7374f0ecd20f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c22117f-9e8c-4f5a-8b09-e4a18dc5eb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3209bda6-f508-4f4d-b921-fb070ca7aafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64215f4-18b1-4bd6-a347-805a4652f675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18d347ab-abc6-4135-b297-4935ad528bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68b250d-c883-49fd-a831-a0bd9dbd1f58",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70f21f6-6f5a-4429-82df-1417239ac7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df4bc262-5c51-47a2-bc02-0dd8c455a1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ff18b6-117e-4210-8e9f-bf6044ada685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d45cee-f804-4bc3-b2eb-a6f810bb150c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d8ddc8-75d9-4855-8706-27f4a280f99f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e27adc6-00be-4b9a-8508-784f2d857e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5335f46d-7212-4452-b629-3cfef908b3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03afdb35-a6f2-4ba9-9ed9-d17d99c6f39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a163b6b4-1f59-493e-80fc-be661d0537c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd5df46-36af-4947-9ff1-85c225786e1d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551b3b71-1a2e-423b-bf7b-64e5feabf61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adc2577-7364-47cd-85f7-60d78892891c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c64c19-be79-4692-82c7-988b338a6669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "420468b7-76a3-4e63-b435-853f938855c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca058f77-955d-4c26-95a4-ca8e3b0cccb6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb8a733-6f92-4314-aa62-e72965fab06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aeff59c-be41-4f5f-b774-e4e29829cfe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d6c300-7eb3-4bc5-9b03-02c0a45419c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "391cf548-d3ff-4625-8a04-f1f2e7b1853c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96d7890-f79a-4dd3-9714-34874ddc0b44",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be3d064-33b5-465a-80b8-7c840dc688c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "867114d1-e1bf-48a3-a943-c91be25b880d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddaad8b-8572-4b9b-b164-d3c34d0f34e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "689045b5-2dbb-41ad-b436-478f55d48c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc146324-f340-4200-9068-a0a8ead35e99",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda5bcc8-e026-4334-bd05-3caef0a4850c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811cd8f0-0fe4-4e66-aea6-39528515450d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68474bd2-790e-49c3-8e15-669c5d56991a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1471c5e7-ec68-4b7c-89f7-c565785cf0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577d696d-bb6a-4e80-a986-a9986590c0a7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12be5e1-bd3e-4214-b913-0ebab6fbc7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317b7808-b6fc-47d1-940b-b3c45ff299c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c0476d-4b1c-4959-bcb6-8d18f35dd991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b837fe0-1a33-4a2f-b45e-8ec2b201ea80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f9f342-19f2-4579-9e13-19904373af49",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e94f97-7c0a-4013-9aad-8344592cd5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51f698a-c100-4904-8c3d-6ebd393bc0e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12571a9-c71a-4e86-a8ca-8f3492ec98c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5162b26d-c545-4cbd-937b-610367359ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b371225-7d23-4446-8461-c13d59bb5c7b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb954c59-4067-4a8b-86e2-d146e8e630f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4faa56-9013-4795-b0a6-90a0246c3350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4ed679-2762-4502-86d2-c78e9be25b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4db047a7-87fc-4f50-a7fd-6a9505d54b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2860ea-f690-451b-8ea3-0b3ba26077cc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede520ec-208f-4e86-9999-8003691be5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a0fe64-10ea-4e13-87fb-bb61365fff8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868f6f29-2a1b-41d3-b673-de623bb555ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "79d04e44-8c18-4d18-94fa-0168d93eeeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc65c25d-6804-4f1d-9318-797910c8733a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8380848-400c-4933-8968-edd738c163c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752c7450-9f4f-4bac-90f4-cd5886c745fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d34828-55cf-4a05-ba04-a5ad3ac9168d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c9f880-853d-49dd-9d25-731e76cd6f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc95e6d4-ace2-4a67-8e91-a8cf0e815cc4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bb24bd-bcf5-40b2-80ec-b5bbf365be98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdcd652e-8faa-497f-9cb3-c9bb7e4460ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e3454e-3f31-468d-8a0c-23d41b855eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba5338a6-eac6-4659-9292-2f8736ceb57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb4d496-3120-4160-ac83-0f2d560795fb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b662cc-0135-4bb7-8bd2-6ff9c27f5143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d14b54e-2963-4426-8666-7a3111d8ed3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a09358-2304-4689-bbf8-46aaef19c3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edde8d70-6727-44dc-a77c-1019f08aa04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a96b3c1-bfa0-44ae-9539-41ca09a91040",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0743c24-fb47-4e5b-b1f7-87e1273127bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227d123d-862b-4ef7-9976-28c7c8f099db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd5ac3d-bb58-4da4-9bec-c8bf30a86406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b820acb-4750-4536-8783-4043cad5b50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c352cc8-5ad3-4b28-b020-12fe74b119bd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b4ead1-097e-4dfc-923f-a4df426236b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc31baa-04a1-4614-baa1-95545afef5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fa0d95-1501-4a20-b215-a256039cf579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d746baa-a5b0-4311-84e6-8c237486503e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6172ff57-91c8-46b3-a492-162d8e408012",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b037743-1b86-46ae-beb6-f65e148643f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be9c9176-0ea9-4686-9bbe-11b2647a4360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e88e73-b3e1-4e07-b3d9-53c59005c478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73240cc3-1c48-4171-85c5-8b324d506749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fbcfae-7adc-4207-a933-333c8ca41f3c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd7956f-57bd-4964-8f1e-89064d22434d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676bd9d3-f395-4687-a235-3d5e5056c665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb74bb8-8902-4b76-aa3b-060b48c67a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "57c112dc-da91-4404-8291-5614301b18e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9040eb5b-6d40-4f81-abcb-73450ccc39f3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a1d889-e3ed-4993-8e21-f1e084994cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506da915-f96c-41d9-8597-721af5f85626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08d414a-3743-48ef-9f3a-9d5a671e2f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67a5a4a0-8e42-42f1-977a-76aeeb5ec242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ccb6c1-75ea-49a8-a919-1da4d1dc6f7c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf4cc76-b443-4e07-ba30-9fb5940b1422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b425a52-50a3-42f7-96cf-d2c2b697c59f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65832c0-c0dd-424a-91ad-a21570e56ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e41352-0849-4cb7-93ed-c8ba7046338b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b556d3ab-ca7a-462b-908e-151100cbea21",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54fbf91-55b2-482b-9204-a2afd8b6a676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d964e9-4293-444c-b5a2-e5bc45267e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab683b44-07e2-4e0a-b548-0b160d5274b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87b97a30-185a-40f0-b2ff-b577ed253c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78553707-be21-4f0b-b5e1-2e975ccfe6e6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62aa8543-acf7-4425-81f8-ebdc61a62b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3ff91d-4494-4fa2-bb68-40100c92202f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759d8473-a4d7-4e51-b7e7-e1e55b7ed6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4deaf7ae-8435-45b3-8d15-8860f2294f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01695b5-e868-41f5-93ca-60d17ad53c16",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611d11e2-ebd7-4ddc-a126-834abc8c254b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665e2f71-cb15-4a43-addf-40ba406b5300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e0ea46-1fce-4b44-8a33-060c8913594b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2ed793-a914-47bc-9abb-6af6f0836fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b56d778-1e0c-46cc-96c8-7244b1ab91be",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7b4fad-e0e6-4d82-98af-730e5d7ed3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b97774-beb2-4be7-ba06-d7126f245459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2572a7-9899-4e30-baa8-da0048dc8aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7474c16-621e-41ac-9f70-969c48237fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196a3570-26cb-4968-b54e-6f0ac33dfbc7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd04a21-c150-4c11-a6bf-4544ad51a53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7176afab-2fa6-467c-aa20-ed9188a1e3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8d7c04-db60-4c26-a07c-dc2dcafb3f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "db61278c-9d09-4456-92b0-1533e59f1b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db0f525-d874-464a-bd54-b9edb9cb03f6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442973e9-43c4-4446-9123-20f98b02a154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9682a218-909f-4a64-84fa-4b750a0d5346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87288a7e-08a9-49bd-b732-07f667146a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "16166a18-7c23-4c79-ba8a-84b8706c31ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd45c0a-cbff-4ac9-b257-3dcd696e43e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5b0ae4-cd48-45b3-b75c-1dc0c07f73fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f485fad-9552-46f2-9895-07776f2be229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d56f7c-6c39-4378-a155-0d37ea09deb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1225de-d49c-4be8-bc29-e56ccd730bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8372b120-086c-4baa-98ed-2088796e48d0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137bec24-2ead-43a2-8098-6aae2ffdcfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2d8d8d-a101-44d5-9f6f-2370d31637d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e7c893-b83b-4183-987d-31218b6d8d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "838c816d-6a4c-484a-8ff8-8e507511a1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312c6726-add2-452c-b98d-1bb6465d2393",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45458a1c-1434-4d07-ae4e-5e3d16a44526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5689cb14-b8f1-4d5b-bd3c-5d463663bd91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552eb3b8-2b1b-4282-83c5-8a09f1f6e09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "11152a14-7fe1-482d-84ca-1276b8c9e705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfecc594-da88-468d-960b-d92057e7f277",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b487ed-fc11-4e12-a4a4-2e8e1385c39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac3893cd-c7bc-413f-8fdb-cd4ae615a9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398a124a-bf26-40fc-85ef-f810b2d29c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "313ab5c7-f307-4cc3-ad99-fbb0d3f822fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08cac0ca-9bcb-475d-af59-64f823fed1ad",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356a5b42-7c7c-49ec-8ad1-170f05d58018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3624e5e3-5183-4f25-b6f3-2c80604a4800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7dba77-a003-4bcc-b234-b176201541d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a695ee97-6161-433a-85f8-c704489879f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4caaee-ceb8-463f-9a6a-83bf3a10950c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2de40f-4113-45dd-a499-0c86c6505013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4417b7a-2e00-47f2-967b-faa8d08882f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e13819f-9c1d-44bb-af1a-266aa9259502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc6664a-4219-4354-a3f9-4d0757698217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72521eb1-0cd2-4f64-8ba2-056bce9e582a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3b12e4-186f-4a19-9bd2-37137e9195cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f47209-369b-498a-a4e3-0b224a9ebe9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c07d1a-0141-4c9b-9d04-f8ef27c210da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab70f784-c22b-48ea-8a75-77272ffaac50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9bcb88-8a05-41ba-aafd-8612e00799b2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cff6426-5da8-4151-a7d1-89bfe02e03b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592c16d7-c8d2-40b2-b213-14c879e733f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b571f58-eb4b-4f47-bce4-46fa1e8c3e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8338ac-5e1d-4da4-841b-269e29a96e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4075c5e-cd2f-4771-8f25-d2632daf756f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dafa4a-0ee3-4c35-a4c8-598ac60eec7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d99360-40c8-4654-baf3-2b1c59b52a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c299eae-813d-4a29-ba79-d978cbd394c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffbbb648-2fdb-4988-a43a-80573491e351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1545c7ac-d854-4514-8022-990c22c30ad2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9e260e-4386-4623-97a7-cd5d26c9c9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2063e52f-5a06-4604-b95c-317eaacb0848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0db55d4-62ca-4ba7-b07d-bc102ab1265e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "96353f89-ad94-4eff-b303-276c54fc9838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a2e77a-f51a-4e3a-b5cb-bd9b9ddc35ee",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0cab704-10e6-4c10-b18a-3c8b201448f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbbbbe5c-2e05-415e-92e6-e46259f7ff82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5257db9-18b1-449c-a65e-ee7ca7cb0c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8714ad9b-fba4-4957-8fcf-0c5d60af2081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921e45f9-ab53-4be4-9ab0-520441514a1d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff35cb0d-2861-4d9e-b676-9559fc61722f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93ca130-4f4e-43bd-a05e-25c051eecce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caa8ceb-f8fd-4823-a003-50e4227490a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13a92b73-f9b1-4203-9580-5919d218fb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28576f34-320a-493e-938f-661ef76baf75",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbac78f3-77fe-4cdb-883c-739fea318882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff8c0a7-73e3-43d0-a1cd-fa6e568c32be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dddb346-e3d6-435a-94de-a81faf7d477f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "592f99f3-f155-445d-956b-e2739bf1b9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251b7f12-44c2-4600-8af0-fd4c74d02f2a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff693e1-e8dc-441f-9634-c129c2e6e817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d4cee4-615e-473d-9f09-4aaf6309637a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a2667e-b73e-4fcb-bc95-344f0a0c485b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb3f3c9-99fb-48f6-a0bc-5f703873d998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6274404e-22ac-4a57-9e14-a790b5f3e83c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8381c42d-2269-4b17-9cab-913f84872dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9ce18c-e431-481d-93d7-666cf9b3bdb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0382d05f-d5b6-4d25-9482-1418b8dea155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f34a0c3-fc0c-41e7-99fc-37321dd45c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b9ba24-ae81-41a8-9d5e-e647b735e9cc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed38b8dd-93d4-4276-b426-1b39d457937a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38cd85b6-5ed0-4eec-90d6-9184f9d834b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61b44bf-28f9-47fd-b3ac-872c8641edcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "61bf7ef0-7079-4beb-b7fd-a86c2f5c1774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09e1726-ff5b-40ff-b344-ff370a02bc94",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5165cad6-4c70-49cc-9b59-1670d66f3f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a1f162b-1793-43cb-aeda-5c04767a2128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721d3d87-3861-4108-a33e-aa110e15900a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95191f5a-62c3-4fb4-9f20-facb3180ebfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bebeae6-ad21-4662-beb2-bb058243579d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb0e28f-0c97-451f-a350-14e48d37f4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b7826d-b95b-4d1a-ac87-15697ed2fd8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6110608d-4ef8-4460-91fd-a3e2d4f27bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6490ae9-280d-460d-9d2e-56d115afe90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411585f0-5cfe-45eb-a6fa-f8fd3c2a9b74",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c758c723-1f3b-4433-883b-266d6466faac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1316669f-8bde-4b14-9402-4aec018213b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ec93e0-0fc2-4390-8f72-5b6a711226cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a06a88a1-ba15-4799-b4ec-20780a055344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2faf13fd-7830-4eb7-a4d6-529a395c4843",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b18168-e3fa-4297-b084-9538f33f8967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3c7044-2a57-473d-a4b8-ac48fe09a6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f0d15f-3d69-44cf-b325-edb02a8af467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "365fac4c-0ae2-45d2-81c7-6cad6e0e371f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553b0900-2353-42a2-9010-cf6cc16fd8b5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e90c50-f086-4320-bbae-9b782f0b6e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b182aeec-df10-41c3-822d-e804a3e4d4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc1eb89-7caf-4f30-b7cf-4ac87c15b90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44b0bf93-4132-4477-8bd0-227d2155a1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8bf137-7cc5-442f-bc38-9b856ba84b67",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64540ee5-b467-4a4e-bcd9-2fd29fe47481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907bf1d3-39cc-4597-ae12-d529737593dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db99f80e-63a2-4f2f-beb5-7275057fb099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd61a462-a8ce-421f-9144-34b621c239fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6039eca6-0760-40ac-8a47-a534cca95dfe",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f53407e-6c56-4790-a21c-a1281a90acdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae896ed5-b88e-4fba-81fc-2d4c3f5212c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2702d366-9310-4ca3-9602-3bd53f2ac4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a07021ed-fc6e-4f9c-b0e7-7d96b9359de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5a7864-b21e-48f5-998e-5d6fbe19242d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534d8600-54b2-4588-a962-e1d082cdadbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83126e6c-055d-431c-ba18-6967bade930f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af2deac-dcaa-4c4a-8c9d-d99e8cdbbd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "280c105f-caea-444b-bcf4-b1457c1a2bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c856268-10af-4a21-8b6e-d066507a81f0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d326691-5468-45ff-a03d-0e713b43d5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc2a7e9-3758-4c2d-9302-6e312271d778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e97b2a-802e-470d-8ef9-7cae05aecf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50b0d7ce-a97d-4cfc-9958-85b3be721d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a4dafd-ac92-49c2-a331-b2d6d5a368e8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4982660d-138a-4b37-bf36-89cab976ef7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7addbf31-a3f6-45c7-99c0-4109226eae7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0693d9cd-9674-4597-8678-560914ac2772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88c7255f-d581-4c6e-bda6-37086f5913b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc8e27c-31c6-40dd-a44f-8fd2bef86717",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9f35ba-d21a-4203-80f3-f6b7fa489dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f96a2a2-1a10-4f39-8ce4-35031d763b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e372c5c3-1bc8-4a7c-b808-8048f5c58e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b2b578-4375-4105-b470-a5a3fca7737d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4186dede-52f7-4d74-a88c-49bb7db75dab",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f095ee-e565-478f-8b52-b3b8891039d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbb9397-7841-4509-a0a1-e02e11b0e0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bea945-1ef7-4072-ad36-678f2c917043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "02c243e4-8d5b-4181-97db-30d8e80e93b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece77409-2af6-4fd3-90ec-1eb778e7c3c1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68265f5-b893-4558-98b9-1b505af66da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d27fe8-503d-46b0-bbf0-6d3e80cca73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212a3fc2-8241-462e-90ab-a87fd1cd8dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e32cf345-3270-454b-b0e3-c3daea3ba0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cbdbc8e-0af5-47d8-9c9f-7e77d1a98d50",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed4a30d-b031-4e46-9fc9-42854362c3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b677309-c13a-4620-9fa5-29333006c58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5ef88a-6b31-49f0-9100-2f41337274fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "85d6b839-cb12-44bf-bb4c-e9ff029ad663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f800b8b-7ee2-4939-9d75-e28d282fe074",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118bcb2b-4c86-49dc-ab7f-cf05a2a44da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8f949c-baa7-4572-bf6d-5d8e9ab2d759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e0f3c9-db5f-468a-87ec-e7a041d84886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6da88f1d-7215-49a9-a164-16d42fe919f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cb32a1-ccfc-4361-8952-58beeebbb7b3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed664e6a-00cc-45b9-8533-da4dbdf67d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4208d27-679a-43aa-a23c-7a1dc998f48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e953616c-4409-43a4-b43f-446ada11689b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "850b3f9d-f3a1-4c5a-9dca-58af17e1b72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ceee5c6-c25c-47fe-b532-a655eadc64ea",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffcdb0e-a42a-4ffc-8b38-97445defb566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "055f22f1-3eb6-44d2-aa60-9fb449135d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf200a0-4fac-4c4e-84c4-c26168c4f1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3d3ad3-468a-4d04-ac6a-b663b43c829f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bf6f0402-3307-447b-959e-a62d3b6806db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba6ae527-ba23-4473-aeab-d05c6fc7c9c9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9b479c-e5f3-4aee-ac48-5db0dba71301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d172a314-b990-4da3-a72b-932b88ac81cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403e5078-1108-42a3-b560-6eb18ce0f3f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "19ee54cd-ad8c-46ef-ba34-468c139246fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfc2960-bd2a-48c8-984a-92128cc55463",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d370c779-c165-47e5-9d4a-2d577dcc9135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5638f160-150b-4710-a518-a046647c9784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5353668-1eed-4778-b34e-c09b05d03802",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a282e5a9-bdcb-4882-a412-0b526568cee9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c038621-9a0b-4a22-ba12-4aa5e3efdee3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c175c573-4b7f-408b-b0ce-60790608e888"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf9b4b2d-9c5e-41dc-a911-d318d7d86d1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd21047a-1cd6-4d8d-957e-63cfb319be09"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0cc4011e-2077-47fc-a077-5fb37befd41c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb722fd0-577b-4501-844c-288b0d81c4f1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32f54373-1853-42c1-bf47-470883e77e1d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ca4980d-fe40-4b2c-9eba-56dc3d60d058"
                }
              }
            ]
          },
          {
            "id": "5507a0b4-a45b-4720-a61a-37c98fc3a8fb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "801418ab-23cc-4466-b01e-60ed82480391",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d307687-cc95-4576-bdc6-7d9c915ad640",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1a75f80-42cd-4c24-aace-c97cab288467"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3598d688-7b42-4664-8525-687c68f6980c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0711ea0d-1ce6-49fb-b9b5-128c48e0f346"
                    }
                  }
                ]
              },
              {
                "id": "1e753268-a83f-4a05-ae3c-816b69c29406",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c31387c-5b39-43d9-9a47-bfe7e8dd47c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b8786b0-86dc-4c52-b0e4-921e250b3579"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29adb4af-438a-473a-9ebf-f8158dc5a8b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0977583-b8d7-41d9-950c-d89996d1151c"
                    }
                  }
                ]
              },
              {
                "id": "17ad1e61-90db-4b39-9ee3-586fcb7e4229",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fcb999b-29e3-489d-858a-95360624b74e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fb3d19f-6edc-4045-9d05-fda9cd04e903"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4585068e-171e-4d0d-98d3-09e67053d57d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e75e4a8-a989-4eb6-b630-85bbc3878518"
                    }
                  }
                ]
              },
              {
                "id": "599f3b43-946d-4c47-af2b-e0d5f904aee2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0a2e43c-6550-44ca-9d29-01da1597030f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2dced87-48ac-42e0-84a1-a8e66470c817"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb24dbfe-42b3-4165-b3d9-321241ce7fc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "301cefbd-1c58-4645-baab-bb6716e7e1f2"
                    }
                  }
                ]
              },
              {
                "id": "074fbe43-a0d5-4074-9f8f-edd10fc00b4c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a807ab57-164b-4ff6-be09-db99809a6561",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8b68dea-ffd7-4fe1-bb75-cd7795109cde"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed15fed9-19d1-4f63-8d01-3a889c81a257",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "86a5fc5c-cb2f-45ff-9f4f-d792effa1619"
                    }
                  }
                ]
              },
              {
                "id": "468c11e4-faa6-43aa-aa10-0d04d0bcf363",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c0ae671-cc0d-4a52-8e93-c155eb8f7413",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac7e245a-55b1-460d-bbf1-3032cf40572f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5275480d-a897-47b2-a488-93b83777a5d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "14850a50-dbab-4536-a759-589880076bfa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c41fd917-489e-4a82-be7a-934762cda069",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ecc358e-d1b4-4e28-a814-67da28bb6fe8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e1c60b0e-e565-44fb-b773-873d5711233d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f017152f-3b0f-4084-b2b9-7d1113790066"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc993245-08d3-4769-9838-55d48b3ed85d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0967af47-4490-43ca-b305-d4c0d7269f5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b02711d3-a100-4689-b0d8-bbed8cd4cea8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fa52a01-a2ba-4a94-b0b3-2c5ca21537a0"
            }
          }
        ]
      },
      {
        "id": "1dc48d5c-472d-4abe-8f34-4ad9865d9445",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "deac8daa-37d6-4bc7-b7ba-9a5e85752150",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7b43b16-6607-4f74-ad43-c4d9589add12",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ee7fdae4-82c5-4ab1-bc28-2b0485fa2e2c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cac86be-5d3b-4d3b-a792-e7816888d16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87abd014-a417-4a0a-a16b-65633cef5eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089fc92b-9328-435c-8f17-3d8f8689dd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "07be8825-b597-4574-9396-825db2f45547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b077a99-ab20-431a-a66b-12a607c111fd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85cd89b-3a02-4ed6-afe5-47c753060834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28919ea8-1970-413b-ad54-01b3193caacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b09ab3-1d5b-47e6-a09d-0303443a5674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "474a836a-9e2b-4670-8e05-c52e8200df3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab42eef-8b04-414d-9abe-c591ea71090c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb81954-c959-4acc-9b5c-fe72c4b7d97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf5b172-8851-40d8-92ed-6b72ff1d64b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c362234-9edb-4063-b516-f4bdb13d9c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61e16664-5f97-49b0-a690-54853a03e9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96b5b7d-cae0-4dfe-8eef-e8788057d9d6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e6dfa9-479f-4ed7-85c7-65d3a88f9b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19bd16f-84c9-4c65-b5bf-27fd1f432002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f08be8d-3078-4b77-b237-70ffcff85e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74093735-137b-41eb-b2f4-f490f99d4217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eaeb9e6-f5da-4e77-90f7-f20574f1bee3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8308b2-d3d7-4cc2-bfb6-f84314bb9378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32326b97-4937-4d07-a2a9-3c0f591a80ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8a1271-5dff-430c-9a4d-c4dadca2c38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eac4654e-4439-4fc7-9e71-73b5d8421bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8a2317-3418-4812-a584-8ad66fbbd6c7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84073c6-ad3c-45fd-8169-e4e9deaa7af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08d4290-5a70-41c1-b3f5-d0d196234c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c29ced9-83dd-4b9e-9e63-d81a043edb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55845fe8-7ee3-4d53-9e2a-6d251d00b6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a130141-bf4b-4d77-899b-8ed65b68fcc9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cc481c-7db2-4749-8e59-8dfea4100323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521e1925-9b5d-4093-965b-2131d7d6a3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59c0975-0c42-4b46-ad5e-be641b5905a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4899d6a-8b08-4ba2-9b94-0a977b7b746f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d49ad0-696b-46e2-b2b0-71ab13a13aa6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3dde5a-ffc3-4587-830d-325f8d5cc219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957e1915-9e43-40bd-950f-edc03dd7d98f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc1cf8f-bdee-4fdc-ad86-80a5363a9af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb984884-ad47-4d77-8295-82a28b3f3572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d37b82-f64d-4adf-8779-d8b8003b9210",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acc9639-4dc5-4721-b80f-ea73487eca9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0be9717-16c3-460c-9922-94e32fff496c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db4d884-2c26-4129-ad34-e231a6d3cd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "823349be-3674-4b24-972e-eea2b50f66cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752952d2-2b12-482e-9805-d76a637a3848",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94bffd7-3a14-496b-8c16-6260c75f4134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c92f568-0968-4766-8f64-ff4f8928ff8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb6eb35-395a-42de-8218-e83b5ad043c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90a8d4e0-7036-4298-903d-dd75b4ca1e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6af397d-4d1e-4f67-9193-a15699b61116",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ae2df8-d699-4fe9-9358-e3d4884f4cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d246546-bfdf-4101-8e89-b3a0fef4790d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6527eb38-a00d-412c-ae5f-f99ecbce3375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "65fe86f4-dbc0-471f-afef-721508ad3966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f776dc70-9d28-4588-a223-a0bc9d661bca",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f6034d-115d-4592-a84e-1ce1206152d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2427fd23-870d-4026-b48c-f0f664a8fc8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2142ab-f6fd-48e6-90fc-cfc9c8697084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9efd1de-1e13-43bb-8ba4-67cd0b5a4308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ab5448-db6a-4b74-b984-f8d3eb20df93",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3fddf6-a973-4be8-ae3c-ad419833dcb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a932d7c-1bf8-47c0-83b4-422c9d712eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b4f1ea-8753-4ca0-801d-49dc7e94a277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3d7547-722e-4786-810c-b733d8067895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6814257d-cfeb-4490-9799-da299a0bea5b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb69bdd5-f4ed-46b3-abdf-3ce754249345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7858ddd6-707e-454e-8249-e4e9712262bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e55e26b-a12c-45eb-90b8-0c0819cb17dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "93354925-4322-4309-9a65-77ef133ead86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00926608-c1ec-4947-998a-1054bfce83f2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b10ba32-8233-4070-880d-110d8b443143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2ae781-f457-47dc-ba24-343f86984e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4517fd1-834f-46c3-a76d-a85ac03848a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1b6fb7-b91c-44f7-b23f-f115707251dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001b139e-3427-4d6b-afac-73d566ec0b38",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad93647a-b6d9-4575-8964-c36b5cf72d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cb7a47-57af-4580-a8d7-ede642f408de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4febf577-742c-4269-9c63-2138aaa45fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a64ac7fb-f47a-4e0a-ab0d-4a0f85ec059e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c80d31-ce5f-44a0-8ab1-c964c2070174",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15f9c70-4638-43b1-8c80-014de6a127e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a90d33-d978-453d-8047-c5d6223898ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70b393e-8396-4f78-b6be-1c7902abf08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac150241-fb62-4170-9fa2-ce3ae8f0c548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0226e7ac-d5d0-48d4-8fd9-e73aa4d83930",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0615f1cc-78f2-41a6-a08b-d3a0e3333684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2142ba87-288f-402c-b78d-9de43afece1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5a148b-3828-4ec1-ba90-2a6816b6e8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "93840acc-77dd-41c1-bf40-525f57300939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7f7c6f-7a06-4c7d-b425-a787f64e58b2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e2ee76-c4d4-4221-9076-54fb9d3664b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f90fcdc-f128-47e8-817c-b4d8a03103bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750a35c7-53c4-4434-89aa-249e25a9f49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28c0491b-d790-4ba0-bd3f-207711c5ffb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522189ae-10c5-47d5-8c75-4b81e3433a73",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e619d871-9244-4b69-beed-f965e6054ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983a2750-432b-4d72-95c8-584bb675c3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9067c8a-7273-4baf-9103-95ffa76789fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37590d1a-206f-4c20-92b4-e09508468d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ceaaaef-71c1-4a6d-838d-554b51e52851",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6edb58-02b5-4bdf-9445-a37590eb1e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee152b7-604c-4c40-997f-cc7c1ad69fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd81120-7240-4039-aa46-bcea1da6266e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c21ac3f-a1f6-481b-9307-5c3733afb864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58df9017-165b-449e-a5d5-5464492fd81d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4c5033-84c2-4623-98a6-1ad136bb3842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6e8e79-0b91-41ef-afed-2c344aa09449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07be4683-0990-428e-9730-b38304f2e97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f719bde-283a-43c1-915b-b9072ece63eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477974ff-e01e-4c9b-b656-018c86ad76c6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1e0d2d-ea3b-4c47-988b-c2449beda2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0793c8a0-1fa3-4b61-ab9d-c143cd71f8c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3c3833-3fbe-45e6-9154-f0cc47f5336f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66f712da-705d-48e8-90c9-6fe8be5ee036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097fa9b6-4a6c-4a77-85ec-02b837e40b38",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607dcb1f-d1c0-4bf3-ba24-f0aab49999cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4481522-aa87-416a-8b2a-ac718ba58908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f00ed9-79a8-465d-ab19-6e9e83edc81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4bb952-f1a6-4940-8c06-965a038f1b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2a78f0-cf72-44ed-8a13-bdf66518d04b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55cc77e-97f3-426e-97b4-730d553deb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ae84b1-2853-462b-bdfa-51a2b153bae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b3a2f3-73f1-41d9-89b8-38a4067260b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf679ee-9118-446b-ab97-e6d3e93dd86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac979dc-4df0-4b5a-aef2-f670c07c9752",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca81e37c-3dba-495a-a560-d9583940a680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880abc9e-69be-4ce4-91b8-faf09f2ef02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267e9b66-dc56-446d-87d4-522d10aa1c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1507ad5-9750-4ca3-8b78-d30a45ba0e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8221833c-5397-4269-bfbd-d3682dc2f25d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe74813-9eed-44c8-bbfc-d2643dfcf33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cad87bd-301c-402e-8177-8ce1e547faf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d58ca97-36a8-48b8-934c-45dfa3a47970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc046cb-cf5b-4920-b656-d3b23284dbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a241acf5-3d8d-4203-9647-2a17b72281e0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12368d3f-6b17-48e8-a251-95c6c24c1843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf36336e-fa49-45b1-a7d7-e4dcb5fb93d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae453b97-ceed-45da-a709-bf40f6f745bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f32c27a-9f5a-4382-b2e4-c119fc3760b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a36e02-cb5f-4f44-b0fe-ce5115139ee2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bf1421-1c37-497e-8783-5825c1047663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015f494e-8e40-4315-815f-1697d8f097b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19161863-c137-4d92-a9d6-9cef025aed52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10b401af-e0dd-49dc-9eaf-00499e9d6576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e497a6-f1e2-4888-8789-146001e052a8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe12dd85-7674-4f21-8e82-6a32d19988c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e30cb0-ec50-4418-adde-83f26a7fbbc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71e641a-5c9b-4372-8f89-ae5b834f0926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6df671e4-fb07-42e5-a2c5-051837d2e87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669de9af-b5fa-4d82-8e1e-8a3944902320",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57630045-8cb4-4074-9f88-11e26b6c4e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca780087-9c76-4f57-a3b9-be49c8b8f461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d78a3a-5c51-479f-89f1-746d4e023c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a6d003-8b35-44e3-9418-b6ae3374dff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b79d1a-b6cb-41fc-a3db-6054ad14f94c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac42a36-53ec-4e2d-94e5-1b6157802690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6702b33a-172a-45fd-bb37-7477984c992e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59161f13-c531-4ebe-8ec7-bf15ad1cb974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cda27268-d19c-4125-a79b-1c943ddba503"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95191874-bf4c-4345-a58a-eee64af21833",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ffce5a7-2eea-4503-8ee8-0691659ba612",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816a9582-9bd9-4d9e-bea2-367d8b7a8e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68a2d36-ef6b-43ac-9807-1d7deade7999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc50d86-f74e-4adc-af56-6368e8096198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16e0c8e9-bab2-4bc5-b1a1-eed7c1f25526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a8904d-0220-463c-a2ed-5acf3fde987f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f9d68c-bd40-4b66-aada-23d157290c0b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2ba1447e-a2df-4f0e-b111-354220937577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f8e50c-d571-4a5b-939b-15d4ecaefdbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21435306-441b-4084-8428-241872c75ede"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17d89719-18bc-49fe-8ede-19d930e6d981",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6084d927-4d48-407f-a73a-be01561ec7fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "280de8f4-8b67-4557-82b2-5ea6d8b4b86c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60a4a846-bf1c-480b-8610-90c71dd0dc72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f237412-0179-4a53-ad75-04cb59ff725a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "134f23be-3dbe-4243-a3f8-0cedeaa1b39c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "196aee00-b409-48e6-9b1a-53254d5303f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "871dec19-9dd3-43da-8f74-5074c1959adf"
            }
          }
        ]
      },
      {
        "id": "8095a29f-c689-4164-8d1f-c46ce9021e31",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "110c9143-ac2c-4c7e-addb-0769ff893f64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c2cb82d-3142-4c78-bd32-7fae350bc5c1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7b45d846-5d1b-4049-aba5-ce91548c1c32",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d174f32c-39b4-49e0-83d8-6f119e64d8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d284e4ee-4709-4cd1-822f-463ab789d254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df960ee-5a5b-4ed8-9f05-0ab3f6914076",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353d9da0-eed1-43c6-8a2a-d5b9aa46d71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f91794-38c5-4e92-8d03-6bd83fb3bd79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3093ddd-6aab-4942-b3fd-fa0eda955208",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2632d7-5bc3-4d75-ac15-922b9e0acbf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d091f0fd-afca-4380-9c9d-4f2820055a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f42104f-2d8f-41c1-a981-e5ba0ab3054a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e69471e-9fec-4938-8e76-1a02d5144483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cacb4b-10c4-4a53-a02c-7d99a7acf456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d901708-7251-4020-a40c-2f4434eb0e2e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939f6d9b-5c45-471a-a5f5-27359954dae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8bcab0d-fe46-419a-87ba-fc78ea1c1194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d67982-5ebb-41e8-bd4d-93b22159a36b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0062c403-667e-469b-8818-fdf02fb47b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c845051-4773-468a-b23a-0f582dc33d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db99c414-bfe2-4397-978f-966b3c9054e3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e78ec8a-144d-4575-bd19-0e93960771a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d2de75-c79c-4948-9a98-8b71df2e4f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2441f896-c9f8-4473-b27a-401e83315232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e9b239-5443-4388-b446-8e07964b5386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10546d6-af8a-464b-9a1e-f4d9a9c15fa2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd0126b-6f1a-4073-8d35-8e7a9c508d51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19fe0ec0-e2e9-4dc8-b9d1-8585577dd212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e45a6e5-f4a8-4b03-b2f7-97e6276cd485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7580e14b-1fa0-43da-abd2-93c860a92ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3afd425-2d9a-45d6-8d8a-739c43556f8c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4753e3b-06ba-45cc-86cc-aa17b0af3a35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c922176-67ec-4ea0-b642-5a865793b3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0906bdf-e62f-4252-9ebc-01e8c5785274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a283af-7840-4b85-b97c-f2f1bc9548c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718acf1f-188c-4a16-8661-04611cdf3a4e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396b4c16-d5e5-4c61-8214-fbd5a5162e2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9a6fe25-3864-4a2f-82a4-b3b2ecd8faf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a9cf08-2def-465a-abf5-3d422398ba0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5246d7-6d82-43d7-ac9c-1407d7554b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56233b2-2539-4b5b-a454-ebe9160ade40",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4382efdb-3d47-41a9-b528-8553d6f6c25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26712c4b-9c6d-4225-b642-57e9666c26f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a086b1e-bd7d-4910-9106-d08b19ad68c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b149a32-20a9-4748-952d-102a61823259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fbc2c6-f0ec-4616-9c16-4c58da231ab5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcffd34-eeca-4bb8-a42a-a49a093e55c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca068d4-a8d4-48a7-9352-c732d840cf69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f933205b-83eb-4dae-b377-98df68ea0bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfbde249-27c3-4466-9185-62d54164c99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcfe20c0-8e7d-4880-ab32-a33c89a5869b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6f95ea-9331-48b8-bec5-31453a9e5331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2912230-c1ed-4d9a-9a43-7863d50ecc0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1475eb7c-457e-4ff1-b4de-e849144896f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f5b5bb-95e2-4187-8df8-c9005be24945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b3906c-28fd-4d38-a46f-dbc3b2599377",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1d7688-1ecf-4609-bde3-a55edae14965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "025b726e-91c1-414c-bfae-a3dce5d44320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d63c229-947a-4e47-a298-9eba5bb7e4cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8e2405-eb8a-4f5d-b327-bd7e8afbc682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec3046b-0bc7-425b-b70f-1578de98f291",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299b05a7-5d35-46ed-8c20-6020b00c36c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94cd7ac1-ce12-4a33-af2f-0d6dee2456f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e24bb6-f296-4bbb-adab-e3c9f7232538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f025aa-4d29-4b07-8404-bde26e0fb77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ddc71a-7fe6-4d72-9f5a-62ef0c1393d7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f90a0f-2686-4635-823b-84cdbd0f7534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29c937f4-37b0-4082-b4a7-61f438070675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1bac71-3c79-4119-9576-6df8c1070bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35d32fb-62eb-457d-8845-aed6d95f913e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baac7e5e-e291-4b17-8791-7257ec66170d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7541c047-8bcd-45d6-a754-d2cb30c9f83c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd588dfc-83fd-407c-b4ad-f77fe3e11078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9a6c04-5d8d-476a-a632-25985c7bba1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec07720-b900-4986-a786-ec1017a57cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8de6c3-ddf5-424a-9794-b375d7153230",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cf6555-7b94-4f80-a7fd-f87b237419b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc2a48c-ee6e-4f4d-a3f6-860a870fc61c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bde6c6-bc72-4a1a-8a0a-f097d21af673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b5b5f0-b3b6-4678-8025-5c665ce8ffe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c261f6-aeca-4145-bd65-64485a3472ac",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045d8119-602e-466f-991c-a0812cf06730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf248a71-8d7c-4c73-90e6-ca27b9c7db4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1e3226-1da7-4485-b4af-f8233e453455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6000c04-0916-44ce-a152-cffd380fe9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714fd209-5951-45ca-a21e-d9e7f2e176fd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c191e1-bf9a-462f-b110-d34b92aabbd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f6836c1-d3d9-4cb6-a244-045336722fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b50801f-899a-4965-8b5c-daf3bf96d30b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f750fa8-6ba8-476a-a0b2-19cf8dd91f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2766d47e-5a0e-4f57-98b8-40f3b2953186",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4ca582-bb78-468d-9109-07d32420ff86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636f7eb6-201b-4c01-a438-10f8a9d2eb30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82ec1fe-c8e0-437a-9d80-3c7aa08e4238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227ccc4e-c3a6-40a9-996a-84dd4a63ebc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a33fe72-d7c6-4439-a5d5-26a36845e3b6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b9caa2-db52-4ca2-bdfd-c4c9bcb5f4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6275f70-79c9-4aba-ad8a-5be22ad1c785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba365ea-fbf8-46aa-a401-c966ccf129b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b395b1-fd53-44b1-a7b7-e4693852574f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b551fa89-f484-4c84-a9b3-5dbe087b10de",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d1d9c7-0791-4353-8791-d74bc701af08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b93d5c-ecd4-43a6-b8e7-008bfaa9f255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b834a62-1f59-4a98-b88f-e2514a18a2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd85f4f-24dd-43b4-b538-af02fe41da7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5003d934-685d-4f4a-ab12-bc36997fe51b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bd3ca1-1b4c-423b-acf3-e44ee70f2b0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9066da90-178b-47e4-97b8-6e7333b70983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5dd41b-4205-4056-a33d-d70a3d8d1a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf56bc5-55bb-4e1f-a822-9d51112caab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a06e279-ef59-4523-bea4-20015bb8f0e2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5edbfb-1bb8-468d-897a-3d6382df1530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9083fa39-c997-4b2b-9a36-3d38fc67b93e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3405a46a-974a-40f7-9b53-83630374ab9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603212bd-2827-4120-a9d0-ef4f8a545127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987a242d-198b-459f-bdfa-e2a337946ba3",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d726314e-e99d-4f3e-a975-a40e09bc17f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eccf6586-399c-4f79-bf57-24059534f4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96979bfb-b21b-41b3-beab-47cbbb2bbe7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5912236-fd16-4493-a7fc-a1f3a3f9831b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb463fcb-0804-4e56-b1a2-121c20b809da",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678c5c18-1a85-452a-93c2-36a3236e38a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a01ffb11-4f7b-454b-bea1-96c7cf7811d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "717a0e2f-6810-484f-af15-bc0c525ca6b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6ff0cc-ab8f-4748-95c1-a49a4905841c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b42173-129b-418f-bffc-3b5d4612c81b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e6efaa-b918-4f11-8adf-6c8dc2208d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac895f61-a26a-4410-bec7-b618dc126f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06e1164-6e58-4701-af06-b2ecf5cd8b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3f9ee8-1095-4e52-9aa9-55f798292a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8e77c7-727d-4c27-96e6-66a10c9db0fc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c876692f-426f-4e16-aeb1-b361520db015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cd6e435-405d-4e63-81a0-bf2446cc94f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "829b8000-db36-4cc7-b1fc-ef9271759754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b9ef04-4c56-41dc-aa98-f24445e301e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27fe25f-d752-4ad1-892b-4ff9fceb6098",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8b5fed-e924-413e-8e7d-bee87abaf7ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17fe48e2-fcb4-41b0-8ccf-2a87f44134ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342350ad-d5d4-4dc3-b793-12a0790d0c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee3c0e6-baef-488f-8ef8-d786426551a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4037030-2f7d-42a4-aec5-83218089d2e6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcc962c-d760-4659-abf9-a9d913bc73d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28bd7e7f-93ec-4730-9173-ca290769e687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be122e2a-a7cd-4121-8400-3dcecb1db4dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "410cac1b-77be-43d7-ad17-01bd4d8aece2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046c8a68-b14c-463f-9a52-e1e259d6757d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4de716-1ce6-45cb-ab0d-1cc65721633c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "242cd892-d520-49b7-89fe-e6a32df48f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "815424da-a548-4f31-b527-20647cdd0fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b39a24-f0fe-4c43-9a28-37ab76386a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef6db8f-5601-4239-b331-b39a9c7b50f4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a297408-f644-4bb3-95d2-cd5fc73c9abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "019ac109-671b-4661-a128-88018dcb9f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c962f373-32a8-44cc-b728-aa81260d3a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c3f421a-c9f1-4dd0-b199-286708b57ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b3fa4a-c578-4d0f-bc24-a8a251f60975",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879f1043-6fc5-42ca-81bc-7d4c505547d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cf9ca1e-772b-49b0-ab1f-db75056b2249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4127ff1-8dee-4fef-b8dd-210d46f98ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88745cb1-7b89-445f-baaf-3875c4ffa5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96727c36-e23e-4a42-b086-2538955de31c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3de40c-a2a4-43a9-83a0-47cda809f3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c5c68e-ec35-4b81-a64e-11dd3f549b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5250a4e-6a6c-43f0-8f7c-91b57c69e2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65069290-932c-4cbf-92e0-8dad9c7086e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc17383-93c0-49a0-90fb-54c8f0d787f3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a879ffc-f97f-4781-8130-b7f6a02ea6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "233c9ed1-1880-41c7-b6dc-3b85afb6c71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8a0928-45c8-47e6-8455-7a65953b8f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d268d7-9d91-42c0-a58d-4e0a276369f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1bded38-cc93-459f-9d99-2f21906678f7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c036fa3-8da5-497b-97f0-5de065b7a635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980c9310-823d-4910-89a2-03a693d51843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a441ba59-c0b2-414f-ac00-38067381c485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbdd0d1-8d6d-4252-ba44-cfe8f8b182ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067e17ed-ab5b-427f-93a3-915e71353760",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa8e80a-6b3e-4216-bcd2-51ab90c50870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd8f2e9-aca6-492f-a2d5-b758212aa1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ed4615-efe1-4a39-b02f-fc9d434fb261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ce77d3-804c-4e1e-990b-9c06396a361c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db31dcfb-2086-40d2-b303-07e9be927547",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f345fbab-5afa-432f-aa97-f05768a730c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b30b8df-42e1-48dd-bf72-0622f7b5e507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e561098-40eb-4380-bf2a-de54aeabbe58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a371154-7036-41ba-8a98-e3dd6cd8e943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ac3bc5-d3e9-4939-b599-a9d8af1eb86b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042f147c-803e-4309-b2a1-7c0c4945c780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f0cd3d-b6c0-4974-be80-1c27a0711f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fff275-3c50-4f06-a8ab-22b8df8a44a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043fd425-3986-411f-ba44-141b3126bb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc8e684-c526-4fc9-b3e0-2c9e60101885",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae5b26a-7b81-42f2-9757-3a7a1fd3323c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7a1232-8d25-44f3-a381-2ae509929734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5cea05-d719-4c5c-90ed-9c9dfb75cc03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55becd09-812f-4fd9-8960-40398ba16eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ae685e-3dfa-4249-ae73-b2f842cba606",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f1c146-d7d4-4526-b667-7c73cc31c3f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43784fcd-e28d-4d25-9d70-12cd76497c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a00f1ef-c71a-4322-ba66-3ab783d0fc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5776f1-c1a1-49c7-9a59-0526ac1d8fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a27d16c-c459-4a79-b86e-bc5974b4653f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33f87b2-b9b0-4aca-bb8b-dfe9373d48aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d298b2-cc4e-4ff7-b66d-1b2ac6ac4bdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc53fc5-b570-4bc9-96f9-1ca0240df22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "592404b4-d569-4d05-a55a-c18103d5e038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e322cc5c-f02a-4781-9eb5-6947284a527d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687b7402-957f-4786-81d2-510e8d0424a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91cac329-7950-4de8-b4ea-19beea94bc45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24aa6d3d-5452-43fe-b745-6a6a8b8f765e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c011562-f6f6-47f9-9af6-7fe62a14da9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de8467c-e517-43c7-bfba-00419bcc71fc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20090e4-3162-4b64-b9e4-3f151eb5c89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5865e4-cef0-4104-b66f-fd31af61b460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1545062-d443-4bdf-9cbd-7b6f17e29843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee57017-5d0c-4348-ae12-e49363c4bc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00897fa7-27f4-4fbb-9466-1a323a2b4412",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0b5cd4-4656-47de-98ba-89473bbcaffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a369c15f-a3cc-4160-80e8-727829ff9df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e20caa-3168-4a86-a5e5-f78f70a146a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a85169f-7463-4bdf-8937-7745df93d5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8ceb37-81c5-484b-bf77-487018da4b7e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3b6645-4833-45d3-9c57-8904f042f14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ee9b4e-e5cf-472b-b208-2f6516162dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f25366-995d-452e-ac0e-e913575bd802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9589b9b-fa2d-48bb-a19d-0456c74eb01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64608f7b-fcb1-48a1-8433-601c6c3ed588",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bf3c64-e277-4004-9c18-f1e83f433aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452c3e36-f44d-4bd5-83fc-4014064b3c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26901e60-4c4c-41c4-bc13-e510f227b061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b766940-c2f6-41d3-813c-4446ae6daaea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e50db0-dfd7-4aee-98c6-02856fd3d3d3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e159f630-92b8-4cbc-ace3-997a0736b7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e0430a-5e47-4268-af96-940f7bf07e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c7cf50-82b9-4599-83fd-d26c7cf8b59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9e62ce-4a82-45e4-9d45-6a2e6dccfe32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3bfde4-7dd2-47e9-9392-7b1697e83ea5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16de8261-c4bf-443e-b3e6-12d4fe3a3eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190a358c-42cf-41b4-becf-67d1e655eaaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdea3a1-90a1-4ead-9aa1-d34d2f400e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c953c90d-7ad5-40a5-bbe1-53ca56a69dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10416c2a-60c7-4e49-bca7-6e4b02bbc423",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98bf29f-e759-44b5-9109-00990a93da14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de72a96-904e-4cca-8c34-88db71985728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3571b88-34ed-47ba-8395-b517186bec5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d8acd8-7f19-411e-917e-5f2ac34eb043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883b6365-84c1-43d6-aa9b-8939b142e71f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a55561d-34a6-4e3d-a13a-5dac1133daa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9728d4a3-a3e0-4647-a4cc-06d4d6f3da64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb0f6fd-4c81-4eb1-82ab-274b6231d5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce166449-e2ef-4397-88b8-3e1f67c6214a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d974ef87-ee7b-419c-a283-6252c18d9543",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2b640c-0d76-4fd2-973b-0a47a2fffd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26732803-5393-451c-b419-1f8cb95e2b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b2ae7f-e3f3-44bf-aae5-a8a72e5135f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca09f8d-0d18-4b65-9d36-219c12392c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f734cd-9d95-40bc-b095-dcf26303519c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9e0860-4f47-47b6-a182-91f2246a5ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5395b3-7caa-4884-90ce-340436fe9b7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3c987a-ff46-439a-b89e-de2be0a8095c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d001468-10f1-4c3e-85f6-3c38a9b3a40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ea5735-476d-43be-a517-a40be1dea2ce",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a9e920-2200-4f09-bc46-688e4ac3580d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1834bef0-5a5c-43a6-99f9-708efe974d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64ade39-22bd-4716-a40f-861b5aa27842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b60bf4-903c-41a6-a132-56537ba5ed35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3c9c31-2e54-413f-87f2-65bfc66a6dbb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac53b2bd-bbcc-466b-b96b-9078b02f3798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792d375d-e6a8-443b-bd1d-b966cff93fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a01fcf-d3b9-43f2-9aab-33bc8cf5050c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0813d49-b472-44d0-9aeb-e144f48fad4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2777e3e4-d6e2-483d-98a2-fb81cab1352f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8352dcac-b5f7-4fc2-b92e-55090d6ab73b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d4a685-4e5d-4322-9dba-af301e5c7c94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "358edf67-c21d-4d36-bbee-9b52f6da315b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65ecdad-0bf5-4ede-ae88-d4261d86d4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c07ac6d-730a-4dd0-8c3d-a6c03911d131",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088adaed-9c94-48c5-8044-b14a7ec5ada2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526cfe05-99f7-4eb3-91e2-43c86760e09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "602d3905-2720-4fe8-87fd-529f00a205be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f934af45-19f7-4878-9a74-b9110d792369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8e81bb-001b-4d77-a080-a5a690de32ee",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5270bed2-91ab-4a3c-b115-358fde4a436a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1656d204-9a0c-4dc2-9633-fa2a5fd0e67a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5851aba-95bf-45ba-8613-39ed9191d048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f674c429-e7f1-405a-88a5-f24e66508cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95f53f0-146a-4c2d-ace3-a90582865c74",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ed03a8-79d9-4765-bf39-825f841cba70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a55c145-1f28-482d-ac14-91cc3e13692a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91fa853-d408-4bf7-a539-9c71086b9e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ef7929-82da-4eae-84e0-85e0c0cebebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b188cc3d-9df8-486a-8a49-aa78d546ab14",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8605e20e-c9fd-41f2-be75-bdb952e31d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0fe71e-e4d3-438d-acbe-a7e6e926d4f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eeacdb2-683f-431e-9bbb-c58a46d4d194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf73f1b1-9187-45ce-a4be-20960bdca637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025eb361-27ea-48f7-afb2-bf673c336925",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c19a95-13f6-44b4-aeb0-1380e22d624a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90624baa-984d-417c-80f9-d9cbdf402790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983bef12-0c7b-44d9-ba96-e6294044dfb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e27bfa-67bd-4d6b-b070-99d257a6161a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1ed908-3023-461d-8b12-732ed0821249",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab14f95-a928-4c7d-880f-f340ce2fbe76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205c48f9-881d-43fb-93fc-3a6134f9c10d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6aef7c0-d6f0-486c-aa38-39130aa216d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a462adaa-4412-4a44-ae7a-3fcf69a9928d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff9d22c-bfab-4213-863b-55eb75ed7771",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb1e12b-81c1-4b43-8dc9-08df8bd0c10d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "382e7e74-2f11-4405-a6a7-47320c275126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c4d51d-90de-40d7-8b01-db76f246c9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6c355b-297f-4657-be5f-4e72e30acf1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cbc9b7-d10e-4320-87ae-5f30a6698466",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41a8c14-df77-49b9-8208-31595fd76bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f268e5df-a9aa-437e-b7c8-a7eaf81e7ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8d2e05-3fba-4c29-adb5-cbc6ae4f29b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674422d5-ae67-487e-89e8-56c653f11e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81988a6-f23e-4ff3-b93b-92073fb4d272",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443b4d5f-d2a3-4047-b9bf-5127c3bfe008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "065ab915-8876-4d37-8985-729cb05488b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7195f925-9307-4281-b106-d4504b94010f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d8135e-2891-447e-a799-b37ab70e9d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020c8a13-c250-4886-b097-b79ac34e6396",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e71dba4-371f-482d-b588-473892cc85cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a9580ea-172b-4a7f-af49-88ff86ae9f08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e803deeb-06f0-4527-9683-b46f2d60b1a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062a875e-cc78-4357-8ffb-eeef729c7a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a33c1c-14d2-4371-ba7f-822ca672038b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74482d5-94ad-4a9a-bf3d-ae2a2e551c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8275b197-e381-4982-9703-b4a3c4046d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5c1d92-7224-4de1-9249-1b514ff2dd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33bf3a6e-8d53-464e-a84e-c1dcc8eec0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba32356c-676a-44c5-83a0-0ec4f8a3d16a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e764b3be-78fd-4a22-8708-e824aa0de3b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc407a9e-1c8c-424d-be43-a4b60eccfa7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6367fe78-d8d5-4b68-a9f4-07a413de0966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7fada4-c922-4f37-9260-9373df887738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e654952b-4e92-4654-bf4d-badea371d906",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd28d817-52f2-479e-a955-9cc2a939d2b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7828ff64-8048-4bb5-8aaf-55996a9da739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4f74b0-bb2b-4c35-a2e0-ac2eedee8c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3853c0bd-e689-4e9b-b083-a0d69cbccdd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb25efc-aa9d-49b7-8d18-3ef4b06e661f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b085997-0d3d-4d1c-977f-3276375aeb6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc6e1399-2330-403c-aea1-669bea7f0bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c7b294-6b99-4f91-bec5-1e9ceb1a0e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf760b8-c9c9-442a-98e9-1ddc50c8d4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab777b83-18be-4bf3-b1d1-e4cec1c15aac",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58eddfd1-d3df-4a0c-a9e3-71dd4016fdf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b049872-caca-4707-97ae-cab4c75f5621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1626e6ec-d5c7-4de4-a5b9-5434b2d173b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b11f4e-7ce0-4699-a011-88661d4460bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fee523f-7f09-4d67-95db-11403d1c2479",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdea8a37-febb-4742-aa23-553cc6d01c39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "004608ed-543f-48fe-aedb-d72f34818177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23f9dec-d2fd-437c-96f5-25d6e8481e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87dcbbd2-b570-4369-8fb1-20493bf2b94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a9459b-3862-491a-a5ed-3ee7fbe2a490",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3cffd7-5941-4492-93af-faf2d373df9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b718579-52c2-48d1-8057-57bb05ce9fa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3a9153-010d-4299-8f30-eef1ff1565dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b89d4b-169e-4b20-b5f9-ab683387e6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da739f6-521c-4b46-aff5-c10e1e8c58ec",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d011fe-0da5-4c1b-a1aa-b9a004e95782",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cde8d95a-65dd-4510-bbd7-52ec64ec9ccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e392b7-53ab-49ce-9c59-ff9978a82c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6bd590-2ef0-4ac1-9c9b-7a704957f0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21f611a-e41f-4fbd-a8c0-71a6175b9eaf",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3fcfad-777b-4314-9cb0-b111024b5182",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "578a7277-cac8-4178-a22b-17748f041b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79643bb-cd53-497e-8fd3-e013e5f8b4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8febde5f-8a30-4754-aec3-7e79ae310a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9188b56-fec6-47ad-b9e1-129309bf9ce2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d05776-ffe7-473a-ae30-93dbbccc3e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0204b299-01ee-4350-a396-6e1c4485d053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d207f7d4-4d9a-486f-ada4-69120d4f223f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163c0fd2-0da0-48d0-b344-d4b78efb3680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904a798a-2f3e-41d2-a8a9-4f391fb5e00e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2714eeb0-5956-44dd-8701-89d694785dea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "799e83c9-e78a-4293-bbe0-2fdb02d1c48a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53338d40-0f5d-4a3d-94f6-cfd72f2e7b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6eddee-d2d5-456f-9d6d-cc81f2a965ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef6018a-94cf-468f-a94f-4057c298cf8b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99a406c-0ccc-48a4-a962-4075e29f122d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04c337b2-24a2-4dd6-9cdd-f8a5b4ad07be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7c89a9-6be3-4357-b37f-e22780c033d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f658b3-0dc8-4708-bd53-82a03ceb2bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9674fe-db8c-4820-940d-afa73a9f74c3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5d6819-df46-416e-af15-f063e06f0568",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a7d973-4408-45eb-b029-7d614a3f19a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcce70f-114e-46d5-a72e-9f4d561d9474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "340b299f-5e3e-4a55-a137-e384f8d81c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39ec5ec-50d3-46d1-a0d3-efa534a9bc2d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bf227d-622a-4e36-8ce2-8d7cad5f6b91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451d5880-d099-4c26-a379-2759a0d6eda2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b35cf8c-b1c3-4e10-9fa7-89746ded8e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840ee103-9863-47f4-aa81-17956bb9f31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62721ee0-d2c2-49ae-bb79-456f7343d1c4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f635364f-2654-4c3f-853d-228b5c01d52d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b467a76a-7410-48a1-83d8-c347f3a7c426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ce842f-4139-40d3-94ce-e75961b6d094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a99190-4386-4598-a4e0-bf4985b1bdff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999a3b5f-63d4-430e-96f0-230cbec7b887",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038ee5b7-b4a7-4190-975a-71e22f5a601a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cce9c821-c931-4809-b51c-3256ed695776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc178ffb-fef6-485a-bf93-73b1b284e6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926146b6-e746-4a70-9f2e-b1744beabf1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9aea1d-853e-4ec7-9351-5c88699b352f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0de4914-d2ee-4e16-a2ff-b28d3d663158",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be637938-03e2-4077-9e96-57f2ad1e8f19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4866884b-e3e7-4b47-84a7-cb2439906d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d34b7e-05b7-4890-836b-17bc001b706d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6734efe4-4ad1-46c4-b532-bde2617e76ef",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399171e2-649a-4d56-bc7c-eab08bd4ebae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ecc322-3423-4bd6-86be-37def65d1749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d5c5c6-0bad-4f54-a942-f1a1957e0574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44fbee6-8480-4ec9-b9e5-57321453bad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d36cc3-d69f-4600-878d-8bcdd67be9c2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70dc51c3-ad5f-4208-a2a1-0d74a6771da7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3061adee-8c08-4421-91d2-5fdaee982ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f90861e-c339-43fd-99d7-42ec07f54d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0d44d3d-f0ab-4b78-8a29-fc39d9e6d60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37d2198-df7d-4e35-b303-b38e321e58f5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33752af-aa8f-47fc-9e62-9cfe00a49405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6c6c623-f98b-47db-9d8b-2df25610efa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8895c18-e618-4fd9-86ac-35961564f6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ef3ac4-4237-40e0-8601-caf8c497c710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869796d8-4374-492c-86cd-7a0567f9d2b7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ec81c9-e1aa-467d-9c85-5d98b6bb26c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e844bb8-0153-4143-b1de-48df1f54e85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb863ee-c778-44ab-acdc-b16b023f861a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ce0d27-ff78-47ec-82c0-4bf35d4a498a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f237949f-4d4a-4cc2-b163-cb84c7a16191",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c837a6-5cb4-494d-a06c-b9e9bf2ebd69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c899de9-0b75-4023-abea-89f45ea859b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0537a0-cfab-4d0f-bf52-044c7b7aca8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5590a256-2281-48ff-838b-691fe7989a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4df9cf9-67b4-4bf8-840d-bf9c6e3075be",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933c33b4-1d5a-4f3d-a59b-2342ea917aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df09aef-100d-4cc3-9e6f-daf59c4b6e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15783317-ce27-4ed8-9a28-fde302a3160d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9761f44d-ceee-417e-b7c0-1a5856d956c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2e43f4-fca3-4660-a7eb-bfc0f844d33f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc000ed-acec-4c25-9071-5ebaebe0a61f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75cec84b-0eff-4aea-98ab-93f3f12964b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0992ddf-fe8d-4cf7-9683-9697abc977b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1658c5-fe8a-43bc-a398-20eb98e2bcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f14f892-dc00-4d7a-84a2-1db8ae518e15",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b20a53a-aebf-432d-addc-bf7a85d5dd8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26bf7176-49e0-4910-a400-8d4bcb9b4d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d938ed-1391-4210-85ae-7c24bdf592d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c00f92-a8f5-4d5d-a8a3-5b2cf1e30c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e809b4d-8ab0-4769-a406-b9d3742dead9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a25748-da0b-4d94-879f-c0abec8b720d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e953a58d-3d3d-4fcc-85a1-46b6a46b484b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08271d14-352c-4875-877b-318a85229e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9b51d1-b7eb-45ed-88d9-7f0f49eb28b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6612fd44-df96-40fd-9c37-cf76ad38663a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be29031-83df-4527-93de-dce0b3baebfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ace34a1b-6f74-4f08-a847-a932a1ea5f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef8b93e-961d-4a06-be20-aa9c1eb109fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e3f6f9-af82-4b32-b792-036b42f426fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3315b958-a0ee-4cd0-84fb-5328ec77d5a7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe8c2c5-bed2-443e-b0b0-cc19d30fbb25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03fb5446-e2a4-420b-a4ec-0586babb4b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d032c9-0a48-4c36-878f-47b22a744135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1609d1a-7dd2-41a7-ac88-a85821734127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33362280-0287-4123-a72d-bd10cdcf2b1e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db4c2f9-9266-4feb-b5dd-9b70875936f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eef1ab3c-bc44-4614-b8b3-18bfa494fff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125c9cdc-36f7-43a8-ac99-92bd56c4b451",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954371d0-0baf-426a-906a-aa268c49bc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703bac8a-0c85-4b85-b367-8652267b8d80",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ac7d1f-4f35-4806-84de-5a7ccd7b1e76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dc92bc8-46f7-4954-89e3-ce537a747754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "892e0e28-a3e2-4c91-90d1-9475be3404aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b41153-2b04-4f06-a53b-ebc31d266051"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "990867f2-7890-43d8-820e-778af965e520",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afacb442-c96d-4192-89f6-5037980457ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee416b09-624c-4d18-9dbf-d2b172f36a8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8ed805e-4da3-4a08-839d-b3357268dd70"
                    }
                  }
                ]
              },
              {
                "id": "3e4f03bd-6e4d-48c5-8572-bdca98508609",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ecf42695-7205-4042-b24c-052b099da4ee",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80916224-3819-4926-aed6-736051af2a83",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "34308954-2dca-4a6c-a510-88f37ca50d5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc8f090-ddd7-414d-b878-bd4602d84c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cb8011e-ab7c-4b4c-8d07-12efec371bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd2188c-aa3a-4dd7-b956-54dd5529374e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769b58c8-777a-4cc1-9304-fa10cbdb7d84",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "26a1c170-c8a6-442c-a5b6-e35e3a2dcbff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c99b05-7ea4-4154-a6be-c06ac5dd3c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d143744-eaa7-45a6-a50d-c8ef0a1bff56"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "049e3277-d257-46a1-88cf-03e16e5c45b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42f3bf9d-6dbe-49dd-8688-00226474344b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eef602d-3fac-4202-9bf8-f4f844d48ab2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53174dfe-a1d3-4aa7-be76-e608b4b59a9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "b23d812c-f7e7-4f24-811f-15679c762647",
            "name": "Positive Testing",
            "item": [
              {
                "id": "236afc4b-4143-4aab-8d50-dadbd9295bda",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58ff3fcc-0631-4bd2-b736-2eed05f5b6dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e56556a-b88d-4fa5-8a32-8475c242e0c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fa994a5-1d08-4cda-a2e0-3f9dd06430d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9ccebeb-3a4d-486c-bb0b-025d3c15c39a"
                    }
                  }
                ]
              },
              {
                "id": "81f06ae0-5891-4cbb-b791-440b9c2f7927",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2458325-0e23-47b0-9f2b-4d58ae703e92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8e1440b-74ed-416e-8a0e-4e844de26066"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b573adc5-1092-4c17-9b3c-2147bd6ffe47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95d75f7a-95aa-4b9e-ba0a-0e17b200f43a"
                    }
                  }
                ]
              },
              {
                "id": "9ac72ddf-d9a3-4895-bee9-e0d4f8c3ce2f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "195904a5-4d7b-4cb6-8f6a-fdc02abe50de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9663e253-ad79-4395-b751-83f98c766fd4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee4cfbe5-0de2-43e5-baf7-0fddd482880f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "002d9409-b7c6-4f42-92aa-ee1aadbbc438"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fa40727-c3eb-4855-bfc6-6b546399ca2a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "26460bf8-ebd5-4bf1-8f9a-8a40bfe9d898"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2afe3497-7b4a-40b9-ab0f-2f2953b32d68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d8d84e3-b75b-41d6-b0d3-e41c8c35a6ce"
            }
          }
        ]
      },
      {
        "id": "df33f330-8542-4879-b681-c5a37805c48c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "36cec82d-cf4b-42d1-8011-dec5610f2809",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a7f273c-4e0f-4d18-a161-dc5652b93f5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3656a3d-e21e-467b-a40b-47b0de0687c3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00207c78-aee5-4953-b9e4-1de8e46438f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9ba7174b-fdc8-48c1-913f-a8181177accb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d4e129-ca26-4a44-8c78-9b50e0a2a0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a502187e-6f04-438d-8e1a-fc57517adc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a055768c-c70f-4022-8b03-5131f829e2f8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e907ea-8556-4ab4-83cd-02f2d1ac722d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "206867a6-8e48-4199-a70e-f6ef24412025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b80be8a-12a2-485e-afaa-0e9c6cff43fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d71bf96-0e01-4d6e-93b4-2db31a925c2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9570dc5-1ff5-45c4-90b3-30d8ce4a4b0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e35d4c4c-4db0-4644-84d6-a552da2abdf8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29aaf7b1-4ba0-4515-af58-5002993b442f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0988bec-71e1-4a7c-ac13-64a9ea89d814"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f4f8a9f-d11a-4c64-a03d-90b0aa59c911",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "61aec255-660e-4c1a-91bf-3e774a311e46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad430820-289a-4e50-aadf-8f2a18051e24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae5fe89d-4f62-466b-9198-162116ff7346"
            }
          }
        ]
      },
      {
        "id": "c1d4a64f-1d95-47cf-a513-8570d30559f5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1f1b05fd-45c2-4ef6-bf98-6b46fdcdc0f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ac4f57b4-0d0f-47a8-8c90-af85f7da95b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13e6b8d7-9621-4790-9840-b32389a36a64",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdb7c46-5250-4d00-bc7c-fc5e62213e0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "98c253a6-a827-4e9b-8961-66be5a70f226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d255f6-1584-47fa-9f01-347d4cbc0639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36ca3510-0410-4a51-ae9b-228f1512f269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2274a773-b2f0-4815-9c79-a34500907019",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a40efc-ae92-444a-9d07-db02fd015910",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e4ef8537-7228-4299-ba07-b24410afef58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd172f74-f0d9-4cc5-88f6-41dd318ed66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "566577dd-c2a1-4d2d-9557-27284897196c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04c562f2-e0da-4150-93d2-e192333983bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "939db69f-cf2e-42db-a3c9-755283db70ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbeab860-d124-459e-9464-f88e89c03350",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a7c5f7a-cb1d-42c6-8ca6-c2c197298ff1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91d6ec50-933f-4aa6-9f35-5020397db138",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bba7f9ea-bd84-4a8c-892b-5f4085a29ad6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad5c493b-8301-48f4-8cc2-b3f616bb20b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a599f1f3-776e-4515-b559-44bbcfe4379a"
            }
          }
        ]
      },
      {
        "id": "e92756b0-6844-4c22-a289-438df440f780",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "16791d45-6098-407c-adba-96148b1f2244",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cadf0e4-bc3b-4505-8d86-5e5e9eb1ee02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c88da26-ec7d-4b76-b2e8-d2f05c938d7e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46434a3-c76f-4eae-b706-da4d11dccb74",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "45dc8a9a-8115-470b-bd8c-73487e54e810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e34b6c-7d23-4828-8919-6846aab6537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f30b6554-6147-4b21-8289-12102ba609a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd048a18-e68a-4d7e-a4bf-6c139b63dcf1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4b51ef-8327-4539-b923-4e6698289d68",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "869fe850-401d-4bf6-9dc8-a648fcdc63c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45e59e9-def4-4ce6-b328-fadc3a06f34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adb5bab8-4be2-4aef-b91c-e54946d5a957"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6746dc4b-1dfe-4107-b86d-240341ec2cb4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31d787dd-0772-44ba-af90-e758ef2ac87d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "061a6dc0-06b3-4756-b584-011418da0b8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb6da939-2536-4336-823d-f18b1d012040"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "647acf47-1187-4fa6-9bf1-239a2057d4d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a89b97b2-3297-474c-8165-f9dbf9d33d3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "959442a1-7f81-4f24-a3f6-fbff79aa9dbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95f764e8-e13d-4fc8-99d8-7d8242b8f2d0"
            }
          }
        ]
      },
      {
        "id": "978f65d5-4df7-4428-830f-e89fecfd7764",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bc38ad2-be4e-4502-828f-e9f53d580c85",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4662489c-0686-47df-ad5c-88296d95708e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "38f7c636-05ec-47aa-ad6b-a4f328690740",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "605caa91-a1f3-4c20-a4be-790c6773aebf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c73b4eb1-fd06-4afb-bd32-178462d26a5d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 90
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.31153846153849,
      "responseMin": 4,
      "responseMax": 1187,
      "responseSd": 122.14064662990621,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667781977453,
      "completed": 1667782005280
    },
    "executions": [
      {
        "id": "09af2b54-e1b2-4234-b4f2-420815eb053e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e8c6d163-b6c2-4036-82f1-0152841498ad",
          "httpRequestId": "5b3ad069-f6a5-4d3a-b500-bc38a4a8adf5"
        },
        "item": {
          "id": "09af2b54-e1b2-4234-b4f2-420815eb053e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a1103a45-ccb1-4d87-9444-6a86c4d98145",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 0
        }
      },
      {
        "id": "c165770c-7b39-493b-a922-44234dceed54",
        "cursor": {
          "ref": "89ae6955-a549-4f16-87b9-af3643491ecf",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3ffa6793-35fe-42c9-a42a-bd46bbca1fb5"
        },
        "item": {
          "id": "c165770c-7b39-493b-a922-44234dceed54",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "25fd75b0-5405-46b5-a20a-a034c4247fca",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "7ca23b87-2cfd-4747-8c6f-4eeace1f4055",
        "cursor": {
          "ref": "6c0479bb-ce6e-416b-b7c5-64a2a66c15ee",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ac9f257f-c98c-43da-b233-71e7d7a9620e"
        },
        "item": {
          "id": "7ca23b87-2cfd-4747-8c6f-4eeace1f4055",
          "name": "did_json"
        },
        "response": {
          "id": "e718fe86-04a3-4e55-a050-ebaa9a3f6b3b",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e84c7d5-59c0-40a6-9bb9-4db56d36c391",
        "cursor": {
          "ref": "1fc3f2d1-7229-4ece-bfba-b5937ae45532",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "474e8f82-cddf-4b16-9aec-902634fc2037"
        },
        "item": {
          "id": "1e84c7d5-59c0-40a6-9bb9-4db56d36c391",
          "name": "did:invalid"
        },
        "response": {
          "id": "76ac0982-3e68-42fd-a4ef-5b6e9ff9b9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e84c7d5-59c0-40a6-9bb9-4db56d36c391",
        "cursor": {
          "ref": "1fc3f2d1-7229-4ece-bfba-b5937ae45532",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "474e8f82-cddf-4b16-9aec-902634fc2037"
        },
        "item": {
          "id": "1e84c7d5-59c0-40a6-9bb9-4db56d36c391",
          "name": "did:invalid"
        },
        "response": {
          "id": "76ac0982-3e68-42fd-a4ef-5b6e9ff9b9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99242225-8399-4ca4-a99c-5fa5eb986673",
        "cursor": {
          "ref": "e5267c3c-a41e-403d-861d-224f2061ee8e",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5c366814-5d7d-4ab8-881a-5f730c32cf4c"
        },
        "item": {
          "id": "99242225-8399-4ca4-a99c-5fa5eb986673",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d044a791-3aad-4799-b9ea-3c163452f5f3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 173,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecb58b8-68ce-4769-af0f-c9cfaafb8ade",
        "cursor": {
          "ref": "583e0d3a-b5d3-4e23-bca4-8f447c396c6b",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7e13ddb6-ec02-440c-b6cd-7c08ab9618da"
        },
        "item": {
          "id": "cecb58b8-68ce-4769-af0f-c9cfaafb8ade",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b42803c3-0462-4392-8723-59b7b033ec7b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 13,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6d8c09-4d17-490a-b0d4-24c3039e1351",
        "cursor": {
          "ref": "8ab7c5a1-f09a-4801-a661-e529c456577e",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "52c37f44-c387-40c3-b851-f27e4e5a8973"
        },
        "item": {
          "id": "1c6d8c09-4d17-490a-b0d4-24c3039e1351",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ecd668d9-a54d-4c41-850d-79eea02f62cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e286e1fc-8680-42c5-80d5-fd18294fba6e",
        "cursor": {
          "ref": "8127bcc7-6641-459c-96ff-387e1bbf46a2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e3f9cef3-7e17-43cb-bb9c-91bff9157274"
        },
        "item": {
          "id": "e286e1fc-8680-42c5-80d5-fd18294fba6e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "41844fa3-5774-4919-aacc-0882764ab852",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 14,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e286e1fc-8680-42c5-80d5-fd18294fba6e",
        "cursor": {
          "ref": "8127bcc7-6641-459c-96ff-387e1bbf46a2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e3f9cef3-7e17-43cb-bb9c-91bff9157274"
        },
        "item": {
          "id": "e286e1fc-8680-42c5-80d5-fd18294fba6e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "41844fa3-5774-4919-aacc-0882764ab852",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 14,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9e53fe-6173-472e-bbf6-2aa5c5bc3c17",
        "cursor": {
          "ref": "060fedda-455e-4826-a4c0-32265ba60863",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ebe2a6bd-745e-4283-bc28-8ae6b9aa740d"
        },
        "item": {
          "id": "1d9e53fe-6173-472e-bbf6-2aa5c5bc3c17",
          "name": "identifiers"
        },
        "response": {
          "id": "29938fc7-890e-45ad-bf4a-3086566b2304",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e983282-e17a-408b-86ee-1b143400df3d",
        "cursor": {
          "ref": "46877c63-56e3-4c7a-8abd-dd9fd17ad0b8",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f59bea5f-86f4-4891-b5e4-c6f6bb7c811f"
        },
        "item": {
          "id": "3e983282-e17a-408b-86ee-1b143400df3d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ac0b124f-8001-479a-ad8e-561a3a3b8551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e983282-e17a-408b-86ee-1b143400df3d",
        "cursor": {
          "ref": "46877c63-56e3-4c7a-8abd-dd9fd17ad0b8",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f59bea5f-86f4-4891-b5e4-c6f6bb7c811f"
        },
        "item": {
          "id": "3e983282-e17a-408b-86ee-1b143400df3d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ac0b124f-8001-479a-ad8e-561a3a3b8551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42257d21-2f6a-4220-923a-87562c8aeb5d",
        "cursor": {
          "ref": "5c02171b-72b0-43c9-8b9f-b83946180b82",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5fde97de-574f-462d-964e-9981233d20cd"
        },
        "item": {
          "id": "42257d21-2f6a-4220-923a-87562c8aeb5d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "aee6d95d-e077-4ec9-9343-43267b99551f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96db3ef5-e624-4425-8149-b87db5a0fa73",
        "cursor": {
          "ref": "7362bf4d-e114-488d-a589-3a0adaeeefcb",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e9ec0493-6d1d-4ae2-ad28-9b484d4c79d3"
        },
        "item": {
          "id": "96db3ef5-e624-4425-8149-b87db5a0fa73",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "85275ded-1736-49eb-8209-7148214d083a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b5a989-aa8c-4b01-ba6b-0ee8cdf148c8",
        "cursor": {
          "ref": "6e3d7f00-6658-4ab6-8dbe-cd1d81904003",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3c959d87-63fa-4316-9f5e-ba2a3aba6b6b"
        },
        "item": {
          "id": "67b5a989-aa8c-4b01-ba6b-0ee8cdf148c8",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "58e08d1e-de53-418e-a715-4b58fc123162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38f837c-29af-4347-8614-eedf1bab8a42",
        "cursor": {
          "ref": "494b2392-e017-4696-b0fa-07140fb60d28",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ced2dcc3-8cd4-40a2-966f-1583dd95e25e"
        },
        "item": {
          "id": "b38f837c-29af-4347-8614-eedf1bab8a42",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d36fb37f-67b5-41be-8338-c76856d00529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9348dc60-1390-4d17-be77-79808e02a569",
        "cursor": {
          "ref": "9e9bb48d-fc9d-442d-99ed-b1493b30f146",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "42516260-9b5d-43e4-8175-ba4d567316c7"
        },
        "item": {
          "id": "9348dc60-1390-4d17-be77-79808e02a569",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bd5399ee-43d8-4fc1-b98f-5c07c4273c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652fbad3-b2e7-4e4b-be14-4c3b995e4d09",
        "cursor": {
          "ref": "97990431-4837-480f-8cb3-d0be4a2a189b",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "84444f49-b503-4dac-9a40-ab31c6c3b045"
        },
        "item": {
          "id": "652fbad3-b2e7-4e4b-be14-4c3b995e4d09",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "38ef7166-c724-4179-8211-e712cb5cb805",
          "status": "Created",
          "code": 201,
          "responseTime": 1187,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "6054f7dd-e227-46ba-b372-99b2bb0e3f4d",
        "cursor": {
          "ref": "bc5b3fe4-bb84-427d-b43a-22e17c8708ba",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e0e1f017-56e9-4ae0-95b9-6fa62efd5c60"
        },
        "item": {
          "id": "6054f7dd-e227-46ba-b372-99b2bb0e3f4d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d05c8aaa-f453-46e2-9f0b-cf26922ecc9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe88e65-3daa-4af8-84e9-b4922baf1f19",
        "cursor": {
          "ref": "f67d8ae2-781c-4f66-ab4e-2b3537473f0c",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "16118544-853e-4ff0-a8e5-55e1e0ee73ea"
        },
        "item": {
          "id": "fbe88e65-3daa-4af8-84e9-b4922baf1f19",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d08327a5-db32-4cca-9fef-9c29e77c0989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606edd47-574c-4d68-a5ab-48f47316ed97",
        "cursor": {
          "ref": "15e7d3a5-9fbb-43e2-adb2-da0fe82e301b",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "08141dc0-0033-4201-ab0f-2bcc37b26c6c"
        },
        "item": {
          "id": "606edd47-574c-4d68-a5ab-48f47316ed97",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5c777a94-94de-4828-8091-0b61aaec42b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844802ed-1018-43ee-94da-4f429c8dfb47",
        "cursor": {
          "ref": "e9db6c36-3bab-4717-b7a3-5dd63ccbce87",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e4cbbc0b-dee5-4cae-9e22-9661504bb10b"
        },
        "item": {
          "id": "844802ed-1018-43ee-94da-4f429c8dfb47",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c5390050-92c0-447d-9bab-d143e30c2936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b39619-fbe0-4ade-871c-6c86a8c96df6",
        "cursor": {
          "ref": "e383eb00-0fcd-474e-b3c9-24519875d3fe",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d937d236-7903-40d8-a05e-721121bf078a"
        },
        "item": {
          "id": "09b39619-fbe0-4ade-871c-6c86a8c96df6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ed88cc1b-c144-4e01-a08e-20a714f94a82",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d14d3e75-5b3d-4978-b53a-641d0318a60f",
        "cursor": {
          "ref": "6b6a984d-d24a-4129-85b5-4f80546ddcc1",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "790706d4-b58f-4872-9b37-e11b889f3b9e"
        },
        "item": {
          "id": "d14d3e75-5b3d-4978-b53a-641d0318a60f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ee88c6a7-512f-477c-bbeb-381047e7b141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ec562b-6eca-4d14-9ca3-9ff19310d8a7",
        "cursor": {
          "ref": "5274b5b9-406c-4dcf-8cbb-2cb7b0a44c9e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "994d14bb-62b2-4edb-9415-1714ae954f2f"
        },
        "item": {
          "id": "72ec562b-6eca-4d14-9ca3-9ff19310d8a7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ba13c757-5211-4612-8a4a-15eb4ea4ea7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a246836-c191-4f75-8e3f-b3d814ad12c2",
        "cursor": {
          "ref": "04caaf9f-a3ce-4258-b5a1-7829a2a9bb4a",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3fbc99a0-a815-4071-b2e7-0c3c248a3372"
        },
        "item": {
          "id": "3a246836-c191-4f75-8e3f-b3d814ad12c2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4916bade-3b27-4868-8e48-8384a2672105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ee1420-632c-4305-89f3-a0b3fcb967bb",
        "cursor": {
          "ref": "737ab5e9-b704-4fa6-9019-f7c654a7fed4",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6faec5a7-2583-4fa6-8677-c151979e4692"
        },
        "item": {
          "id": "11ee1420-632c-4305-89f3-a0b3fcb967bb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "82b190a4-c759-4fb0-8bd4-1c08652d595b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ef869f-3080-4e9c-8630-146b7292a1fa",
        "cursor": {
          "ref": "af06d79b-2739-4439-bc32-678c6bca20b1",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "28d400a5-c7de-49d3-944c-6899a28357d9"
        },
        "item": {
          "id": "81ef869f-3080-4e9c-8630-146b7292a1fa",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d9a302d3-73c3-4649-a706-f10feac48fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d862d948-f487-4bbd-b627-1d5c0ea50860",
        "cursor": {
          "ref": "95d09e39-0228-473f-8500-a5d05543a52e",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d8505d8d-7002-450c-84c5-2b6f76cdf78b"
        },
        "item": {
          "id": "d862d948-f487-4bbd-b627-1d5c0ea50860",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c738acaa-59f7-4c25-8c41-c44b6ebfde20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324f549c-cf68-45fe-b710-e815758ad978",
        "cursor": {
          "ref": "adb04e66-8576-4695-b892-c1ceeea7b91d",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4f918f75-2efa-4db9-b376-dd5e90f5b88b"
        },
        "item": {
          "id": "324f549c-cf68-45fe-b710-e815758ad978",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e309b2bc-b541-40a2-9ef8-0453c4eaea04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5f155d-999b-44fe-a746-80d46ae47826",
        "cursor": {
          "ref": "2417d5c9-aa35-4b0b-9e93-7dcd7d52cd12",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b8cfb918-46a4-4a1b-aab6-e1a75593e7ba"
        },
        "item": {
          "id": "cf5f155d-999b-44fe-a746-80d46ae47826",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0ecd6859-e426-4df6-acb3-061631d421b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6da1460-288f-410c-b3aa-a0d49b9b6c39",
        "cursor": {
          "ref": "c297b5c4-9610-425c-bd88-1e54aef3e010",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1190b10b-1ca4-412b-ac14-5ac063c73dda"
        },
        "item": {
          "id": "d6da1460-288f-410c-b3aa-a0d49b9b6c39",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6ccec5ed-51fe-4dbd-888e-6adda0b3a571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de994e78-c98a-45f4-abe0-401fe39405f7",
        "cursor": {
          "ref": "38b5752d-475d-4d3c-9d6b-2f836b6b957c",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4389a5f5-25fe-48f7-b190-59c2966b977e"
        },
        "item": {
          "id": "de994e78-c98a-45f4-abe0-401fe39405f7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "da512bea-ec3c-4b22-ace6-c60c5ff458f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de6f166-4848-457e-8ca5-893b716f1612",
        "cursor": {
          "ref": "0b115346-ec5f-4ef8-ac05-e77297b3abba",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ec1a159d-8310-46c7-88d7-7251d286f7a7"
        },
        "item": {
          "id": "4de6f166-4848-457e-8ca5-893b716f1612",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d1f3160d-4970-433f-ae1c-8e107c2c82a9",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a2988d3e-9a46-4f21-bfdf-ea53b0ca7dcc",
        "cursor": {
          "ref": "b1e7f197-8a7b-4aa9-a015-2eb23459f8a4",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d13b076f-e168-43f5-9eed-1bef99fa6f33"
        },
        "item": {
          "id": "a2988d3e-9a46-4f21-bfdf-ea53b0ca7dcc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1ec28ab3-91be-4248-ba29-2136c457302f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b0ea26-7131-4d0f-a3ae-0f9139e997b5",
        "cursor": {
          "ref": "21b0e186-72a0-4240-8b94-d6133a4ba34d",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "df0e215a-b197-411e-93a5-3ea18e5b1e39"
        },
        "item": {
          "id": "11b0ea26-7131-4d0f-a3ae-0f9139e997b5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1a502505-77a4-4226-a3ce-0cae7e01abc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48f9a3e-727b-40da-a640-741ec64bcec7",
        "cursor": {
          "ref": "da8c4b1e-3c2b-404a-849a-269a1f3006ad",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "76fec5aa-a8b2-4d13-b691-908201d43d37"
        },
        "item": {
          "id": "f48f9a3e-727b-40da-a640-741ec64bcec7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f2c22a2e-432f-412c-b49c-114ebb60f7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f30333e-b854-4f68-b768-6d21fa21d229",
        "cursor": {
          "ref": "6a0deaff-fd4d-4f95-a7e2-f58d9a09594f",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ecc02081-64ff-488b-9eb5-7ae82ce9647b"
        },
        "item": {
          "id": "9f30333e-b854-4f68-b768-6d21fa21d229",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6aa1f2d2-59e4-4c01-a10c-699a234d3c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b81f94d-0394-4b2b-ace4-894e7789b616",
        "cursor": {
          "ref": "5c0328ab-dd01-442f-9dcc-ba07b81f25d8",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a09e17a6-e279-4fc6-bb77-bac473d2b568"
        },
        "item": {
          "id": "8b81f94d-0394-4b2b-ace4-894e7789b616",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "86a5d026-6825-4bee-94a1-3339b1647fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29c8d48-5fe1-47ca-9a7c-cb6a1f43c7a0",
        "cursor": {
          "ref": "0d4b4ecb-6050-4b8b-8eec-b8e8a63f5f24",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e37d6267-16a9-4839-b19e-f9abcc0e84e2"
        },
        "item": {
          "id": "b29c8d48-5fe1-47ca-9a7c-cb6a1f43c7a0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c8f55cc5-9446-434d-b564-f2a590f68a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87aa17ad-e206-44de-a3bf-0ab58e602e51",
        "cursor": {
          "ref": "a2589117-879c-4472-8ec7-b64738d3ca98",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5658a105-0fe6-4c9c-bac6-cc30d141af6e"
        },
        "item": {
          "id": "87aa17ad-e206-44de-a3bf-0ab58e602e51",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e2c84eb1-e2b4-4537-8562-fdf772acf25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e4c7a1-a863-4157-b4d6-76ed32ac65e1",
        "cursor": {
          "ref": "59e1b07d-99cd-4e92-aae2-58d34a2f7502",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1025d13b-1997-41ee-b8ee-3a72c7a798a8"
        },
        "item": {
          "id": "74e4c7a1-a863-4157-b4d6-76ed32ac65e1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cd8391d9-eee9-4b33-bc69-05da6f1f375b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b06421f-82ee-4e9e-802d-8e2850b53eea",
        "cursor": {
          "ref": "87e33301-5a61-46ec-afef-66364208502c",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ad527868-a6cf-424c-927c-c37a5c93c6af"
        },
        "item": {
          "id": "2b06421f-82ee-4e9e-802d-8e2850b53eea",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "00c4c42b-3b1f-4bbd-95de-56dedd982441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2ef37b-4dcc-47ef-9ce1-0981529bf730",
        "cursor": {
          "ref": "a50046e1-e784-4df6-896e-b81c37876981",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6f057faa-9699-4e22-a8b7-6fe7981eb9a4"
        },
        "item": {
          "id": "fe2ef37b-4dcc-47ef-9ce1-0981529bf730",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fe6cac60-0366-4924-818b-f757d8635e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d71e219-22d2-4f1c-a0bb-7374f0ecd20f",
        "cursor": {
          "ref": "04e86acb-924f-4f9d-a4ff-2a5f2ebd7c2c",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "14ee1fc7-eb4a-4cf8-b669-54c778ec6676"
        },
        "item": {
          "id": "8d71e219-22d2-4f1c-a0bb-7374f0ecd20f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "95486075-d956-4e1e-a822-67649e23b053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68b250d-c883-49fd-a831-a0bd9dbd1f58",
        "cursor": {
          "ref": "7d5454ae-ab7d-49b1-ae01-c7e017fd2711",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c3b3c396-73b1-4f38-a420-e5ff2e4c1e9d"
        },
        "item": {
          "id": "f68b250d-c883-49fd-a831-a0bd9dbd1f58",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d55a18e2-6fcf-4f79-a157-a029959134fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d8ddc8-75d9-4855-8706-27f4a280f99f",
        "cursor": {
          "ref": "cc81dc60-a0b4-41db-aade-1fcaedf47ad0",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5d4a4b36-4a0e-4238-bd07-d967f4ad9748"
        },
        "item": {
          "id": "84d8ddc8-75d9-4855-8706-27f4a280f99f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "56003969-fd26-4acb-889e-0e19628c18a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0cd5df46-36af-4947-9ff1-85c225786e1d",
        "cursor": {
          "ref": "dae7e3b5-ed85-4f97-a032-aa4d70c0139a",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cf706873-7f0f-4390-a4fd-8666086791c1"
        },
        "item": {
          "id": "0cd5df46-36af-4947-9ff1-85c225786e1d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "37da0014-b578-4071-a1b8-298e1147ad9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca058f77-955d-4c26-95a4-ca8e3b0cccb6",
        "cursor": {
          "ref": "7f1043bb-3a95-47e0-952f-0307cc1afc1c",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ea4c9e0e-12b0-44ee-b1e5-6425becb7d6a"
        },
        "item": {
          "id": "ca058f77-955d-4c26-95a4-ca8e3b0cccb6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "16c1b882-fd37-453c-8e53-55f471ec7c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96d7890-f79a-4dd3-9714-34874ddc0b44",
        "cursor": {
          "ref": "c5ec810e-3c92-4ead-b0ec-b40ddba57a1f",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6f84d09b-93fe-4144-83e9-56cbebfe5eb0"
        },
        "item": {
          "id": "c96d7890-f79a-4dd3-9714-34874ddc0b44",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1e578fad-7d2d-4151-8758-a007023d3a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc146324-f340-4200-9068-a0a8ead35e99",
        "cursor": {
          "ref": "7285c5dc-47ce-4b2f-ac61-65b5f8caa6d9",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e98055d7-a57c-4748-9e51-e38eed529b37"
        },
        "item": {
          "id": "fc146324-f340-4200-9068-a0a8ead35e99",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f1520503-3a93-4cee-bb98-994210c40f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577d696d-bb6a-4e80-a986-a9986590c0a7",
        "cursor": {
          "ref": "4eb95fda-8970-41fd-a1d4-8265e2fa7a79",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b9ae6780-7969-43a5-a5ac-71361b7a7fd4"
        },
        "item": {
          "id": "577d696d-bb6a-4e80-a986-a9986590c0a7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2907525b-dc2b-49b8-b771-893e0b1117a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f9f342-19f2-4579-9e13-19904373af49",
        "cursor": {
          "ref": "a418d198-1fe6-4513-89f1-c296339c931f",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9dc567f5-14c2-4274-8458-6e1a50d831cb"
        },
        "item": {
          "id": "65f9f342-19f2-4579-9e13-19904373af49",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a20ceeca-830d-4a4e-8e0c-f7e66d9bad6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b371225-7d23-4446-8461-c13d59bb5c7b",
        "cursor": {
          "ref": "bd51ebe6-cf2c-4292-93b1-29bbccbedd21",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "76f6552c-ade9-4e07-a471-e93365347414"
        },
        "item": {
          "id": "0b371225-7d23-4446-8461-c13d59bb5c7b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e667f576-446d-489b-89af-81076c976899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3c2860ea-f690-451b-8ea3-0b3ba26077cc",
        "cursor": {
          "ref": "c26da27b-0672-4380-b044-3d7b833fc236",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b55ef162-1f3e-4169-9f75-1803af2ead97"
        },
        "item": {
          "id": "3c2860ea-f690-451b-8ea3-0b3ba26077cc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0f1bc504-0703-4ec9-ab26-8fd215c0f22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc65c25d-6804-4f1d-9318-797910c8733a",
        "cursor": {
          "ref": "df3f5a6f-7337-4451-af60-611fd9e8bc29",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a80aae6d-5c50-4845-b0c5-6396d97e24a6"
        },
        "item": {
          "id": "bc65c25d-6804-4f1d-9318-797910c8733a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "28284d71-a412-4cd1-b1dc-8d647067391c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc95e6d4-ace2-4a67-8e91-a8cf0e815cc4",
        "cursor": {
          "ref": "b94be677-1eda-4945-95f7-56fe5afa3993",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ae5b747e-4e6a-4a09-b9e2-fb4526613a99"
        },
        "item": {
          "id": "fc95e6d4-ace2-4a67-8e91-a8cf0e815cc4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4c14c230-dc84-428d-a615-f6789ca2d163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb4d496-3120-4160-ac83-0f2d560795fb",
        "cursor": {
          "ref": "942c9602-af60-47fb-871e-31b205cc11e7",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c88451b2-53fe-4c07-86e2-a1c42eb238ae"
        },
        "item": {
          "id": "deb4d496-3120-4160-ac83-0f2d560795fb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e9736dcf-381b-40d0-8843-e104193ce50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a96b3c1-bfa0-44ae-9539-41ca09a91040",
        "cursor": {
          "ref": "3dd82c0c-3824-4511-9f2e-f206ad79587e",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "88d8ab2d-9a4b-4fb9-abb3-6ab041c76932"
        },
        "item": {
          "id": "3a96b3c1-bfa0-44ae-9539-41ca09a91040",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c6b8559c-7e38-42dd-85e6-f25132064101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c352cc8-5ad3-4b28-b020-12fe74b119bd",
        "cursor": {
          "ref": "0e3cebdc-fb07-46be-9bf7-2878495fc630",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b11f8b74-2d18-4b24-a3fa-cff5b0918352"
        },
        "item": {
          "id": "7c352cc8-5ad3-4b28-b020-12fe74b119bd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1a70c48f-abcd-488b-8fdf-a76dd71ba4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6172ff57-91c8-46b3-a492-162d8e408012",
        "cursor": {
          "ref": "662dd188-f90c-48ae-a366-76c76f101868",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4444285c-2c01-44d5-b6cc-8f4c846fee16"
        },
        "item": {
          "id": "6172ff57-91c8-46b3-a492-162d8e408012",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3b8d87f7-92d7-473f-9630-b025d80982c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fbcfae-7adc-4207-a933-333c8ca41f3c",
        "cursor": {
          "ref": "82198373-4183-4d2c-955e-cf0c1738ba27",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cd24afe5-1234-45ce-8674-63e19d57e6d9"
        },
        "item": {
          "id": "09fbcfae-7adc-4207-a933-333c8ca41f3c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0f4ae2d3-c9d9-44d3-9452-adfe3a422577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9040eb5b-6d40-4f81-abcb-73450ccc39f3",
        "cursor": {
          "ref": "36bc1599-ed54-4a37-992c-d3e4a1e5ec9e",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d2404b30-2643-4881-9638-8c06ac7fcaef"
        },
        "item": {
          "id": "9040eb5b-6d40-4f81-abcb-73450ccc39f3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9b9d9bd7-e851-4515-aede-8a820acb07f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ccb6c1-75ea-49a8-a919-1da4d1dc6f7c",
        "cursor": {
          "ref": "e403db41-7261-4732-916d-2b37fef4d648",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b8c7c1da-a96c-40e8-91a6-de6bca4c81cc"
        },
        "item": {
          "id": "05ccb6c1-75ea-49a8-a919-1da4d1dc6f7c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a6803901-7c0c-4de4-ab8c-968132b618aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b556d3ab-ca7a-462b-908e-151100cbea21",
        "cursor": {
          "ref": "475b93e4-ee79-4a77-9256-5e5a1937c7de",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d18b2253-4f5a-46b8-bc74-2d1560a4a61c"
        },
        "item": {
          "id": "b556d3ab-ca7a-462b-908e-151100cbea21",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "61e90662-9763-4181-ba67-38b82081dafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78553707-be21-4f0b-b5e1-2e975ccfe6e6",
        "cursor": {
          "ref": "45a585c3-b6a9-4ae4-80e2-74becfee559d",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f2c3cdaa-1b9a-4417-b3fe-3c3ea7d31ff3"
        },
        "item": {
          "id": "78553707-be21-4f0b-b5e1-2e975ccfe6e6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "346eb64d-c564-4878-b2c2-e72b4b03792f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01695b5-e868-41f5-93ca-60d17ad53c16",
        "cursor": {
          "ref": "0fdde8c8-522a-4562-9759-4b06230ae1f3",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "23b69a24-3cc4-43d7-9807-20d0c0c24493"
        },
        "item": {
          "id": "a01695b5-e868-41f5-93ca-60d17ad53c16",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c449c40a-ac88-48dd-b55a-1644a1c4674c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b56d778-1e0c-46cc-96c8-7244b1ab91be",
        "cursor": {
          "ref": "3a2f013d-8dd9-4596-b891-598170781555",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cf4bc298-3bda-4f68-a219-01b3d5f124a2"
        },
        "item": {
          "id": "9b56d778-1e0c-46cc-96c8-7244b1ab91be",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "833468c6-f5d6-4a08-adec-db6a9aac6dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196a3570-26cb-4968-b54e-6f0ac33dfbc7",
        "cursor": {
          "ref": "a5b3bbe3-0880-4d31-8a2b-9c828163fcc5",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2a10b3d8-f596-4a97-b0b7-5ca927bac8d6"
        },
        "item": {
          "id": "196a3570-26cb-4968-b54e-6f0ac33dfbc7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0222e087-281c-4399-bd47-f3b7350ea0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db0f525-d874-464a-bd54-b9edb9cb03f6",
        "cursor": {
          "ref": "3a78e5de-82a3-473e-9a2a-29295ba463bc",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "58d4164a-8504-46ad-8d02-6be21cc97ab1"
        },
        "item": {
          "id": "0db0f525-d874-464a-bd54-b9edb9cb03f6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c98c1fb6-4582-47c6-a518-09796a67cd68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd45c0a-cbff-4ac9-b257-3dcd696e43e6",
        "cursor": {
          "ref": "77c9ef6c-81ad-432e-b5ab-54ee9a054527",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4936454a-0075-4fa1-9789-4c6769345927"
        },
        "item": {
          "id": "afd45c0a-cbff-4ac9-b257-3dcd696e43e6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7ae375f8-0bd5-454e-8501-4a6032db564b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8372b120-086c-4baa-98ed-2088796e48d0",
        "cursor": {
          "ref": "6193a946-69dc-4db2-b57d-8a5b89347fb9",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9c6c794e-f68f-4d77-b586-6d1b9ba390c5"
        },
        "item": {
          "id": "8372b120-086c-4baa-98ed-2088796e48d0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9eb9d162-8a46-47aa-b298-f883a2919203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312c6726-add2-452c-b98d-1bb6465d2393",
        "cursor": {
          "ref": "2054121a-d927-4e3f-9721-dfcc39134ada",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9041c353-12e1-472f-b95f-efa7f12811ae"
        },
        "item": {
          "id": "312c6726-add2-452c-b98d-1bb6465d2393",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2ff90d69-88e0-45f1-8327-7fd4fe2ce34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfecc594-da88-468d-960b-d92057e7f277",
        "cursor": {
          "ref": "afbec3a5-b6c9-4036-b50b-aaa14a4a5e4b",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1ff01e8b-c6c3-445b-b9a8-3bab7cebc836"
        },
        "item": {
          "id": "cfecc594-da88-468d-960b-d92057e7f277",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "36e73a53-7358-45c9-8fbe-ec9558368689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08cac0ca-9bcb-475d-af59-64f823fed1ad",
        "cursor": {
          "ref": "5c86fc52-9dcf-4a31-ba2d-b7d83c8b397a",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "29b491e2-2907-49d3-820f-097875ea6fd9"
        },
        "item": {
          "id": "08cac0ca-9bcb-475d-af59-64f823fed1ad",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7826e196-7aa7-469b-9b68-0b8ab5c760a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4caaee-ceb8-463f-9a6a-83bf3a10950c",
        "cursor": {
          "ref": "f5edd983-ad9f-4a2a-b1d9-a2a0ecf30d0f",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f12edc66-a4d3-4329-910b-e067bc83c250"
        },
        "item": {
          "id": "5e4caaee-ceb8-463f-9a6a-83bf3a10950c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bd6fd4a7-89b6-4028-b457-0394e581c16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72521eb1-0cd2-4f64-8ba2-056bce9e582a",
        "cursor": {
          "ref": "21e28a46-bebb-4822-bba5-5d6a938f010e",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "25557553-ccf3-46d7-b9ed-4139bd84a3d0"
        },
        "item": {
          "id": "72521eb1-0cd2-4f64-8ba2-056bce9e582a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "852c636f-cfbb-4cf4-9f50-f73b3050963a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9bcb88-8a05-41ba-aafd-8612e00799b2",
        "cursor": {
          "ref": "3c3fb689-15eb-4bea-a801-54570333d437",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cb9c69c9-eb16-4a70-bf04-1742296cb9c4"
        },
        "item": {
          "id": "7d9bcb88-8a05-41ba-aafd-8612e00799b2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "76a5b655-604c-45bf-9b0a-5b0606a33482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4075c5e-cd2f-4771-8f25-d2632daf756f",
        "cursor": {
          "ref": "1a4e427a-2029-4af0-af6b-f6820cbdf241",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f846ade6-1e88-4e66-aa37-8d018abbd137"
        },
        "item": {
          "id": "f4075c5e-cd2f-4771-8f25-d2632daf756f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "68a10d96-474e-4a14-8d60-be94a6ea70fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1545c7ac-d854-4514-8022-990c22c30ad2",
        "cursor": {
          "ref": "216b1b69-7b2c-4f98-a259-17742d33da1a",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d6d5e2b9-4a33-4410-b02b-50473c98683b"
        },
        "item": {
          "id": "1545c7ac-d854-4514-8022-990c22c30ad2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "929482c7-bcbc-41ab-a057-e07de818386c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a2e77a-f51a-4e3a-b5cb-bd9b9ddc35ee",
        "cursor": {
          "ref": "ed18251f-c1f2-4fc2-bb12-b43c6dffaa34",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "04abb769-65e8-4fb1-aaa4-c0f287570806"
        },
        "item": {
          "id": "28a2e77a-f51a-4e3a-b5cb-bd9b9ddc35ee",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6fd94f6c-82ca-44bc-ae6c-720b79c7b99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921e45f9-ab53-4be4-9ab0-520441514a1d",
        "cursor": {
          "ref": "baaeee49-21a9-47e1-a6a7-497f68c083da",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1a6f27d1-01e8-4a11-8f8a-5bb5dbaa63b8"
        },
        "item": {
          "id": "921e45f9-ab53-4be4-9ab0-520441514a1d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "296b9bad-2d8e-47b7-8c8e-f099d3308372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28576f34-320a-493e-938f-661ef76baf75",
        "cursor": {
          "ref": "5049ac33-e64d-4620-8eb5-fb4931db1801",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b0530304-43cd-4be2-89dd-cf09e2baa760"
        },
        "item": {
          "id": "28576f34-320a-493e-938f-661ef76baf75",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "004a8696-8d94-4a60-85eb-1903010d5bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251b7f12-44c2-4600-8af0-fd4c74d02f2a",
        "cursor": {
          "ref": "1b3b667b-a941-4a19-96af-93bd3b16c7b8",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "997c6305-8e31-41a0-b063-e0a2b425d7c8"
        },
        "item": {
          "id": "251b7f12-44c2-4600-8af0-fd4c74d02f2a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9f608c7d-ba19-4a9c-a807-7e55df3aa4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6274404e-22ac-4a57-9e14-a790b5f3e83c",
        "cursor": {
          "ref": "f6139bc5-5e07-4fe5-8167-24392441aad1",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a1426f08-9876-45d1-9a3c-5ccd7d1ec6af"
        },
        "item": {
          "id": "6274404e-22ac-4a57-9e14-a790b5f3e83c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5ebe4aff-2847-4b90-80ee-88350606a20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b9ba24-ae81-41a8-9d5e-e647b735e9cc",
        "cursor": {
          "ref": "b1bc6bca-d178-422d-aeaa-35342d7810f0",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3bbf1c0a-eaf3-45f8-abda-c020ff3fe2d7"
        },
        "item": {
          "id": "26b9ba24-ae81-41a8-9d5e-e647b735e9cc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d363edb2-00af-48da-b951-9458b1e13249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09e1726-ff5b-40ff-b344-ff370a02bc94",
        "cursor": {
          "ref": "cd102b93-b85e-4f47-9c9e-dacc00a35b25",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5a1ab016-1235-467b-b925-270535889bce"
        },
        "item": {
          "id": "d09e1726-ff5b-40ff-b344-ff370a02bc94",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cc19840b-6053-4ea0-b2eb-4b96f982b0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bebeae6-ad21-4662-beb2-bb058243579d",
        "cursor": {
          "ref": "382ca1a2-0c1e-47d8-acb5-870320ba400a",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cb945315-f984-47a2-8a70-ac4793b60767"
        },
        "item": {
          "id": "5bebeae6-ad21-4662-beb2-bb058243579d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4e4c458f-d9fa-411d-b7de-2aa56fe81e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411585f0-5cfe-45eb-a6fa-f8fd3c2a9b74",
        "cursor": {
          "ref": "2bec82aa-5594-4581-9fe5-d3a6c6f7aa48",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4529253b-d064-4a61-9070-30db324630a0"
        },
        "item": {
          "id": "411585f0-5cfe-45eb-a6fa-f8fd3c2a9b74",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "855bc9c0-b0ea-4c80-bc7b-248ae93afce9",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2faf13fd-7830-4eb7-a4d6-529a395c4843",
        "cursor": {
          "ref": "8b6e459c-cba6-481d-b2c1-fc1b586fb359",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f02e99f7-21eb-4bfa-bd39-e4a207f8861a"
        },
        "item": {
          "id": "2faf13fd-7830-4eb7-a4d6-529a395c4843",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8f9a6538-1140-4b43-b18c-56ba71a9e29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553b0900-2353-42a2-9010-cf6cc16fd8b5",
        "cursor": {
          "ref": "85022abe-60d5-486c-88a2-24b1de1820ae",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4d66331c-6fcf-4386-a1b9-0bea00edb1b4"
        },
        "item": {
          "id": "553b0900-2353-42a2-9010-cf6cc16fd8b5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "550c01a9-ef9e-476c-90a1-9b89159f0179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8bf137-7cc5-442f-bc38-9b856ba84b67",
        "cursor": {
          "ref": "c3fb1dbe-9bf3-4a15-9860-67d6b1935372",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b66b713d-27e2-424a-9d20-89c7b1788634"
        },
        "item": {
          "id": "ea8bf137-7cc5-442f-bc38-9b856ba84b67",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "408fc505-0977-4942-a3aa-ecd9b0dde944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6039eca6-0760-40ac-8a47-a534cca95dfe",
        "cursor": {
          "ref": "e86013c7-14aa-44f9-aad0-fa33b6311e0e",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ae7c7ffa-69c7-45b9-a63b-5dd9b420e98a"
        },
        "item": {
          "id": "6039eca6-0760-40ac-8a47-a534cca95dfe",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "732eb681-e96e-49ee-a563-451396c203e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5a7864-b21e-48f5-998e-5d6fbe19242d",
        "cursor": {
          "ref": "4c40b0c7-f00d-452d-b714-61d4e640474c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f1fddfb9-a6cb-4cb9-b036-b889cbed438b"
        },
        "item": {
          "id": "9f5a7864-b21e-48f5-998e-5d6fbe19242d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ab0873b7-b299-403a-9676-14110aa5762a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c856268-10af-4a21-8b6e-d066507a81f0",
        "cursor": {
          "ref": "e357d1f8-c60d-406e-adb0-dd40d8210192",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a7b307fe-d8e3-469c-986b-33e9547bc36c"
        },
        "item": {
          "id": "6c856268-10af-4a21-8b6e-d066507a81f0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "78053e86-179e-439f-a342-f204127dc798",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "e5a4dafd-ac92-49c2-a331-b2d6d5a368e8",
        "cursor": {
          "ref": "6f5b321d-9bdf-4e73-8759-84eea62d2f09",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e6b03456-1f6e-4f62-989b-9bc7f1e13fb5"
        },
        "item": {
          "id": "e5a4dafd-ac92-49c2-a331-b2d6d5a368e8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "59a298ce-1a27-4392-b1b7-e7723ea7bab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc8e27c-31c6-40dd-a44f-8fd2bef86717",
        "cursor": {
          "ref": "93882884-63a6-45ba-b7ca-9a781c4291db",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6917aa63-8cb3-4a07-8ea8-f19efaa4e5b9"
        },
        "item": {
          "id": "fdc8e27c-31c6-40dd-a44f-8fd2bef86717",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "440d1834-ed34-493f-abc8-4b9cf49bf39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4186dede-52f7-4d74-a88c-49bb7db75dab",
        "cursor": {
          "ref": "acf0a81d-0dbb-4ab0-a3bf-3f43dcd4b340",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9a098af4-49da-4519-a136-54112fd71364"
        },
        "item": {
          "id": "4186dede-52f7-4d74-a88c-49bb7db75dab",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "144e8aad-ff67-402a-b6f1-986653f45346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece77409-2af6-4fd3-90ec-1eb778e7c3c1",
        "cursor": {
          "ref": "3166d869-ed10-4ff3-8131-6a25b46fc9fb",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5e2a1f73-8203-4e98-b7b5-7180d26040a7"
        },
        "item": {
          "id": "ece77409-2af6-4fd3-90ec-1eb778e7c3c1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "627c3a60-8a38-4af1-bdea-4f6dbdeedba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cbdbc8e-0af5-47d8-9c9f-7e77d1a98d50",
        "cursor": {
          "ref": "37d3d4e6-8115-49f7-ac31-c1c72df53fc3",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2a68d203-7cb3-4c43-89ca-0326c44ef412"
        },
        "item": {
          "id": "4cbdbc8e-0af5-47d8-9c9f-7e77d1a98d50",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "275d6718-66c6-459c-92c8-31ad03b881c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f800b8b-7ee2-4939-9d75-e28d282fe074",
        "cursor": {
          "ref": "8e382480-e2b2-41ee-82b8-ca47a9335eda",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7b139646-f0ab-401f-a33c-3ae3b331d38c"
        },
        "item": {
          "id": "6f800b8b-7ee2-4939-9d75-e28d282fe074",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1a3fdcdc-3b17-4ab8-ae16-aad482cf9033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3cb32a1-ccfc-4361-8952-58beeebbb7b3",
        "cursor": {
          "ref": "3add6d5e-56af-4d7a-845c-802ed9db95fc",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "838c26c7-fa61-4d24-bddb-adda283120cf"
        },
        "item": {
          "id": "d3cb32a1-ccfc-4361-8952-58beeebbb7b3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "881fa097-d004-4800-bfd1-9a4c42a29964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ceee5c6-c25c-47fe-b532-a655eadc64ea",
        "cursor": {
          "ref": "19f607ba-c8ff-46c2-82a8-067e8fd626f7",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fa6baacf-6a2e-41b4-91b4-4746ca222429"
        },
        "item": {
          "id": "2ceee5c6-c25c-47fe-b532-a655eadc64ea",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "36697533-17ed-485b-af37-097d9b5dfcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6ae527-ba23-4473-aeab-d05c6fc7c9c9",
        "cursor": {
          "ref": "0aa22bd4-de1b-472e-af76-7de433e8eeef",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "197742ab-5202-48b9-9bfa-1e766f0fc1df"
        },
        "item": {
          "id": "ba6ae527-ba23-4473-aeab-d05c6fc7c9c9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7bcd4376-6025-4e30-b3c5-192922f8a9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "adfc2960-bd2a-48c8-984a-92128cc55463",
        "cursor": {
          "ref": "0494c80f-13ee-49d8-89e7-f52f06d5be1b",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a0b0d3b2-33be-406e-a503-200569c4268b"
        },
        "item": {
          "id": "adfc2960-bd2a-48c8-984a-92128cc55463",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "108c1d60-b649-4132-a1b6-6205760b0cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "801418ab-23cc-4466-b01e-60ed82480391",
        "cursor": {
          "ref": "844c24f2-044a-437e-9959-3ff8151e00a5",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2173932f-1341-4c85-acce-ababe9539d92"
        },
        "item": {
          "id": "801418ab-23cc-4466-b01e-60ed82480391",
          "name": "credentials_issue"
        },
        "response": {
          "id": "867155b0-3d2e-4cf0-a74d-fabf8e13e5f3",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e753268-a83f-4a05-ae3c-816b69c29406",
        "cursor": {
          "ref": "ff52a085-9505-4bac-978a-776c3bdb0233",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9ecaef57-a743-4983-8b40-1d415b72dd36"
        },
        "item": {
          "id": "1e753268-a83f-4a05-ae3c-816b69c29406",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "886f46b9-61d6-4deb-8113-04e99c129cff",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ad1e61-90db-4b39-9ee3-586fcb7e4229",
        "cursor": {
          "ref": "55c90c4b-11a5-45d7-85dd-46e28f625f7f",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "76f1fe11-0066-4a79-8cc3-b80a0b806686"
        },
        "item": {
          "id": "17ad1e61-90db-4b39-9ee3-586fcb7e4229",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a24f6ae7-4bae-4c07-bce4-f57e3d036d0b",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "599f3b43-946d-4c47-af2b-e0d5f904aee2",
        "cursor": {
          "ref": "ea5e3e45-e7c5-4612-a953-c5cbfb96123c",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7baaed27-f20d-4da6-8929-5eb05a1fe824"
        },
        "item": {
          "id": "599f3b43-946d-4c47-af2b-e0d5f904aee2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9f5276f8-346b-4376-9555-94a6df61fa0e",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "074fbe43-a0d5-4074-9f8f-edd10fc00b4c",
        "cursor": {
          "ref": "a250c4cf-eb88-433e-ac78-54238f0e2286",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "82856e16-e673-4382-9a31-b0b21ccda348"
        },
        "item": {
          "id": "074fbe43-a0d5-4074-9f8f-edd10fc00b4c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7eb26e83-2cf1-46b0-b1ec-7558bab88ca1",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "468c11e4-faa6-43aa-aa10-0d04d0bcf363",
        "cursor": {
          "ref": "3349156e-78dd-4d03-b4e0-d2290957aae3",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7cdf0741-c536-461e-b8b6-e05f4f4228f2"
        },
        "item": {
          "id": "468c11e4-faa6-43aa-aa10-0d04d0bcf363",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1b38c728-791d-4287-8fd7-647eeaf6f65d",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7fdae4-82c5-4ab1-bc28-2b0485fa2e2c",
        "cursor": {
          "ref": "debaf1ab-5018-4e8d-9da9-91e932570933",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b315b91f-a0cb-4029-8772-c6ac0a91f0e9"
        },
        "item": {
          "id": "ee7fdae4-82c5-4ab1-bc28-2b0485fa2e2c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4a656f26-dfe1-4a5d-8072-85d755474f30",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "ee7fdae4-82c5-4ab1-bc28-2b0485fa2e2c",
        "cursor": {
          "ref": "debaf1ab-5018-4e8d-9da9-91e932570933",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b315b91f-a0cb-4029-8772-c6ac0a91f0e9"
        },
        "item": {
          "id": "ee7fdae4-82c5-4ab1-bc28-2b0485fa2e2c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4a656f26-dfe1-4a5d-8072-85d755474f30",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "5b077a99-ab20-431a-a66b-12a607c111fd",
        "cursor": {
          "ref": "347e7eac-ccd8-48b8-88bf-2797a2843cb5",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c630d7be-ee21-44f4-928d-966fca457fe2"
        },
        "item": {
          "id": "5b077a99-ab20-431a-a66b-12a607c111fd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ef762b33-834e-4b75-b155-b44541bd2e79",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "1ab42eef-8b04-414d-9abe-c591ea71090c",
        "cursor": {
          "ref": "ab98835b-b688-4056-9904-f3bd90995006",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8073c54f-c827-4aa2-8302-0e668ae6bae0"
        },
        "item": {
          "id": "1ab42eef-8b04-414d-9abe-c591ea71090c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "781d7118-a45b-498c-869a-2e69afd2294a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e96b5b7d-cae0-4dfe-8eef-e8788057d9d6",
        "cursor": {
          "ref": "6f9c6cf4-88eb-41ae-9027-f64ef45002d3",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2321c38c-321a-4cb9-97cd-78f05e3243b3"
        },
        "item": {
          "id": "e96b5b7d-cae0-4dfe-8eef-e8788057d9d6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "eabe78f9-7a84-4633-879e-14f93d18b662",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "9eaeb9e6-f5da-4e77-90f7-f20574f1bee3",
        "cursor": {
          "ref": "547cfac1-4c62-4f3d-81c2-9256e1d1db67",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6a5cb60f-4c1f-47c7-805a-cd82b5e73a23"
        },
        "item": {
          "id": "9eaeb9e6-f5da-4e77-90f7-f20574f1bee3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "01e8e203-5540-40f7-8f09-4f8852d1015e",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "9d8a2317-3418-4812-a584-8ad66fbbd6c7",
        "cursor": {
          "ref": "c7f071a6-b003-472d-9d9f-09931397198f",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2f967feb-0f52-48b2-91cb-b3e8f0949313"
        },
        "item": {
          "id": "9d8a2317-3418-4812-a584-8ad66fbbd6c7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6163032f-0363-4fdf-937f-759f6d5f139c",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7a130141-bf4b-4d77-899b-8ed65b68fcc9",
        "cursor": {
          "ref": "a72d04e5-ba19-445a-9f9e-85034b9d4a07",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c9d9b422-c964-48a9-a846-96ff6dff3206"
        },
        "item": {
          "id": "7a130141-bf4b-4d77-899b-8ed65b68fcc9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "76fc4f10-1a52-4b13-89e8-442634f6844b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "18d49ad0-696b-46e2-b2b0-71ab13a13aa6",
        "cursor": {
          "ref": "3a11f034-324a-448d-86eb-424eddd3eaf6",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1c970209-2b4a-4e6d-a2bc-80dd27513809"
        },
        "item": {
          "id": "18d49ad0-696b-46e2-b2b0-71ab13a13aa6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8d96fafe-ccbd-4484-876e-9502c13e4e91",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "22d37b82-f64d-4adf-8779-d8b8003b9210",
        "cursor": {
          "ref": "c60f2fdf-e4c1-47b2-b2d1-2266c29612c7",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "43f13fe1-b50a-4bdc-b9b6-01f34c3b946e"
        },
        "item": {
          "id": "22d37b82-f64d-4adf-8779-d8b8003b9210",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5ee67fbb-0336-4a1c-9f4e-ce18fafae2fc",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "752952d2-2b12-482e-9805-d76a637a3848",
        "cursor": {
          "ref": "01c692f2-9327-408c-a03c-3173ae83cd95",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7c8a1af9-3d09-4165-9004-b6a491828ea1"
        },
        "item": {
          "id": "752952d2-2b12-482e-9805-d76a637a3848",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "caae67de-7a64-44bb-b150-91a6ae9f4b67",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f6af397d-4d1e-4f67-9193-a15699b61116",
        "cursor": {
          "ref": "0bb6110c-8f62-4e92-8682-30f930b8909e",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0e44b84b-61dd-4754-aed6-2c3ec1ae26d6"
        },
        "item": {
          "id": "f6af397d-4d1e-4f67-9193-a15699b61116",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad7240da-64f6-4ff2-a50b-1e9a29cd24a8",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "f776dc70-9d28-4588-a223-a0bc9d661bca",
        "cursor": {
          "ref": "684b500b-a137-4076-8bae-df2f42d10672",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ab97a8ba-0bd6-4f45-a774-e1664f5b8a21"
        },
        "item": {
          "id": "f776dc70-9d28-4588-a223-a0bc9d661bca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0253a305-d8e9-4ee7-be19-62d7205a58b9",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e2ab5448-db6a-4b74-b984-f8d3eb20df93",
        "cursor": {
          "ref": "9042bd3c-c722-4d20-ab93-a079252dc5fd",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e77ce3e9-48a1-4d96-b616-9253a574e996"
        },
        "item": {
          "id": "e2ab5448-db6a-4b74-b984-f8d3eb20df93",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "11749484-d9c3-4e78-8ce9-a979b4e5662c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6814257d-cfeb-4490-9799-da299a0bea5b",
        "cursor": {
          "ref": "46641f8b-eab3-4447-9ae0-870552f16cfb",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "658c7768-928b-4732-8ac4-9deb88b43e9b"
        },
        "item": {
          "id": "6814257d-cfeb-4490-9799-da299a0bea5b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "835c9218-1aaf-4a52-b498-7764579a43fb",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "00926608-c1ec-4947-998a-1054bfce83f2",
        "cursor": {
          "ref": "89215572-d51c-423f-9fb5-21437e1ab7e3",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3cd5bf5d-0e97-436f-91ec-ada51d8afc79"
        },
        "item": {
          "id": "00926608-c1ec-4947-998a-1054bfce83f2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2fa780a7-7e53-476c-8cf9-d6794e36c1bb",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "001b139e-3427-4d6b-afac-73d566ec0b38",
        "cursor": {
          "ref": "59b1b080-7d7c-4a7c-88ad-d87b15a271b9",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "853bb3e4-7f1b-40a8-bad7-737323403b1e"
        },
        "item": {
          "id": "001b139e-3427-4d6b-afac-73d566ec0b38",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d8812a35-cb47-42b1-bc40-850c610846fb",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "e8c80d31-ce5f-44a0-8ab1-c964c2070174",
        "cursor": {
          "ref": "c92306c5-4bd9-4d06-a3d5-723f2c9828e8",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "931a42ea-46c5-465c-bc94-1648fb01b25c"
        },
        "item": {
          "id": "e8c80d31-ce5f-44a0-8ab1-c964c2070174",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "80a706ce-10ed-4539-b7db-0d06572122d7",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "0226e7ac-d5d0-48d4-8fd9-e73aa4d83930",
        "cursor": {
          "ref": "67f8b908-e931-4b40-b84d-a5dd57150813",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8da6f063-6c10-4959-a36f-7ae41734c26b"
        },
        "item": {
          "id": "0226e7ac-d5d0-48d4-8fd9-e73aa4d83930",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "404769c7-59d5-4ed7-9e8a-1a86fce00106",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5b7f7c6f-7a06-4c7d-b425-a787f64e58b2",
        "cursor": {
          "ref": "bf794114-fb85-402c-b117-fe851e055e3e",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dc1908e9-b536-4da4-8c6d-39ef7d658b5f"
        },
        "item": {
          "id": "5b7f7c6f-7a06-4c7d-b425-a787f64e58b2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "04fa8ed7-37dd-4d12-b0a8-fb7eb6478a48",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "522189ae-10c5-47d5-8c75-4b81e3433a73",
        "cursor": {
          "ref": "4e796eea-1488-4dd5-934f-6f215641d702",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "63793f0d-4f34-447a-bc14-75d45f3e0e0a"
        },
        "item": {
          "id": "522189ae-10c5-47d5-8c75-4b81e3433a73",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "54627cef-758a-409f-a756-03c9fe6e2258",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "2ceaaaef-71c1-4a6d-838d-554b51e52851",
        "cursor": {
          "ref": "7a4f782f-bc0d-4dc8-9712-b8fd6542f24f",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7abcc7aa-7bd7-4415-96f4-37eb1c363fcb"
        },
        "item": {
          "id": "2ceaaaef-71c1-4a6d-838d-554b51e52851",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "df94ad1f-555a-41a7-a504-22a22ec3520b",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "58df9017-165b-449e-a5d5-5464492fd81d",
        "cursor": {
          "ref": "5f225088-674b-4aa5-95d9-5868c9015275",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "33998b6d-9493-4ff5-8e4b-9d86b76ad75d"
        },
        "item": {
          "id": "58df9017-165b-449e-a5d5-5464492fd81d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "168741e0-b789-43ae-a409-fdc30301c499",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "477974ff-e01e-4c9b-b656-018c86ad76c6",
        "cursor": {
          "ref": "668cce7e-32a6-4f4b-9248-afda8ed852f4",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cf2505ed-fefa-453d-bd25-419fd16c9985"
        },
        "item": {
          "id": "477974ff-e01e-4c9b-b656-018c86ad76c6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5bbdea03-eaa6-4806-875d-9b6d5acda343",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "097fa9b6-4a6c-4a77-85ec-02b837e40b38",
        "cursor": {
          "ref": "a1bc5e86-0f34-4c45-aebb-5fafdbf4650f",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4e8a56a2-13b8-4d12-9111-c2dc9a3ec4a8"
        },
        "item": {
          "id": "097fa9b6-4a6c-4a77-85ec-02b837e40b38",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f1e48f62-63d8-4526-baaa-e0ee68f9ee56",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "9a2a78f0-cf72-44ed-8a13-bdf66518d04b",
        "cursor": {
          "ref": "aa732f62-23bd-4622-aee2-442862097bc5",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5e8f6e84-beff-4446-baa7-4737a7abb937"
        },
        "item": {
          "id": "9a2a78f0-cf72-44ed-8a13-bdf66518d04b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "26559b47-94ef-4a40-9ed1-d6e2a729cabf",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "aac979dc-4df0-4b5a-aef2-f670c07c9752",
        "cursor": {
          "ref": "5819d022-ee69-4e9f-9d75-3f630645bb86",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f25cc384-7073-4212-afe9-134ac386dc17"
        },
        "item": {
          "id": "aac979dc-4df0-4b5a-aef2-f670c07c9752",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bc3f7383-1a16-4f77-ad94-d6da3bf9d2ed",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "8221833c-5397-4269-bfbd-d3682dc2f25d",
        "cursor": {
          "ref": "2e831f04-4959-4bea-8b10-5addc9906f5f",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6463222e-a212-498b-a6e0-4fa7f1c5c0d7"
        },
        "item": {
          "id": "8221833c-5397-4269-bfbd-d3682dc2f25d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f454c384-1f79-48e0-a0af-be0a5d601cd6",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "a241acf5-3d8d-4203-9647-2a17b72281e0",
        "cursor": {
          "ref": "b0e4278f-c7ef-443f-8b5e-a841f3a9aacf",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3d6f55f6-c4ad-497d-836a-c2fd823cf9c8"
        },
        "item": {
          "id": "a241acf5-3d8d-4203-9647-2a17b72281e0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "db60018f-947a-44f1-a091-52ce5c80d6ad",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b3a36e02-cb5f-4f44-b0fe-ce5115139ee2",
        "cursor": {
          "ref": "b1eb6e53-86a3-4288-835c-fdeee3634564",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3cff5627-45d6-482f-9695-290332240aa6"
        },
        "item": {
          "id": "b3a36e02-cb5f-4f44-b0fe-ce5115139ee2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0dc5c43b-eae5-4735-8eb6-b9a6e6a273a3",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "e2e497a6-f1e2-4888-8789-146001e052a8",
        "cursor": {
          "ref": "ad7371f5-7342-409b-ae1b-6cb9a0fbcdbb",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e49feeb4-92d9-4aef-b16b-c655191cf4df"
        },
        "item": {
          "id": "e2e497a6-f1e2-4888-8789-146001e052a8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "425312b5-a8f8-4ed7-bae9-71c614a721e0",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "669de9af-b5fa-4d82-8e1e-8a3944902320",
        "cursor": {
          "ref": "115507ae-1716-4678-bc29-2ae738e03220",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "518bf5ac-f225-4e41-b197-ba0494f41b86"
        },
        "item": {
          "id": "669de9af-b5fa-4d82-8e1e-8a3944902320",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "675a8dbc-d371-4555-8ad0-c50a1a3eda0d",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "33b79d1a-b6cb-41fc-a3db-6054ad14f94c",
        "cursor": {
          "ref": "384d01c0-0c83-4607-92b0-0bb1c4ce2370",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ab4785a2-184d-4f3a-a781-6ba5023ac68c"
        },
        "item": {
          "id": "33b79d1a-b6cb-41fc-a3db-6054ad14f94c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "29df64c6-9531-4ad1-a9f3-cc51e5068969",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1ffce5a7-2eea-4503-8ee8-0691659ba612",
        "cursor": {
          "ref": "2fa04672-0ba4-402e-b319-a9093c428f7a",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6d12e556-be7a-4870-a60f-c780440ab583"
        },
        "item": {
          "id": "1ffce5a7-2eea-4503-8ee8-0691659ba612",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "690c267b-9b9b-4436-a74c-86fdf5263269",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a8904d-0220-463c-a2ed-5acf3fde987f",
        "cursor": {
          "ref": "1d97a575-a4ee-41a7-9ebe-7fdafa2781be",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e45db4c4-9c73-4d85-b593-ac7ee40404d7"
        },
        "item": {
          "id": "73a8904d-0220-463c-a2ed-5acf3fde987f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ae1fe67e-a307-4562-bf2a-52b98e0c9ba0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b45d846-5d1b-4049-aba5-ce91548c1c32",
        "cursor": {
          "ref": "3388030f-6388-49db-b62e-9d7f2f9a9df7",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ec289003-fab4-4f6f-8695-3bf3b971bf28"
        },
        "item": {
          "id": "7b45d846-5d1b-4049-aba5-ce91548c1c32",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fb5fd096-caf4-4346-ba3d-13286c82ea6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b45d846-5d1b-4049-aba5-ce91548c1c32",
        "cursor": {
          "ref": "3388030f-6388-49db-b62e-9d7f2f9a9df7",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ec289003-fab4-4f6f-8695-3bf3b971bf28"
        },
        "item": {
          "id": "7b45d846-5d1b-4049-aba5-ce91548c1c32",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fb5fd096-caf4-4346-ba3d-13286c82ea6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df960ee-5a5b-4ed8-9f05-0ab3f6914076",
        "cursor": {
          "ref": "27e581c6-e9a9-4b17-ac99-4c9cf0a9ea29",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0fbf2dc9-e834-4848-8af1-eba89f2e9510"
        },
        "item": {
          "id": "8df960ee-5a5b-4ed8-9f05-0ab3f6914076",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "843c0b86-7471-4673-84a0-4e082364990d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3093ddd-6aab-4942-b3fd-fa0eda955208",
        "cursor": {
          "ref": "bbbced77-04d5-4e68-af3a-13b72449340f",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d4ad4d3e-7fd2-4c36-9339-94949e783376"
        },
        "item": {
          "id": "e3093ddd-6aab-4942-b3fd-fa0eda955208",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8151f7b5-1663-4990-8396-5b9462843d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f42104f-2d8f-41c1-a981-e5ba0ab3054a",
        "cursor": {
          "ref": "c1116675-4d2f-4ec1-8087-e0f866298e7a",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5570ecd0-84bf-4db3-8abb-9a8d26843aa1"
        },
        "item": {
          "id": "4f42104f-2d8f-41c1-a981-e5ba0ab3054a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "065faa36-1835-472d-b2e5-a8011b98141e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d901708-7251-4020-a40c-2f4434eb0e2e",
        "cursor": {
          "ref": "ea7268fe-bf62-4042-834c-498a10110274",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a57483b7-c6e0-41ce-a3f6-bb199daf69ad"
        },
        "item": {
          "id": "6d901708-7251-4020-a40c-2f4434eb0e2e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e8a4c315-c95e-4d28-92db-07c64149ae48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d67982-5ebb-41e8-bd4d-93b22159a36b",
        "cursor": {
          "ref": "dbaefe6f-3b69-4d41-9751-de93b532711a",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dfd0a142-3a67-417c-a6ed-5e67f7b56501"
        },
        "item": {
          "id": "07d67982-5ebb-41e8-bd4d-93b22159a36b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7499e9cf-ea8e-4782-a15f-16a96ce56bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db99c414-bfe2-4397-978f-966b3c9054e3",
        "cursor": {
          "ref": "88eada1e-87ba-4709-9607-60f580dcc018",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d335e5d0-f745-4e14-9df9-448772624b8a"
        },
        "item": {
          "id": "db99c414-bfe2-4397-978f-966b3c9054e3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8cedc2ae-0667-48b6-9f2d-f4525de40faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 592,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10546d6-af8a-464b-9a1e-f4d9a9c15fa2",
        "cursor": {
          "ref": "cae47760-7188-40ab-a60e-6f2430163397",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cd41f4c8-e404-4e7d-84ed-02a5a23da7e4"
        },
        "item": {
          "id": "f10546d6-af8a-464b-9a1e-f4d9a9c15fa2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "be2a0847-421d-4962-bac1-23772a713308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3afd425-2d9a-45d6-8d8a-739c43556f8c",
        "cursor": {
          "ref": "bfbd60a4-cf44-44d7-897a-911135f7d597",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "63d499b8-8d66-416c-b048-95604f29b5e9"
        },
        "item": {
          "id": "f3afd425-2d9a-45d6-8d8a-739c43556f8c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f8c1c92d-edd7-4b3e-8cd0-62686a148b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718acf1f-188c-4a16-8661-04611cdf3a4e",
        "cursor": {
          "ref": "b52b0c55-6cf2-40ed-995f-283a55e2b5bc",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "96af6ee4-f211-441d-8001-b18c5927a73a"
        },
        "item": {
          "id": "718acf1f-188c-4a16-8661-04611cdf3a4e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b379c0e1-6349-4032-89ce-ffc71181491f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56233b2-2539-4b5b-a454-ebe9160ade40",
        "cursor": {
          "ref": "2c76f7fe-b878-4815-9247-8f2e9824e3c9",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "dbf6bf27-9b96-4673-a1b3-d9e8a627254e"
        },
        "item": {
          "id": "f56233b2-2539-4b5b-a454-ebe9160ade40",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8ca78a74-ba88-4345-8924-a0cbea1dec9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fbc2c6-f0ec-4616-9c16-4c58da231ab5",
        "cursor": {
          "ref": "4981f97c-81f4-4c4d-93a4-1e0433298f5b",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "54d72f92-f2a8-46b8-b90f-d8169fa87070"
        },
        "item": {
          "id": "15fbc2c6-f0ec-4616-9c16-4c58da231ab5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bbcff659-c0c5-4e51-8717-eb26d1587788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcfe20c0-8e7d-4880-ab32-a33c89a5869b",
        "cursor": {
          "ref": "32525fad-b0f7-4874-bb6e-2baa96907767",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3678d1cf-ab64-4fff-b292-70b6caa4e684"
        },
        "item": {
          "id": "bcfe20c0-8e7d-4880-ab32-a33c89a5869b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8e6a12ce-9e3f-4052-b9aa-b61eceb2845e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b3906c-28fd-4d38-a46f-dbc3b2599377",
        "cursor": {
          "ref": "df0729cf-5a81-45e0-b886-d577aa7aac12",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "24d3fb2e-053f-447f-b57e-86391023be0f"
        },
        "item": {
          "id": "94b3906c-28fd-4d38-a46f-dbc3b2599377",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "58aa2b84-3472-435c-b290-f760f3de6a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec3046b-0bc7-425b-b70f-1578de98f291",
        "cursor": {
          "ref": "4a38230d-27b9-4e8b-b753-7e0edbc1cf91",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a22132d7-0dca-4269-91cd-4f1b441a2f32"
        },
        "item": {
          "id": "4ec3046b-0bc7-425b-b70f-1578de98f291",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "527e7106-daef-4070-946a-0550c92be8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ddc71a-7fe6-4d72-9f5a-62ef0c1393d7",
        "cursor": {
          "ref": "cc39e504-3cc4-4854-817e-4c6e0e7dffb8",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1242262a-c8ef-40af-afa4-13e3dcba0455"
        },
        "item": {
          "id": "d9ddc71a-7fe6-4d72-9f5a-62ef0c1393d7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4ac4a93b-3428-4720-a0ae-49234abda77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baac7e5e-e291-4b17-8791-7257ec66170d",
        "cursor": {
          "ref": "550059ac-5092-4ae2-b2c6-dc158b0a9690",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2adbdcae-149a-4081-83e8-0ec6294759ab"
        },
        "item": {
          "id": "baac7e5e-e291-4b17-8791-7257ec66170d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7edb2c32-ac1b-4534-8107-b204a3ba127b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8de6c3-ddf5-424a-9794-b375d7153230",
        "cursor": {
          "ref": "7345db10-4405-4b23-9a44-a38d132204b4",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bc2eed77-0f21-43e6-a045-f672e42ef113"
        },
        "item": {
          "id": "3e8de6c3-ddf5-424a-9794-b375d7153230",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "231c7d1a-19a0-457d-88ec-2c9e56710059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c261f6-aeca-4145-bd65-64485a3472ac",
        "cursor": {
          "ref": "66e73d73-9336-4a72-b190-5a02241d7456",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "900ed1cd-2e44-471a-ab4b-731e8aeef9f4"
        },
        "item": {
          "id": "52c261f6-aeca-4145-bd65-64485a3472ac",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "12fc9935-5c97-4ead-849e-4a4e0a2281a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714fd209-5951-45ca-a21e-d9e7f2e176fd",
        "cursor": {
          "ref": "2c8c5d20-d886-4344-b316-773a9c1bec36",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "375d49f1-73e4-48a8-9383-e3c938f59d68"
        },
        "item": {
          "id": "714fd209-5951-45ca-a21e-d9e7f2e176fd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8a57d452-ccb2-4428-8076-e53049565e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2766d47e-5a0e-4f57-98b8-40f3b2953186",
        "cursor": {
          "ref": "018c4e1f-1e44-42d7-9520-50e93d1b09ce",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d96cc47b-a46b-424f-9ade-3908e2f04416"
        },
        "item": {
          "id": "2766d47e-5a0e-4f57-98b8-40f3b2953186",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3a968b36-2b66-4259-abd1-99a48d0f73ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a33fe72-d7c6-4439-a5d5-26a36845e3b6",
        "cursor": {
          "ref": "cb5daf1d-c2d1-4d5b-af37-20a534f553b5",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c523ddfe-761e-4b84-8abc-703a7c77dade"
        },
        "item": {
          "id": "5a33fe72-d7c6-4439-a5d5-26a36845e3b6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "430d6588-12b5-45be-802b-eb623407cf35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b551fa89-f484-4c84-a9b3-5dbe087b10de",
        "cursor": {
          "ref": "50edec43-d45c-489a-b0f8-9e8f1cd8f620",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ddbff8a0-301f-448b-b7b4-12e1ce6df420"
        },
        "item": {
          "id": "b551fa89-f484-4c84-a9b3-5dbe087b10de",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bf688574-18d3-4733-b8ca-ff8e942adabe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5003d934-685d-4f4a-ab12-bc36997fe51b",
        "cursor": {
          "ref": "a89ab66e-b045-45e4-af20-d203f25d79d3",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "18ea3c78-0d9d-4881-881c-a2e970584cd8"
        },
        "item": {
          "id": "5003d934-685d-4f4a-ab12-bc36997fe51b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "41777548-6916-4117-810b-81224c72c305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a06e279-ef59-4523-bea4-20015bb8f0e2",
        "cursor": {
          "ref": "a94df95f-c07a-4608-a000-4fe78dca6ccc",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a950ef02-1f18-4353-918c-58f11fdb6008"
        },
        "item": {
          "id": "6a06e279-ef59-4523-bea4-20015bb8f0e2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b1a8f3ad-468f-469f-b26c-49e5da1ad883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987a242d-198b-459f-bdfa-e2a337946ba3",
        "cursor": {
          "ref": "d1f419fd-a3c9-4241-bf13-494ab3ebf0b0",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cabd18c2-6580-4384-b7e6-c4cba29e88d7"
        },
        "item": {
          "id": "987a242d-198b-459f-bdfa-e2a337946ba3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "08f244c2-fd66-47d9-9473-50c7cf90772c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb463fcb-0804-4e56-b1a2-121c20b809da",
        "cursor": {
          "ref": "453723a9-0539-42de-a793-a42a36453364",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b14e4618-b80a-4d41-a758-03ea18a70122"
        },
        "item": {
          "id": "fb463fcb-0804-4e56-b1a2-121c20b809da",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c9555514-887e-4653-a9b6-76c1c99202fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b42173-129b-418f-bffc-3b5d4612c81b",
        "cursor": {
          "ref": "a1d1cda1-97d7-4536-87b0-fa70d4096bfe",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d14914fc-8bf3-41bd-a6d0-9aff19908976"
        },
        "item": {
          "id": "e1b42173-129b-418f-bffc-3b5d4612c81b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3716d08e-dd16-47f8-a7bf-f965491f29c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8e77c7-727d-4c27-96e6-66a10c9db0fc",
        "cursor": {
          "ref": "f3c3120a-a6a2-4de6-8327-c7692c658482",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c5a43707-5522-4e8d-a12d-b2df84a23bcf"
        },
        "item": {
          "id": "6f8e77c7-727d-4c27-96e6-66a10c9db0fc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "55617bcd-3f7c-46c2-bb65-c063c7c29f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27fe25f-d752-4ad1-892b-4ff9fceb6098",
        "cursor": {
          "ref": "607a6569-07be-4242-b72c-61c18e7e6555",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "39e1f231-ff09-4401-9fdb-86e050d3636b"
        },
        "item": {
          "id": "a27fe25f-d752-4ad1-892b-4ff9fceb6098",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "73c39ca0-917e-4890-8acc-bec92b7dd164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4037030-2f7d-42a4-aec5-83218089d2e6",
        "cursor": {
          "ref": "721af530-6b5a-4644-aa5f-b40d55909c36",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "cf2017bb-dac3-4f1f-b05b-4b1e67632300"
        },
        "item": {
          "id": "e4037030-2f7d-42a4-aec5-83218089d2e6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "807140d9-eece-4d3b-80d7-fa799cba7a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046c8a68-b14c-463f-9a52-e1e259d6757d",
        "cursor": {
          "ref": "be25a341-4249-45a5-80af-698b9752dfff",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b8dd69c4-e9f8-4694-9892-75858f09c0c5"
        },
        "item": {
          "id": "046c8a68-b14c-463f-9a52-e1e259d6757d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5257065b-ae26-44c1-9aba-3a726f74ac96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef6db8f-5601-4239-b331-b39a9c7b50f4",
        "cursor": {
          "ref": "683d54bb-fb74-4235-9c96-c6587ea77b74",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1fbbdc6d-1afe-45fd-932b-185e0cbf42da"
        },
        "item": {
          "id": "aef6db8f-5601-4239-b331-b39a9c7b50f4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "36a1d0f3-c8d7-401b-94f8-3eae34532dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b3fa4a-c578-4d0f-bc24-a8a251f60975",
        "cursor": {
          "ref": "abd2d812-1dce-4426-bc7c-aadf4a9ec13b",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "490beb99-76c3-4ad9-b3c8-cfb3437f31d9"
        },
        "item": {
          "id": "b5b3fa4a-c578-4d0f-bc24-a8a251f60975",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "303b57cc-ea0d-4d0e-b6ec-29d92ff0896a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96727c36-e23e-4a42-b086-2538955de31c",
        "cursor": {
          "ref": "c2df747c-f74b-463f-a5f1-f085182e0d67",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "22dd1e18-2907-4ab9-9c0e-700c7fae7238"
        },
        "item": {
          "id": "96727c36-e23e-4a42-b086-2538955de31c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6373f374-98c5-49ed-b826-9686c0a47f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc17383-93c0-49a0-90fb-54c8f0d787f3",
        "cursor": {
          "ref": "2dd9aaa7-178b-4abb-bd7f-1ee405c693a4",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4a8935d5-7eea-4479-9545-9f4e22ee41c0"
        },
        "item": {
          "id": "ddc17383-93c0-49a0-90fb-54c8f0d787f3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "96e3e7a6-3dd1-4c5f-a6e1-2522e7c977ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bded38-cc93-459f-9d99-2f21906678f7",
        "cursor": {
          "ref": "1989133f-b0a2-4e46-82e4-5c8135d0fe61",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "770e4a0a-2c2f-4005-9068-45fa414a1401"
        },
        "item": {
          "id": "e1bded38-cc93-459f-9d99-2f21906678f7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d627ebfb-0696-4633-a88f-70aad40e2fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067e17ed-ab5b-427f-93a3-915e71353760",
        "cursor": {
          "ref": "7ea46519-e7f2-4cf7-be4e-a65fb43727fa",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9024be0e-3c7a-42ce-b093-ca5c0b41bd74"
        },
        "item": {
          "id": "067e17ed-ab5b-427f-93a3-915e71353760",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "181de063-8e37-4ed9-b80a-81326ce025c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db31dcfb-2086-40d2-b303-07e9be927547",
        "cursor": {
          "ref": "c423a20e-6191-45ff-ab61-146142738921",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "db8ef15d-9597-4aa9-a6b6-cc7797f39cf7"
        },
        "item": {
          "id": "db31dcfb-2086-40d2-b303-07e9be927547",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "682c2c46-cee1-44ce-b660-1c747ef409f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ac3bc5-d3e9-4939-b599-a9d8af1eb86b",
        "cursor": {
          "ref": "09dbde31-c712-4ae8-93a9-08fc20a5de42",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b9f4c97b-b529-4640-b384-d7f3480413af"
        },
        "item": {
          "id": "99ac3bc5-d3e9-4939-b599-a9d8af1eb86b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f1d88b44-5d99-41af-bcf2-a853f71d9f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc8e684-c526-4fc9-b3e0-2c9e60101885",
        "cursor": {
          "ref": "51fd10a5-6cbe-4234-9772-3b0ed0652a58",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7c02d6ca-3746-47ff-aaa5-738397183a4c"
        },
        "item": {
          "id": "afc8e684-c526-4fc9-b3e0-2c9e60101885",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d8d49176-a68b-478b-a2b4-f63a023e70ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ae685e-3dfa-4249-ae73-b2f842cba606",
        "cursor": {
          "ref": "c848afa3-0012-47e1-91b6-cfde0dc10382",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "02bf16f9-b4a3-4e40-8e82-c6d72db1ee06"
        },
        "item": {
          "id": "90ae685e-3dfa-4249-ae73-b2f842cba606",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bb920065-64b9-4934-8cce-130f8fb96c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a27d16c-c459-4a79-b86e-bc5974b4653f",
        "cursor": {
          "ref": "486b3b6a-b650-4a95-9d04-c32fe2710cd6",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3e2a7639-33ed-4e53-9253-f28fbeb439ab"
        },
        "item": {
          "id": "5a27d16c-c459-4a79-b86e-bc5974b4653f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8b98a6ea-2d01-48fc-a893-bef8bebd89f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e322cc5c-f02a-4781-9eb5-6947284a527d",
        "cursor": {
          "ref": "ee08c52d-8586-4054-b9f2-53781995128b",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e06afdd7-76a4-4585-ab89-3b1282c6bcc4"
        },
        "item": {
          "id": "e322cc5c-f02a-4781-9eb5-6947284a527d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9d49c81c-50f0-457e-be54-a159d0c076ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de8467c-e517-43c7-bfba-00419bcc71fc",
        "cursor": {
          "ref": "b57b01cb-55d8-48cd-92ac-8215ee619691",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9a812252-146b-4f92-b650-4bb7f24bdeed"
        },
        "item": {
          "id": "2de8467c-e517-43c7-bfba-00419bcc71fc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fd8b2069-477f-45ed-826e-e2ea06eaaaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00897fa7-27f4-4fbb-9466-1a323a2b4412",
        "cursor": {
          "ref": "2f4835f1-30d3-4b4f-82ac-0ca02dce23d0",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a51c756e-c814-4ae7-8577-45f4ae8012aa"
        },
        "item": {
          "id": "00897fa7-27f4-4fbb-9466-1a323a2b4412",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2170b026-98f2-492b-8c95-d3a48efbb89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8ceb37-81c5-484b-bf77-487018da4b7e",
        "cursor": {
          "ref": "2d820da5-dceb-4b41-83a2-d6cd3167aa0f",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "240ee515-2017-480e-bfe7-8a995dee680e"
        },
        "item": {
          "id": "5c8ceb37-81c5-484b-bf77-487018da4b7e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5a9a7cd4-6271-48ad-8806-5c4fae4dfec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64608f7b-fcb1-48a1-8433-601c6c3ed588",
        "cursor": {
          "ref": "51015a8e-013b-4b8e-9c37-01d6fe28da83",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "09c2c167-7e21-488a-97c8-52f6aa3a8521"
        },
        "item": {
          "id": "64608f7b-fcb1-48a1-8433-601c6c3ed588",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d1334082-c732-4991-9cc4-f4a29b05d127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e50db0-dfd7-4aee-98c6-02856fd3d3d3",
        "cursor": {
          "ref": "6c6d671b-94ce-49eb-ad70-4d224db87d13",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "91a56e93-5f8b-45e5-b22b-1a7f1a3fb418"
        },
        "item": {
          "id": "a0e50db0-dfd7-4aee-98c6-02856fd3d3d3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "faf241a0-7e51-4c8d-98ae-05c98b8c16a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3bfde4-7dd2-47e9-9392-7b1697e83ea5",
        "cursor": {
          "ref": "179d9a5f-ed9c-4097-b0ff-f7332ff1354f",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6acf9f08-69f2-4bcb-8f0c-67be723ebf84"
        },
        "item": {
          "id": "6c3bfde4-7dd2-47e9-9392-7b1697e83ea5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3b35ff46-964a-4e05-b712-9d62bbf0d1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10416c2a-60c7-4e49-bca7-6e4b02bbc423",
        "cursor": {
          "ref": "870d9cb9-7e82-4f4a-a676-04458cdda5cf",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6d83b63c-0e41-4087-8618-395f0f06a512"
        },
        "item": {
          "id": "10416c2a-60c7-4e49-bca7-6e4b02bbc423",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d36aef3a-4865-4c4c-b9b5-e6a3ed71d6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883b6365-84c1-43d6-aa9b-8939b142e71f",
        "cursor": {
          "ref": "4207620e-95c8-4b29-8d64-8042a7f041f9",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "808252e6-7070-42b4-a715-a69aed2d7f34"
        },
        "item": {
          "id": "883b6365-84c1-43d6-aa9b-8939b142e71f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ef9717a5-f480-4968-af79-71e79938b804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d974ef87-ee7b-419c-a283-6252c18d9543",
        "cursor": {
          "ref": "a336ef46-e8bc-419b-8920-a9aee644a980",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3c83a529-d30d-4af9-8be7-c4c96491df7c"
        },
        "item": {
          "id": "d974ef87-ee7b-419c-a283-6252c18d9543",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "208b2cea-1042-4ae8-b66f-c407a9fe561f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f734cd-9d95-40bc-b095-dcf26303519c",
        "cursor": {
          "ref": "09d5f1da-3840-4753-aa49-1afca32f9b35",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a61c834b-7dd9-4c03-ae7a-6ccd980821c1"
        },
        "item": {
          "id": "74f734cd-9d95-40bc-b095-dcf26303519c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d7c59ae7-136e-43e4-9603-f4f4742cd3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ea5735-476d-43be-a517-a40be1dea2ce",
        "cursor": {
          "ref": "899fe898-1612-46d6-9ccd-8d1cb3fcf9a8",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "66f8d002-6279-4e8a-a030-b216e92667d6"
        },
        "item": {
          "id": "51ea5735-476d-43be-a517-a40be1dea2ce",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a3c31a85-4075-4ba4-91a1-965ad87fadc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3c9c31-2e54-413f-87f2-65bfc66a6dbb",
        "cursor": {
          "ref": "492f8813-c934-4676-a723-8cf59b5c114e",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "773270d2-0ec7-4f5f-87af-a8ed1f3d084a"
        },
        "item": {
          "id": "6b3c9c31-2e54-413f-87f2-65bfc66a6dbb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6323d514-88aa-44a8-af37-41a23b69a2bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2777e3e4-d6e2-483d-98a2-fb81cab1352f",
        "cursor": {
          "ref": "ad57dd37-5b66-4059-8864-cf6e7e56fe5a",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e02eb0ff-9e56-4aad-a227-667f29319b66"
        },
        "item": {
          "id": "2777e3e4-d6e2-483d-98a2-fb81cab1352f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6fe055ce-65ca-4ab8-b83c-8797aea51e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c07ac6d-730a-4dd0-8c3d-a6c03911d131",
        "cursor": {
          "ref": "e5f04b65-3a0b-4f3c-93b1-9261fbf775c7",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d1d285d3-f3fa-4f5b-bd58-96aecbd861a0"
        },
        "item": {
          "id": "4c07ac6d-730a-4dd0-8c3d-a6c03911d131",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e7f9f64e-a26b-48da-b94b-df9ba59b3f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8e81bb-001b-4d77-a080-a5a690de32ee",
        "cursor": {
          "ref": "36715043-9d80-42c2-8dff-3f1d67d8d6c7",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "745b2ce7-572d-4c04-ac37-fc21070018c7"
        },
        "item": {
          "id": "8f8e81bb-001b-4d77-a080-a5a690de32ee",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c74e4f92-8365-4fc2-8a57-f897dcc61e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95f53f0-146a-4c2d-ace3-a90582865c74",
        "cursor": {
          "ref": "c33714e7-c9e3-4307-994b-3445c32450ba",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2ad89040-0579-4b3b-90cd-0a43531555fb"
        },
        "item": {
          "id": "a95f53f0-146a-4c2d-ace3-a90582865c74",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "29e73ace-436a-470e-813a-0b3a72acf754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b188cc3d-9df8-486a-8a49-aa78d546ab14",
        "cursor": {
          "ref": "a95f6a02-1447-48db-aec9-62024d612fff",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2a621c61-d839-4a9c-96ba-14b8ef2cd760"
        },
        "item": {
          "id": "b188cc3d-9df8-486a-8a49-aa78d546ab14",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2ac3d5c6-eec3-457e-9dd4-0c8fe86336ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025eb361-27ea-48f7-afb2-bf673c336925",
        "cursor": {
          "ref": "f6d19e11-c2dd-46e7-b570-5a1eb03a7b8a",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "863fb5fd-8a51-4e78-83c3-db36a98da00a"
        },
        "item": {
          "id": "025eb361-27ea-48f7-afb2-bf673c336925",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3b64c2df-3b70-46ac-ab94-6354427554ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1ed908-3023-461d-8b12-732ed0821249",
        "cursor": {
          "ref": "ae4f82a2-d628-4090-8d73-99fc3d9acdb2",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "952bce1a-7091-42d0-9b97-b93dcba4de24"
        },
        "item": {
          "id": "3c1ed908-3023-461d-8b12-732ed0821249",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "750fdaef-00ac-402a-b19e-ae2c46e50810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff9d22c-bfab-4213-863b-55eb75ed7771",
        "cursor": {
          "ref": "244c7711-e7e6-4172-8c3e-ee07bd2fca76",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c82fb594-f10e-4ddf-b3f5-a8089b6047a1"
        },
        "item": {
          "id": "4ff9d22c-bfab-4213-863b-55eb75ed7771",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2166ae37-a64e-438b-8ff8-523c4df70e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69cbc9b7-d10e-4320-87ae-5f30a6698466",
        "cursor": {
          "ref": "8c2943e7-f3ca-4e26-a4e6-c65706858d01",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cd28fe45-ca53-4352-b00e-fb9b283403c3"
        },
        "item": {
          "id": "69cbc9b7-d10e-4320-87ae-5f30a6698466",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "aa151f35-98cd-42e6-a1af-eb164accf0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81988a6-f23e-4ff3-b93b-92073fb4d272",
        "cursor": {
          "ref": "2a5d3298-d9dd-475e-bc9c-da4f6fac37f2",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1e9a92e5-f416-4561-a59c-9faaea2b29d5"
        },
        "item": {
          "id": "a81988a6-f23e-4ff3-b93b-92073fb4d272",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fcb07fda-84c9-4531-8827-4cbf6cd3ade8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020c8a13-c250-4886-b097-b79ac34e6396",
        "cursor": {
          "ref": "5eb544a5-e8e3-4317-a0ff-95abaffbb187",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "79be3ec3-0923-4058-931c-1fc8a5e8ccb5"
        },
        "item": {
          "id": "020c8a13-c250-4886-b097-b79ac34e6396",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0d84807e-7f59-4d33-981a-f1767208f881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a33c1c-14d2-4371-ba7f-822ca672038b",
        "cursor": {
          "ref": "45e0323a-c7b3-4c27-a862-ee5ddf05d5c7",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4ad934e4-1547-4aaa-b1a8-dc192c12c82c"
        },
        "item": {
          "id": "25a33c1c-14d2-4371-ba7f-822ca672038b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "51d8645a-d009-4cd9-824b-a6c294d9d6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba32356c-676a-44c5-83a0-0ec4f8a3d16a",
        "cursor": {
          "ref": "c8e6f7ea-c341-455d-a3cc-d76983813ce1",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "60da045b-ab86-4eb0-acf7-10f66c1016b1"
        },
        "item": {
          "id": "ba32356c-676a-44c5-83a0-0ec4f8a3d16a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8500f9d0-f81d-4e1c-b27d-8d77f27b04e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e654952b-4e92-4654-bf4d-badea371d906",
        "cursor": {
          "ref": "4d6d03e8-d700-401e-9116-0d2c7177ffc5",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b8608326-0bb3-4c85-ade4-818729bb6eb5"
        },
        "item": {
          "id": "e654952b-4e92-4654-bf4d-badea371d906",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "04d8e385-6e7f-4de9-ba48-368eabe83a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb25efc-aa9d-49b7-8d18-3ef4b06e661f",
        "cursor": {
          "ref": "1f03bc6a-e24b-4696-9aab-f91c82dc3649",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eff9e725-952d-4b37-ad04-bf73054ec99e"
        },
        "item": {
          "id": "1fb25efc-aa9d-49b7-8d18-3ef4b06e661f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7cfeed97-620f-4fa9-83d8-71a9561fc4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab777b83-18be-4bf3-b1d1-e4cec1c15aac",
        "cursor": {
          "ref": "ba0e93db-351c-493b-9c0d-e32341b98282",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c6cdb61a-a991-4e3e-b86d-5faeb71c4c6d"
        },
        "item": {
          "id": "ab777b83-18be-4bf3-b1d1-e4cec1c15aac",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3e25e0ba-f889-4e8e-a0e1-4b1cea019931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fee523f-7f09-4d67-95db-11403d1c2479",
        "cursor": {
          "ref": "0e02a985-2e1d-493a-beda-eef89fce41de",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "53d30ddc-70f4-4085-8132-5ea6bd975308"
        },
        "item": {
          "id": "9fee523f-7f09-4d67-95db-11403d1c2479",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c1ab9cf3-b04a-4a25-a0f2-bd997f19e16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a9459b-3862-491a-a5ed-3ee7fbe2a490",
        "cursor": {
          "ref": "29f83915-69ec-4755-84fb-1637e0cb3321",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a4609bf4-69cb-4eb2-8598-74fae9160141"
        },
        "item": {
          "id": "b8a9459b-3862-491a-a5ed-3ee7fbe2a490",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7e4ca56c-8721-4a68-afdc-e6fb258a4d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da739f6-521c-4b46-aff5-c10e1e8c58ec",
        "cursor": {
          "ref": "09399177-e558-45bd-b247-cb1deb324e33",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "18796a66-d63b-405e-97d8-262a1de70187"
        },
        "item": {
          "id": "3da739f6-521c-4b46-aff5-c10e1e8c58ec",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8415a28c-ef78-49d2-bfd2-f208d1503028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21f611a-e41f-4fbd-a8c0-71a6175b9eaf",
        "cursor": {
          "ref": "c9bde001-71d6-4873-8f75-c83651823507",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bf005451-1b94-4cea-841c-0e34a9764936"
        },
        "item": {
          "id": "f21f611a-e41f-4fbd-a8c0-71a6175b9eaf",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ab299e37-da57-4d1f-9a83-cc8e70a614fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9188b56-fec6-47ad-b9e1-129309bf9ce2",
        "cursor": {
          "ref": "112dfaa6-06c5-40e7-b824-a30da88ebba3",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4be89ddd-5179-446c-b182-e9f82c2c68be"
        },
        "item": {
          "id": "b9188b56-fec6-47ad-b9e1-129309bf9ce2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f2bf8a05-8d2a-49c7-8c1b-ce5dbb2f113c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904a798a-2f3e-41d2-a8a9-4f391fb5e00e",
        "cursor": {
          "ref": "ee7ca8a5-0e05-415c-bb62-21432f71b7a3",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e0122f79-1f1e-4e45-82bc-e128a47049dd"
        },
        "item": {
          "id": "904a798a-2f3e-41d2-a8a9-4f391fb5e00e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "972723de-7707-4aae-b364-41b460003e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef6018a-94cf-468f-a94f-4057c298cf8b",
        "cursor": {
          "ref": "cfa14840-e56d-42f7-80d7-483d340c3cf1",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2dca114e-4f75-437c-8f18-8bcdf033d39c"
        },
        "item": {
          "id": "eef6018a-94cf-468f-a94f-4057c298cf8b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e802f848-e89a-4c02-9488-2f6315d5483f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9674fe-db8c-4820-940d-afa73a9f74c3",
        "cursor": {
          "ref": "c5971afe-7662-4747-86df-7068badb46ee",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c1047d06-ca1f-4891-9c71-5d01913170b7"
        },
        "item": {
          "id": "5a9674fe-db8c-4820-940d-afa73a9f74c3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "04896b2c-b3df-4f3c-84f4-72a4a83c75fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39ec5ec-50d3-46d1-a0d3-efa534a9bc2d",
        "cursor": {
          "ref": "0fc3e3f5-7ce1-43f1-9dff-4f8e82ce599f",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b90e2076-15c4-47e0-be67-c0dd55df541c"
        },
        "item": {
          "id": "a39ec5ec-50d3-46d1-a0d3-efa534a9bc2d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9ccc7462-7550-4c9a-8720-509e8cc08159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62721ee0-d2c2-49ae-bb79-456f7343d1c4",
        "cursor": {
          "ref": "f636c07e-58c2-4701-86ca-481ceee43dc0",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a18a28a7-5c47-47ab-91e9-8605fa723c52"
        },
        "item": {
          "id": "62721ee0-d2c2-49ae-bb79-456f7343d1c4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1ca11835-a72c-480a-99cf-6467060f7143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999a3b5f-63d4-430e-96f0-230cbec7b887",
        "cursor": {
          "ref": "94156e19-791d-43a9-919e-ae3adc19cce1",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "37a71cb7-4f32-4096-9ccc-54148e487011"
        },
        "item": {
          "id": "999a3b5f-63d4-430e-96f0-230cbec7b887",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e703bf91-456f-47d2-9724-74cc2d0a5796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9aea1d-853e-4ec7-9351-5c88699b352f",
        "cursor": {
          "ref": "475cce6e-804f-47ee-a5c7-2d030fb04522",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "09f5f9a1-2410-4142-b041-5a473df9fe06"
        },
        "item": {
          "id": "ba9aea1d-853e-4ec7-9351-5c88699b352f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a2378a83-48a0-4a93-ba51-65004518164c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6734efe4-4ad1-46c4-b532-bde2617e76ef",
        "cursor": {
          "ref": "ebfa2b5f-13ce-46a6-8c8e-f0945278045e",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a2819bf3-7d07-40ff-8448-90020f98a6c1"
        },
        "item": {
          "id": "6734efe4-4ad1-46c4-b532-bde2617e76ef",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5654fb9f-25dd-4330-a2e5-ff521925b91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d36cc3-d69f-4600-878d-8bcdd67be9c2",
        "cursor": {
          "ref": "1a57509b-2f32-4869-a88f-1c599cee629b",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b6d44925-8988-40e3-b337-8d4fef88d563"
        },
        "item": {
          "id": "15d36cc3-d69f-4600-878d-8bcdd67be9c2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5706f910-5173-4acc-ad94-edcf9d36423b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37d2198-df7d-4e35-b303-b38e321e58f5",
        "cursor": {
          "ref": "37201480-009b-4129-9eb8-ac032481dd1e",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d6a90e73-7e87-496d-884a-146147675169"
        },
        "item": {
          "id": "c37d2198-df7d-4e35-b303-b38e321e58f5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "de6babe9-6797-4425-9aa1-1739b34e6640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869796d8-4374-492c-86cd-7a0567f9d2b7",
        "cursor": {
          "ref": "f25936a1-f0d5-4048-aeba-cc1f770e758f",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9602b844-464c-407b-89b5-6e758c104100"
        },
        "item": {
          "id": "869796d8-4374-492c-86cd-7a0567f9d2b7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c93c3de6-ea48-4f97-91ed-0396641ab5ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f237949f-4d4a-4cc2-b163-cb84c7a16191",
        "cursor": {
          "ref": "615d1b2c-2718-44a9-acd5-40b118b8ba91",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c4d02797-fdd6-43d7-9196-a1a578f5c40d"
        },
        "item": {
          "id": "f237949f-4d4a-4cc2-b163-cb84c7a16191",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8125ecdc-e80b-4dbe-8ef1-9ee3b6f47920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4df9cf9-67b4-4bf8-840d-bf9c6e3075be",
        "cursor": {
          "ref": "ed5ac140-5d30-492f-b724-834b15d1c189",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d13712d0-0948-40dd-bd07-8ea1ec717a39"
        },
        "item": {
          "id": "d4df9cf9-67b4-4bf8-840d-bf9c6e3075be",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d9c3b33f-45c0-4591-9063-6615f1ffcf67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2e43f4-fca3-4660-a7eb-bfc0f844d33f",
        "cursor": {
          "ref": "4ab6fffd-b905-4f99-ba8b-707adaad31ec",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fd29d712-7dc9-4a03-85ef-de3854ba8a30"
        },
        "item": {
          "id": "0f2e43f4-fca3-4660-a7eb-bfc0f844d33f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2396832f-10bd-4b70-be5a-d4377975df4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f14f892-dc00-4d7a-84a2-1db8ae518e15",
        "cursor": {
          "ref": "31601a04-cee6-4ea2-9efc-0cc66579d70c",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e684dbcd-fdf6-4a86-93ff-806f4b1e84e9"
        },
        "item": {
          "id": "4f14f892-dc00-4d7a-84a2-1db8ae518e15",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7900a69e-1241-45b7-9e9b-13181b580492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e809b4d-8ab0-4769-a406-b9d3742dead9",
        "cursor": {
          "ref": "8ea4b0b6-2200-4c32-ad12-2b227723ae7e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "794a3a54-fb19-4855-a530-7ffb3998f686"
        },
        "item": {
          "id": "7e809b4d-8ab0-4769-a406-b9d3742dead9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a1174db0-88d0-4515-8516-b502292ac7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6612fd44-df96-40fd-9c37-cf76ad38663a",
        "cursor": {
          "ref": "2cc7ca51-eb29-467a-bd9b-f29709204199",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "927f78b0-6e1d-42b3-8ac7-b525a8dae72c"
        },
        "item": {
          "id": "6612fd44-df96-40fd-9c37-cf76ad38663a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2d98b6cd-c3e8-4bce-8adc-fb44c297370f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3315b958-a0ee-4cd0-84fb-5328ec77d5a7",
        "cursor": {
          "ref": "df8c3033-58f7-491e-9a10-ef0d557f6afe",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9fb5239c-1d1b-461f-b34f-ece43fee66ae"
        },
        "item": {
          "id": "3315b958-a0ee-4cd0-84fb-5328ec77d5a7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ad8b25c8-a3eb-4943-9f72-d7a4cb2b1142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33362280-0287-4123-a72d-bd10cdcf2b1e",
        "cursor": {
          "ref": "4159f4c0-4fb0-4bf8-954e-81297ac8881f",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cb020906-b25b-4bec-ae3c-b5369b047056"
        },
        "item": {
          "id": "33362280-0287-4123-a72d-bd10cdcf2b1e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b1974909-1ea0-4230-880f-48dc56104e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703bac8a-0c85-4b85-b367-8652267b8d80",
        "cursor": {
          "ref": "0ef85ce3-f155-492f-8443-2a1fcb222990",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "235c7da1-1e35-4cf8-bef7-2fc0dcd83276"
        },
        "item": {
          "id": "703bac8a-0c85-4b85-b367-8652267b8d80",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9c178dc6-2e3f-417c-a720-505ebf643e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf42695-7205-4042-b24c-052b099da4ee",
        "cursor": {
          "ref": "e03e95e5-b285-4bfa-b4ba-7e1e7f6567f7",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c9bef9ea-9ee7-4e53-a711-6719c1dff1fe"
        },
        "item": {
          "id": "ecf42695-7205-4042-b24c-052b099da4ee",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1d2cf98a-a8ee-4036-ba71-56bef5dab5ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd2188c-aa3a-4dd7-b956-54dd5529374e",
        "cursor": {
          "ref": "e7b9487e-a123-4a6e-a8f3-be526771fe03",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "864ab3fb-01b7-46e0-b2d1-2e8de2af3662"
        },
        "item": {
          "id": "ccd2188c-aa3a-4dd7-b956-54dd5529374e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "1186db11-701c-4237-b53d-33a6a07dfe40",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 15,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236afc4b-4143-4aab-8d50-dadbd9295bda",
        "cursor": {
          "ref": "b2610866-67ad-4604-9871-a1e0b560893d",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bb619e53-12f1-48c9-aba1-8bb0c0ec931e"
        },
        "item": {
          "id": "236afc4b-4143-4aab-8d50-dadbd9295bda",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f8f0e2a6-363a-40d7-be52-66f1a81e811c",
          "status": "OK",
          "code": 200,
          "responseTime": 448,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f06ae0-5891-4cbb-b791-440b9c2f7927",
        "cursor": {
          "ref": "3ebc0228-68e9-421c-a922-74bb9788df9a",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2beb16d6-1af5-42a5-8afe-608b5813f119"
        },
        "item": {
          "id": "81f06ae0-5891-4cbb-b791-440b9c2f7927",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "0fc10b5d-aebe-488a-8665-13f2ba70e55b",
          "status": "OK",
          "code": 200,
          "responseTime": 312,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac72ddf-d9a3-4895-bee9-e0d4f8c3ce2f",
        "cursor": {
          "ref": "20489fa7-cbab-4c60-b8b7-b3d8d91f45ba",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "747675be-81e9-4936-9306-256cbcc4a565"
        },
        "item": {
          "id": "9ac72ddf-d9a3-4895-bee9-e0d4f8c3ce2f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "44f35f96-32ec-44d9-9598-4f4cb66dc64e",
          "status": "OK",
          "code": 200,
          "responseTime": 685,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3656a3d-e21e-467b-a40b-47b0de0687c3",
        "cursor": {
          "ref": "acc6d960-1e69-404a-bf1d-e816f3ef438d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1c20e2e0-360c-4a6a-9bb0-c6bdba16da27"
        },
        "item": {
          "id": "a3656a3d-e21e-467b-a40b-47b0de0687c3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c0d3dcc9-7131-4c69-98f6-22615baa08cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3656a3d-e21e-467b-a40b-47b0de0687c3",
        "cursor": {
          "ref": "acc6d960-1e69-404a-bf1d-e816f3ef438d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1c20e2e0-360c-4a6a-9bb0-c6bdba16da27"
        },
        "item": {
          "id": "a3656a3d-e21e-467b-a40b-47b0de0687c3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c0d3dcc9-7131-4c69-98f6-22615baa08cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3656a3d-e21e-467b-a40b-47b0de0687c3",
        "cursor": {
          "ref": "acc6d960-1e69-404a-bf1d-e816f3ef438d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1c20e2e0-360c-4a6a-9bb0-c6bdba16da27"
        },
        "item": {
          "id": "a3656a3d-e21e-467b-a40b-47b0de0687c3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c0d3dcc9-7131-4c69-98f6-22615baa08cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a055768c-c70f-4022-8b03-5131f829e2f8",
        "cursor": {
          "ref": "d0445abf-b1df-4fa7-9918-3df1d03757a6",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2302ea94-c017-41c0-b86a-8c8bad7bc177"
        },
        "item": {
          "id": "a055768c-c70f-4022-8b03-5131f829e2f8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4066e664-2ac0-49da-b1fa-61748454667d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 14,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e6b8d7-9621-4790-9840-b32389a36a64",
        "cursor": {
          "ref": "06f23c12-d7d0-4be9-b2cb-1a59fddc7bae",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "36a09893-fe1b-4852-b6d1-892d69deacbe"
        },
        "item": {
          "id": "13e6b8d7-9621-4790-9840-b32389a36a64",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "65a2ac5d-68d8-438f-a2df-a5dab9fb7824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "13e6b8d7-9621-4790-9840-b32389a36a64",
        "cursor": {
          "ref": "06f23c12-d7d0-4be9-b2cb-1a59fddc7bae",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "36a09893-fe1b-4852-b6d1-892d69deacbe"
        },
        "item": {
          "id": "13e6b8d7-9621-4790-9840-b32389a36a64",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "65a2ac5d-68d8-438f-a2df-a5dab9fb7824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2274a773-b2f0-4815-9c79-a34500907019",
        "cursor": {
          "ref": "64e6ac45-4637-4c1f-8894-cdec6fc99d4f",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d6af5df8-41f7-4595-884e-d2008e32a815"
        },
        "item": {
          "id": "2274a773-b2f0-4815-9c79-a34500907019",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "20f6f582-3ae6-425e-86f0-44116cfaebe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1c88da26-ec7d-4b76-b2e8-d2f05c938d7e",
        "cursor": {
          "ref": "461e6abf-7ec8-41d7-b9c6-6f8588a17893",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "06840892-c795-4976-936d-9e81699fb1c0"
        },
        "item": {
          "id": "1c88da26-ec7d-4b76-b2e8-d2f05c938d7e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "156c62f9-c61d-41a5-b952-b8f46d677e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1c88da26-ec7d-4b76-b2e8-d2f05c938d7e",
        "cursor": {
          "ref": "461e6abf-7ec8-41d7-b9c6-6f8588a17893",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "06840892-c795-4976-936d-9e81699fb1c0"
        },
        "item": {
          "id": "1c88da26-ec7d-4b76-b2e8-d2f05c938d7e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "156c62f9-c61d-41a5-b952-b8f46d677e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "cd048a18-e68a-4d7e-a4bf-6c139b63dcf1",
        "cursor": {
          "ref": "94c1f85a-f464-43fe-923a-cef79470a54d",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "10c4164d-a1f6-4ce0-88cf-1a42b513d3be"
        },
        "item": {
          "id": "cd048a18-e68a-4d7e-a4bf-6c139b63dcf1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "eac50838-9600-42e2-86bf-fbded54ad42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}