{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f5647a22-8d4d-4485-9126-ea01ddfc3548",
        "name": "Issue Credential",
        "item": [
          {
            "id": "ae7ea141-5201-4d04-a604-143a95a14de5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7939310d-7190-4642-a9f0-69ee8146ff33",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f8afd7c0-a064-41f0-9919-1355ec5f9891",
                    "name": "credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f34d988-0ace-40c2-93a0-3a1f2ab6f74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6664fa1-213b-44bf-941f-940d124b6d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c10d58c-4419-44af-a6d7-33b5ab1f44c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2e4c031-0082-4f87-baba-6f2112e6ea68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e176e71-ddf9-43f6-891d-be7fc8bb4e52",
                    "name": "credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ea0376-7190-48dc-873f-c56e67e16a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8131da5-915d-4f50-8862-d1587b6e7def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3298b40a-e4e8-424d-9d66-f1909ca4c031",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd7bd8cc-486c-4fe8-a784-eef5702cf3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adb2389-6aa0-43f7-acdc-ac2cf872a059",
                    "name": "credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879f75ad-86fa-4fcc-b196-d029cf87f9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3947025-5cc1-4f36-ac14-297b1153c2ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e21985-cbc0-4f9b-aa52-56ca2e05b18c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb774387-49b6-4430-b19c-2d131c83d4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c544fcdf-be1a-4868-9ad3-9e549751a24e",
                    "name": "credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aba6160-ec02-4ece-ae5c-b603395cefa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340d403d-1220-4a5c-8670-0dbf4d94d5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042e4ee3-5838-4e7f-8b47-581c2fadeae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53ac339f-ad7f-4e90-a0df-7e39af10349f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e0a107-b19e-4091-8271-7606a3e4b2ed",
                    "name": "credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9338bc51-85ff-4e8b-9c79-1120b2467cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240083f9-6a4f-4416-8ce8-82c077c4c179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448a4129-b13e-43a3-8650-53d7f3440041",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a59cbb-b200-4592-9a07-e9a2797f165f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279a9576-810e-447f-a21f-71150723d7db",
                    "name": "credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd9a012-aa67-4b4e-82aa-9b14072019e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed9fe65-29fb-47e8-8251-9e18990d6943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfdbe16-a3ab-469f-827b-827caa8a8991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "855bccd0-58da-4af2-9708-9de395ee9417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ab07ff-0b83-4fb6-84e3-23cfbd4630ae",
                    "name": "credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57681743-8c83-4189-8229-5b2bb597d4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578e5165-7c67-488f-ab5c-4c76844994d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18a179a-2824-4572-a4d3-b0c03fd731b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a56aa932-1afe-499c-be88-3fde4d032de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf2c8c0-9e57-40a2-8106-f86155a25da7",
                    "name": "credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f12c6d-a97a-492e-a2bd-107e2a4e28ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68edaef0-9444-4c51-9dbf-9920a6b57072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cee5be2-4500-448a-8065-96ada08d5201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33405e7f-bd45-45a5-9c81-d9f2b6700ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb48a2f-922e-46c4-82a7-9e16f8031d05",
                    "name": "credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc149b3-edfa-4cc9-849b-6bb735b5cf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec972c11-33c7-4f66-a9dc-852f540bbcac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bdda07-53d1-4514-bb7f-476f4ba648ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec766812-36f2-4f12-bbd6-9b2e988bd068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd52f27-2a33-47a9-9362-85d883b09c58",
                    "name": "credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f30ac1-30eb-4c2b-8606-34c594ee6307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cd3538e-d15f-456e-b3ea-56237c8349e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfbcb8c-30e9-4b67-a465-693845b7af42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56af86ab-b436-4bad-9881-65ec51ed6f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98215ec4-a152-4018-bf93-d690231ca481",
                    "name": "credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d86ca41-898f-43c3-a7f2-8c17a03efeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f4cc58-a932-4696-924f-67c557b79286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc04397-df91-40ad-92f0-e071613a7348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9f6df69-96eb-43f4-b0b6-99852838a1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b0b5d0-ee34-42ff-9fb4-57f38ee5e498",
                    "name": "credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa44fb6-0857-4d86-a824-d7897a181fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03494eb-8fa6-4a53-a7a8-7f9906a1cc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ed95aa-922a-4a1b-8ba2-067be3bd8818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa024950-a609-49a8-8418-e29c5fbdf13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36957114-61bb-4ca7-9fce-d017705c67ad",
                    "name": "credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e820f6f1-7e16-4829-96c5-a0102a2b6406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7d5772-ff22-4205-891b-ee145dc189a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed93ea54-7f39-40a5-8515-ecd5a23cd677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d56887-ed49-4346-8e22-a036de3d4a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d3cd3a-98f8-4650-a43c-d16527322e84",
                    "name": "credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac771f4-80dd-49ef-b68e-53a6fa6ab940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0366fb2-369d-4912-bfff-42fc21402c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723852b0-8a71-4abd-b6fa-663a27587f40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca306055-8185-4f41-8115-ade9fcbd4892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6e6159-bdf9-4f14-91e3-c6f745ee3b92",
                    "name": "credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ae8d1c-b98e-42c4-a3cc-75352b68dd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1561c000-b0b1-492f-91ef-88f53614ddbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10989102-7940-46e4-aa79-a1e74bfd874b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0f0300b-c8c2-4fda-8eb9-0fd3c0aec80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4cdb93-8211-4e59-808d-21f7245c359d",
                    "name": "credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2a90b5-95d9-4a88-925f-b61bedec76c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f02b5c5-b54d-4d4c-9cc3-7187a3794306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2deabb6-37db-4d6f-bf49-70f1dddbd3d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d6f54d1-64e5-42fd-ab99-4c2047300969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290b9d29-b7af-49b6-a962-5a26f973a827",
                    "name": "credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72cee5a7-6f19-44f1-8cd5-440248242c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591d845a-3b67-4a45-8d11-460ff5737365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c157d0cd-39fc-4c7c-b68e-66609205a662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26858825-cc09-4a83-aa4b-d38fb5ff8347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504984e0-b6ae-43af-bd91-dcb5ca6f8345",
                    "name": "options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e133255-94bb-4ea5-8c17-a34dcb70b86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f15c68a-d207-45dd-9de5-f76156425997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476ff8c0-222f-4359-ad26-61632dc09677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "099a2406-480a-4844-b035-896847d5d204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d0f3cb-3892-4f6c-a6b7-95245bd2c8d3",
                    "name": "options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720c5b5a-41ec-4bc9-9e6f-ee60278063e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a1b30e-27a1-4ed9-a22e-97a67acb062e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f88650-5607-413a-b021-6a55ce36c1f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7c12ba1-07dc-48e9-87c2-f4296ab07b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972f0679-fa2a-4f2d-99f5-7d59afd5ff4f",
                    "name": "options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08a0b66-2108-409f-9b11-293eadc34458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f08e623-b801-49a5-9d9f-a3be7d752f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98178334-8247-4369-875b-cecc66fad57b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b18002f9-0cf1-4f0f-bac8-7c67ab5105a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67426d2-e0db-400d-800c-7620257f8610",
                    "name": "options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ee4d2b-c4b9-446b-b13a-dddd03dd8655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683190f7-c565-4a93-9f9b-feeb9f4ed9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c6515f-73b1-4340-9daf-25af31a83987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f735df0-573a-45fa-9c86-ca8be9c3fc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a4cab3-8321-42ca-b056-5a33c607cb81",
                    "name": "options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fc5614-724a-455e-8139-d001d353bbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8adc26-1dca-4d3c-9fcb-c1eac6901c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838ecb09-7111-4a0d-a608-a45be493f470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed93853e-1439-49d1-ba5b-8c4b1f59c9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eda5fa4-f533-4716-ba5e-e16637e03cca",
                    "name": "options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f218561-d716-4d4a-b0c4-445329e719d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4cab4f-bd35-4af5-bca9-4eebd5dfaac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7a047d-3bd9-4ae4-9979-667acbd1f62a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6aa117e-9b8c-4ae7-8fa4-a4642db927f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80eef1aa-5f5a-45b8-a706-80be2c108828",
                    "name": "options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446d4fb3-2ce9-420a-b7e8-8a2beab71d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee7bbfc-da4a-4251-8ed3-ea8d9007deeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3802e98-da11-45eb-a2fa-634c42e711f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e9bb810-a754-4d2a-b09a-a10fb27a4bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43e4355-879c-4ef0-90c9-661bd0448cf2",
                    "name": "options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c114d8de-1dd4-424c-80e1-f67e4d7b3af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333eaa47-4f42-4fa1-96a1-f987a738d5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db410a2-5e87-44fb-8f7d-9955985c03f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecedabe0-1756-4a95-80b7-85143b66a974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af5bf45-3462-4276-8c80-1bb11d959b31",
                    "name": "options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a376cacf-af66-4447-87ff-d496c253dfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f88233cf-50d5-4dfe-8001-0a62c3ba9087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98711eb9-aa2b-4170-b6ab-0bd468663b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ef459b1-64e6-4899-954c-84730a75602b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "131fad3b-f221-4ed7-99be-6989115f3bdc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be924744-0ee1-4edc-a164-eb7ca9c30aac",
                    "name": "missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ae44e1-86e6-4205-9291-b436d72a29be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5e4891a-e671-4bb8-9e39-da2ecc0b4411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5793a86b-28cc-48f2-882c-6b55fd2db578",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "04a0fdda-9d36-491a-8e01-c522c55f9bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794769f9-7186-4e95-8e76-1480c6401d6f",
                    "name": "missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8ef34f-bf48-48fe-9ac4-39ec2ac98fdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01e2cbce-a3db-4201-a53e-bb22fccc9c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21343c47-5ee5-4339-8441-059cbab15de4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "35403f06-2e5b-4495-a8a5-568060a681fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ba2ad6a-e1f6-483d-a4ae-7557ee137158",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c3772c2-1d73-45be-bd0d-c05d1490567a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d493e2bc-d3d4-44d2-9807-a0fc9894ba9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9019937b-0ebf-4431-aa49-f8068c067531"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0517bfc6-ccfe-4b98-90d3-29ecf0ac89a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "10e2603c-cbe9-4087-84b2-69728510dd7a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7f663f86-4b95-412d-9e10-62f75ae1f280",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2b8c1ec-1c48-410a-8247-d431178da32e"
                }
              }
            ]
          },
          {
            "id": "d64629c5-7ade-423d-9cc1-baed3ae29f2d",
            "name": "Happy Path",
            "item": [
              {
                "id": "83ffc7a1-0142-406d-90c1-a34f2ae19c33",
                "name": "base",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2298bf2a-c0f7-4a24-b8dd-f0a159197e3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e004e50b-c3d4-4495-b4bd-6093da1aef0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80b806c3-3fc8-4c39-8843-51956b2508b3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "0a6db098-d470-46d9-a6b3-d2628a169f27"
                    }
                  }
                ]
              },
              {
                "id": "5e640aba-9d67-4371-93df-56ff6fe681b3",
                "name": "credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0d686a8-08be-41c1-a8e4-3da8171d878b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cf4540b-8919-41fd-b4b6-f2f8afe9b51c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "536aa0a2-3729-4a87-9600-c4d7ba63174b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "de11013c-e824-4cb6-8b53-250e16a0e5d8"
                    }
                  }
                ]
              },
              {
                "id": "c82a7099-46cb-4d95-b892-5fd4a369f455",
                "name": "credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "875c176d-94eb-4bbc-8536-f04ffbaef468",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "097701cc-5d2f-4aec-a054-1b818d190b81"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fd5f462-930e-4511-9915-4c9d9ce334ee",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "8d016f62-3226-4165-aa9f-f39b551b82cb"
                    }
                  }
                ]
              },
              {
                "id": "5610612c-cfe0-429a-90c0-c8a0ec0e6402",
                "name": "credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adadffbc-89dd-446a-b412-59c4c2be38a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f890a559-8b0f-4560-94af-43d1c607eb27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a480d2dd-106e-4fcf-81fe-f6dc5e7d5ddd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "719d0f84-adb0-466c-931f-66d1311b5331"
                    }
                  }
                ]
              },
              {
                "id": "dbfa3b7a-83aa-4275-b89c-43e178fd8a2d",
                "name": "credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48f2fb8d-4257-4500-86be-bc04d051fd33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bffe69e6-b7a2-4282-8582-81bc1661f817"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31a8a6a1-d714-4187-b10a-71c37a7b8b85",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "01e43d0a-20f3-4ac9-8e0e-10f965028111"
                    }
                  }
                ]
              },
              {
                "id": "6b81d9a3-812e-428c-9f8f-05456fa1cdff",
                "name": "credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "385d975f-338f-4eea-a0b6-8f86e9060751",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ddafd1d-2d53-456e-8e67-be72b680086d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6839dba7-3493-479f-a124-97f9fac84115",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "636dec03-e94b-452b-ab4d-623282fde635"
                    }
                  }
                ]
              },
              {
                "id": "5e6870d2-dd96-4d43-8526-ceac6a628b39",
                "name": "options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8c26d8a-0a3f-4275-9a21-d451499738dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9597af93-b924-4862-8652-94c34d5a7d9f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4a2542c-b7e8-4576-86b5-06add1d6a0fb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "3d3c2ccb-dd71-4d93-b091-f5b181582453"
                    }
                  }
                ]
              },
              {
                "id": "90b6d6e6-6c7e-453b-af3e-84a818245cf2",
                "name": "options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e63b2c15-27fb-40e1-b007-3046bfd7da5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "741b1ac5-e992-4573-b81e-240f98b4bff4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f826a91b-aa85-416a-9dfe-718187a98035",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "9670b51b-b59d-4a82-8fd3-570d1529b375"
                    }
                  }
                ]
              },
              {
                "id": "1574b5af-f5e0-4022-8a87-db34ed6d53a8",
                "name": "options:opt.credentialStatus Copy",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1ae9e4b-d586-41b2-8f9f-7e6e25e09481",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "234127cd-4261-4865-ac60-418b8f311392"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04d93444-b0f9-4971-aa93-09b3ed636f65",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "6a4b4d18-9a71-479c-a8be-84c2024c8443"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "864ccd20-8036-45f8-879e-4fcbb93dea21",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8b25904-ae25-4087-b8e4-d891d35e8a24"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5419d51d-3d46-4dc9-9ea3-b30c2592c7b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0a72bb7-70f0-4e15-af51-b84517557d0a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5525bc6-221c-4cf0-822b-d7dc50835422",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "0bd7edbe-9e35-4b53-bf70-64d999576f6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc17366d-a85c-408a-a81f-c8f704ef3a15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d1f01ac-bf3a-4354-a7aa-8b3a619f1a80"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 300,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 39,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 74,
        "pending": 0,
        "failed": 64
      },
      "testScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 146.92307692307693,
      "responseMin": 64,
      "responseMax": 2129,
      "responseSd": 324.01205933677943,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1658105067148,
      "completed": 1658105075183
    },
    "executions": [
      {
        "id": "f8afd7c0-a064-41f0-9919-1355ec5f9891",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c1b6cc01-6a7a-4a40-b189-65ce23c760cb",
          "httpRequestId": "7047f68b-98de-44e0-939d-26d9b846a9a0"
        },
        "item": {
          "id": "f8afd7c0-a064-41f0-9919-1355ec5f9891",
          "name": "credential:missing"
        },
        "response": {
          "id": "5606c525-192c-4993-a7d4-1c838b258858",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2129,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "f8afd7c0-a064-41f0-9919-1355ec5f9891",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c1b6cc01-6a7a-4a40-b189-65ce23c760cb",
          "httpRequestId": "7047f68b-98de-44e0-939d-26d9b846a9a0"
        },
        "item": {
          "id": "f8afd7c0-a064-41f0-9919-1355ec5f9891",
          "name": "credential:missing"
        },
        "response": {
          "id": "5606c525-192c-4993-a7d4-1c838b258858",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2129,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "4e176e71-ddf9-43f6-891d-be7fc8bb4e52",
        "cursor": {
          "ref": "b1541c6a-17fa-4746-8038-acb656c8c973",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "88166e4a-e5aa-4ce9-8bdd-72e908a5187b"
        },
        "item": {
          "id": "4e176e71-ddf9-43f6-891d-be7fc8bb4e52",
          "name": "credential.@context:missing"
        },
        "response": {
          "id": "2c29de68-6138-4f5c-b9ad-b31a4388096b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "8adb2389-6aa0-43f7-acdc-ac2cf872a059",
        "cursor": {
          "ref": "c936f09e-9799-40d5-94a9-72b39d1a1558",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "30dcc572-46bb-4075-b3f3-98fa3a5c05cf"
        },
        "item": {
          "id": "8adb2389-6aa0-43f7-acdc-ac2cf872a059",
          "name": "credential.@context:wrong_type"
        },
        "response": {
          "id": "649b0ee4-2cd1-488d-8dac-9f3370d30f8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "c544fcdf-be1a-4868-9ad3-9e549751a24e",
        "cursor": {
          "ref": "11d47731-1d9c-4127-a5c7-1944ad7d9b8a",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "40c6c070-67d0-43c9-bb72-3edc8cb1a05f"
        },
        "item": {
          "id": "c544fcdf-be1a-4868-9ad3-9e549751a24e",
          "name": "credential.@context.members:wrong_type"
        },
        "response": {
          "id": "b7ae7dad-8949-471a-9ddf-da402ffbe131",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e2e0a107-b19e-4091-8271-7606a3e4b2ed",
        "cursor": {
          "ref": "f7d0fcd4-a5fe-4d87-b46c-1ae8eaeb2e44",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a4b11a1f-12d6-475d-9449-d61b833a4b4b"
        },
        "item": {
          "id": "e2e0a107-b19e-4091-8271-7606a3e4b2ed",
          "name": "credential.id:wrong_type"
        },
        "response": {
          "id": "f62487d2-7f88-4aba-89b7-00820e26c16c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "279a9576-810e-447f-a21f-71150723d7db",
        "cursor": {
          "ref": "d37c22f2-1752-465f-9b00-ff72356ead51",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fc97d846-938a-421b-9fcc-fcbb865589dd"
        },
        "item": {
          "id": "279a9576-810e-447f-a21f-71150723d7db",
          "name": "credential.type:missing"
        },
        "response": {
          "id": "33c622d0-10c1-4dcf-a8ac-7ec278b48891",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "45ab07ff-0b83-4fb6-84e3-23cfbd4630ae",
        "cursor": {
          "ref": "b00040ef-20fb-494d-9ea3-bdd9a79e128f",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4fbe8fdf-ae28-41aa-b597-d7ba30a5e55e"
        },
        "item": {
          "id": "45ab07ff-0b83-4fb6-84e3-23cfbd4630ae",
          "name": "credential.type:wrong_type"
        },
        "response": {
          "id": "ec9c966a-c65c-45f1-aeb9-3d12a261091b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4bf2c8c0-9e57-40a2-8106-f86155a25da7",
        "cursor": {
          "ref": "c15b97e0-c383-43d8-a3d9-fbf0831cf048",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3a4eaaf1-4058-43cb-8605-d50cc229c92a"
        },
        "item": {
          "id": "4bf2c8c0-9e57-40a2-8106-f86155a25da7",
          "name": "credential.type.members:wrong_type"
        },
        "response": {
          "id": "030f071b-6ba1-470d-b90c-8890dd6a4d4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1fb48a2f-922e-46c4-82a7-9e16f8031d05",
        "cursor": {
          "ref": "79c79a25-0a81-4f0a-bb6e-9692baf4dfab",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "cd585a9a-41f8-42c6-9afe-62f6be5cc142"
        },
        "item": {
          "id": "1fb48a2f-922e-46c4-82a7-9e16f8031d05",
          "name": "credential.issuer:missing"
        },
        "response": {
          "id": "4b602b30-13a3-484e-a9d7-c9cc01d230e8",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "5bd52f27-2a33-47a9-9362-85d883b09c58",
        "cursor": {
          "ref": "c28e47ae-3f25-4b24-8b98-62537716d8ac",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c16d81f4-835f-4b98-8405-3cd7edb534ec"
        },
        "item": {
          "id": "5bd52f27-2a33-47a9-9362-85d883b09c58",
          "name": "credential.issuer:wrong_type"
        },
        "response": {
          "id": "9b652369-ede8-43bb-a7f0-9cbe5cf33eb7",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "98215ec4-a152-4018-bf93-d690231ca481",
        "cursor": {
          "ref": "063ffc4e-6295-4fdc-acd5-2ffe5c11926e",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "71c57e6a-ebfa-4836-8653-666245d4845e"
        },
        "item": {
          "id": "98215ec4-a152-4018-bf93-d690231ca481",
          "name": "credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "6f7bc04a-e14c-407d-9828-2bd914f36749",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "47b0b5d0-ee34-42ff-9fb4-57f38ee5e498",
        "cursor": {
          "ref": "beca5806-9420-4b24-854e-1882ebbadef0",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d0ecc6a2-cac5-4e32-9ebb-d1d09358d062"
        },
        "item": {
          "id": "47b0b5d0-ee34-42ff-9fb4-57f38ee5e498",
          "name": "credential.issuanceDate.missing"
        },
        "response": {
          "id": "e74c66a4-bef4-495b-b809-bad1557ff117",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "36957114-61bb-4ca7-9fce-d017705c67ad",
        "cursor": {
          "ref": "26b4dd53-b8cc-4bec-8f62-30dc3f8c90f8",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2f236db4-dabb-4340-826a-9e0b4d8312cd"
        },
        "item": {
          "id": "36957114-61bb-4ca7-9fce-d017705c67ad",
          "name": "credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "df6a6192-926d-4c40-9844-ae1d4cda6329",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "62d3cd3a-98f8-4650-a43c-d16527322e84",
        "cursor": {
          "ref": "55f6e043-6c40-4286-a2e6-2545d3b8fd8d",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9ca546e4-6512-4ac7-920e-e000daede558"
        },
        "item": {
          "id": "62d3cd3a-98f8-4650-a43c-d16527322e84",
          "name": "credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "87fdfa0c-6b67-46f2-86fb-9a11ea0c05a5",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "ab6e6159-bdf9-4f14-91e3-c6f745ee3b92",
        "cursor": {
          "ref": "3acb5704-67c3-4220-b513-ae6d07a1a67c",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4270b6f8-bd30-47d9-bf7a-46923c620e10"
        },
        "item": {
          "id": "ab6e6159-bdf9-4f14-91e3-c6f745ee3b92",
          "name": "credential.credentialSubject:missing"
        },
        "response": {
          "id": "a16b6606-a26d-42df-a327-e93c3b00b0f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "7d4cdb93-8211-4e59-808d-21f7245c359d",
        "cursor": {
          "ref": "77818d19-b660-446c-9a72-60b5a2dffb48",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f336e2d0-622d-42aa-bca7-95137461b320"
        },
        "item": {
          "id": "7d4cdb93-8211-4e59-808d-21f7245c359d",
          "name": "credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "274a3eb5-2ec1-45a0-a4b5-baa5d4a4cbc0",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "290b9d29-b7af-49b6-a962-5a26f973a827",
        "cursor": {
          "ref": "f687ec39-d271-4254-92e9-cfab75210466",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9964fa8f-dfed-4fec-9b69-c141a6a18170"
        },
        "item": {
          "id": "290b9d29-b7af-49b6-a962-5a26f973a827",
          "name": "credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "a00e1066-bc33-4348-9d69-b5818a56ac67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "504984e0-b6ae-43af-bd91-dcb5ca6f8345",
        "cursor": {
          "ref": "29525d4a-646e-4b8b-9d46-dfdffc1c1c38",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3e527727-5cf9-4eec-867f-eaca5a11f788"
        },
        "item": {
          "id": "504984e0-b6ae-43af-bd91-dcb5ca6f8345",
          "name": "options:missing"
        },
        "response": {
          "id": "7fe387c8-935f-47d5-b9fc-b1fc3aeeb849",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "30d0f3cb-3892-4f6c-a6b7-95245bd2c8d3",
        "cursor": {
          "ref": "12435e85-6015-48fa-b640-56d560031b7d",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "eae3aa15-228d-4f12-98a0-81e805e68019"
        },
        "item": {
          "id": "30d0f3cb-3892-4f6c-a6b7-95245bd2c8d3",
          "name": "options:wrong_type"
        },
        "response": {
          "id": "a5442387-05d9-4cd3-938c-1ac82152595b",
          "status": "Created",
          "code": 201,
          "responseTime": 88,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "972f0679-fa2a-4f2d-99f5-7d59afd5ff4f",
        "cursor": {
          "ref": "c1e1eb6c-98f6-4793-9ea0-4fc075495dee",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "15715885-3f80-4e09-97ad-3a88c261a614"
        },
        "item": {
          "id": "972f0679-fa2a-4f2d-99f5-7d59afd5ff4f",
          "name": "options.type:missing"
        },
        "response": {
          "id": "3d301271-0e33-455a-9a3b-a7e4744a9afe",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "f67426d2-e0db-400d-800c-7620257f8610",
        "cursor": {
          "ref": "e295c453-f5aa-42d6-bb6b-282c7f6a8089",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "eeb3a9e8-53e1-4b4c-976f-431287b35b4f"
        },
        "item": {
          "id": "f67426d2-e0db-400d-800c-7620257f8610",
          "name": "options.type:wrong_type"
        },
        "response": {
          "id": "aee92bda-4e4e-4adf-9e25-d11824f70591",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b5a4cab3-8321-42ca-b056-5a33c607cb81",
        "cursor": {
          "ref": "e3a987b8-bc25-4b83-8fb6-da110fc16a49",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b6c89f58-d5f9-4d3d-b112-bad85ad9da73"
        },
        "item": {
          "id": "b5a4cab3-8321-42ca-b056-5a33c607cb81",
          "name": "options.type:invalid_value"
        },
        "response": {
          "id": "9a5c99d1-f718-4a64-948d-fcf7cb03f414",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1eda5fa4-f533-4716-ba5e-e16637e03cca",
        "cursor": {
          "ref": "d79f9973-4169-48ab-a453-487d55300a05",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c653d706-96cc-45f7-8217-cb2d0d0b64fe"
        },
        "item": {
          "id": "1eda5fa4-f533-4716-ba5e-e16637e03cca",
          "name": "options.created:wrong_type"
        },
        "response": {
          "id": "e5373906-e768-4bf0-b2d3-78fc0748ccdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "80eef1aa-5f5a-45b8-a706-80be2c108828",
        "cursor": {
          "ref": "19b8b554-1583-49f5-9199-2b58e79b7881",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3d8ebc8e-37f5-4a15-b926-f939959b06a6"
        },
        "item": {
          "id": "80eef1aa-5f5a-45b8-a706-80be2c108828",
          "name": "options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "df4dfe6b-6e18-44d1-9ca5-fb843d5827dd",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d43e4355-879c-4ef0-90c9-661bd0448cf2",
        "cursor": {
          "ref": "4209cd05-9a0a-4a66-a209-192f00b5510d",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0111b132-22a9-49da-a502-75f53082f059"
        },
        "item": {
          "id": "d43e4355-879c-4ef0-90c9-661bd0448cf2",
          "name": "options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ee05cc37-dc87-4107-b8fc-fc6c1c8fbd4f",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9af5bf45-3462-4276-8c80-1bb11d959b31",
        "cursor": {
          "ref": "65975655-bf33-4956-adea-fada1710b0e6",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2440a8f2-b2d8-488c-a189-c4e4e3af6a65"
        },
        "item": {
          "id": "9af5bf45-3462-4276-8c80-1bb11d959b31",
          "name": "options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "a12ee57b-f85e-4527-b0fa-d67a2aecd2d0",
          "status": "Created",
          "code": 201,
          "responseTime": 100,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "be924744-0ee1-4edc-a164-eb7ca9c30aac",
        "cursor": {
          "ref": "e60ed6bf-8129-455d-9969-07eb8d0710ac",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "80cae4d7-e88e-4650-b902-9f673f436179"
        },
        "item": {
          "id": "be924744-0ee1-4edc-a164-eb7ca9c30aac",
          "name": "missing_auth"
        },
        "response": {
          "id": "2f5e9ef0-5b22-4e2b-b461-41bbba0a6694",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "794769f9-7186-4e95-8e76-1480c6401d6f",
        "cursor": {
          "ref": "a0fdcf67-a293-4d6d-8677-91e5558433ad",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bf9f6838-47d9-4899-8b31-91ffdb360eb2"
        },
        "item": {
          "id": "794769f9-7186-4e95-8e76-1480c6401d6f",
          "name": "missing_scope:issue_credentials"
        },
        "response": {
          "id": "64b39c8b-daea-4829-aaa6-72c0dc498fb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "794769f9-7186-4e95-8e76-1480c6401d6f",
        "cursor": {
          "ref": "a0fdcf67-a293-4d6d-8677-91e5558433ad",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bf9f6838-47d9-4899-8b31-91ffdb360eb2"
        },
        "item": {
          "id": "794769f9-7186-4e95-8e76-1480c6401d6f",
          "name": "missing_scope:issue_credentials"
        },
        "response": {
          "id": "64b39c8b-daea-4829-aaa6-72c0dc498fb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "83ffc7a1-0142-406d-90c1-a34f2ae19c33",
        "cursor": {
          "ref": "7be707a7-931c-48bc-89ef-f5c3ccd10c65",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f558ff8f-37fd-4083-be26-79745ee2e2f5"
        },
        "item": {
          "id": "83ffc7a1-0142-406d-90c1-a34f2ae19c33",
          "name": "base"
        },
        "response": {
          "id": "a77ce043-8b88-400c-85c9-500c9b79bbce",
          "status": "Created",
          "code": 201,
          "responseTime": 87,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "5e640aba-9d67-4371-93df-56ff6fe681b3",
        "cursor": {
          "ref": "66b38a03-a950-4193-b62b-430b453210fa",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "da601599-1f1b-4874-b245-4885a5a885a3"
        },
        "item": {
          "id": "5e640aba-9d67-4371-93df-56ff6fe681b3",
          "name": "credential:opt.id"
        },
        "response": {
          "id": "b8d116a0-99d5-4e65-9b7a-0e2cb4003e17",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c82a7099-46cb-4d95-b892-5fd4a369f455",
        "cursor": {
          "ref": "3fe35f21-30f7-467e-b4da-e65d5bb35c68",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "23ed4f29-d2d7-44e6-84f2-c4ee6fddc711"
        },
        "item": {
          "id": "c82a7099-46cb-4d95-b892-5fd4a369f455",
          "name": "credential:alt.issuer:object"
        },
        "response": {
          "id": "9505c786-6162-4f07-b908-4340cd08bb57",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "5610612c-cfe0-429a-90c0-c8a0ec0e6402",
        "cursor": {
          "ref": "aeb39404-b76e-4bf0-813b-940c54693a49",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8ca8b811-848e-4493-9e96-baf6a60fc25a"
        },
        "item": {
          "id": "5610612c-cfe0-429a-90c0-c8a0ec0e6402",
          "name": "credential:alt.issuer.object:opt.id"
        },
        "response": {
          "id": "5e911434-2649-4012-a953-2fe7521c6495",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "dbfa3b7a-83aa-4275-b89c-43e178fd8a2d",
        "cursor": {
          "ref": "ef0e7a12-d255-4b38-95cd-ce6d0768909b",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "288c2716-53cd-45ef-bab2-58cbd793a706"
        },
        "item": {
          "id": "dbfa3b7a-83aa-4275-b89c-43e178fd8a2d",
          "name": "credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "74f6922a-a17a-4896-b06a-7787648db222",
          "status": "Created",
          "code": 201,
          "responseTime": 87,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6b81d9a3-812e-428c-9f8f-05456fa1cdff",
        "cursor": {
          "ref": "e3441792-be68-4c23-ab88-786a767f408d",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "da8c3118-1f4a-4d1a-906a-fd8aa47436a0"
        },
        "item": {
          "id": "6b81d9a3-812e-428c-9f8f-05456fa1cdff",
          "name": "credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7803afaa-85b7-4b36-b272-95a55942f143",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5e6870d2-dd96-4d43-8526-ceac6a628b39",
        "cursor": {
          "ref": "521964a1-069d-4286-86b3-ad007872a4a7",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2fadd3c4-c5a1-4f17-9365-7dca05700836"
        },
        "item": {
          "id": "5e6870d2-dd96-4d43-8526-ceac6a628b39",
          "name": "options:opt.created"
        },
        "response": {
          "id": "7ee51ba0-8bb5-4b43-8bd1-ab5eff017a09",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "90b6d6e6-6c7e-453b-af3e-84a818245cf2",
        "cursor": {
          "ref": "7945ee56-9049-4dc3-9260-e7513091ee70",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "918c51d7-28f6-46e5-aa4d-576e00498196"
        },
        "item": {
          "id": "90b6d6e6-6c7e-453b-af3e-84a818245cf2",
          "name": "options:opt.credentialStatus"
        },
        "response": {
          "id": "902c1272-4849-4bf2-9db2-58417cdb2b3f",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1574b5af-f5e0-4022-8a87-db34ed6d53a8",
        "cursor": {
          "ref": "22ede5d9-eab6-4a00-8fdd-f4f18c8c3853",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a0f98106-923c-486a-94f9-11505d653b77"
        },
        "item": {
          "id": "1574b5af-f5e0-4022-8a87-db34ed6d53a8",
          "name": "options:opt.credentialStatus Copy"
        },
        "response": {
          "id": "00d33d57-374c-4097-8483-28a249734a90",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      }
    ]
  }
}