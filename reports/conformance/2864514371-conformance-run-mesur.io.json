{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a330dbc6-6a91-4e51-84f1-c65dd543f371",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e0dcf408-946c-41c8-8809-060d561b33de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "526df073-48be-470a-820b-0ee1c5272fb9",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41824250-96ac-456d-b78a-e1c11d53a914",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f816a666-5ddc-412d-a3b8-8c708f8c42f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "6ab4b2ab-a519-4175-bc46-33bf95b16cef",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d6b2528d-6e78-4c2f-bfa0-59b18577bd1b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "75f4e9ba-3e9e-4825-983d-8c6bbd0a6030",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dcc8316f-ef51-47e3-999d-38234717d2e3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74877b86-6392-4e71-a789-caa9e774e1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "881a6b86-06a6-4f05-b1e9-fa0b2bb22a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3eb0e7-eef0-4211-9ccb-803c9865d91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b4f83c-f712-4728-9acc-858c4778e1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ac5b0a-60f7-48b6-9841-8180139094e0",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e093f4da-645e-40c3-9e60-ea71694bfbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63276428-73d2-431d-becb-f3ea4a6435d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb4567e-b811-4ee0-a06f-82706efed0e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2298da29-fdef-4e32-9d6d-b77eb1c434c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0946d1d5-ba44-4995-be90-5dcc0d31bad5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e6e88d5c-5157-4a57-bb66-928b0e9039bb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6c5e83d-6254-4b13-b16a-68a22064654e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "127008c9-664e-4874-bb5b-5ca54d017337"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72161e52-7e49-493b-a4b9-37b775ce93dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "139c503e-632e-472b-9eeb-a577f25784ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eba7cbd5-6335-44e7-9297-cf79ac4978cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10ae5368-9f86-43f9-940b-63011ad00539"
            }
          }
        ]
      },
      {
        "id": "95c945ba-becb-4454-a6df-543df2eac6a5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "881bae68-7cd5-4ff1-b2f3-f2adc712d9c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5dfe42ac-a61b-434e-b8a6-3d937f2d446a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a0e3e285-5b7e-4aea-9cf2-65695a8b6301",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "758d8ed0-5fc8-4c1c-904b-44b2cdb170b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c8a54c-71b2-4374-bcfc-0407b5cfedd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265c4c0f-f737-4227-85a2-1977dc645888",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc56b6c8-f801-4de8-ac63-648dd703daa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49224a90-689e-4802-a49f-5a2fcb8543c6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9827b0c-785b-41b3-94df-4500899597fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5400ff-13ea-4e13-9b19-1b4625f7d502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfbf3e7f-d131-4de6-9997-8de76cf3cf6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecdebf94-388a-4190-90a9-f6682f7332e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5cdd77-e0fb-4646-b951-1a322c5615ee",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b798cb90-0c52-4318-a9c3-f6bd68a1401e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d3b56b-1ab4-48df-b1df-f0ebc2d629be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fecb5e7-f517-48fe-9e41-85eb365a77f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfee15df-2e0a-43e6-aabf-0e39add5d3d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e81bdc6-f0ed-4326-9d20-37c70a674536",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699e8228-b0b7-4277-8ea9-984d6c964408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a8e22d-5bf8-41a7-bb8c-2e145fb3b5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8927b4e-e44b-4474-aed3-7defcced195a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf4c68a-8308-4132-ad63-09da888ce0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacf5c30-fbc7-47fe-9b7a-e6608930241e",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20718d3c-8d10-430b-aed9-007671ad4fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e71d039-063f-4076-aef3-9cd8354cd6ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00f2259-b6af-455f-badb-0adea56cd66c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1472c376-60e9-4717-b084-6e7c1d1a65be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3edd7e4-5ccf-4f9b-9796-0ce911bc6afd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ea6db4-a2bf-4850-8d40-55485cdcd3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c85a76-bea1-4262-b26f-fba3bf6d7a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dce7037-9778-4cf1-8e35-cfed1b99c52b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ec0cb39-bd0e-46d5-8837-c244e8c87da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c04fc19-6d23-4619-9516-846b7193ebdd",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d74dd22-415b-45b1-8669-c0f1fd0ca815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c2edb8-8b83-4175-8fdf-c5f626244efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e462f3-a1ab-48ed-9c0e-8a7a977b6aa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9ec8407-315e-4240-90fb-6d23fdcd4abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac71406-b580-4e06-b900-3f1944cc9b57",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b29f2d-21f4-49df-bf02-8a09bcd36192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af976f90-0276-4f82-a11f-ea744af706dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f45c311-2b38-40a5-a5ef-3d0ff371dd5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b6a72a5-ab59-4375-8199-dfa2a7dfb3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291dadb0-f595-4fa7-81cc-7bcd37db14b8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0516e901-8748-4a8c-8c9b-e6dd131d156c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800fb444-543b-407f-bc5b-6906980b49ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cf2fe9-50cd-4dd7-904e-bcd1dfa8f20f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e5bd12b-3cb8-4f27-a541-fa3fd1077a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9242ea80-5c62-466b-a40d-87af1b40f1fd",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b595c16-3941-4908-95c0-4095f1f88375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1db794c-8433-419f-8451-ef84145b28a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41cc3ef8-1714-4b45-b72d-8accd9c40963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9325d886-020d-42b9-bc0b-1596866f272e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d80954-77e3-4d32-98fe-019a2b7035e3",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc148cd-2e01-487c-b7d3-303e0b224b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b6e7cf-24b1-4f89-8f1f-c3afe0f8adeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0722b9f-f416-44c0-bb9d-6be88bd86a1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "bb303e8e-35c3-455e-aaf3-9fc2475048a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a05c042-6185-442b-b8f1-f3d82f977ddc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42247eb-d486-4f0a-9181-8ad5e7609489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e5de69e-6995-45e1-805f-e2b2c873b181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9162f2ee-79fd-4b67-91e3-583a53e70dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "c4300665-2a8b-498f-a515-8e95668bbd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cd81da-4706-4a0d-8bc4-8e7d0c09e644",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1e4cd7-e4d3-4bea-b894-363aa2d8ad7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e46eb0d-7202-42a9-826e-485a5d671856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4510aa-3a0e-407a-9d41-eed6c3791b79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5ecb973-df58-4231-99af-8e19f62a04eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37c6091-89e2-453e-8c1b-247e3c1c8bdc",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e9741a-ff56-4289-8336-e9fb3c3f0bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e720317-934e-4d5d-aadc-ff21933873a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d9f94d-4a82-414f-a63c-061dcb6770a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70159348-3d59-49c7-aeb3-d334959cc97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe663ea-9e72-4ddf-aaa7-434e22cc9d40",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ede9f2-d005-4fa3-98e7-6a8fbbee2edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468d55a5-7a89-4db7-875a-3fe6a5793269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85fb7fa-001a-4c6f-a568-af0e8eb1ab40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "0a0b2cd1-2e82-449a-8a9d-7b105b02aab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ba97fb-9e45-47e8-bc65-0a66e2875f7b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "366bd89d-1d48-4278-b409-4af2c944cd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884f4024-5418-49ab-ada1-29ff78fa925f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d4f4c0-c029-4f91-8a13-ffc59a20f3d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cc79905a-6fab-4413-a359-cb6ab0e61c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5480468-5e6a-40cb-b6eb-a5443f257ef4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b551740-3b34-46c0-a547-8a266f0f7a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5dd0690-dbc2-4834-b646-9da65ba5c201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86fbdea-9fb9-4d7c-b394-2e17e377a877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7b46261-df55-4f65-9424-5e184e7549db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6568b0d-fdde-4c10-aa8e-ddc880aca1eb",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7655bc-a8e2-446b-b671-7a8635173757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4bb050-7d27-4e5f-bf1f-a48b549b0215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b479a7-50a5-4133-9e94-1862c50c9c93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee10281e-e5ab-452d-9cff-1b8e57e33a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b680de7-1862-4389-9f8c-92541feea34a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93976587-07fb-4f5c-a18d-cb1c7eaf399d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295399fe-4314-46d0-adae-5de23dbbf70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b27bd5-5a25-4843-80b5-8a503c32dea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d52ca500-6b4c-46f2-82e8-5594527e5ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4072906a-96fd-4b51-b6ef-dce5ec02aee9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a8997f-4b4c-41d9-9ebd-5815d8ee0ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69eb67d6-5209-49d3-b9a1-69b2396a5a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9623ea8b-c25b-43ec-8901-f79a6d126838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6381c71-57ab-44c1-9f1d-bd7898426caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d70b881-a34d-4088-adc8-dfc19317984e",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2e115a-b25b-45ae-853e-94e007beff20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e224fd30-9e5e-46fc-bdf1-bad2a2701234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9564918f-213f-4dca-9df0-0f4fea154d1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f27c87b-6d35-4502-b667-e9917e4d8e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f14aeab-1c26-4c96-be7a-0930f81c8283",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222a8769-658d-4586-b190-e39a2ff659d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b0af6b-d1b3-4af8-9b6a-4f6a9c68d026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72836880-54c5-40cc-b595-40e844590ee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b37408-fa83-46ca-885e-3f2b9c257181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d493dec-c931-4581-a847-44a6aaee5eb4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb42529b-6655-4e0f-a837-20a1af99ea4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1f8ef3-6fee-49cd-9c09-a9e5027f78e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5f2f19-2043-4e1c-8aee-66ab8af6eea8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4f9121a-96bd-45e7-a8ed-bdcbca0d814f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0111659e-3737-465e-ad41-d7a1668b7c9c",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bdbf21-f94a-4552-99c5-ffb587336339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8b5d31-1d57-45c2-8475-666b7ce1bc41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9846bb0f-a666-4f39-88e4-50f8b35f44e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d1947fe-a03f-44ac-b5fd-97cb341b6cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d6877e-011d-4e93-ab18-0728fc7469bf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbf974d-024e-4de4-9a52-235bf2235b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608db958-0b2b-4eaf-a399-be155fda15a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc26f166-a830-4ea9-880e-9f00be786de9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b97f4ee-b34d-4f84-af23-2d81cf626c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc81b9a-cf56-46f3-b4d1-be59f5d0dfdf",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b63ee0-dc6c-42d2-a355-dc96d60e91ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24debc39-705b-437e-93a0-1e66748a2edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6bef64-7970-4727-be74-7e65c3d61159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21301678-4654-411c-8ac0-e7d1a5c66961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2d8b52-dc0b-49ce-b7f8-6e7bb3dbbd8d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095e371d-a3b6-461a-8c0c-e5a27df79c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3fad8f-6f33-4cb3-a96e-3e1c7546a556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098d8883-8978-4c6c-b306-66f1eda8aa61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df233876-74bf-4a84-b45f-3b8902185c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dc8e2b-5dfa-4eeb-a6ea-2b4e44b7d5c0",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a692b5d9-f923-4967-9c46-c5d1bafec110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65428c5-5b8d-43d1-8f3d-a2e10bee0c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4c17f7-fd3f-46c9-95b9-104d5ec6d541",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56436fc3-2784-4d04-9684-851ac9fb686e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d316820-5902-416f-a052-7bca490b3360",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8404237d-e240-41ea-b7e2-8ad02d92024f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7db5ac-676b-4f31-8a12-a17a79503d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72da852f-b382-4458-99a4-285996fdfc6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5be0a5b-51d7-47b3-9824-9d1e5f1b132e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17549bc-cd6e-4e7a-a0a6-40357e8447f4",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c1e6d3-07c5-4faa-9333-3eb69ecd6c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42857900-6d52-405a-b8b8-2b01252a582a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171ae86b-f178-4ab1-a1f6-b9a5247293e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef3aecf3-3824-4fd4-9f02-539b008b3b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d385d9a3-f79c-40ed-87e5-3079f6294f5e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a139e9-3240-4c75-87c7-e2ebea8d10ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6d7144f0-4144-4c9e-90ca-3c418f60c9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7b6de5-47d0-41b9-b3fc-b0671a303b51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69adfaeb-1282-4d75-b70e-e1c0a747fda7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "53719e31-01e0-43bf-a09b-f71b3be12198",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "257a0872-b6a0-4599-9b0f-2b44b51f9603",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b57849-d2e8-4a12-ab9e-83ac55bbd54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26b91912-6172-4dec-9151-874e098833e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3670b753-63c3-47b0-a444-0d141d1e0566",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d364ee81-c100-4a40-a4d4-eddfa61adc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9eceb87-e55a-4201-a116-94aea87765a6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a0222e-f3e4-4207-b6ea-d20298f7ab1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01a6beaa-ca61-4a44-b07e-32a86e85ce2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e31721-1947-46cd-8590-a89857b2beec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4e8e882f-d41c-449f-a8a4-dc616f08fb44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e51c5ff-25c7-44b6-b86c-543190ec9769",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1f504c6-3a0f-47ee-9de7-3114af4b86f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f9e530c-6b9c-49df-83aa-90225fd538e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c8121d2-8ec7-40cc-b4f7-587484781449"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4764b5e0-a629-46ff-9cee-f89b95a23908",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25c94ba1-228d-4a15-80ab-a72c5b8697be"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "47b06f4b-db92-4b59-bee9-faea22a7b322",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b76adac1-fa74-473b-9f8c-ca2fac5e9e4d"
                }
              }
            ]
          },
          {
            "id": "095f4e6b-1dd1-4d35-bac2-0327c85b6c0a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "edffb54c-1e58-4d85-a655-901f33679673",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcad3543-5c77-44e8-803e-b0dc25ee3334",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42e854eb-631b-4d57-8706-d67237ad5df5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "985d3311-de37-44c1-a543-9589b737f368",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a27f2910-1ea0-4057-af80-40a1140536ee"
                    }
                  }
                ]
              },
              {
                "id": "d37e8d15-3fd0-4b4f-b8a1-47ab20043bce",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "807d2dd7-5bb5-49a2-a6e8-1e49779f944e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46b7ff4d-03cd-48a3-8bde-21ce17569d71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c862fc70-5ff6-4552-93b2-94f6839893bd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8c20be44-4c18-45c7-b7ff-6b992d69e711"
                    }
                  }
                ]
              },
              {
                "id": "e88d139d-85db-4c0b-abb9-1569c73f112c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e17238f-0cfa-4618-93d9-34d96a5d18cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c13980a7-c6c9-474c-9dca-6ab9a1863d8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efada4e8-28ed-40fd-a19c-ee4656dfcd8d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "74f25443-0fcb-48c0-a29e-01ceadd63111"
                    }
                  }
                ]
              },
              {
                "id": "7ba7cb17-ee8e-433a-8510-242fb137afd6",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24081a05-e014-4bd9-8c5e-0b8f2f2bdd36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74dab752-9368-4118-9492-d70bff60f200"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73f8cbe7-a96f-491c-9f93-a5a08f2f2017",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e59831cb-ca48-453b-8a51-df0b7f7535b0"
                    }
                  }
                ]
              },
              {
                "id": "6be7f63a-fc81-4c84-a2a2-23ca8995bd3b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65f700a7-06ab-4564-835e-9a328517791d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "8aad18b3-6e97-4bbd-9a8b-efb61f52e6de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52603fa0-40d4-4e55-a2ed-ba342f680c78",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "aebcf6dd-16e0-4e4d-8d52-550386bbdbde"
                    }
                  }
                ]
              },
              {
                "id": "d3251b69-c9b1-4439-bff9-9404cdf57491",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1b84592-3b60-4d8b-8cbc-d26d64dd45be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "73037c21-7c88-4e27-816d-3ada7fdf22b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dffb1e90-8d05-4f62-ac72-d0f1b8678871",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0b73d9dc-a571-4afd-b3ce-eec22bcc2a4c"
                    }
                  }
                ]
              },
              {
                "id": "30fe91a0-31d6-4924-a2ca-71bb74b7c3ad",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1ce76ba-fcbc-47f6-aea1-73e8a14ca662",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8540955-b48e-45df-8ea4-c7015644112e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36a445b5-78d0-46ba-97c6-3c5d13c8a3ac",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e6581193-f059-4797-aa00-1ceeb361f32b"
                    }
                  }
                ]
              },
              {
                "id": "e22f654e-6fcf-447a-84b3-27be1bf6ba87",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e43cce0d-78dd-41eb-ae53-fe38c1216ad8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "155af614-0c01-46a5-8e66-0c060c68b5f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b7fa53a-4f9f-4cf2-bbb8-50b743be8c7e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "747d7aaf-1729-45c9-9069-0f87f8025abb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9fb2c915-0545-4bb4-970c-2a3b03e05b75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba3ab294-3ce1-42d5-ace9-dd25a7492450"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6255e149-cb1a-48a8-8e42-1e9f4a729507",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e92ed8a-b6b6-4d17-8a3c-0e2d46fb2eb4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec7e45ce-1e60-4c7b-9034-6fc3a0094aa4",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "0b0d39b0-a371-4fd9-822d-cfdaf4b6677f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66848742-8a67-412d-97f0-7f832d70a972",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d3e5a618-97c9-4168-a055-bb59a08db5e4"
            }
          }
        ]
      },
      {
        "id": "a6c23281-2211-4fb5-8c11-2ca620236b90",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2e82a225-8f82-414d-97a7-7167dc6cc5bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "acc534a5-9f0e-4fe0-b1c0-5de80d64d38e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8937e78a-7d1d-48ef-9cc9-66566364df9e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f784922-0b4e-4986-9406-fed7f6c72b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ad0dc3-f6b7-4de0-8a08-2c92e976bce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac5450d-df11-4e56-8b5d-62c2a9c1280d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31fd4dcf-b77b-44d4-8c01-ad5b4dab2ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c776972-62e5-4819-b114-ed6df6e77405",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a74bf0e-1309-432b-acb3-10099a8b1f49",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "313c3c52-c002-4e16-b2a9-bad71b18647e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c796ac3-dd36-4c38-ac92-ae4eacc7deee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c1179f3-99e6-4aa6-a549-56eadca791c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2038cc72-0a98-4275-adb4-335c73e53a44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "849a8e9b-f8ee-4e55-bfb2-91c7f158b575"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7a5d8f2-2031-4874-a30e-c3fe71c42802",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2da28ca8-154d-4dbb-b507-c57c10f9ac66"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da5a8f24-f3ae-404e-a3cd-9ef747deb6cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "c4d96b4e-0e20-43bd-99db-077a075e17ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "310bc094-e5ac-4555-ab9c-3f52e53319c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26d46393-0fef-432b-acac-96537b0196e1"
            }
          }
        ]
      },
      {
        "id": "eda98c49-ac31-4857-b58b-35169e253779",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7286fbbf-7723-4e54-a1b0-3d68c6381f48",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7adf0da7-f4ea-4a14-8583-a774a68587c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c41dd7b-2632-4dcf-9360-3db2bcc45bde",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b30ddd-f34f-4a22-9a33-df01d0823060",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "02ec0ec3-c345-4185-9ba1-06dbf0088982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5c9d86-c06b-4264-9936-d2309b9362ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10c37b93-0728-4c96-9b25-afc35aa78e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9115e2e-0a4e-469a-844b-0b98312a8df7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f815ad1-46d3-4f26-8cf7-354e4abeb254",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "57d4a07e-aa1e-4403-b23e-c3362f3a6cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22113b79-1522-4359-aaa3-b5257e0e4e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "456d5683-6b10-47b9-a97f-c828ae297e45"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef0be434-9dc6-41c8-89fe-efc5731a16a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc41ab77-dbd6-479e-b933-0f698f1212df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bcb59f3-df90-4da9-9084-0cb0cc9145b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5dfb9f5-8aa3-4c77-85b7-02e7e8bf122e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "120f96b8-0b2b-4890-8172-35568d87b7f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7db9d5eb-6ef5-4e0e-bae1-d11a00e66c67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ece97ba-6c94-4367-be46-8dcac6433164",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10453cdf-8b78-4a02-9318-1897f0548f22"
            }
          }
        ]
      },
      {
        "id": "65ca4051-6ab4-4c3b-aa4c-fcc850b75bc0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "44924de8-6373-40a4-b640-49fab2c521b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77c9bcd7-07fe-40d9-8075-ecbaa2f76453",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76dc9286-6c8c-482e-8401-428f0741f3cd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41a862d-bf9b-48c7-bfab-c57cd067c614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aedbe5aa-36a0-4640-917e-18ea03f00967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd15761b-e84a-48cf-a51f-f9255dbded06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48d70994-ef13-4484-b967-e71ea388cfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6eb33d3-4b26-428d-9f5e-0da0c065426b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9247a9-51d8-423d-ba9d-212f18af2c8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5d8998e6-4efb-46c8-ac9c-656f8aadddd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd95aa05-d0ef-4ef5-a499-63a7a5d0cd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "804f562e-afd2-4b7f-a8e2-5a436d813551"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf33ac98-6836-4391-a432-1b0c95c09957",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb2ebb55-3013-49c4-872d-34b02d4774ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "580cbda9-d2ff-4649-a7b1-17317a259ca0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "529e7132-5920-41b7-a03b-8bd49a1a6581"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93c14f59-b584-41d8-8e74-238b5d6f1cf3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "64fb9361-c8b8-4676-8a5b-f283a3ad57f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3acd26ce-9a81-452c-92fe-ebb163be128f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24e17f7b-c347-4229-8425-b8f9855ecf33"
            }
          }
        ]
      },
      {
        "id": "43d48342-9268-489f-8eb5-d606aca64686",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6fe5e889-be26-484b-99ff-b5a435481ed6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8331389c-52e6-4eb0-8926-4e54c8bacc1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0ca4e25-f8c7-4dd4-97d3-7fd402644a18",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e89c9f6-13d8-4be0-8c17-bfc12db5fd5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fee7d10-d575-4d71-a287-949394114ba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "645d2c1d-bf2b-476b-9f5e-daef98369483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fc96f43-72f5-4659-b531-b3e6a3269ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d64cde-2651-4598-a071-dc10332665f5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3342fb1-dd46-4638-a1ec-083d9ab47a3d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0b8b2b4b-6199-48ec-9715-dc0f68699ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e28a038-8ad7-4c9e-875f-3de7d92fd377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e255cf2-68c7-4b86-abc4-d0b78ad55ca2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81e6e6be-c154-4ab2-9399-91a6ec25bec5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c679d171-6685-497e-bce1-a4b28213b7c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f122aea-908d-4d6c-b454-83c86ff6438c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b437e6f5-b97a-43e5-bd87-fd951dfb5100"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b9909f1-a767-467d-9c70-872f6f7cba14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "1cfa8462-3cd5-41c1-a984-6d4b46583345"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "098a0b57-e02c-43c4-a4f7-a60a6b4903ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b8445ea-1431-4482-8504-22eb23e5c3f2"
            }
          }
        ]
      },
      {
        "id": "640eebb1-0c76-494c-bec6-844739028445",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a8091a7f-2d6b-4aea-8985-96700584726a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8835551-fa02-4f48-87ed-c31f125b3d29",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "edbf3cf6-69b4-483c-b6e1-4a65608bee33",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a5288c-4945-4a4d-86c7-7eaabf960f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b0c9e4-f9b5-4315-979e-f9635bdc502f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408e8f3a-ab33-49d2-932a-b9f576229e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48fcb981-38d6-44b8-800a-b0afed0ff7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a2105b-896b-40e1-864a-377632a7a68d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6434f60e-d7ef-4688-ba04-09bbc3f5bb79",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "55d777df-4c0b-47e0-82d7-d1016fbf79c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda3cf18-01d0-4f11-b40f-ce7156569aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7280f1be-9fc4-4e79-a301-53208c58e037"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ac0850b-a3f9-4eea-80e4-1c4f4142ab04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5627b1db-bb2c-489f-97cd-2d498dca33ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3f540f2-a85c-4207-94e9-55fb9002d505",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd80c285-18f6-4ef9-aabb-4008a4423f70"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34e685c0-246d-4ec9-98f3-236013156351",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "4ff4481c-97ed-4f37-8bad-47fc7f175600"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29bf001b-714b-426b-a9a5-1117a25fc795",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55b9999b-69ca-471a-95a3-32254358df78"
            }
          }
        ]
      },
      {
        "id": "b3e2b580-040a-4e51-b3dc-ef49be0ba782",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "5349f7ec-3c7c-4086-bdc2-1353c9626cd8",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 432,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 104,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 115,
        "pending": 0,
        "failed": 93
      },
      "testScripts": {
        "total": 217,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 215,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 75.41346153846152,
      "responseMin": 34,
      "responseMax": 535,
      "responseSd": 78.87375630823985,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1660611225578,
      "completed": 1660611236292
    },
    "executions": [
      {
        "id": "526df073-48be-470a-820b-0ee1c5272fb9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 55,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "45dc9fff-e868-4bd5-a5cf-d9cfec201043",
          "httpRequestId": "a1ba44ee-5a38-436a-a4b3-c01148f99a44"
        },
        "item": {
          "id": "526df073-48be-470a-820b-0ee1c5272fb9",
          "name": "did_json"
        },
        "response": {
          "id": "16794cf4-b5a2-4016-931e-4714a3fc625a",
          "status": "OK",
          "code": 200,
          "responseTime": 333,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc8316f-ef51-47e3-999d-38234717d2e3",
        "cursor": {
          "ref": "85bd7951-e104-4a0d-9564-04fa8cbdbc87",
          "length": 55,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cfa9922f-fe4e-4503-af3c-9a1fc1de89e1"
        },
        "item": {
          "id": "dcc8316f-ef51-47e3-999d-38234717d2e3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "04dd86bd-f359-463c-a9dd-5a3b837173ec",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "dcc8316f-ef51-47e3-999d-38234717d2e3",
        "cursor": {
          "ref": "85bd7951-e104-4a0d-9564-04fa8cbdbc87",
          "length": 55,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cfa9922f-fe4e-4503-af3c-9a1fc1de89e1"
        },
        "item": {
          "id": "dcc8316f-ef51-47e3-999d-38234717d2e3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "04dd86bd-f359-463c-a9dd-5a3b837173ec",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "26ac5b0a-60f7-48b6-9841-8180139094e0",
        "cursor": {
          "ref": "0e3cfb8d-543d-4d5c-9c90-e11bfa3a045b",
          "length": 55,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "56b9c10d-c5dd-459d-80c2-f92499aed162"
        },
        "item": {
          "id": "26ac5b0a-60f7-48b6-9841-8180139094e0",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ac1468a2-49ef-4849-9f9f-4b4f15ffe723",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "26ac5b0a-60f7-48b6-9841-8180139094e0",
        "cursor": {
          "ref": "0e3cfb8d-543d-4d5c-9c90-e11bfa3a045b",
          "length": 55,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "56b9c10d-c5dd-459d-80c2-f92499aed162"
        },
        "item": {
          "id": "26ac5b0a-60f7-48b6-9841-8180139094e0",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ac1468a2-49ef-4849-9f9f-4b4f15ffe723",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "e6e88d5c-5157-4a57-bb66-928b0e9039bb",
        "cursor": {
          "ref": "521b51f4-4f75-4184-b1d3-7c27e4a926bc",
          "length": 55,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "36948edf-d788-4c6b-b250-1bac83a1062c"
        },
        "item": {
          "id": "e6e88d5c-5157-4a57-bb66-928b0e9039bb",
          "name": "identifiers"
        },
        "response": {
          "id": "afd99641-3e76-4de7-ace1-6ff87ef74ad3",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e3e285-5b7e-4aea-9cf2-65695a8b6301",
        "cursor": {
          "ref": "b6262acc-6a44-47a3-9ef8-64bb272c36d0",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fa8ee843-de84-4cda-b526-68ce16ca8ee1"
        },
        "item": {
          "id": "a0e3e285-5b7e-4aea-9cf2-65695a8b6301",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2a335523-e450-429e-8eec-5ce49e0a8af0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 439,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "a0e3e285-5b7e-4aea-9cf2-65695a8b6301",
        "cursor": {
          "ref": "b6262acc-6a44-47a3-9ef8-64bb272c36d0",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fa8ee843-de84-4cda-b526-68ce16ca8ee1"
        },
        "item": {
          "id": "a0e3e285-5b7e-4aea-9cf2-65695a8b6301",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2a335523-e450-429e-8eec-5ce49e0a8af0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 439,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "a0e3e285-5b7e-4aea-9cf2-65695a8b6301",
        "cursor": {
          "ref": "b6262acc-6a44-47a3-9ef8-64bb272c36d0",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fa8ee843-de84-4cda-b526-68ce16ca8ee1"
        },
        "item": {
          "id": "a0e3e285-5b7e-4aea-9cf2-65695a8b6301",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2a335523-e450-429e-8eec-5ce49e0a8af0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 439,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "49224a90-689e-4802-a49f-5a2fcb8543c6",
        "cursor": {
          "ref": "ab0e0ed4-e943-4e5d-ac56-e21b8ebb8a2c",
          "length": 55,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7e7facd7-40e4-4828-9faf-6ed1c076a521"
        },
        "item": {
          "id": "49224a90-689e-4802-a49f-5a2fcb8543c6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "680fb225-b013-4a13-b8a8-028f0f8e7aef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "49224a90-689e-4802-a49f-5a2fcb8543c6",
        "cursor": {
          "ref": "ab0e0ed4-e943-4e5d-ac56-e21b8ebb8a2c",
          "length": 55,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7e7facd7-40e4-4828-9faf-6ed1c076a521"
        },
        "item": {
          "id": "49224a90-689e-4802-a49f-5a2fcb8543c6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "680fb225-b013-4a13-b8a8-028f0f8e7aef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "dc5cdd77-e0fb-4646-b951-1a322c5615ee",
        "cursor": {
          "ref": "bfb5a848-76a3-4c0e-b6d3-9ce18c919ba1",
          "length": 55,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a45fb620-8cda-43c1-8dac-31f6d9659c3d"
        },
        "item": {
          "id": "dc5cdd77-e0fb-4646-b951-1a322c5615ee",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "c3b18518-febf-4717-bd79-bfeb9d130850",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "dc5cdd77-e0fb-4646-b951-1a322c5615ee",
        "cursor": {
          "ref": "bfb5a848-76a3-4c0e-b6d3-9ce18c919ba1",
          "length": 55,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a45fb620-8cda-43c1-8dac-31f6d9659c3d"
        },
        "item": {
          "id": "dc5cdd77-e0fb-4646-b951-1a322c5615ee",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "c3b18518-febf-4717-bd79-bfeb9d130850",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "7e81bdc6-f0ed-4326-9d20-37c70a674536",
        "cursor": {
          "ref": "e2f071e8-b6f0-46b0-8cfc-12c8e003b8c2",
          "length": 55,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "426afe5a-8535-41e3-8a03-bbe26fc2927e"
        },
        "item": {
          "id": "7e81bdc6-f0ed-4326-9d20-37c70a674536",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "a5623b7b-478c-4e4f-825b-c06de7088e35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7e81bdc6-f0ed-4326-9d20-37c70a674536",
        "cursor": {
          "ref": "e2f071e8-b6f0-46b0-8cfc-12c8e003b8c2",
          "length": 55,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "426afe5a-8535-41e3-8a03-bbe26fc2927e"
        },
        "item": {
          "id": "7e81bdc6-f0ed-4326-9d20-37c70a674536",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "a5623b7b-478c-4e4f-825b-c06de7088e35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cacf5c30-fbc7-47fe-9b7a-e6608930241e",
        "cursor": {
          "ref": "60f44053-6ca5-491f-bfda-5812d77e58e9",
          "length": 55,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c3d13113-b7c5-436a-b558-2c0ad2f92df0"
        },
        "item": {
          "id": "cacf5c30-fbc7-47fe-9b7a-e6608930241e",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "e037e347-3131-4b20-ada0-2c16c6e48878",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "cacf5c30-fbc7-47fe-9b7a-e6608930241e",
        "cursor": {
          "ref": "60f44053-6ca5-491f-bfda-5812d77e58e9",
          "length": 55,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c3d13113-b7c5-436a-b558-2c0ad2f92df0"
        },
        "item": {
          "id": "cacf5c30-fbc7-47fe-9b7a-e6608930241e",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "e037e347-3131-4b20-ada0-2c16c6e48878",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "f3edd7e4-5ccf-4f9b-9796-0ce911bc6afd",
        "cursor": {
          "ref": "0e2fa65b-2e15-485f-acfa-8111a968a018",
          "length": 55,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1e6f6ca1-d1f6-4edc-b532-00a56039df88"
        },
        "item": {
          "id": "f3edd7e4-5ccf-4f9b-9796-0ce911bc6afd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8d43a6fb-14e7-4d21-ae71-b403361b11a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f3edd7e4-5ccf-4f9b-9796-0ce911bc6afd",
        "cursor": {
          "ref": "0e2fa65b-2e15-485f-acfa-8111a968a018",
          "length": 55,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1e6f6ca1-d1f6-4edc-b532-00a56039df88"
        },
        "item": {
          "id": "f3edd7e4-5ccf-4f9b-9796-0ce911bc6afd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8d43a6fb-14e7-4d21-ae71-b403361b11a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "2c04fc19-6d23-4619-9516-846b7193ebdd",
        "cursor": {
          "ref": "4c7b5fdc-0455-4deb-861c-c008839f0dc0",
          "length": 55,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2a97fb3b-d148-4838-be0a-bb96c194f51a"
        },
        "item": {
          "id": "2c04fc19-6d23-4619-9516-846b7193ebdd",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "3fcd9d6a-8e93-4d3c-80f5-c715696467b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "2c04fc19-6d23-4619-9516-846b7193ebdd",
        "cursor": {
          "ref": "4c7b5fdc-0455-4deb-861c-c008839f0dc0",
          "length": 55,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2a97fb3b-d148-4838-be0a-bb96c194f51a"
        },
        "item": {
          "id": "2c04fc19-6d23-4619-9516-846b7193ebdd",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "3fcd9d6a-8e93-4d3c-80f5-c715696467b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "1ac71406-b580-4e06-b900-3f1944cc9b57",
        "cursor": {
          "ref": "af74a4cb-9086-42d7-8cfe-82220c30035e",
          "length": 55,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "47664973-22bb-4199-b356-4e32d9c28dea"
        },
        "item": {
          "id": "1ac71406-b580-4e06-b900-3f1944cc9b57",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "20c42665-1cad-418e-a153-5e8d4eee0079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "1ac71406-b580-4e06-b900-3f1944cc9b57",
        "cursor": {
          "ref": "af74a4cb-9086-42d7-8cfe-82220c30035e",
          "length": 55,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "47664973-22bb-4199-b356-4e32d9c28dea"
        },
        "item": {
          "id": "1ac71406-b580-4e06-b900-3f1944cc9b57",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "20c42665-1cad-418e-a153-5e8d4eee0079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "291dadb0-f595-4fa7-81cc-7bcd37db14b8",
        "cursor": {
          "ref": "1438aaa1-d5c3-4e0c-9530-87d17d505c8e",
          "length": 55,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c7dd5346-da34-4819-bcce-9aa716c00854"
        },
        "item": {
          "id": "291dadb0-f595-4fa7-81cc-7bcd37db14b8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b6c6f421-b982-41f3-af63-f0f8ddf164b4",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "291dadb0-f595-4fa7-81cc-7bcd37db14b8",
        "cursor": {
          "ref": "1438aaa1-d5c3-4e0c-9530-87d17d505c8e",
          "length": 55,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c7dd5346-da34-4819-bcce-9aa716c00854"
        },
        "item": {
          "id": "291dadb0-f595-4fa7-81cc-7bcd37db14b8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b6c6f421-b982-41f3-af63-f0f8ddf164b4",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "9242ea80-5c62-466b-a40d-87af1b40f1fd",
        "cursor": {
          "ref": "722305cd-ddc6-46d7-b3d4-743e9b79af2c",
          "length": 55,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "392aca06-f061-498a-be53-d52ec2c4d107"
        },
        "item": {
          "id": "9242ea80-5c62-466b-a40d-87af1b40f1fd",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "b923a15b-c90e-4f4b-aa17-138167dc705f",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "9242ea80-5c62-466b-a40d-87af1b40f1fd",
        "cursor": {
          "ref": "722305cd-ddc6-46d7-b3d4-743e9b79af2c",
          "length": 55,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "392aca06-f061-498a-be53-d52ec2c4d107"
        },
        "item": {
          "id": "9242ea80-5c62-466b-a40d-87af1b40f1fd",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "b923a15b-c90e-4f4b-aa17-138167dc705f",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "51d80954-77e3-4d32-98fe-019a2b7035e3",
        "cursor": {
          "ref": "b2e90d12-48b6-4167-b7fc-3547aed73589",
          "length": 55,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f3cb6807-9902-4a06-9cba-f37b243819b2"
        },
        "item": {
          "id": "51d80954-77e3-4d32-98fe-019a2b7035e3",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "114008be-b90d-4639-b530-d9f210158feb",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "51d80954-77e3-4d32-98fe-019a2b7035e3",
        "cursor": {
          "ref": "b2e90d12-48b6-4167-b7fc-3547aed73589",
          "length": 55,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f3cb6807-9902-4a06-9cba-f37b243819b2"
        },
        "item": {
          "id": "51d80954-77e3-4d32-98fe-019a2b7035e3",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "114008be-b90d-4639-b530-d9f210158feb",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "5a05c042-6185-442b-b8f1-f3d82f977ddc",
        "cursor": {
          "ref": "69d702a5-6213-4cc6-9e20-664124b1abd3",
          "length": 55,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4e0b8978-9951-4df1-8bef-ba61f3912e61"
        },
        "item": {
          "id": "5a05c042-6185-442b-b8f1-f3d82f977ddc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3d72e0dc-966e-4048-9014-343208dc81a1",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "5a05c042-6185-442b-b8f1-f3d82f977ddc",
        "cursor": {
          "ref": "69d702a5-6213-4cc6-9e20-664124b1abd3",
          "length": 55,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4e0b8978-9951-4df1-8bef-ba61f3912e61"
        },
        "item": {
          "id": "5a05c042-6185-442b-b8f1-f3d82f977ddc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3d72e0dc-966e-4048-9014-343208dc81a1",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "77cd81da-4706-4a0d-8bc4-8e7d0c09e644",
        "cursor": {
          "ref": "90a630de-1fb0-4ff0-a294-b32cf8c0c733",
          "length": 55,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6459f21f-5bcd-46d0-a5f0-6d43aa8a8c2b"
        },
        "item": {
          "id": "77cd81da-4706-4a0d-8bc4-8e7d0c09e644",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e5cbc0ec-8ba0-47c6-a729-b9832c48d9fe",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "77cd81da-4706-4a0d-8bc4-8e7d0c09e644",
        "cursor": {
          "ref": "90a630de-1fb0-4ff0-a294-b32cf8c0c733",
          "length": 55,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6459f21f-5bcd-46d0-a5f0-6d43aa8a8c2b"
        },
        "item": {
          "id": "77cd81da-4706-4a0d-8bc4-8e7d0c09e644",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e5cbc0ec-8ba0-47c6-a729-b9832c48d9fe",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f37c6091-89e2-453e-8c1b-247e3c1c8bdc",
        "cursor": {
          "ref": "b2075026-d540-40d4-b200-54f6faf4b7df",
          "length": 55,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d51c0c5f-3966-41dd-a159-1f0ffc0428a3"
        },
        "item": {
          "id": "f37c6091-89e2-453e-8c1b-247e3c1c8bdc",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e15c4425-bea3-429c-a497-d3a347b2f30c",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "f37c6091-89e2-453e-8c1b-247e3c1c8bdc",
        "cursor": {
          "ref": "b2075026-d540-40d4-b200-54f6faf4b7df",
          "length": 55,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d51c0c5f-3966-41dd-a159-1f0ffc0428a3"
        },
        "item": {
          "id": "f37c6091-89e2-453e-8c1b-247e3c1c8bdc",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e15c4425-bea3-429c-a497-d3a347b2f30c",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "6fe663ea-9e72-4ddf-aaa7-434e22cc9d40",
        "cursor": {
          "ref": "311d188a-7369-4340-9de2-2bf3dae32534",
          "length": 55,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "dec274de-edab-4885-a48f-de80d5c474ec"
        },
        "item": {
          "id": "6fe663ea-9e72-4ddf-aaa7-434e22cc9d40",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "137c7868-f008-4f74-ba1e-95d6504690ab",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "6fe663ea-9e72-4ddf-aaa7-434e22cc9d40",
        "cursor": {
          "ref": "311d188a-7369-4340-9de2-2bf3dae32534",
          "length": 55,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "dec274de-edab-4885-a48f-de80d5c474ec"
        },
        "item": {
          "id": "6fe663ea-9e72-4ddf-aaa7-434e22cc9d40",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "137c7868-f008-4f74-ba1e-95d6504690ab",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "b7ba97fb-9e45-47e8-bc65-0a66e2875f7b",
        "cursor": {
          "ref": "4e68ea18-0de8-4d19-9b46-c6ee1a26c4ef",
          "length": 55,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7f291477-627a-4060-b1b3-36bd0f28c79e"
        },
        "item": {
          "id": "b7ba97fb-9e45-47e8-bc65-0a66e2875f7b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "093f1840-7437-46f8-bb8f-aa25c59411f7",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b7ba97fb-9e45-47e8-bc65-0a66e2875f7b",
        "cursor": {
          "ref": "4e68ea18-0de8-4d19-9b46-c6ee1a26c4ef",
          "length": 55,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7f291477-627a-4060-b1b3-36bd0f28c79e"
        },
        "item": {
          "id": "b7ba97fb-9e45-47e8-bc65-0a66e2875f7b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "093f1840-7437-46f8-bb8f-aa25c59411f7",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "d5480468-5e6a-40cb-b6eb-a5443f257ef4",
        "cursor": {
          "ref": "d7c5b823-d316-446a-ab33-1c76957cee6d",
          "length": 55,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a9dcab04-b69d-4e24-a07f-f6f1afdff8f8"
        },
        "item": {
          "id": "d5480468-5e6a-40cb-b6eb-a5443f257ef4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b899c34e-2404-406d-9a18-5bf8d9b30b1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d5480468-5e6a-40cb-b6eb-a5443f257ef4",
        "cursor": {
          "ref": "d7c5b823-d316-446a-ab33-1c76957cee6d",
          "length": 55,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a9dcab04-b69d-4e24-a07f-f6f1afdff8f8"
        },
        "item": {
          "id": "d5480468-5e6a-40cb-b6eb-a5443f257ef4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b899c34e-2404-406d-9a18-5bf8d9b30b1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b6568b0d-fdde-4c10-aa8e-ddc880aca1eb",
        "cursor": {
          "ref": "2e7218ef-c11e-424c-a261-694640bae6b2",
          "length": 55,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9b45c0b4-c2a8-4d78-ab38-3b37a1ff3a20"
        },
        "item": {
          "id": "b6568b0d-fdde-4c10-aa8e-ddc880aca1eb",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "8f49a95b-4e5e-4dcd-b6ff-7866a677ecee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "b6568b0d-fdde-4c10-aa8e-ddc880aca1eb",
        "cursor": {
          "ref": "2e7218ef-c11e-424c-a261-694640bae6b2",
          "length": 55,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9b45c0b4-c2a8-4d78-ab38-3b37a1ff3a20"
        },
        "item": {
          "id": "b6568b0d-fdde-4c10-aa8e-ddc880aca1eb",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "8f49a95b-4e5e-4dcd-b6ff-7866a677ecee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "2b680de7-1862-4389-9f8c-92541feea34a",
        "cursor": {
          "ref": "40acff7b-ead6-4238-ace6-5841b3d354fc",
          "length": 55,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8c569d5d-3dc4-4856-80d0-ea017d07c80e"
        },
        "item": {
          "id": "2b680de7-1862-4389-9f8c-92541feea34a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3973282e-b899-4325-b57c-dc2e3f9cf08c",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2b680de7-1862-4389-9f8c-92541feea34a",
        "cursor": {
          "ref": "40acff7b-ead6-4238-ace6-5841b3d354fc",
          "length": 55,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8c569d5d-3dc4-4856-80d0-ea017d07c80e"
        },
        "item": {
          "id": "2b680de7-1862-4389-9f8c-92541feea34a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3973282e-b899-4325-b57c-dc2e3f9cf08c",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "4072906a-96fd-4b51-b6ef-dce5ec02aee9",
        "cursor": {
          "ref": "e2aa2c43-f9a0-4673-9604-54537134558d",
          "length": 55,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "456d95ca-5c50-4ae5-965c-88e00d6d64ee"
        },
        "item": {
          "id": "4072906a-96fd-4b51-b6ef-dce5ec02aee9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "012e3b68-72c9-4b4f-a8b7-1db6c41cb51e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4072906a-96fd-4b51-b6ef-dce5ec02aee9",
        "cursor": {
          "ref": "e2aa2c43-f9a0-4673-9604-54537134558d",
          "length": 55,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "456d95ca-5c50-4ae5-965c-88e00d6d64ee"
        },
        "item": {
          "id": "4072906a-96fd-4b51-b6ef-dce5ec02aee9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "012e3b68-72c9-4b4f-a8b7-1db6c41cb51e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "0d70b881-a34d-4088-adc8-dfc19317984e",
        "cursor": {
          "ref": "cf783eae-06e2-4570-95e6-1eecf9fc8f48",
          "length": 55,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cb57c54d-c515-4dea-be52-57df264fcb62"
        },
        "item": {
          "id": "0d70b881-a34d-4088-adc8-dfc19317984e",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "660f0e86-4a5d-41a2-94cc-c345ca76067b",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0d70b881-a34d-4088-adc8-dfc19317984e",
        "cursor": {
          "ref": "cf783eae-06e2-4570-95e6-1eecf9fc8f48",
          "length": 55,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cb57c54d-c515-4dea-be52-57df264fcb62"
        },
        "item": {
          "id": "0d70b881-a34d-4088-adc8-dfc19317984e",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "660f0e86-4a5d-41a2-94cc-c345ca76067b",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "4f14aeab-1c26-4c96-be7a-0930f81c8283",
        "cursor": {
          "ref": "764684a1-c7f2-44ff-b4bc-300ad7769d4d",
          "length": 55,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0d36e802-708c-427c-87ba-31041558159e"
        },
        "item": {
          "id": "4f14aeab-1c26-4c96-be7a-0930f81c8283",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "7adf3f30-b8e3-46c4-ae34-077af20ed4a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "4f14aeab-1c26-4c96-be7a-0930f81c8283",
        "cursor": {
          "ref": "764684a1-c7f2-44ff-b4bc-300ad7769d4d",
          "length": 55,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0d36e802-708c-427c-87ba-31041558159e"
        },
        "item": {
          "id": "4f14aeab-1c26-4c96-be7a-0930f81c8283",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "7adf3f30-b8e3-46c4-ae34-077af20ed4a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "1d493dec-c931-4581-a847-44a6aaee5eb4",
        "cursor": {
          "ref": "a644c101-c532-4193-8c2a-c4095b081722",
          "length": 55,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f0e20829-767d-4406-b210-0a303282db15"
        },
        "item": {
          "id": "1d493dec-c931-4581-a847-44a6aaee5eb4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "207eae1e-11a6-43fc-95ec-0d5e43a381f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "1d493dec-c931-4581-a847-44a6aaee5eb4",
        "cursor": {
          "ref": "a644c101-c532-4193-8c2a-c4095b081722",
          "length": 55,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f0e20829-767d-4406-b210-0a303282db15"
        },
        "item": {
          "id": "1d493dec-c931-4581-a847-44a6aaee5eb4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "207eae1e-11a6-43fc-95ec-0d5e43a381f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "0111659e-3737-465e-ad41-d7a1668b7c9c",
        "cursor": {
          "ref": "8f510b7e-dfeb-45a9-b40b-590f9713ed67",
          "length": 55,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1da730de-7f44-452e-875b-fe815ebfc6fa"
        },
        "item": {
          "id": "0111659e-3737-465e-ad41-d7a1668b7c9c",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "606a1519-2faa-43fc-bf34-524fffa55854",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0111659e-3737-465e-ad41-d7a1668b7c9c",
        "cursor": {
          "ref": "8f510b7e-dfeb-45a9-b40b-590f9713ed67",
          "length": 55,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1da730de-7f44-452e-875b-fe815ebfc6fa"
        },
        "item": {
          "id": "0111659e-3737-465e-ad41-d7a1668b7c9c",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "606a1519-2faa-43fc-bf34-524fffa55854",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "74d6877e-011d-4e93-ab18-0728fc7469bf",
        "cursor": {
          "ref": "292c65c3-0e08-4861-98c5-59afba330d93",
          "length": 55,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8c5348b1-7449-4f7a-a569-aa8cccfe626d"
        },
        "item": {
          "id": "74d6877e-011d-4e93-ab18-0728fc7469bf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "266b97c7-90bc-491b-b44d-26b269723c31",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "74d6877e-011d-4e93-ab18-0728fc7469bf",
        "cursor": {
          "ref": "292c65c3-0e08-4861-98c5-59afba330d93",
          "length": 55,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8c5348b1-7449-4f7a-a569-aa8cccfe626d"
        },
        "item": {
          "id": "74d6877e-011d-4e93-ab18-0728fc7469bf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "266b97c7-90bc-491b-b44d-26b269723c31",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7cc81b9a-cf56-46f3-b4d1-be59f5d0dfdf",
        "cursor": {
          "ref": "18815cc9-77e0-46d2-8f32-7d063acb9728",
          "length": 55,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "49286c5b-65a1-4fc4-968a-674731963177"
        },
        "item": {
          "id": "7cc81b9a-cf56-46f3-b4d1-be59f5d0dfdf",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "d230885e-d865-4931-bfb5-48f889867956",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7cc81b9a-cf56-46f3-b4d1-be59f5d0dfdf",
        "cursor": {
          "ref": "18815cc9-77e0-46d2-8f32-7d063acb9728",
          "length": 55,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "49286c5b-65a1-4fc4-968a-674731963177"
        },
        "item": {
          "id": "7cc81b9a-cf56-46f3-b4d1-be59f5d0dfdf",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "d230885e-d865-4931-bfb5-48f889867956",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "ec2d8b52-dc0b-49ce-b7f8-6e7bb3dbbd8d",
        "cursor": {
          "ref": "4ab707b5-02dd-47b3-8168-9067f2636472",
          "length": 55,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2ab32820-21ee-465c-9b75-0a99a1ba010e"
        },
        "item": {
          "id": "ec2d8b52-dc0b-49ce-b7f8-6e7bb3dbbd8d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c5e0f377-b423-4188-9f0a-9e7e4516d0be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "ec2d8b52-dc0b-49ce-b7f8-6e7bb3dbbd8d",
        "cursor": {
          "ref": "4ab707b5-02dd-47b3-8168-9067f2636472",
          "length": 55,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2ab32820-21ee-465c-9b75-0a99a1ba010e"
        },
        "item": {
          "id": "ec2d8b52-dc0b-49ce-b7f8-6e7bb3dbbd8d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c5e0f377-b423-4188-9f0a-9e7e4516d0be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "d8dc8e2b-5dfa-4eeb-a6ea-2b4e44b7d5c0",
        "cursor": {
          "ref": "ab2028a2-0a49-4735-8eab-6ad7cee2f960",
          "length": 55,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4afbe3c0-765d-4842-a036-298e138c5be7"
        },
        "item": {
          "id": "d8dc8e2b-5dfa-4eeb-a6ea-2b4e44b7d5c0",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "32ca96b3-2656-4c1c-aa1d-1c8872ea4ea3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d8dc8e2b-5dfa-4eeb-a6ea-2b4e44b7d5c0",
        "cursor": {
          "ref": "ab2028a2-0a49-4735-8eab-6ad7cee2f960",
          "length": 55,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4afbe3c0-765d-4842-a036-298e138c5be7"
        },
        "item": {
          "id": "d8dc8e2b-5dfa-4eeb-a6ea-2b4e44b7d5c0",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "32ca96b3-2656-4c1c-aa1d-1c8872ea4ea3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "2d316820-5902-416f-a052-7bca490b3360",
        "cursor": {
          "ref": "23c74484-3a4c-4067-b5d8-88c7c770738a",
          "length": 55,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fcba88a7-cb41-4ad8-a092-318ca008d46b"
        },
        "item": {
          "id": "2d316820-5902-416f-a052-7bca490b3360",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "09bc12c1-53a0-438e-98b7-edcc67c29d09",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "2d316820-5902-416f-a052-7bca490b3360",
        "cursor": {
          "ref": "23c74484-3a4c-4067-b5d8-88c7c770738a",
          "length": 55,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fcba88a7-cb41-4ad8-a092-318ca008d46b"
        },
        "item": {
          "id": "2d316820-5902-416f-a052-7bca490b3360",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "09bc12c1-53a0-438e-98b7-edcc67c29d09",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "e17549bc-cd6e-4e7a-a0a6-40357e8447f4",
        "cursor": {
          "ref": "fb7911bd-6ba0-42f8-8241-334501df15ed",
          "length": 55,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4beefb30-beb7-40db-8e29-bdc3fe8517e6"
        },
        "item": {
          "id": "e17549bc-cd6e-4e7a-a0a6-40357e8447f4",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "c39f5229-069e-468d-96dd-1a9e8907818d",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e17549bc-cd6e-4e7a-a0a6-40357e8447f4",
        "cursor": {
          "ref": "fb7911bd-6ba0-42f8-8241-334501df15ed",
          "length": 55,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4beefb30-beb7-40db-8e29-bdc3fe8517e6"
        },
        "item": {
          "id": "e17549bc-cd6e-4e7a-a0a6-40357e8447f4",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "c39f5229-069e-468d-96dd-1a9e8907818d",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d385d9a3-f79c-40ed-87e5-3079f6294f5e",
        "cursor": {
          "ref": "ed84d686-1278-4e8a-ac76-d9f0a2eb944e",
          "length": 55,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "29bf856c-a70e-457e-ae6f-3ac38fcda5c4"
        },
        "item": {
          "id": "d385d9a3-f79c-40ed-87e5-3079f6294f5e",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "01d1440f-f250-4a62-b681-c624e38af2e3",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d385d9a3-f79c-40ed-87e5-3079f6294f5e",
        "cursor": {
          "ref": "ed84d686-1278-4e8a-ac76-d9f0a2eb944e",
          "length": 55,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "29bf856c-a70e-457e-ae6f-3ac38fcda5c4"
        },
        "item": {
          "id": "d385d9a3-f79c-40ed-87e5-3079f6294f5e",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "01d1440f-f250-4a62-b681-c624e38af2e3",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "257a0872-b6a0-4599-9b0f-2b44b51f9603",
        "cursor": {
          "ref": "65fe6b5e-647c-4015-a209-3ecff3767192",
          "length": 55,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a4139453-463e-492e-bf5f-7540df6577ac"
        },
        "item": {
          "id": "257a0872-b6a0-4599-9b0f-2b44b51f9603",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "18a71d41-ec9c-4791-803b-d1cccc03334e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "257a0872-b6a0-4599-9b0f-2b44b51f9603",
        "cursor": {
          "ref": "65fe6b5e-647c-4015-a209-3ecff3767192",
          "length": 55,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a4139453-463e-492e-bf5f-7540df6577ac"
        },
        "item": {
          "id": "257a0872-b6a0-4599-9b0f-2b44b51f9603",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "18a71d41-ec9c-4791-803b-d1cccc03334e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "d9eceb87-e55a-4201-a116-94aea87765a6",
        "cursor": {
          "ref": "250418b8-2b2e-43f0-bb9f-f26039e38f03",
          "length": 55,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c677dc65-28f5-4e1d-bb78-3062fbbbfaeb"
        },
        "item": {
          "id": "d9eceb87-e55a-4201-a116-94aea87765a6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ec075613-c0d2-4851-9f9f-889839ba01c1",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "d9eceb87-e55a-4201-a116-94aea87765a6",
        "cursor": {
          "ref": "250418b8-2b2e-43f0-bb9f-f26039e38f03",
          "length": 55,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c677dc65-28f5-4e1d-bb78-3062fbbbfaeb"
        },
        "item": {
          "id": "d9eceb87-e55a-4201-a116-94aea87765a6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ec075613-c0d2-4851-9f9f-889839ba01c1",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "edffb54c-1e58-4d85-a655-901f33679673",
        "cursor": {
          "ref": "4b3a9b78-b1ad-4436-83bc-4df950e272e5",
          "length": 55,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9b406ddb-a0a5-419f-8a3c-39e51326ff68"
        },
        "item": {
          "id": "edffb54c-1e58-4d85-a655-901f33679673",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b1584c3c-4439-441c-9ebb-ab11fe07a0e4",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "edffb54c-1e58-4d85-a655-901f33679673",
        "cursor": {
          "ref": "4b3a9b78-b1ad-4436-83bc-4df950e272e5",
          "length": 55,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9b406ddb-a0a5-419f-8a3c-39e51326ff68"
        },
        "item": {
          "id": "edffb54c-1e58-4d85-a655-901f33679673",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b1584c3c-4439-441c-9ebb-ab11fe07a0e4",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37e8d15-3fd0-4b4f-b8a1-47ab20043bce",
        "cursor": {
          "ref": "105406e8-c9a0-409e-a91b-cd0c9919a3f4",
          "length": 55,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f5ab92ea-c9e6-4815-9559-301beeee4d8e"
        },
        "item": {
          "id": "d37e8d15-3fd0-4b4f-b8a1-47ab20043bce",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "e4339c3b-6fd9-4a50-b546-fe5de3a64122",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d37e8d15-3fd0-4b4f-b8a1-47ab20043bce",
        "cursor": {
          "ref": "105406e8-c9a0-409e-a91b-cd0c9919a3f4",
          "length": 55,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f5ab92ea-c9e6-4815-9559-301beeee4d8e"
        },
        "item": {
          "id": "d37e8d15-3fd0-4b4f-b8a1-47ab20043bce",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "e4339c3b-6fd9-4a50-b546-fe5de3a64122",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e88d139d-85db-4c0b-abb9-1569c73f112c",
        "cursor": {
          "ref": "60e43069-363a-4566-b4c5-0a8aa1582234",
          "length": 55,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b412d475-b196-45ab-ad8b-bb1a849e722c"
        },
        "item": {
          "id": "e88d139d-85db-4c0b-abb9-1569c73f112c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b08646d9-050b-477d-9696-371456ea2070",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88d139d-85db-4c0b-abb9-1569c73f112c",
        "cursor": {
          "ref": "60e43069-363a-4566-b4c5-0a8aa1582234",
          "length": 55,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b412d475-b196-45ab-ad8b-bb1a849e722c"
        },
        "item": {
          "id": "e88d139d-85db-4c0b-abb9-1569c73f112c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b08646d9-050b-477d-9696-371456ea2070",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba7cb17-ee8e-433a-8510-242fb137afd6",
        "cursor": {
          "ref": "bb6874dd-c126-4586-a7dd-1017c750dc09",
          "length": 55,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5a438e0e-e2b9-403b-b5cb-549675bbe11f"
        },
        "item": {
          "id": "7ba7cb17-ee8e-433a-8510-242fb137afd6",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "5bef8c77-b65b-47bf-b13b-679d96271617",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7ba7cb17-ee8e-433a-8510-242fb137afd6",
        "cursor": {
          "ref": "bb6874dd-c126-4586-a7dd-1017c750dc09",
          "length": 55,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5a438e0e-e2b9-403b-b5cb-549675bbe11f"
        },
        "item": {
          "id": "7ba7cb17-ee8e-433a-8510-242fb137afd6",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "5bef8c77-b65b-47bf-b13b-679d96271617",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6be7f63a-fc81-4c84-a2a2-23ca8995bd3b",
        "cursor": {
          "ref": "69203704-ba3e-42b4-ac4b-d1ec78a42cb4",
          "length": 55,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2dee3009-160f-4871-83d2-6ad2ab795348"
        },
        "item": {
          "id": "6be7f63a-fc81-4c84-a2a2-23ca8995bd3b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6882c32e-3629-4dca-a1db-744f32fc381f",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be7f63a-fc81-4c84-a2a2-23ca8995bd3b",
        "cursor": {
          "ref": "69203704-ba3e-42b4-ac4b-d1ec78a42cb4",
          "length": 55,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2dee3009-160f-4871-83d2-6ad2ab795348"
        },
        "item": {
          "id": "6be7f63a-fc81-4c84-a2a2-23ca8995bd3b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6882c32e-3629-4dca-a1db-744f32fc381f",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3251b69-c9b1-4439-bff9-9404cdf57491",
        "cursor": {
          "ref": "6cfaf259-eee6-43ab-bf16-292d5b506229",
          "length": 55,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c4cebfe0-d057-4d3d-9cb3-363002762f88"
        },
        "item": {
          "id": "d3251b69-c9b1-4439-bff9-9404cdf57491",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "af3e0070-fd26-488b-9450-39c4359e8d8b",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d3251b69-c9b1-4439-bff9-9404cdf57491",
        "cursor": {
          "ref": "6cfaf259-eee6-43ab-bf16-292d5b506229",
          "length": 55,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c4cebfe0-d057-4d3d-9cb3-363002762f88"
        },
        "item": {
          "id": "d3251b69-c9b1-4439-bff9-9404cdf57491",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "af3e0070-fd26-488b-9450-39c4359e8d8b",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "30fe91a0-31d6-4924-a2ca-71bb74b7c3ad",
        "cursor": {
          "ref": "5d631547-3aca-401a-bc22-717a14c81d92",
          "length": 55,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "748f1069-31f2-4a25-b24e-2ad912841689"
        },
        "item": {
          "id": "30fe91a0-31d6-4924-a2ca-71bb74b7c3ad",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f53b1cd9-94c6-4c56-bb17-40ddb5428e7d",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "30fe91a0-31d6-4924-a2ca-71bb74b7c3ad",
        "cursor": {
          "ref": "5d631547-3aca-401a-bc22-717a14c81d92",
          "length": 55,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "748f1069-31f2-4a25-b24e-2ad912841689"
        },
        "item": {
          "id": "30fe91a0-31d6-4924-a2ca-71bb74b7c3ad",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f53b1cd9-94c6-4c56-bb17-40ddb5428e7d",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e22f654e-6fcf-447a-84b3-27be1bf6ba87",
        "cursor": {
          "ref": "42628caa-d7b3-429c-81e5-f691b7d5ee01",
          "length": 55,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a837e56b-b7f7-4068-bf59-e533e164deed"
        },
        "item": {
          "id": "e22f654e-6fcf-447a-84b3-27be1bf6ba87",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "24ccd715-dbe8-49bc-9caf-60415324eed4",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e22f654e-6fcf-447a-84b3-27be1bf6ba87",
        "cursor": {
          "ref": "42628caa-d7b3-429c-81e5-f691b7d5ee01",
          "length": 55,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a837e56b-b7f7-4068-bf59-e533e164deed"
        },
        "item": {
          "id": "e22f654e-6fcf-447a-84b3-27be1bf6ba87",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "24ccd715-dbe8-49bc-9caf-60415324eed4",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8937e78a-7d1d-48ef-9cc9-66566364df9e",
        "cursor": {
          "ref": "8d9a1ca6-67bb-4943-b344-0502294b7de0",
          "length": 55,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e66a3b2b-3537-41e5-8c3e-2444746e9046"
        },
        "item": {
          "id": "8937e78a-7d1d-48ef-9cc9-66566364df9e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b7f7996e-54ac-4f60-a8d2-e5f25623a295",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8937e78a-7d1d-48ef-9cc9-66566364df9e",
        "cursor": {
          "ref": "8d9a1ca6-67bb-4943-b344-0502294b7de0",
          "length": 55,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e66a3b2b-3537-41e5-8c3e-2444746e9046"
        },
        "item": {
          "id": "8937e78a-7d1d-48ef-9cc9-66566364df9e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b7f7996e-54ac-4f60-a8d2-e5f25623a295",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9c776972-62e5-4819-b114-ed6df6e77405",
        "cursor": {
          "ref": "63c26ba6-1346-41d8-8829-f5c59c14fe8e",
          "length": 55,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6e93050d-2a32-4459-883c-dce86ae0f7b8"
        },
        "item": {
          "id": "9c776972-62e5-4819-b114-ed6df6e77405",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0452339f-dacb-47b1-bf29-8347004d2d04",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 35,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3c41dd7b-2632-4dcf-9360-3db2bcc45bde",
        "cursor": {
          "ref": "31e12225-5697-4b38-bf8c-db5ecb61eea8",
          "length": 55,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3962f5c0-1298-4a5d-b970-ed47929d5ec3"
        },
        "item": {
          "id": "3c41dd7b-2632-4dcf-9360-3db2bcc45bde",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e78f79c5-ccdb-486d-b551-cd651a1fd413",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3c41dd7b-2632-4dcf-9360-3db2bcc45bde",
        "cursor": {
          "ref": "31e12225-5697-4b38-bf8c-db5ecb61eea8",
          "length": 55,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3962f5c0-1298-4a5d-b970-ed47929d5ec3"
        },
        "item": {
          "id": "3c41dd7b-2632-4dcf-9360-3db2bcc45bde",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e78f79c5-ccdb-486d-b551-cd651a1fd413",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e9115e2e-0a4e-469a-844b-0b98312a8df7",
        "cursor": {
          "ref": "8db64be9-4c22-4435-949b-c6818c9a94f9",
          "length": 55,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f133dbdd-3591-47e6-ad99-b6192de51889"
        },
        "item": {
          "id": "e9115e2e-0a4e-469a-844b-0b98312a8df7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "1e644cb8-586d-472c-a586-f5b1c5cb2fb8",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "76dc9286-6c8c-482e-8401-428f0741f3cd",
        "cursor": {
          "ref": "f6612e0d-846e-46d9-8ba4-534525bdd0c0",
          "length": 55,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c14cdf96-ad78-4826-85e7-9b5d607e9ca8"
        },
        "item": {
          "id": "76dc9286-6c8c-482e-8401-428f0741f3cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b27c36d-744f-4acc-92b9-55e862785857",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "76dc9286-6c8c-482e-8401-428f0741f3cd",
        "cursor": {
          "ref": "f6612e0d-846e-46d9-8ba4-534525bdd0c0",
          "length": 55,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c14cdf96-ad78-4826-85e7-9b5d607e9ca8"
        },
        "item": {
          "id": "76dc9286-6c8c-482e-8401-428f0741f3cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b27c36d-744f-4acc-92b9-55e862785857",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e6eb33d3-4b26-428d-9f5e-0da0c065426b",
        "cursor": {
          "ref": "efafd76f-6dae-45b8-960a-9d00ca171320",
          "length": 55,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ca253271-6abb-4624-be14-77cebd063c4d"
        },
        "item": {
          "id": "e6eb33d3-4b26-428d-9f5e-0da0c065426b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f0955abb-a59e-4b68-ac8e-b3e2e2535437",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f0ca4e25-f8c7-4dd4-97d3-7fd402644a18",
        "cursor": {
          "ref": "c3d5b0cf-2c10-4810-8040-4e3b03dc9da5",
          "length": 55,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3ef2e501-f852-4b09-a304-889b8f696cb4"
        },
        "item": {
          "id": "f0ca4e25-f8c7-4dd4-97d3-7fd402644a18",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1c4196c-1e50-4655-b152-be4e3b0ed503",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f0ca4e25-f8c7-4dd4-97d3-7fd402644a18",
        "cursor": {
          "ref": "c3d5b0cf-2c10-4810-8040-4e3b03dc9da5",
          "length": 55,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3ef2e501-f852-4b09-a304-889b8f696cb4"
        },
        "item": {
          "id": "f0ca4e25-f8c7-4dd4-97d3-7fd402644a18",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1c4196c-1e50-4655-b152-be4e3b0ed503",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "56d64cde-2651-4598-a071-dc10332665f5",
        "cursor": {
          "ref": "844ddbb6-4663-4671-bf8a-b11ee001fd5a",
          "length": 55,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "611bd14d-f10a-45eb-8e9e-35892d4555e3"
        },
        "item": {
          "id": "56d64cde-2651-4598-a071-dc10332665f5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9bf2bb7b-7511-48fa-ba01-5ac9f217b8b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "edbf3cf6-69b4-483c-b6e1-4a65608bee33",
        "cursor": {
          "ref": "fa2af1e7-48d3-45f0-bb54-9ec98660365e",
          "length": 55,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1bad622a-1757-477b-a416-49480bb882f0"
        },
        "item": {
          "id": "edbf3cf6-69b4-483c-b6e1-4a65608bee33",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7478a47d-531f-45f6-a885-2d8d33fb5d41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "edbf3cf6-69b4-483c-b6e1-4a65608bee33",
        "cursor": {
          "ref": "fa2af1e7-48d3-45f0-bb54-9ec98660365e",
          "length": 55,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1bad622a-1757-477b-a416-49480bb882f0"
        },
        "item": {
          "id": "edbf3cf6-69b4-483c-b6e1-4a65608bee33",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7478a47d-531f-45f6-a885-2d8d33fb5d41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "21a2105b-896b-40e1-864a-377632a7a68d",
        "cursor": {
          "ref": "a746ac36-430c-442d-b771-aa7d1f9b422e",
          "length": 55,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f1f80e56-6b79-4c20-bccb-f42e97d13a50"
        },
        "item": {
          "id": "21a2105b-896b-40e1-864a-377632a7a68d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "b4115c2f-2943-457e-acfd-56bd54ceb1d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      }
    ]
  }
}