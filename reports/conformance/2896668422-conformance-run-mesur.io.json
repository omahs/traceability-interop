{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c463ce38-16ea-4848-863d-a422305169c9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0af7f482-47e9-410a-a141-4cbb68b264fb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "93acdac2-3ea8-4149-a141-107470c81ccb",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73bfa2f4-de93-4df4-877e-dcb3e15ab57f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65c9cf72-4e1c-48e0-9942-5d640b1ae1f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "eb6af9db-2e19-4f6c-94e3-9a6495cbd178",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3e18df66-1002-47a6-bd54-16012deabdda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8d06040-8d71-4e89-b953-aed9451dd9cd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc45c627-2c8d-4fe9-9ca8-ce74760272e3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb08568f-8ac6-47f5-8669-fa8bb5b2fc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4a6baca-fa5f-40ea-bfe9-a85bc9b6b03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72531ed-8787-4347-ad78-b85ca3893f0f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7308b17-c64b-4536-9134-2a1e8c3b37ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d681046b-e92f-4051-8037-215675498b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b96e766-78e5-442f-be41-58f78757f985",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9ffeb0-65e1-42e3-b88b-68d58078cef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a04f38e6-d376-44e4-8796-0fb4b7d832f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b2f6be01-5dde-4915-854c-61f67ba604d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98dcdb42-8bb5-4be2-b4a9-527a96b1a9ea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73f899d-2601-4379-a904-675138e1f56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a96c581-ea43-4eb3-8238-48de801a538c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09614002-fce5-43f9-bc2b-dd7522d57913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2bd4acb-7f8d-482a-a071-424f8b70eef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32b03c9-487a-4f86-89c0-94e83e4be8fe",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ea96c4-b6dd-4fd1-89e7-e06c730d26ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3117d51-5a92-461c-9296-b69ebcfacd4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8868d670-6a7c-4d9d-8966-41d17cee40f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "475b7dca-a7c2-44f2-b579-aa8b045a3be4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5e08d482-098e-4dbf-9ef5-ff2043790cef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc92520c-c68d-4607-8a1a-a2fef5100186",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "947e5cf3-ce59-4c44-b969-4ec2d392519e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "26f66283-56b9-42bf-8d6a-74aae0299e77"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "407da20f-ff98-4647-884a-187d807338d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8a27e8e6-d8d2-4c45-8b77-86ef5608c1a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b66008f-33c4-48a4-aec2-cd876a114dda",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "786ec27d-5ede-4176-bbac-64fd8492c1fb"
            }
          }
        ]
      },
      {
        "id": "764e2fce-9cce-4f8c-8557-5039151bb6ad",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1d2f6033-0672-41ae-baa3-b4aaaff8c688",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c6f3b766-a218-4e13-af6c-a4e1959ea059",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3e860ba8-6e0f-4d43-8d0e-5ee3312e8e74",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdeef9c-a689-4b83-bfa0-c65cd299ba9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10688e43-8b3f-4539-be07-df3ae4c4f82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12f6b53-a88c-4365-b4fb-367afd5471c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c62af68-fc45-4668-9e31-ee05b65df998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acb624d-2f3d-43f0-bee7-0ea5fae39bb7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fad639b-8ec7-44a1-823a-346a352e8f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a2db988-a8ed-4d58-a3fb-0307925aabf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df32a227-2b76-4a91-87db-4f946e21bd75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a01a1c0-0a80-4781-aebc-28c381c885a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e722434-066c-4d16-95a0-f82ee1527386",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cdc2be-71a9-47f7-9615-a53b6f602844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1c3b96-c631-4ff2-a567-d0e86531c2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b531c16-d671-44bc-9b6d-90702ecb4490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c23c614-1b8e-4a40-9309-7f267df25077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813c96cc-e5bd-4880-90c8-f5a506e5a364",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8331addd-c03f-4ee7-9bdf-22db7ef811da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41433e0-5434-44a2-b8b1-6a16477589ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aae2da7-1ec5-4e4e-a30c-bc8ec8162f55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bef59600-02fc-4a4d-8616-ce5adb1f75fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4598ec9-33a3-4d42-b54e-da8eb6aeb75b",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6965896a-c567-49e5-b62d-6e5d85c20616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a2c4d6-9bd8-4cf4-9b24-4bef22707367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d07aaa-e641-47a1-96b7-f0428ef8ce3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ce3d12a-f14e-4ebb-93bb-c7ff806a867d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98083f0f-c224-4a9c-9890-681b75149fdc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b38839-6ed8-4dbb-8300-c7b2b4843c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca33b7e6-43cd-40fe-ac9b-b5c92e19fe85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19e7858-ba60-41b5-9846-d17f8a7077d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60c3eff0-6087-4f1b-8221-dd4d17575aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a128a55-0763-4bac-bfb3-0c078453612d",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c78f35-bc58-42c2-b27f-4c6593208efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ad549b-b1c3-41dc-ad23-b085a51283de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb9623f-c3b2-43e8-9504-a75d403c01ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "332f0d53-7ef4-4616-93ca-545314b67874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb5d754-bd2c-4197-b0ea-e0bb7ccf325d",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8048f681-715a-483c-8a0c-2563bc7bdfd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35d7359-b293-4618-8103-3e91f77f4ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db04d263-290b-49cb-a452-5e96e0c5b4ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40f723b3-a1e6-4c6b-8d14-90e26ddcd657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2800061a-f15d-426d-96bb-8d21cd3207b5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f21b497-50b3-4193-8a47-ada2fec1bcc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e2af21-9185-45bd-9cf1-eefc78153d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802ce319-2d94-4507-b61c-3c30555c1a98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aba3549-62a9-4343-9420-7c438b35de61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72d7b1a-6b2c-479f-8f76-97f60989f63b",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3339121-f80f-43fd-a627-9f7bdd1a977f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88dd114e-3945-4275-b9d2-accfa9696fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd116288-eb99-4b90-aeb0-d60541363c98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f400fac4-221a-4266-8682-217977f55ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564070f4-d5ff-44f7-967e-4bb99cb2f30d",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f836a5f4-a416-4780-b4e2-ce7515c9daf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c616db84-2c25-471d-bae3-c6186b3f0f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f5c63f-13ee-4159-a7b5-e8e1521a9d07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "5afaf1e1-4dcb-41d1-9db0-581f369fd58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b9b4c6-6a69-4fee-8f3b-697bbc4eae17",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbadac3-f460-48a4-853c-3873e44784aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a8c73f-e11e-4d14-a079-dbd4e876d166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53f975f-447b-4984-aa62-71055866266e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "11bbb9e5-d551-4ba0-8cf6-87ba931d48b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9fba97-4095-44f7-93e3-5bc9ec347d25",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8472ed-f437-45d8-a518-69f1f4020443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f70c30c7-cf27-4540-8936-473ca12745b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68182d19-4d8b-4476-b4e5-16c205b179a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5378392f-923d-456f-bfaf-dfccf0c8958d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed60f9f2-8112-4721-b44a-a2fe0ba8eb42",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971e041d-c9b0-4a24-a0c3-b3f23a2cdf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed35554-42cf-4ec8-aa1e-dbcb5c4aaafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c94d2da-0b5f-4112-beb5-c30082489e39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d724d8-e53c-48bc-b368-4ddf45828560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8dd7cda-e93e-4224-8f77-1cfd303cb07b",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1040ba-3366-4913-9876-65eb9ad56ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b22aa08-4ed2-4320-a0b3-c7502fcb33b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415df522-a735-43e2-a87f-b05fee9f2609",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ed3e1e14-a46e-4f56-a5b9-f85632c4c272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d729a7b-26c9-4ee1-90f8-c6af2c1bdb3d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2d1bb7-2719-4fd9-915f-8147eae6b49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261ce170-890c-4cd8-b7d5-d2da1f6aa60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb374d27-d784-4df6-a1e8-5927f7199408",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "bfaa3d12-ce5e-442f-8665-9c3f3eb873ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a090186-084b-4e42-b059-f9d4e06a008a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af7ca54-9d74-4182-b840-7c2c46fe76e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6770afe6-b778-4554-84a3-5c8b11a4f516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6aa7de-b4a6-4ecc-a976-db636903e77c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d57937e-3761-4383-8f18-909615b9f096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccab210f-9f91-45f5-ab8b-159c0fb9827a",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d15cb1-1472-4d0c-892b-ac080bab9c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363a5f55-d053-44ff-b32d-859b000fac1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4271baa1-f493-49b1-9e72-1e803a2ab98f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a06701fe-0b19-4655-937d-066ee95172fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f4cad3-cb74-4ec5-a1e6-388f6b976d2b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a5cb22-5a4c-4fe5-8369-452591e8e935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7c14d2-ae02-4b3d-a867-61c9010b25e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6058cb8a-1509-46c2-aa2a-af96ddc4d6ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f4e9824-259b-4294-a435-a1c0bc4602f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e9ee81-6adf-4fed-bc65-2eb22924a8c9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea25710-058e-4c22-a01a-a8de28263a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc4d817-a075-48cb-8091-1534305dbd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feea564f-7d5b-4559-9a16-c8ad961fce29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feed26f5-326c-42d3-8c9c-a52598479e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6483c9f2-7957-43b7-ab7a-5769efb5a6ba",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1626e82-6918-4b12-b31a-86e46c008b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b19913ef-72f4-4f64-9c63-a97d08673e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30f7b6d-b2ef-4b63-bf81-a935ab55b7a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dbf44e5-1982-4312-a61b-e7cc163f190a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6246cb4a-87d7-4e29-8ea6-0d84234e3214",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ff91b9-24d5-4588-b809-a1a80c2e1471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e8f9fd-a739-4a76-8693-6ba4a6c18049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1eaa28-2cbc-4500-8eb8-f4ec1a974309",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05587dc4-deeb-4a84-bea1-d58ee8f398f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6b6cad-e3f4-4f37-9bcc-f0f133f1ea3c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6aeace-fc33-4b4f-9f57-1793491bcaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e5b4a2-367a-4cab-8261-70e92b2f0cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160d0b42-29d5-4b2c-b805-484514c15b91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0260010f-937c-4f52-a20b-d54bc1031286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90971ef-7be8-4e02-b570-ce6cd6127112",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17052e04-9d49-4025-a560-2f42849e49a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17cd419-e148-41df-9739-4cabc0648127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd366fe9-d378-4bc0-b1c6-09957837d1f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a10fd8-0de8-430f-aa50-e193968947ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123bd4e1-8c4c-4be1-87d0-0ae4c5d008d7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f598e60d-6f6f-4e96-90e8-31b81ca05aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e230d6d-d65f-470f-91ea-d8530ab8360a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46669c9c-d935-4116-adaf-eb8e7ffccb13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee8a8d2a-3ce5-4436-b822-4fac19b29990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5474fbf-3965-4dc0-9da4-671593a01dd1",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9350d765-891c-4cd2-a211-1ee96d14c6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b946fd0-72cc-4e5e-8397-75c54a24aeb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d87ff8e-7639-4e17-82fa-75793bd8b53f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae709b22-780b-4dd8-8fba-7cc77acd403a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4ab86e-3e4d-4693-a98e-bbf8833f32b3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2ff5eb-1838-421f-b4a8-bbbd67fbadba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73e487c-5bbe-41c0-825d-0b8d45eb8250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14754cad-874d-4faa-8a26-883c9f0f5c0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8b5622c-1fa6-4842-97f8-e8f471698b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4aea8f-6327-4d9b-8426-e10876df279a",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6b15e5-5f8b-4307-9199-e02d329f83c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba31ea9e-7f23-4aa2-9da5-f57141138404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b1e575-c424-403a-9bf1-55fe81885fce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e44c3b7c-1d5a-44b5-bded-054b56e3f56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c2c3d9-7f73-44e2-a6dc-048c767a8369",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b920ab61-5afb-4217-8df3-8ed3098e2383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab6d870-4afe-4e67-8d7f-2937e0706cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de36b31e-d049-4cfc-8b64-b6f491d90da8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee61c17a-877c-40a9-a032-8412bc2dd58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c32ba49-edb1-472d-9d89-0edf009c7a95",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b35509-1ae8-44c2-9cf5-f7bb7baa536a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707c4229-9c75-4e03-919c-33fdc964ff86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb96a8d-702f-47cc-8d29-1b2ff373fa2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "468dc1e9-49db-4245-aa0f-ad5f153550d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ac28b9-9647-4c18-9e73-78a4d9139d1b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75644c55-7bcf-4d5f-bb75-aee06b4e80a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "98c99f72-5aa8-4f61-a788-21fd5171c596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0383f5-ec3f-49fb-857d-c4157c1c6f1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce6739e6-ce8c-44d7-8707-e38d91c6fb12"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "38c825e1-7a7c-41b2-a930-9601df708a1c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9f661970-5102-4876-9e9a-f8fcf749dc24",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b1e928-f1e7-414e-991f-248762212f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34a07e26-1254-4e69-a752-ae967eb42e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8fd29b-0b55-471c-95d3-a5a181421522",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "203ba189-5351-4532-b736-ab277d569f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401bf82c-9e6b-4800-9b11-d2d68881157c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a79b1b4-4b77-459c-8214-fc8dbb947e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9c60b11-6d7d-4eb6-86c9-fcb70f45381c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619c2e0f-d49c-4454-96fb-79c8dbab0a30",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5a797358-8627-424e-b46b-96d18cc6e74b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c34fce21-ece8-4df8-8357-afec3af667f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb6985d7-19bb-461a-803e-5128164b9a80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cceebab2-1cb9-4137-a49e-4d7bf6133fe8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39e77d13-b419-48c5-9446-a489da9ac175"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc8e0157-cd9e-445b-8b1a-8a03abfcf2cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ee805cc-be2e-4ba4-80df-c0d9b603f2e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "60e13630-c4a8-4b75-bde2-4dbb5913a57b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe4b1682-613a-494e-8ac6-8cd93fa87cdb"
                }
              }
            ]
          },
          {
            "id": "31b1ebef-57ef-407c-a4d1-7391c1d1dc31",
            "name": "Positive Testing",
            "item": [
              {
                "id": "496229dd-3b76-4dff-8e23-b8603c842805",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59ecae83-b35d-45fa-9396-f8be05aaec53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa69325a-02af-4441-bb14-8b34b44ae065"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4d229a1-79f7-4724-9150-9ee867d64751",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3009014b-90b9-4452-99a2-a1e9fdb22aee"
                    }
                  }
                ]
              },
              {
                "id": "9ff40b5a-3520-4085-9c7b-921f082d9f5a",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27947a1a-b978-406e-a88e-ef91ef1b33e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d56ac864-4da2-4f10-9ef4-f757f1e41d39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf85a6ac-4070-42f3-99f1-a3d56ae24608",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5bd36d1d-a3e2-4fc0-970e-3aedabf7d119"
                    }
                  }
                ]
              },
              {
                "id": "d9cb8ca6-3236-4213-9364-ec697b79da3a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "976e7a2d-f912-42f7-b597-b179b06cb053",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d9740f2-74c5-44ff-af98-b39c1bcf05c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f44d012-d3bd-4279-98cc-386f1a204e34",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7d39b8ce-69af-4b5c-bc22-0aafa5602554"
                    }
                  }
                ]
              },
              {
                "id": "e13059d5-871f-49d2-86fa-1a490c391a25",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd4fe16e-c41b-4e5c-9b01-760205a8bb8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "300fadca-3239-421b-8896-348d68a4ed52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78eb3358-dece-4fd2-b2f9-048ebe7f9258",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6b4ed7cf-9c7f-4189-86b0-1512e6f500d1"
                    }
                  }
                ]
              },
              {
                "id": "877f5811-4c61-45bf-b1be-3af9e042969c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea7965b2-5a8a-4b41-a29d-0c1d1c01c8e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "7be24c0d-0e2f-4871-9d4b-62fbb9e31f3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71a34bd2-48bc-422f-9577-95d9208f5a7b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7c599ca6-33c3-4387-8ce7-a9202e87a10c"
                    }
                  }
                ]
              },
              {
                "id": "1f3e782e-28db-4cd2-9e7f-e144f8b88c0f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75380311-0d6c-4197-b36c-e065f5c460ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69232cd5-3c59-458e-ae0e-9cd2945a5e43"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1887589-78ec-4d9e-9fcd-ef3211d5489d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "eceb0748-bc07-4b3b-bfb4-c276705af51c"
                    }
                  }
                ]
              },
              {
                "id": "04c4611e-0de4-4a66-a213-a13ca15749ef",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc2040c3-a205-4000-8ba0-a5d9828b27ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9862da68-0090-4004-ab4f-b2c619b5016e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7251521-22e3-4ea8-9476-29ff90890fd9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ea1719fe-0947-417f-95a0-53cde1e59c91"
                    }
                  }
                ]
              },
              {
                "id": "1db8ba21-546b-459c-875b-ab28f8278805",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9f59448-3e45-415d-bb41-6f794a2bd45f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58f62326-f1c2-46f6-8fc9-d09bc05cdd64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45adaf0d-94e3-4279-86be-4b814ede7151",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d5faa61b-f804-4a67-9d61-2571376c8d7c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d52d0cbd-237f-4e9b-bda5-f88b179c0fae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9653c1b1-75e2-4321-826d-58aecee5b72d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "376a7351-0b38-427a-a228-de7947f68338",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86a4584c-a1d6-4057-9e5f-1eec6e7185c1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8da5d01b-3d01-4748-82d4-e4d1289bf509",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "72bb2d3a-9d6b-4bc3-a2ab-9d3fa11f65c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8551385-292f-4947-9877-679e641493cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "79d15095-eadd-4384-a712-b040cdf39dad"
            }
          }
        ]
      },
      {
        "id": "343358b8-6d40-4a75-9113-0985cdef55f9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e222eb4f-e24b-4ba7-814a-91bd16deb99b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7b699aa-33ec-4312-b218-18d069c4db35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "848c8d0b-0342-45d0-8c8c-53c2b0a50902",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f291e8c7-fa60-4ffa-9325-1e9595645890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad63dbfe-652a-439a-839d-4fa18e14a151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "655c3684-4808-43ad-bdc0-6e4881c4825d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83ed47f8-5be8-4e95-8d60-bcbd6c337090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b575419-430b-4c76-8672-15c05dea01ba",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb7e2e9-030b-443a-b367-b9d6ebab14f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a16050a4-4817-4dca-99e3-a1bf2112b200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2965fe59-2b3a-48cb-a20c-7993750a040f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f70ae152-cb3f-414d-845d-7e306dc09390"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6d19969-41e6-46da-8043-7990dbe21108",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ca4a190-907d-4e8f-9e4e-ec6757c48ea5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0664beb2-7eca-4901-9f2b-0f73e4e40c37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ccc82ea-e71b-47ec-b18f-3d32abaf7ccb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f681126-09f9-4843-b162-3c26e205a23b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "0594424e-3c53-477f-8773-da08409fcd0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2f9beb0-0b8f-4a6e-bfd0-a12556dc121f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23223a59-01c3-4eb6-932c-9c52a15a9878"
            }
          }
        ]
      },
      {
        "id": "09de6e05-7018-41ed-8134-fde4b2fc2321",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "90f9ed63-909d-4a92-8f7a-f307ae6c856b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43486713-2099-4ee8-8646-2216c4682c40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea9985ac-e716-4031-a91f-fe5917b2c4e4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140cc354-5929-4b97-afc4-41c57180d4dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "df6af753-bb18-471d-9433-8fd82863ed3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2728b4e9-5ef2-4ef8-8b12-9b824fcb119a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3c80be1-3ad9-47c1-82e0-76c71c32ed5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043eda5f-f810-421c-854c-865da443a42e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9210d6-846a-4c14-a242-0a4985f4fd9a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "688198d6-7156-4210-8d4e-2464f0fd2106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71336ab7-19cd-42d6-8625-9e468d5129f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6e4a771-a784-4286-99e6-e9dadfb9d23e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8a3bace-12f5-424c-8e97-df36bc1716b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "298d7ab0-5d36-43fc-9dd8-17331874cb32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81dc7d04-0250-483d-9bab-f820cfbcda95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a46255b9-2b3a-4bf5-a863-a6c667b1e187"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "759a127c-6547-42a4-bd15-8a84335a958f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5675d5a0-7cce-4486-be1c-903ecc0771b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f5fa0d8-c980-45de-ac84-703b7eb27954",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e763512-4e77-4f07-aa4f-121a0f3b421d"
            }
          }
        ]
      },
      {
        "id": "e6fb231c-ef02-4de1-82ce-c06eb1be1197",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a6d33f04-b069-4595-88d1-116f5dc51466",
            "name": "Negative Testing",
            "item": [
              {
                "id": "adebb9c5-4f0f-49b8-8a0b-8bee84b72801",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5924f4c-abbb-4e89-a88c-ebf9a3423f81",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9b3a44-7c34-4035-8742-b1b5a337d870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224dc950-dfed-4dd5-bf73-47f2fa1828e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0af0e29-6167-4588-a217-89de6dfb68e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53b77062-aea4-4d2f-9699-7beff2669f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b92b033-7fce-4a96-946d-0833fa9b57f0",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125900bb-a6d9-4182-807f-4adb9e798273",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "040e6118-b411-4efb-9236-6e54f057be35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5c7b33-f863-4253-8573-18bde32b5593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30c87a17-d4dc-4976-a8f5-fd89661c127f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74966be9-44c6-42fc-b38c-9e492505793a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d117798a-06ce-4f19-9aee-aaa79aeb9dae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87617fb1-ea9b-4a1e-afad-a4a41fd50f2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3357df6-6e02-4406-8478-086bff39afa6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7404c74f-e700-4ce5-b64b-8fd3905cdcbb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "4024cbee-eb3c-4006-b51e-caf4dacbcc25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac7d71f5-8187-4138-a778-27fa896f3934",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8dc80631-c9b8-41d1-bd6c-f3bea909df70"
            }
          }
        ]
      },
      {
        "id": "f13c3c58-64c8-4768-b215-9a195ace51ec",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ec0ee51d-d336-48ab-8486-577444a4141e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e6b32875-00f4-4d65-8a8f-943aa2ab4a93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8b876af-65d7-424a-93a0-8b50c5528f75",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa41e3e9-2299-45f6-b875-fb54f6d31b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f276bfa7-3585-4cb9-b358-288bc18f2cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e40832-fb6a-47c4-98b9-41a84748e7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2af16d3e-1e3e-4bae-8a7b-9fc556adf4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2290e9b-c1f5-45b3-b467-543e7a0d39e2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3104662f-63c3-411b-bf08-703324431f8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "34bd951e-835b-412c-9c45-b9f87fbabba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b73fcd-ac78-4092-8fbc-bc8c3c0b1aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae24d38a-a8bc-40fc-82f3-4f7b6e44ec2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "145baa3f-5af0-4f49-b0ca-538272597331",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb46a469-58f1-4b57-a121-a1fffd76da9c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d62a15b8-8c93-49b8-afc0-91d7473ed755",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a10fe840-833f-43f0-9a69-ff67c2d53193"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d36621d-9d79-492f-9817-9a8f5cae3d6c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "22eb77b0-d992-4527-b62e-3b533c441672"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7873413-f41f-492c-b102-3b4cec2edd2a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d261ceb-5893-4786-a39e-98b5edba372f"
            }
          }
        ]
      },
      {
        "id": "c1eaa9dc-8ce3-48ee-9433-8761895b3cfa",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "50286bfa-7330-44a3-8f18-064804d7e51a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c63690ab-7429-4660-8385-48c754be27f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "473aca07-7876-43e3-94e0-808e6f072622",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f44d29-de4b-4b97-a433-186e382ce604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dffc8527-4e66-4208-b1f3-aef0fdcb8097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00947cb-98cd-4d18-9736-59c91e6483fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a566f52-bf50-4df1-996c-7c862e70def3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e842a8c4-cb51-405c-a76f-2e21d21a1fb6",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38cb58ed-c476-475a-a7cd-b1d5c4399eb8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "45955e6c-812c-416d-80dc-0d5ea28a871c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b120afc0-d5d7-475e-80fc-5fcf9f52c299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d6dce80-fa6c-4b08-ac6d-85b91979507e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18e43d5c-a498-4be4-8592-5d7e69c62eca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1b2ca9f-6efc-495d-8b27-d8d2cf03150d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6ccef82-9265-4fd8-b4a3-8f476ab86f19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60496bf5-f68d-4c48-862c-827ad7ae6a0d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04df57fb-93b0-4d5a-8761-14d62f944d5b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "2912afca-5d7f-4143-8943-e66ed282b15e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34b4422c-b38c-4db1-a287-504711e524a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67aecc08-ff90-4a91-a4bd-eb55a4f052d6"
            }
          }
        ]
      },
      {
        "id": "b51bea22-d2b8-4576-8c4e-cbb879c9f22c",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "c1bffacf-8b8e-490f-8164-db4b1dd81e30",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 98
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 119.87850467289712,
      "responseMin": 85,
      "responseMax": 546,
      "responseSd": 56.97576305179327,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661042568035,
      "completed": 1661042585068
    },
    "executions": [
      {
        "id": "93acdac2-3ea8-4149-a141-107470c81ccb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a5e25c6a-b670-44a4-a1b8-cd0da80b876b",
          "httpRequestId": "aca5da2b-07f2-4837-8dc4-9b92f3a0a8a7"
        },
        "item": {
          "id": "93acdac2-3ea8-4149-a141-107470c81ccb",
          "name": "did_json"
        },
        "response": {
          "id": "e6543c3c-4fdf-45dc-8bb5-8cae88bb731f",
          "status": "OK",
          "code": 200,
          "responseTime": 342,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc45c627-2c8d-4fe9-9ca8-ce74760272e3",
        "cursor": {
          "ref": "72d95b35-20b5-405a-986c-4e09266f1483",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d2eb0562-0b74-4ae1-8a73-17c6d2095976"
        },
        "item": {
          "id": "dc45c627-2c8d-4fe9-9ca8-ce74760272e3",
          "name": "did:invalid"
        },
        "response": {
          "id": "d49f3b96-1da3-416f-b56f-d733683f06d2",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc45c627-2c8d-4fe9-9ca8-ce74760272e3",
        "cursor": {
          "ref": "72d95b35-20b5-405a-986c-4e09266f1483",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d2eb0562-0b74-4ae1-8a73-17c6d2095976"
        },
        "item": {
          "id": "dc45c627-2c8d-4fe9-9ca8-ce74760272e3",
          "name": "did:invalid"
        },
        "response": {
          "id": "d49f3b96-1da3-416f-b56f-d733683f06d2",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72531ed-8787-4347-ad78-b85ca3893f0f",
        "cursor": {
          "ref": "ba0c653d-5024-4a3f-9f53-6a96524ccfe7",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6db48c16-6858-4f71-b84a-fb90d991851e"
        },
        "item": {
          "id": "b72531ed-8787-4347-ad78-b85ca3893f0f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ed2118c6-cb38-449f-b38e-6fc93c057e22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 169,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "3b96e766-78e5-442f-be41-58f78757f985",
        "cursor": {
          "ref": "cab73a14-73c2-4fa4-a493-ef9263c24cf6",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1ae58658-27b5-4060-b40d-e6d580400c57"
        },
        "item": {
          "id": "3b96e766-78e5-442f-be41-58f78757f985",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8f58d9e8-259b-429f-af8e-e0f8efb54204",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "98dcdb42-8bb5-4be2-b4a9-527a96b1a9ea",
        "cursor": {
          "ref": "f317506e-52b1-404e-9a06-77a0b06b6425",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "40e60030-96a6-4877-8ed0-5ae9ba354517"
        },
        "item": {
          "id": "98dcdb42-8bb5-4be2-b4a9-527a96b1a9ea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "78d1189d-9c7f-44ee-9073-582cfd646866",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "e32b03c9-487a-4f86-89c0-94e83e4be8fe",
        "cursor": {
          "ref": "267c8e0b-c5de-49c5-ade9-2c70f081d2bf",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "aa1dc6c1-95cb-4d26-879b-2663ff198475"
        },
        "item": {
          "id": "e32b03c9-487a-4f86-89c0-94e83e4be8fe",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "37447b9a-2481-4204-9b63-f8d5eaf4f044",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "e32b03c9-487a-4f86-89c0-94e83e4be8fe",
        "cursor": {
          "ref": "267c8e0b-c5de-49c5-ade9-2c70f081d2bf",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "aa1dc6c1-95cb-4d26-879b-2663ff198475"
        },
        "item": {
          "id": "e32b03c9-487a-4f86-89c0-94e83e4be8fe",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "37447b9a-2481-4204-9b63-f8d5eaf4f044",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "dc92520c-c68d-4607-8a1a-a2fef5100186",
        "cursor": {
          "ref": "b18e78ec-ab4c-4612-b12f-05e4201f1c3a",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e73c6d08-4135-4228-83d3-987062dfd301"
        },
        "item": {
          "id": "dc92520c-c68d-4607-8a1a-a2fef5100186",
          "name": "identifiers"
        },
        "response": {
          "id": "4c4be046-e37b-4543-be78-c1b05ca61d47",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e860ba8-6e0f-4d43-8d0e-5ee3312e8e74",
        "cursor": {
          "ref": "94c4d7e9-f904-4744-ab4a-e40520a58d08",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bb927866-f282-4a8c-ab55-dac3502e41ef"
        },
        "item": {
          "id": "3e860ba8-6e0f-4d43-8d0e-5ee3312e8e74",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b3a5be1c-a300-4c3c-90cf-cbeacce45d12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 546,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3e860ba8-6e0f-4d43-8d0e-5ee3312e8e74",
        "cursor": {
          "ref": "94c4d7e9-f904-4744-ab4a-e40520a58d08",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bb927866-f282-4a8c-ab55-dac3502e41ef"
        },
        "item": {
          "id": "3e860ba8-6e0f-4d43-8d0e-5ee3312e8e74",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b3a5be1c-a300-4c3c-90cf-cbeacce45d12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 546,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3e860ba8-6e0f-4d43-8d0e-5ee3312e8e74",
        "cursor": {
          "ref": "94c4d7e9-f904-4744-ab4a-e40520a58d08",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bb927866-f282-4a8c-ab55-dac3502e41ef"
        },
        "item": {
          "id": "3e860ba8-6e0f-4d43-8d0e-5ee3312e8e74",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b3a5be1c-a300-4c3c-90cf-cbeacce45d12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 546,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2acb624d-2f3d-43f0-bee7-0ea5fae39bb7",
        "cursor": {
          "ref": "c586708e-4913-4e39-ac6a-9439eef71e2c",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b9e17dd2-a09e-4938-8643-8370225b8329"
        },
        "item": {
          "id": "2acb624d-2f3d-43f0-bee7-0ea5fae39bb7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "971155ba-1e69-4a85-a610-49224d1cf66b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "2acb624d-2f3d-43f0-bee7-0ea5fae39bb7",
        "cursor": {
          "ref": "c586708e-4913-4e39-ac6a-9439eef71e2c",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b9e17dd2-a09e-4938-8643-8370225b8329"
        },
        "item": {
          "id": "2acb624d-2f3d-43f0-bee7-0ea5fae39bb7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "971155ba-1e69-4a85-a610-49224d1cf66b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "0e722434-066c-4d16-95a0-f82ee1527386",
        "cursor": {
          "ref": "f22a6f0f-592a-4c67-9d17-a1911de7cff6",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dfd4c512-d623-47b0-ba84-7d16246d2fc9"
        },
        "item": {
          "id": "0e722434-066c-4d16-95a0-f82ee1527386",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "496997bc-be0b-4756-ab5e-dc4fcfed2584",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "0e722434-066c-4d16-95a0-f82ee1527386",
        "cursor": {
          "ref": "f22a6f0f-592a-4c67-9d17-a1911de7cff6",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dfd4c512-d623-47b0-ba84-7d16246d2fc9"
        },
        "item": {
          "id": "0e722434-066c-4d16-95a0-f82ee1527386",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "496997bc-be0b-4756-ab5e-dc4fcfed2584",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "813c96cc-e5bd-4880-90c8-f5a506e5a364",
        "cursor": {
          "ref": "45794704-46fc-4c7b-9a0f-0abb6a18b1aa",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "af03295e-d61d-4cea-afbd-0832fd18c507"
        },
        "item": {
          "id": "813c96cc-e5bd-4880-90c8-f5a506e5a364",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "7b21313e-78b4-4336-96b7-16d374e9082a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "813c96cc-e5bd-4880-90c8-f5a506e5a364",
        "cursor": {
          "ref": "45794704-46fc-4c7b-9a0f-0abb6a18b1aa",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "af03295e-d61d-4cea-afbd-0832fd18c507"
        },
        "item": {
          "id": "813c96cc-e5bd-4880-90c8-f5a506e5a364",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "7b21313e-78b4-4336-96b7-16d374e9082a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "d4598ec9-33a3-4d42-b54e-da8eb6aeb75b",
        "cursor": {
          "ref": "23098980-68fa-472c-8059-0c9a129c5756",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7a998c5a-0281-495c-857f-9e86ac399f4e"
        },
        "item": {
          "id": "d4598ec9-33a3-4d42-b54e-da8eb6aeb75b",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "ef98538c-901d-4024-8bb7-6515b09fc78c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d4598ec9-33a3-4d42-b54e-da8eb6aeb75b",
        "cursor": {
          "ref": "23098980-68fa-472c-8059-0c9a129c5756",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7a998c5a-0281-495c-857f-9e86ac399f4e"
        },
        "item": {
          "id": "d4598ec9-33a3-4d42-b54e-da8eb6aeb75b",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "ef98538c-901d-4024-8bb7-6515b09fc78c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "98083f0f-c224-4a9c-9890-681b75149fdc",
        "cursor": {
          "ref": "76401bbc-f0d1-4436-9b28-97d2824e9ba3",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8ac3dfe0-a5d3-486b-9437-edaecbd1c7fc"
        },
        "item": {
          "id": "98083f0f-c224-4a9c-9890-681b75149fdc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0c8ee885-d425-4251-b099-a2239c70a1a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "98083f0f-c224-4a9c-9890-681b75149fdc",
        "cursor": {
          "ref": "76401bbc-f0d1-4436-9b28-97d2824e9ba3",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8ac3dfe0-a5d3-486b-9437-edaecbd1c7fc"
        },
        "item": {
          "id": "98083f0f-c224-4a9c-9890-681b75149fdc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0c8ee885-d425-4251-b099-a2239c70a1a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "0a128a55-0763-4bac-bfb3-0c078453612d",
        "cursor": {
          "ref": "51445bb9-a4c4-4e6c-a405-ace8943b8c94",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f81434c6-1621-458a-867c-d1566b8103f2"
        },
        "item": {
          "id": "0a128a55-0763-4bac-bfb3-0c078453612d",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "70834a92-2954-456f-8b6f-9b7c30efae91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "0a128a55-0763-4bac-bfb3-0c078453612d",
        "cursor": {
          "ref": "51445bb9-a4c4-4e6c-a405-ace8943b8c94",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f81434c6-1621-458a-867c-d1566b8103f2"
        },
        "item": {
          "id": "0a128a55-0763-4bac-bfb3-0c078453612d",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "70834a92-2954-456f-8b6f-9b7c30efae91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "3fb5d754-bd2c-4197-b0ea-e0bb7ccf325d",
        "cursor": {
          "ref": "9691d30f-217c-47b6-ae31-c63d323f8bcc",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7b6e5967-8a03-445e-b40a-7b59c02cfece"
        },
        "item": {
          "id": "3fb5d754-bd2c-4197-b0ea-e0bb7ccf325d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "4a39fa40-2cbb-4bd4-a959-393f7dc7d1d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "3fb5d754-bd2c-4197-b0ea-e0bb7ccf325d",
        "cursor": {
          "ref": "9691d30f-217c-47b6-ae31-c63d323f8bcc",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7b6e5967-8a03-445e-b40a-7b59c02cfece"
        },
        "item": {
          "id": "3fb5d754-bd2c-4197-b0ea-e0bb7ccf325d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "4a39fa40-2cbb-4bd4-a959-393f7dc7d1d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "2800061a-f15d-426d-96bb-8d21cd3207b5",
        "cursor": {
          "ref": "4eafc158-47f3-407f-b17b-492c9bdd1ca5",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9ceead3f-8b55-414d-8d08-18ab2adc70d1"
        },
        "item": {
          "id": "2800061a-f15d-426d-96bb-8d21cd3207b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "84304113-3c87-4346-a5a2-54a3f4067340",
          "status": "Created",
          "code": 201,
          "responseTime": 117,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2800061a-f15d-426d-96bb-8d21cd3207b5",
        "cursor": {
          "ref": "4eafc158-47f3-407f-b17b-492c9bdd1ca5",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9ceead3f-8b55-414d-8d08-18ab2adc70d1"
        },
        "item": {
          "id": "2800061a-f15d-426d-96bb-8d21cd3207b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "84304113-3c87-4346-a5a2-54a3f4067340",
          "status": "Created",
          "code": 201,
          "responseTime": 117,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "f72d7b1a-6b2c-479f-8f76-97f60989f63b",
        "cursor": {
          "ref": "1553f70a-1248-4b6e-b052-6538ea9f1d9c",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cb091998-67f5-41d5-a27c-1cf5e53caebc"
        },
        "item": {
          "id": "f72d7b1a-6b2c-479f-8f76-97f60989f63b",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "8289d1e1-47c7-4e82-aacc-30a4698d5819",
          "status": "Created",
          "code": 201,
          "responseTime": 113,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f72d7b1a-6b2c-479f-8f76-97f60989f63b",
        "cursor": {
          "ref": "1553f70a-1248-4b6e-b052-6538ea9f1d9c",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cb091998-67f5-41d5-a27c-1cf5e53caebc"
        },
        "item": {
          "id": "f72d7b1a-6b2c-479f-8f76-97f60989f63b",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "8289d1e1-47c7-4e82-aacc-30a4698d5819",
          "status": "Created",
          "code": 201,
          "responseTime": 113,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "564070f4-d5ff-44f7-967e-4bb99cb2f30d",
        "cursor": {
          "ref": "2d66a21d-cde3-4ca3-89f6-429b8d9628c7",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "152b9dbb-c30d-40a0-985a-cbe9e8fb65c5"
        },
        "item": {
          "id": "564070f4-d5ff-44f7-967e-4bb99cb2f30d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6eb7c5db-5e20-4a1f-bcf0-584dedc0aeff",
          "status": "Created",
          "code": 201,
          "responseTime": 119,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "564070f4-d5ff-44f7-967e-4bb99cb2f30d",
        "cursor": {
          "ref": "2d66a21d-cde3-4ca3-89f6-429b8d9628c7",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "152b9dbb-c30d-40a0-985a-cbe9e8fb65c5"
        },
        "item": {
          "id": "564070f4-d5ff-44f7-967e-4bb99cb2f30d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6eb7c5db-5e20-4a1f-bcf0-584dedc0aeff",
          "status": "Created",
          "code": 201,
          "responseTime": 119,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "29b9b4c6-6a69-4fee-8f3b-697bbc4eae17",
        "cursor": {
          "ref": "36cb36e2-cd85-44a1-86f9-5f473b7b37cf",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "006b1f25-3196-40c2-87c7-8ad4804c07a4"
        },
        "item": {
          "id": "29b9b4c6-6a69-4fee-8f3b-697bbc4eae17",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fd527984-b967-43e8-94e8-d0f560436f6d",
          "status": "Created",
          "code": 201,
          "responseTime": 118,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "29b9b4c6-6a69-4fee-8f3b-697bbc4eae17",
        "cursor": {
          "ref": "36cb36e2-cd85-44a1-86f9-5f473b7b37cf",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "006b1f25-3196-40c2-87c7-8ad4804c07a4"
        },
        "item": {
          "id": "29b9b4c6-6a69-4fee-8f3b-697bbc4eae17",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fd527984-b967-43e8-94e8-d0f560436f6d",
          "status": "Created",
          "code": 201,
          "responseTime": 118,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "7f9fba97-4095-44f7-93e3-5bc9ec347d25",
        "cursor": {
          "ref": "c74d9650-254f-4ea9-b21d-c78e78aef29c",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b7561e5b-7929-48eb-a4cc-74d5b0f658ec"
        },
        "item": {
          "id": "7f9fba97-4095-44f7-93e3-5bc9ec347d25",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e33c0ec7-c4c7-4149-b9f8-7ffb63db4be0",
          "status": "Created",
          "code": 201,
          "responseTime": 113,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "7f9fba97-4095-44f7-93e3-5bc9ec347d25",
        "cursor": {
          "ref": "c74d9650-254f-4ea9-b21d-c78e78aef29c",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b7561e5b-7929-48eb-a4cc-74d5b0f658ec"
        },
        "item": {
          "id": "7f9fba97-4095-44f7-93e3-5bc9ec347d25",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e33c0ec7-c4c7-4149-b9f8-7ffb63db4be0",
          "status": "Created",
          "code": 201,
          "responseTime": 113,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "ed60f9f2-8112-4721-b44a-a2fe0ba8eb42",
        "cursor": {
          "ref": "16765f95-23dc-4289-b528-ee4af2cbd5ac",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "258bb246-b39b-4d49-88d0-bdd97b83aab5"
        },
        "item": {
          "id": "ed60f9f2-8112-4721-b44a-a2fe0ba8eb42",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e386b388-8ea0-4ae3-b5d1-d85922d8064b",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "ed60f9f2-8112-4721-b44a-a2fe0ba8eb42",
        "cursor": {
          "ref": "16765f95-23dc-4289-b528-ee4af2cbd5ac",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "258bb246-b39b-4d49-88d0-bdd97b83aab5"
        },
        "item": {
          "id": "ed60f9f2-8112-4721-b44a-a2fe0ba8eb42",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e386b388-8ea0-4ae3-b5d1-d85922d8064b",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b8dd7cda-e93e-4224-8f77-1cfd303cb07b",
        "cursor": {
          "ref": "b9f6f8b5-4206-4196-bf0b-0312174390e1",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ed2cd5e5-fd07-4084-b92f-530bd0f95640"
        },
        "item": {
          "id": "b8dd7cda-e93e-4224-8f77-1cfd303cb07b",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "17706c23-9d1c-4692-83a1-86b477cfb0a4",
          "status": "Created",
          "code": 201,
          "responseTime": 123,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "b8dd7cda-e93e-4224-8f77-1cfd303cb07b",
        "cursor": {
          "ref": "b9f6f8b5-4206-4196-bf0b-0312174390e1",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ed2cd5e5-fd07-4084-b92f-530bd0f95640"
        },
        "item": {
          "id": "b8dd7cda-e93e-4224-8f77-1cfd303cb07b",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "17706c23-9d1c-4692-83a1-86b477cfb0a4",
          "status": "Created",
          "code": 201,
          "responseTime": 123,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "2d729a7b-26c9-4ee1-90f8-c6af2c1bdb3d",
        "cursor": {
          "ref": "b29c5700-5b7d-49fe-99bf-910b4bf91016",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9a0c3819-740d-4575-8062-e2a45a4e623a"
        },
        "item": {
          "id": "2d729a7b-26c9-4ee1-90f8-c6af2c1bdb3d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "590e0647-cf3c-4b88-976f-e32b6872ed93",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2d729a7b-26c9-4ee1-90f8-c6af2c1bdb3d",
        "cursor": {
          "ref": "b29c5700-5b7d-49fe-99bf-910b4bf91016",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9a0c3819-740d-4575-8062-e2a45a4e623a"
        },
        "item": {
          "id": "2d729a7b-26c9-4ee1-90f8-c6af2c1bdb3d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "590e0647-cf3c-4b88-976f-e32b6872ed93",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2a090186-084b-4e42-b059-f9d4e06a008a",
        "cursor": {
          "ref": "d889af7e-88a4-4ef2-a87a-36aa5ba5ec40",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0a983f29-5dbb-4d7f-b960-067cfde42e7b"
        },
        "item": {
          "id": "2a090186-084b-4e42-b059-f9d4e06a008a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a58dd92e-e335-4d0e-9f68-db7710f6e5d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2a090186-084b-4e42-b059-f9d4e06a008a",
        "cursor": {
          "ref": "d889af7e-88a4-4ef2-a87a-36aa5ba5ec40",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0a983f29-5dbb-4d7f-b960-067cfde42e7b"
        },
        "item": {
          "id": "2a090186-084b-4e42-b059-f9d4e06a008a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a58dd92e-e335-4d0e-9f68-db7710f6e5d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ccab210f-9f91-45f5-ab8b-159c0fb9827a",
        "cursor": {
          "ref": "43b5d51a-43a4-464d-8269-6de6f9cf9315",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a4640ead-349a-4f63-9b26-cc463c616f73"
        },
        "item": {
          "id": "ccab210f-9f91-45f5-ab8b-159c0fb9827a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "18181f79-bcf0-4a9d-883e-8717e8e91975",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "ccab210f-9f91-45f5-ab8b-159c0fb9827a",
        "cursor": {
          "ref": "43b5d51a-43a4-464d-8269-6de6f9cf9315",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a4640ead-349a-4f63-9b26-cc463c616f73"
        },
        "item": {
          "id": "ccab210f-9f91-45f5-ab8b-159c0fb9827a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "18181f79-bcf0-4a9d-883e-8717e8e91975",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e0f4cad3-cb74-4ec5-a1e6-388f6b976d2b",
        "cursor": {
          "ref": "3126c1bf-228c-46e3-a1a7-41967ee8a5a4",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3a5344ed-5e0b-44c9-beeb-d839e03ef103"
        },
        "item": {
          "id": "e0f4cad3-cb74-4ec5-a1e6-388f6b976d2b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4326182a-99fb-4438-adac-266b2e250113",
          "status": "Created",
          "code": 201,
          "responseTime": 127,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "e0f4cad3-cb74-4ec5-a1e6-388f6b976d2b",
        "cursor": {
          "ref": "3126c1bf-228c-46e3-a1a7-41967ee8a5a4",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3a5344ed-5e0b-44c9-beeb-d839e03ef103"
        },
        "item": {
          "id": "e0f4cad3-cb74-4ec5-a1e6-388f6b976d2b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4326182a-99fb-4438-adac-266b2e250113",
          "status": "Created",
          "code": 201,
          "responseTime": 127,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "e1e9ee81-6adf-4fed-bc65-2eb22924a8c9",
        "cursor": {
          "ref": "4122c810-6cb3-43e8-bbbe-b048fdb3630b",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8c8fadf3-3272-4697-a6cc-4a8052aabb9f"
        },
        "item": {
          "id": "e1e9ee81-6adf-4fed-bc65-2eb22924a8c9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2d7dbe26-b72c-43b6-afd5-b1bcab3b5985",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "e1e9ee81-6adf-4fed-bc65-2eb22924a8c9",
        "cursor": {
          "ref": "4122c810-6cb3-43e8-bbbe-b048fdb3630b",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8c8fadf3-3272-4697-a6cc-4a8052aabb9f"
        },
        "item": {
          "id": "e1e9ee81-6adf-4fed-bc65-2eb22924a8c9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2d7dbe26-b72c-43b6-afd5-b1bcab3b5985",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6483c9f2-7957-43b7-ab7a-5769efb5a6ba",
        "cursor": {
          "ref": "23a16bff-d580-4fba-b0e0-93779754f890",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ffd19994-69a0-439e-ab9a-e5659807393c"
        },
        "item": {
          "id": "6483c9f2-7957-43b7-ab7a-5769efb5a6ba",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "a514d45f-028c-434c-a04b-be4a440b7053",
          "status": "Created",
          "code": 201,
          "responseTime": 131,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "6483c9f2-7957-43b7-ab7a-5769efb5a6ba",
        "cursor": {
          "ref": "23a16bff-d580-4fba-b0e0-93779754f890",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ffd19994-69a0-439e-ab9a-e5659807393c"
        },
        "item": {
          "id": "6483c9f2-7957-43b7-ab7a-5769efb5a6ba",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "a514d45f-028c-434c-a04b-be4a440b7053",
          "status": "Created",
          "code": 201,
          "responseTime": 131,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "6246cb4a-87d7-4e29-8ea6-0d84234e3214",
        "cursor": {
          "ref": "d8d0cad4-326d-4933-aebd-f7b0203ae22c",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c182e9b5-37f3-4168-bd1c-dd4bb1a5282a"
        },
        "item": {
          "id": "6246cb4a-87d7-4e29-8ea6-0d84234e3214",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "1cade994-873e-4722-bd38-05254dd3b4a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "6246cb4a-87d7-4e29-8ea6-0d84234e3214",
        "cursor": {
          "ref": "d8d0cad4-326d-4933-aebd-f7b0203ae22c",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c182e9b5-37f3-4168-bd1c-dd4bb1a5282a"
        },
        "item": {
          "id": "6246cb4a-87d7-4e29-8ea6-0d84234e3214",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "1cade994-873e-4722-bd38-05254dd3b4a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "dd6b6cad-e3f4-4f37-9bcc-f0f133f1ea3c",
        "cursor": {
          "ref": "bfe83eae-c2ad-4626-b7d5-eccabec0f2bf",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8d57a491-22a8-4dec-9373-a3a397c6e4de"
        },
        "item": {
          "id": "dd6b6cad-e3f4-4f37-9bcc-f0f133f1ea3c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e70ce81a-61c9-4c53-979e-2894ca04bfd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "dd6b6cad-e3f4-4f37-9bcc-f0f133f1ea3c",
        "cursor": {
          "ref": "bfe83eae-c2ad-4626-b7d5-eccabec0f2bf",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8d57a491-22a8-4dec-9373-a3a397c6e4de"
        },
        "item": {
          "id": "dd6b6cad-e3f4-4f37-9bcc-f0f133f1ea3c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e70ce81a-61c9-4c53-979e-2894ca04bfd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d90971ef-7be8-4e02-b570-ce6cd6127112",
        "cursor": {
          "ref": "dd70cc2e-4594-4ed6-84d7-f73c762ae454",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "077e8a45-0020-48d1-8e5f-faa05735a3c3"
        },
        "item": {
          "id": "d90971ef-7be8-4e02-b570-ce6cd6127112",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "eae7ca55-a59a-4578-ae49-299216e1884e",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "d90971ef-7be8-4e02-b570-ce6cd6127112",
        "cursor": {
          "ref": "dd70cc2e-4594-4ed6-84d7-f73c762ae454",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "077e8a45-0020-48d1-8e5f-faa05735a3c3"
        },
        "item": {
          "id": "d90971ef-7be8-4e02-b570-ce6cd6127112",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "eae7ca55-a59a-4578-ae49-299216e1884e",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "123bd4e1-8c4c-4be1-87d0-0ae4c5d008d7",
        "cursor": {
          "ref": "21cd1bc5-9df6-4214-8daa-6ef1a991d71f",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2daa8b3e-eeaa-4585-8cf8-c8a3e06df9ee"
        },
        "item": {
          "id": "123bd4e1-8c4c-4be1-87d0-0ae4c5d008d7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ceee33f5-2a04-4d4c-b93b-d7dd24b61085",
          "status": "Created",
          "code": 201,
          "responseTime": 116,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "123bd4e1-8c4c-4be1-87d0-0ae4c5d008d7",
        "cursor": {
          "ref": "21cd1bc5-9df6-4214-8daa-6ef1a991d71f",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2daa8b3e-eeaa-4585-8cf8-c8a3e06df9ee"
        },
        "item": {
          "id": "123bd4e1-8c4c-4be1-87d0-0ae4c5d008d7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ceee33f5-2a04-4d4c-b93b-d7dd24b61085",
          "status": "Created",
          "code": 201,
          "responseTime": 116,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "b5474fbf-3965-4dc0-9da4-671593a01dd1",
        "cursor": {
          "ref": "a5e35366-3cdd-4cd2-a817-c16a248dbbfc",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3424ea84-3ffe-487f-90ff-9b1cad429b39"
        },
        "item": {
          "id": "b5474fbf-3965-4dc0-9da4-671593a01dd1",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "42884880-70e5-4f38-bb33-fbe63cffed30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b5474fbf-3965-4dc0-9da4-671593a01dd1",
        "cursor": {
          "ref": "a5e35366-3cdd-4cd2-a817-c16a248dbbfc",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3424ea84-3ffe-487f-90ff-9b1cad429b39"
        },
        "item": {
          "id": "b5474fbf-3965-4dc0-9da4-671593a01dd1",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "42884880-70e5-4f38-bb33-fbe63cffed30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "4e4ab86e-3e4d-4693-a98e-bbf8833f32b3",
        "cursor": {
          "ref": "4a1b7ff6-e82f-4cb8-860c-fc1d73167eda",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe97fd73-ed1f-4ba4-bab4-d412a912677c"
        },
        "item": {
          "id": "4e4ab86e-3e4d-4693-a98e-bbf8833f32b3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d19e3d31-4cae-454b-9b55-2e330a78804c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "4e4ab86e-3e4d-4693-a98e-bbf8833f32b3",
        "cursor": {
          "ref": "4a1b7ff6-e82f-4cb8-860c-fc1d73167eda",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe97fd73-ed1f-4ba4-bab4-d412a912677c"
        },
        "item": {
          "id": "4e4ab86e-3e4d-4693-a98e-bbf8833f32b3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d19e3d31-4cae-454b-9b55-2e330a78804c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "9b4aea8f-6327-4d9b-8426-e10876df279a",
        "cursor": {
          "ref": "970de9ab-eb3b-468f-aeb4-ad9c95c355ca",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3320aaf3-de8c-4b0c-9af2-3a886c65fdb2"
        },
        "item": {
          "id": "9b4aea8f-6327-4d9b-8426-e10876df279a",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "ded0bef4-6e69-4afe-abbe-89b363c98157",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "9b4aea8f-6327-4d9b-8426-e10876df279a",
        "cursor": {
          "ref": "970de9ab-eb3b-468f-aeb4-ad9c95c355ca",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3320aaf3-de8c-4b0c-9af2-3a886c65fdb2"
        },
        "item": {
          "id": "9b4aea8f-6327-4d9b-8426-e10876df279a",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "ded0bef4-6e69-4afe-abbe-89b363c98157",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "45c2c3d9-7f73-44e2-a6dc-048c767a8369",
        "cursor": {
          "ref": "6defb5f6-a98a-47c6-b36d-fb9f6e821b07",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bcd2f0bb-4584-4fa5-acc4-e2244412e9f1"
        },
        "item": {
          "id": "45c2c3d9-7f73-44e2-a6dc-048c767a8369",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "64d82cb3-eb1c-408c-8fd4-4b56273435b2",
          "status": "Created",
          "code": 201,
          "responseTime": 117,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "45c2c3d9-7f73-44e2-a6dc-048c767a8369",
        "cursor": {
          "ref": "6defb5f6-a98a-47c6-b36d-fb9f6e821b07",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bcd2f0bb-4584-4fa5-acc4-e2244412e9f1"
        },
        "item": {
          "id": "45c2c3d9-7f73-44e2-a6dc-048c767a8369",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "64d82cb3-eb1c-408c-8fd4-4b56273435b2",
          "status": "Created",
          "code": 201,
          "responseTime": 117,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "9c32ba49-edb1-472d-9d89-0edf009c7a95",
        "cursor": {
          "ref": "218f5162-4359-4ec4-8626-c0a8a7774872",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a302363e-2df3-443e-886f-31455f009d50"
        },
        "item": {
          "id": "9c32ba49-edb1-472d-9d89-0edf009c7a95",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "a29a04e3-06a4-4723-9037-638536832586",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "9c32ba49-edb1-472d-9d89-0edf009c7a95",
        "cursor": {
          "ref": "218f5162-4359-4ec4-8626-c0a8a7774872",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a302363e-2df3-443e-886f-31455f009d50"
        },
        "item": {
          "id": "9c32ba49-edb1-472d-9d89-0edf009c7a95",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "a29a04e3-06a4-4723-9037-638536832586",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "57ac28b9-9647-4c18-9e73-78a4d9139d1b",
        "cursor": {
          "ref": "eb19cf83-5ed1-4904-a8cf-612bcbcb0ab2",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bd595bfd-5027-46ca-a4fc-00a34fb74e6e"
        },
        "item": {
          "id": "57ac28b9-9647-4c18-9e73-78a4d9139d1b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "df47c28d-6b5a-499c-9797-092c65466b73",
          "status": "Created",
          "code": 201,
          "responseTime": 115,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "57ac28b9-9647-4c18-9e73-78a4d9139d1b",
        "cursor": {
          "ref": "eb19cf83-5ed1-4904-a8cf-612bcbcb0ab2",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bd595bfd-5027-46ca-a4fc-00a34fb74e6e"
        },
        "item": {
          "id": "57ac28b9-9647-4c18-9e73-78a4d9139d1b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "df47c28d-6b5a-499c-9797-092c65466b73",
          "status": "Created",
          "code": 201,
          "responseTime": 115,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "9f661970-5102-4876-9e9a-f8fcf749dc24",
        "cursor": {
          "ref": "76701a81-e42f-4d44-8a44-fefbcb8f418b",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ce2310fd-df46-44e1-b6d2-32ac1062dcc4"
        },
        "item": {
          "id": "9f661970-5102-4876-9e9a-f8fcf749dc24",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dc52a1d0-e255-45f8-a84e-09d46d132db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9f661970-5102-4876-9e9a-f8fcf749dc24",
        "cursor": {
          "ref": "76701a81-e42f-4d44-8a44-fefbcb8f418b",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ce2310fd-df46-44e1-b6d2-32ac1062dcc4"
        },
        "item": {
          "id": "9f661970-5102-4876-9e9a-f8fcf749dc24",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dc52a1d0-e255-45f8-a84e-09d46d132db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "401bf82c-9e6b-4800-9b11-d2d68881157c",
        "cursor": {
          "ref": "76c92e77-9ed1-4d37-bf2d-1dabb88a583d",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "47aaa260-8212-41fa-aa06-c60965c53e53"
        },
        "item": {
          "id": "401bf82c-9e6b-4800-9b11-d2d68881157c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a8ef681a-0639-4caa-807b-6ae99d1d892b",
          "status": "Created",
          "code": 201,
          "responseTime": 153,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "401bf82c-9e6b-4800-9b11-d2d68881157c",
        "cursor": {
          "ref": "76c92e77-9ed1-4d37-bf2d-1dabb88a583d",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "47aaa260-8212-41fa-aa06-c60965c53e53"
        },
        "item": {
          "id": "401bf82c-9e6b-4800-9b11-d2d68881157c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a8ef681a-0639-4caa-807b-6ae99d1d892b",
          "status": "Created",
          "code": 201,
          "responseTime": 153,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "496229dd-3b76-4dff-8e23-b8603c842805",
        "cursor": {
          "ref": "49437796-3339-452e-b31f-5deb56afb9de",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1f38ad27-4338-488b-b1ef-fc8db5d67173"
        },
        "item": {
          "id": "496229dd-3b76-4dff-8e23-b8603c842805",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9c26609f-0796-4b33-a24f-ca2882e0eb8d",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "496229dd-3b76-4dff-8e23-b8603c842805",
        "cursor": {
          "ref": "49437796-3339-452e-b31f-5deb56afb9de",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1f38ad27-4338-488b-b1ef-fc8db5d67173"
        },
        "item": {
          "id": "496229dd-3b76-4dff-8e23-b8603c842805",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9c26609f-0796-4b33-a24f-ca2882e0eb8d",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff40b5a-3520-4085-9c7b-921f082d9f5a",
        "cursor": {
          "ref": "04875908-4a4b-4b62-b208-34bda33e41ce",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2f665ea7-1bd8-43ce-b12f-80499199e76e"
        },
        "item": {
          "id": "9ff40b5a-3520-4085-9c7b-921f082d9f5a",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "fd508e23-1aad-4609-9822-e22a223d3b4a",
          "status": "Created",
          "code": 201,
          "responseTime": 113,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "9ff40b5a-3520-4085-9c7b-921f082d9f5a",
        "cursor": {
          "ref": "04875908-4a4b-4b62-b208-34bda33e41ce",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2f665ea7-1bd8-43ce-b12f-80499199e76e"
        },
        "item": {
          "id": "9ff40b5a-3520-4085-9c7b-921f082d9f5a",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "fd508e23-1aad-4609-9822-e22a223d3b4a",
          "status": "Created",
          "code": 201,
          "responseTime": 113,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "d9cb8ca6-3236-4213-9364-ec697b79da3a",
        "cursor": {
          "ref": "4e94403e-7d1a-48a8-ae42-ceff460bf965",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f7704926-371a-4c0a-a787-7a8122a91935"
        },
        "item": {
          "id": "d9cb8ca6-3236-4213-9364-ec697b79da3a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "906c0e6f-f39c-4749-95bd-88b7dc7a94ac",
          "status": "Created",
          "code": 201,
          "responseTime": 109,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cb8ca6-3236-4213-9364-ec697b79da3a",
        "cursor": {
          "ref": "4e94403e-7d1a-48a8-ae42-ceff460bf965",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f7704926-371a-4c0a-a787-7a8122a91935"
        },
        "item": {
          "id": "d9cb8ca6-3236-4213-9364-ec697b79da3a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "906c0e6f-f39c-4749-95bd-88b7dc7a94ac",
          "status": "Created",
          "code": 201,
          "responseTime": 109,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13059d5-871f-49d2-86fa-1a490c391a25",
        "cursor": {
          "ref": "86019b7c-eef2-4177-81a3-b1811bc0ec73",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5599be07-e49c-4973-bcf3-33e502854c87"
        },
        "item": {
          "id": "e13059d5-871f-49d2-86fa-1a490c391a25",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "f82dbda1-c197-42c7-8e6f-68dcac42af34",
          "status": "Created",
          "code": 201,
          "responseTime": 112,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e13059d5-871f-49d2-86fa-1a490c391a25",
        "cursor": {
          "ref": "86019b7c-eef2-4177-81a3-b1811bc0ec73",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5599be07-e49c-4973-bcf3-33e502854c87"
        },
        "item": {
          "id": "e13059d5-871f-49d2-86fa-1a490c391a25",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "f82dbda1-c197-42c7-8e6f-68dcac42af34",
          "status": "Created",
          "code": 201,
          "responseTime": 112,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "877f5811-4c61-45bf-b1be-3af9e042969c",
        "cursor": {
          "ref": "3f8c5e8f-cb35-48d7-8843-afa13f441259",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "723d987e-3da0-4b86-9e16-8407404dbd95"
        },
        "item": {
          "id": "877f5811-4c61-45bf-b1be-3af9e042969c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e2ece749-a180-41e9-975a-7c47c2d84b7d",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "877f5811-4c61-45bf-b1be-3af9e042969c",
        "cursor": {
          "ref": "3f8c5e8f-cb35-48d7-8843-afa13f441259",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "723d987e-3da0-4b86-9e16-8407404dbd95"
        },
        "item": {
          "id": "877f5811-4c61-45bf-b1be-3af9e042969c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e2ece749-a180-41e9-975a-7c47c2d84b7d",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3e782e-28db-4cd2-9e7f-e144f8b88c0f",
        "cursor": {
          "ref": "19417730-38ad-498c-a816-5aa4fb202d34",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e437ab0c-ebe2-4093-8734-2cea21226908"
        },
        "item": {
          "id": "1f3e782e-28db-4cd2-9e7f-e144f8b88c0f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c28e14a5-dc7f-4015-aebb-08fdfc368f0e",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1f3e782e-28db-4cd2-9e7f-e144f8b88c0f",
        "cursor": {
          "ref": "19417730-38ad-498c-a816-5aa4fb202d34",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e437ab0c-ebe2-4093-8734-2cea21226908"
        },
        "item": {
          "id": "1f3e782e-28db-4cd2-9e7f-e144f8b88c0f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c28e14a5-dc7f-4015-aebb-08fdfc368f0e",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "04c4611e-0de4-4a66-a213-a13ca15749ef",
        "cursor": {
          "ref": "a3844943-3bc4-4e3e-96cd-05e380cdb99c",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ccbcf1da-c961-4f1c-a49e-55995b917af6"
        },
        "item": {
          "id": "04c4611e-0de4-4a66-a213-a13ca15749ef",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c6f444ff-9c2f-4d99-9bc2-3897b864a36f",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "04c4611e-0de4-4a66-a213-a13ca15749ef",
        "cursor": {
          "ref": "a3844943-3bc4-4e3e-96cd-05e380cdb99c",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ccbcf1da-c961-4f1c-a49e-55995b917af6"
        },
        "item": {
          "id": "04c4611e-0de4-4a66-a213-a13ca15749ef",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c6f444ff-9c2f-4d99-9bc2-3897b864a36f",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1db8ba21-546b-459c-875b-ab28f8278805",
        "cursor": {
          "ref": "e86fc693-34fe-4b4c-a71b-87e5a2d2d996",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3b0015cd-8a65-46ce-8cec-f0ef972aedca"
        },
        "item": {
          "id": "1db8ba21-546b-459c-875b-ab28f8278805",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "e75cd052-381f-4465-9839-71d0ec6c8800",
          "status": "Created",
          "code": 201,
          "responseTime": 117,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1db8ba21-546b-459c-875b-ab28f8278805",
        "cursor": {
          "ref": "e86fc693-34fe-4b4c-a71b-87e5a2d2d996",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3b0015cd-8a65-46ce-8cec-f0ef972aedca"
        },
        "item": {
          "id": "1db8ba21-546b-459c-875b-ab28f8278805",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "e75cd052-381f-4465-9839-71d0ec6c8800",
          "status": "Created",
          "code": 201,
          "responseTime": 117,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "848c8d0b-0342-45d0-8c8c-53c2b0a50902",
        "cursor": {
          "ref": "bb914a30-11e3-41a7-9954-9becf881dbdc",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aa6d1302-b334-40d6-a906-9daf72bb6bc2"
        },
        "item": {
          "id": "848c8d0b-0342-45d0-8c8c-53c2b0a50902",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "34cecaab-21a9-4a14-9875-2cbfffaa4c38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "848c8d0b-0342-45d0-8c8c-53c2b0a50902",
        "cursor": {
          "ref": "bb914a30-11e3-41a7-9954-9becf881dbdc",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aa6d1302-b334-40d6-a906-9daf72bb6bc2"
        },
        "item": {
          "id": "848c8d0b-0342-45d0-8c8c-53c2b0a50902",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "34cecaab-21a9-4a14-9875-2cbfffaa4c38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4b575419-430b-4c76-8672-15c05dea01ba",
        "cursor": {
          "ref": "66bd82a5-538e-4261-965b-f42d03d09306",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f99c0d41-3ef6-40fb-b1eb-a9f9e2ddf7e2"
        },
        "item": {
          "id": "4b575419-430b-4c76-8672-15c05dea01ba",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ad3d6cb3-05c1-4b16-8b7a-e912ce5db1d2",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 87,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ea9985ac-e716-4031-a91f-fe5917b2c4e4",
        "cursor": {
          "ref": "8a07151b-d037-4655-a123-0331d9763ad6",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5b55ec71-15c0-4474-b41c-fc0c88c6d545"
        },
        "item": {
          "id": "ea9985ac-e716-4031-a91f-fe5917b2c4e4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c563b025-dfac-409e-b052-4cb2cc179743",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ea9985ac-e716-4031-a91f-fe5917b2c4e4",
        "cursor": {
          "ref": "8a07151b-d037-4655-a123-0331d9763ad6",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5b55ec71-15c0-4474-b41c-fc0c88c6d545"
        },
        "item": {
          "id": "ea9985ac-e716-4031-a91f-fe5917b2c4e4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c563b025-dfac-409e-b052-4cb2cc179743",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "043eda5f-f810-421c-854c-865da443a42e",
        "cursor": {
          "ref": "794d72aa-12f7-45e3-9257-c9e60ec07e05",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1de94637-8806-49c9-bf8b-86ee4e307a0e"
        },
        "item": {
          "id": "043eda5f-f810-421c-854c-865da443a42e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a64dc5ba-4ff9-4aee-a8db-7932f0dd7e11",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a5924f4c-abbb-4e89-a88c-ebf9a3423f81",
        "cursor": {
          "ref": "12460c87-d13b-40d8-9da7-2069dc74117c",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d00037f9-6dcf-460c-9e75-12fabdbf58b8"
        },
        "item": {
          "id": "a5924f4c-abbb-4e89-a88c-ebf9a3423f81",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "886aa686-419a-433a-a314-a9c5a859a6a9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "a5924f4c-abbb-4e89-a88c-ebf9a3423f81",
        "cursor": {
          "ref": "12460c87-d13b-40d8-9da7-2069dc74117c",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d00037f9-6dcf-460c-9e75-12fabdbf58b8"
        },
        "item": {
          "id": "a5924f4c-abbb-4e89-a88c-ebf9a3423f81",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "886aa686-419a-433a-a314-a9c5a859a6a9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5b92b033-7fce-4a96-946d-0833fa9b57f0",
        "cursor": {
          "ref": "ecaf1784-2709-49d7-8e88-8598a04b4ab7",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bb5aed57-e206-40e1-95cc-2e419715a967"
        },
        "item": {
          "id": "5b92b033-7fce-4a96-946d-0833fa9b57f0",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7e325a8e-fb8d-44c9-829d-95e8ca5b1b14",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "d8b876af-65d7-424a-93a0-8b50c5528f75",
        "cursor": {
          "ref": "fa099141-1455-4499-b92b-c25ca9723b77",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5f407cfb-af2e-4c3f-af6c-f73d6b46a6a7"
        },
        "item": {
          "id": "d8b876af-65d7-424a-93a0-8b50c5528f75",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0d1cdb9e-cc8f-4cf2-ba12-a949defea20f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "d8b876af-65d7-424a-93a0-8b50c5528f75",
        "cursor": {
          "ref": "fa099141-1455-4499-b92b-c25ca9723b77",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5f407cfb-af2e-4c3f-af6c-f73d6b46a6a7"
        },
        "item": {
          "id": "d8b876af-65d7-424a-93a0-8b50c5528f75",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0d1cdb9e-cc8f-4cf2-ba12-a949defea20f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f2290e9b-c1f5-45b3-b467-543e7a0d39e2",
        "cursor": {
          "ref": "1dc01447-c6ac-4183-96ac-cae184500918",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5b74a9ef-caec-44a3-ad47-0226be757de9"
        },
        "item": {
          "id": "f2290e9b-c1f5-45b3-b467-543e7a0d39e2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9a07aba9-9493-4a50-9bc7-c6acea43a981",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "473aca07-7876-43e3-94e0-808e6f072622",
        "cursor": {
          "ref": "49c0ff21-8f6d-48c4-97ca-a1d9134c85ab",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ae350656-b9ae-4375-a30e-063bd21fcde4"
        },
        "item": {
          "id": "473aca07-7876-43e3-94e0-808e6f072622",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b0a19f20-34b6-4629-a3ed-5d1385d92a6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "473aca07-7876-43e3-94e0-808e6f072622",
        "cursor": {
          "ref": "49c0ff21-8f6d-48c4-97ca-a1d9134c85ab",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ae350656-b9ae-4375-a30e-063bd21fcde4"
        },
        "item": {
          "id": "473aca07-7876-43e3-94e0-808e6f072622",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b0a19f20-34b6-4629-a3ed-5d1385d92a6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "e842a8c4-cb51-405c-a76f-2e21d21a1fb6",
        "cursor": {
          "ref": "0cbc996c-3f59-4265-a8fd-a469b71c31c0",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "aff154c0-11b6-4eee-921b-422d94a5a619"
        },
        "item": {
          "id": "e842a8c4-cb51-405c-a76f-2e21d21a1fb6",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2986fd07-1a99-4ccc-9d54-8db43a77a39e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}