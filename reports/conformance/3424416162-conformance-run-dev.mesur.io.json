{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cd9fc07f-af4f-4bb6-ac5b-6940190270e2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bcced43e-e420-4fec-9aa7-ed8f9053d776",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4dcb6fbf-b56a-4ae9-ab34-8a1d978b7305",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f84a7fad-559b-40f2-8d34-cb22ff946e0a"
                }
              }
            ]
          },
          {
            "id": "caa940f8-f4f9-4155-be49-8ec6cf142189",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "194abb99-f399-41bd-acbe-cbc19e624142",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fbd21b4d-1a3f-4e75-bd71-8e0a5f887701"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a72fb9b5-3a63-4c81-90d3-d6f8b0140b41",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9c98776d-1fae-4897-94d0-f0543d334b63",
            "name": "Positive Testing",
            "item": [
              {
                "id": "63443cf7-ca41-4da6-8f08-4e5fc59d212a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6f205f3-7513-4bfa-8186-1c18a25e93d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "555fc03c-1129-4dc3-943e-019ea5c6a7cc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27911df8-ce08-496c-bdc7-ff86d71137d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34dd09a7-06ab-45c2-91e5-60350e47bace"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f526edc5-1a7d-40da-beae-8fd7cde6f91c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7be7fb10-922a-4a59-a2b2-4a209c60f124"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44e256a5-6c37-43f4-8f86-44f3854f6db3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b0f48e38-f1c8-4cb9-949f-f6c7fee6f179"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "304176b9-97af-4b19-92a2-6ff34898fb7c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5558ac81-d3e5-4d7e-be6a-59046eb4ab2b"
            }
          }
        ]
      },
      {
        "id": "a9a25f92-f759-4885-afdf-07c3dccc67d2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "86d136a9-122d-477f-97bc-e554374987cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "902347df-c0b7-4a11-8a53-faf360b5bf12",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "35995fbc-d600-4364-9a7c-a74093fd3d2e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68285b4-ad90-4a74-839e-90e9371d2ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f76dbb5-9a4d-476e-87ca-e5ac266284a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1512da82-ee20-4e6f-a1d7-348e446a1d0e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc43751-ed94-4214-ad3c-30b53ce76bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a53b4d69-7e07-499e-8f4b-db6b4328dfa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611653a8-17c9-4e0c-bd31-dfa6b526e8ef",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1007084a-a806-4fb4-aaa0-d2845f0a75dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9c9b2ae-ddf3-4f2e-947c-0f66d6e04f75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e28d6aee-daea-495c-bb18-67272c1a6418",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3a968fb1-4197-4480-9b86-fa83eca5a1ab",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2a759f-c755-4622-87ed-5c1377dfa628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "260982a8-4591-478e-be4b-ba0cecabd987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3cc330-9615-4c7a-b103-82d71cb067a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e244cca7-e0d5-4e0a-8798-41b889591191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adac428-e985-475c-b93b-55e7d0c980f1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ae103f-acdc-4cc1-9b10-b1954cc036c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63efb1c9-ac08-42b7-9572-1943b0608b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec52c76a-bdc0-4ed2-b7e7-8eb899301ab1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "07967ddb-3bb2-4462-b65d-23351d4a10b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b26407f5-1fe7-4681-8035-0739b0c19e7f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3ee0def9-8fc7-4945-b74a-55157c1baa98",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98afbc7a-7d86-4106-aa83-9576bd57dda6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "84b458ec-2e9c-48bd-addf-39031c0a6631"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9303d3a7-cd0d-4e7e-988f-52da05bf3a56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a9e20f63-46a5-4d50-9f24-b350a93995b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa6e053d-18b4-4010-8921-6c22d2af0576",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be10de66-9c4f-48f2-bbd7-536f23a191c9"
            }
          }
        ]
      },
      {
        "id": "e9684908-862a-46c2-98b9-50ed022d9678",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c46d5965-c719-4df8-be23-b210e43a0322",
            "name": "Negative Testing",
            "item": [
              {
                "id": "353bbce8-1997-44a9-99e4-93059b3b7328",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ec16e7ec-7b19-49f1-bf0c-517a6a2da520",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e89bcb7-7567-42ea-a8f1-edbe19466eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9313251-cda5-43b8-99bd-7c5dbfa30010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28d8bae-861d-46f8-8d0d-8d5bf3cec67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa24fcb8-3625-4e3c-9a7c-967b7229de25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8574e6-b8fe-4636-ad4d-b23b6f77b65f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e9b37b-fa93-427f-bcdf-c1512741b96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5780a5-e696-43f8-8e44-32518485f785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1b22a7-f8bd-4ed3-973b-af08c1b33708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0c0c18e-1a2d-4377-a342-c4a5f5935bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e96b622-b7f3-4c69-a818-3d1a231bfe69",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cb44bc-6ca8-47e4-bee8-e0f1612c6fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0d348c-2248-425b-91dd-79e935a75082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020feacd-4f94-478b-a615-746b8f87eaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f28d337-69d5-41cc-8c54-3de29ffc9ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ab195a-97d3-4f99-a9dd-e8a4d6a3542e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d676dea1-dd19-471a-aeef-46c3f00a6091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c50046-cbbf-4efc-98ea-e58c515fa3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e543c95f-1d86-44b0-bc96-499808f185ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9934e2ce-89f3-47d0-896a-577921d5e574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d163185-327e-4857-9ad6-c1c97c516436",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a51621d-3e5a-4b7e-b0c9-b29546f67f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a22de2-5374-4883-9334-12098ac8d10f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bbbf04-097f-4dba-bbce-35a684a91182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34aab916-a7af-4537-b8ab-a6a4f337e8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabb636d-f1e8-403f-b71e-6a9804ef079f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257c6e02-4562-4efd-a6f0-eac28db3030d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe39e15-ae38-4109-92e3-afbd68939a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea0cb03-2a2a-437a-8975-f8132c2c2df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87b67278-0460-40c1-9743-de98bea24b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc43fb2-4447-4683-8776-7a5f0b1bc2f5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2fddd0-972c-47b2-9877-a926840352e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d1dc8ac-2162-48e2-aef9-ac0154296888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefdfcf4-454e-4349-a56c-6777013a4fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c55895f5-2c20-4264-b966-8cfbeb93e4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604a77d0-c10a-48e6-bf33-03b793093ebb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c2418f-8302-459e-8d1b-7d82a1f5c4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c8fbe94-306f-449f-b71d-1d85e2da5aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d902621-320d-4513-96b8-0a89a5f02b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe14c4b2-5472-40e6-a227-0dd787091af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffbba15-1317-48c2-8dfd-520ea740268f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c774562-309f-4e4e-b582-b28a45abaab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a20c4b-75dd-415c-bfdf-bb44361ae3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9248d8cb-64a8-4c15-8aff-a1fbf6ce298c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fff063ad-26dd-4a7b-85ca-fd8f279e5c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d41a16-a936-42d2-859c-12aa6dbb729e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12cffb5-b086-4d15-b6e0-71ed180e5b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a4c841-d595-4c9c-b643-0b7dea2ee736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2240edcc-f2f2-43a4-af7e-f1585108f207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75c6d14e-5e01-4ae9-b0a4-ea6848c37671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71cf703-6a4a-4711-a57e-510dd4f47b53",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb1dbd9-f726-4e83-a151-98ee425dd272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1ab45b-3625-4dd7-91ef-8677e53a8768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabe9f5c-1ecd-417c-8043-064ea81217c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fef75a77-dca9-4a67-9e00-2d29a011b9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d155a3b8-b260-4322-b7c1-b7a22246fe51",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f90c46-b0bb-4646-bc1f-660797db09a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387824fd-8a84-46bb-924b-5510bdd4a650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e7053c-4890-438c-8f2d-d58d85fcbcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b23d3541-0625-4f3d-8dd2-8ae4fe2c9b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04dd650-714a-40f8-b819-5f1501365a7d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e90b27-0da1-4003-960c-0406aceb7e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f881a9f1-6956-4800-b1e2-295ccbdf9a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0798e08a-24cc-4312-971b-fd55ce995700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41c4d9e1-7102-4655-bfc3-6b96f83a54e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0c080f-c7e1-4852-a2ca-fe036d95de2f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7279b8c3-1096-4549-ace6-b1b6df4c981b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc87d23f-d2d1-47ad-8e7b-f66d8da08124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50cbc99-741c-45de-9971-017d82359e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b477968-5dc9-4a9e-b7fe-aff382fc77c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0e7da3-d4d0-43b4-96a8-77b7e662c71f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74abbaa9-ed87-482c-86bf-846258a2d5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13781eb4-18fd-4bc3-bf10-d5081d13e3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d181d53e-7972-46a7-86d9-0d1e874fe6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42d2de8f-0ab5-4c9a-b16c-1a2b1a3ec2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b51b0d-372f-4dee-ad89-29ce0146059c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c435c36b-6c40-4a17-9d8f-a22127794bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d71217-036e-4407-acdb-befa3ff95eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c908341-74ab-429c-9e51-e33ab870ab52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e538e8f-9611-460c-a3f2-2f173e7eb763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640a0303-d766-4128-a829-61d2eaf37d39",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1dddc9-4207-4d41-87ae-8e6517dbd3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79265f23-bf8d-4a4b-a71d-c1b62bc354c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339c212f-25b9-4400-99bf-bb7475d6e0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69d05d79-39bf-4862-96a0-6a5f1a8bd273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a817533a-42fe-4648-84f8-b7da307e6939",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bede7f33-3c7c-4fe5-b7c1-b71fbfac9007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557b3e32-1e51-476f-95ec-e8692966f255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444a0943-365d-48a2-ae76-f30ea7786759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e867037-143a-4fdd-aa65-d34da1b8363e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b139840a-8295-4670-b4d5-75cce0ee4e88",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d50a7c3-6cc7-4d3b-9f33-23882b044b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e18fe20-811d-4066-8a1d-dd3a62322a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f81c4f-35d3-40dd-8beb-5bcf159bc3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bda1512d-31a5-43f5-a39e-fb1087c478a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b742184-2427-4517-9613-546f3a128b0d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b8e902-e4eb-4f3c-9b5d-a3fb82d0baab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7805e3-8198-4557-815a-e0cf7246afc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf73f63c-b8a2-4df9-b7b5-c2cfba936915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "453b22cf-9295-4504-ae65-14de46881342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de39358-9c74-4c66-aae7-0367a18c6872",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b567381-bd3c-47e5-9fbe-c65fab46b8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5afcd83-e909-4ebe-9fc9-81e7bdf02228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c704caf-ac2b-4cd1-99ab-dfb04a8a28e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c77a121-2f46-40eb-9a9a-de334ef481ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a67142-d5ed-4425-85d3-0f512308de4a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72463798-6297-48ed-abba-9d099e32f551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953a6156-1a51-4c78-8c23-cff2f6fbb903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238ffd3d-0d01-4515-9246-ff418bfb9c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c826750c-0cba-4ad1-9cb6-8333d96ec3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195157ff-58ba-4068-90c2-9247b082e862",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d57c4b-147e-44a5-b539-5e688e9b77bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81df5cb3-8708-4374-afee-44838827d738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2e209e-98af-4181-ae17-584d3bcdc4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5211d3b1-dcfb-44ce-8e0c-aa9a7013e0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbda7b7-59bb-49c3-afa7-038cf4f0f543",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73405d34-501f-47f1-8f4a-26feabc161ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8c16d7-e857-4b1b-88e1-ce879bd6db62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c763328-8a43-40f0-97c3-e367ff903524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b957d1f-f02c-48ea-8d4e-dc7d97340ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbd6eea-8e7e-4906-88e0-77478576b418",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2ea3a7-c8f7-4a62-9461-c92f2d073f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86490d37-22b5-4c17-931e-edab9bc09b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b912fd8-9932-4595-94c4-51d33ce3c474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1be1e791-a4f8-4277-8998-ff16522ccef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1ab4f2-b963-448b-aec5-f8d69eb27d38",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d8e1d0-00f0-42a1-8b87-5eff49ce073a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2d0249-6b7d-46eb-9f87-7a095eaecacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018089ee-c1f3-4d1c-9da0-f484d6e57d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30783c5b-e50c-419c-9637-23bd69071550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2478c59e-5fa7-4a23-a74a-55d988ea154e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5e48c5-0efc-451c-8f4d-52627ff52440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b205dd-2cf3-423d-9908-fb0f9ee33a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879fb5b3-2210-420a-9998-00da111bc921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09202c42-f8e0-4a76-925f-e1a880a7284d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da103532-d5fb-466e-8ad0-4b9c1a3add0d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e35ffbf-df4f-4243-9759-488abe1b3c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c68d1f-8c3f-4918-a14c-a61d51f22ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c12fd8-d544-40a3-bd3c-5362698261a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4865e1e-841b-46d6-8bb5-2184d73392da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cae0b9-2858-4220-a9fb-3eda4a330ccb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254ed446-8d63-4337-8a63-d75a0fca0fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905a6369-dfd0-4846-8915-fd450bc74b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087b06f2-3280-4ef8-a714-2bf8e1f96ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0759824e-c2e9-4ed1-acd4-9c33695cdcf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74de7269-597a-4b7e-9c0d-8b5a4f513cf0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37fe2e1-86f3-411a-a54a-e1a505c40ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9e2141-811c-4b70-83d6-16aed27a0d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec26e84-746c-4203-b032-eebced30d7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "60fd0ca4-000c-4ed1-b0e9-f0823c7b722b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc215c0d-e862-40f0-8118-1f9a79ad5d24",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40007455-5b6f-43f1-9f5d-58c4d65395f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88458d2b-5d17-4a93-94c5-ac8d5e627a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733d1372-249b-40de-95f2-8e91d33d4ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2e4a773-9c5f-44d4-97e0-f0b108ba9225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf6a4e8-221f-4b8b-acbd-f1bc34b65918",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f648e111-645d-46d9-afd7-b418e68075a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b5b793-bac9-4eb0-87d9-31d4c8d039fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acf2762-d8d7-4cf5-ae66-d15e82589768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c690f0f1-70c2-41be-b25f-3084b575ff2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1164da56-c226-4793-928c-891f5fdf7241",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7225b1f-6aed-4b42-a734-833b999ca68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8a71a5-adc1-42a3-a34e-d8556b5389b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e19299c-e7d0-444d-b577-672f85d37cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96a13a07-8b4e-4d28-96a0-f1cd2710c1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bb4df8-e618-44e6-9f4c-2c6b96406f1c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e339ea-1367-4020-9091-7ffc4acbb81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56955d21-56c7-44d4-8edf-67609b86e306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5e7e9e-1976-4935-aa29-51c3177a2f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2259693-2c90-4018-805c-84e1be98485b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98d90ec-22ef-42a2-bb47-be7e4bb889ee",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1eba0a-52e8-4320-a99b-99e9c63b62c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3874259a-86f0-47a6-9f04-dcf96daeaec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa69b36-2f04-45b8-ac8e-be21b14960d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1f533a79-973c-46c0-b236-9d15c51c1148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171a25b9-cf4c-446a-ada9-f578f1e94849",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d216ed5-7d11-4445-aceb-fa687cc4778d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc6397d1-3171-4814-b123-6a5cb49bc9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a74de3d-4df0-48e8-9bd0-2fe98f0e7422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f793271-5d4b-451e-98e6-238dccda5f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f13c9b-7f7e-4f4c-8e45-6586530368a0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e149d666-e42b-4c8e-bdc9-53363ccb177b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f960f7-9347-445d-9f8c-178d1a774942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b22ef9-7423-45d2-a737-29ff9e2a77fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bec9adf3-df73-4f68-b4ba-31ff5dfcbdcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b490d344-8364-43d3-bf7c-547c810eda59",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccc9a9d-5b49-45cd-8f15-4ff3317fd955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768293eb-e7ea-49df-9cce-6f871c425d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a52a6b-8a0f-4ef4-abb8-a6dcc4871fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "446266b5-f747-4a03-a49a-86ba1390cb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e8f312-76b3-4dc5-88cc-2704600bb449",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d277c13-a181-4035-bc24-80aab1b6c6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fe06e6-ef87-4424-8a8f-eba568ae13b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c45057-5cb8-45c4-af1b-217c87c48da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7500e3fc-1527-4993-8cca-a7d4ef6a6c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1d2710-50a7-43c0-92d9-c720eb0146a4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9909c37a-6a41-418b-84e3-dd5a3f41aa5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1167d01e-eb64-4107-88de-cdc86c7e8537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a672d37-20fb-4837-88c8-8dde02d213cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c18d693-3941-4524-a6da-9ee6272329c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b75ef2-b475-4b50-8558-b7714fe2cf72",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319e68fb-a1dc-4c83-a990-fb0432d15f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ba69a4-0e8e-4881-87a5-091d143263a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8105f46-9274-4b16-8d55-cc09624304c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b319ddb-3922-4e2d-8633-475268024c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5362fd2-0295-4228-802a-4b60ca2ddf56",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4834dc13-2eb4-4f67-b9f6-bf5654a0ca60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947ddcb8-71c9-4d16-a886-015d93b0cf97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c9a288-ca26-46d1-96ff-24c7c37a2f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3a54da-0b6e-4e21-a03a-5c9ab7d84c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f010e2f-c53d-409f-8d80-ee1c4ba67923",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3959f46-4fcb-4c2e-987a-5bb70240939f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416e14dd-cd27-4d44-b84d-bee53c80ee3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c005524b-3a2e-45a4-b869-fbe5a7d72dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c011baa-9b4f-4e17-a989-8d878ddc4b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb51fda-4d9f-4f86-ab3a-0461d247898f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f3a8cb-ec64-45c5-b6c8-16a5a070f02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a423ed9e-006b-4375-9764-6679a0ef4524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1ad7b8-82c2-4c7c-8727-22b9e3848283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f12db24b-f355-4d19-a053-e419a6acbfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1b4a18-0651-4ef7-8686-baa360813772",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20319b95-5dbd-4ce1-a68d-5df3286a0484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c5b67c-be2f-4468-84ef-df59bb1552c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d10f22-ed8a-4be7-ac99-66e967ef41a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f90928-7dd2-4aac-9c32-0de75c5b1c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2eb67a9-7e3d-49c9-afc2-4d47ad4b2422",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fc7ad7-4a57-485a-9397-dc2e5d611737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ff1e97-cbf6-48d5-a222-b8d229633048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2cfa766-f041-4348-b6e5-f4d8b5d9c5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ddf4c9-596a-4890-a295-1bf33fb1ae54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6320fe6d-2249-47e8-9c5d-86b59d193c30",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bee9ea-b230-4412-be25-87012b8a10b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ad7b80-c333-42fb-8f15-2a6a861c6da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ae088c-635e-4fbd-b5d5-80f7c62a5f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8842ed6-d0c5-4174-b9fd-c498cdefec64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465655a7-f2e7-404a-8c6e-cade0236dc7b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed4f10a-38c7-4db7-b789-1a158c80013f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f602992-b4e8-4cae-8b23-30a9a0311271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0dde175-517f-4f2d-8f11-08420ba5c5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d645f44-daf5-4814-bba1-198fad661658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0aa223-235b-4d2a-9fd9-1a93c0ef5a5d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67f829e-3ab8-49e8-9d4a-2d8d73f0b295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b290269f-6fa2-40e6-9cdd-e31dcb9edf27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf8536e-7ed3-49b6-8f98-8e945dcc35d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdda9124-fad4-431c-a7f8-1e270b44b116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb133758-2663-4afc-928f-c4e083086b6e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e71ff7-f2a3-40d1-ad5a-93707feee08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e2c1fd-bb33-461b-8d88-0a855d1d78c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f868093-c0c1-415f-9a86-ee898454810a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb763de-3feb-4298-b59d-8c03296240c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110bb216-5ebd-483f-a918-5d7c66807a78",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c44d093-10c6-4c81-a4ed-c14e7a62ac03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "addc4b67-495d-4832-a286-70dd16995365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5cfeed2-27f8-4810-bbb9-1763b32382c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "64352bc8-8fb9-4317-a77a-65fc96798cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16911cbc-1e3d-48eb-ba81-5bfb333fc7c2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c711f423-6cfe-4921-a685-fd34bd71ccf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be73cc1b-40fe-4514-850a-e3699eab19d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb30f4b-3f1f-43cb-8ed8-2e233336ef20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e634b914-7c72-40c4-bace-ea8beb785cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb16e0c-7c56-4a2c-a02d-7136b967b42d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bf1281-0303-4192-97f9-09c90962099f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1268f550-086c-4c51-af52-a1349e6d7685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5734feb7-11bc-43aa-8223-319c7423e06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20da4b5f-8aae-438a-8010-2c13d77605b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42264a1c-5e40-4b21-a408-b93a1fa8de26",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa25e5be-b7e0-4ea2-875a-58f59c03803f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439dd784-9629-40c3-a136-036be5a2d8b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d9be8b-11df-4a5f-aa53-2b49a2d0270c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c849540f-2d9e-4bc2-9c41-dec06a967e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9c2168-99ee-45f7-a05a-a1d46e96d796",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff35181-d234-424d-b94e-439580a06f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f44916-5265-42f9-935c-72a47011ec73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc82fad7-be31-4a51-b5e2-4a35df163471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73019b09-71ec-4004-8a02-6df6a72c4fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af55e35-83f8-4a55-8f02-b85485e6d685",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb98432-8dbc-4fe1-b67a-092c199efbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da356e2-e81d-4260-b217-4ec0979089d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ead5a7-5281-4b9d-ad77-465c777e04af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ef213b56-e35e-4137-800b-18b773ce3c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0111889-c7fc-4bbd-b741-ec102f461690",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6e5331-ca69-4d27-af40-fd710a73f84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ecf539-0eea-40e7-8757-89a6984a70b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6106e6-8ea3-4615-be53-eaf393d051ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "96b2b40c-09bf-4747-91ba-d094c75906ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac21661-6396-49b4-b88d-2bf5e1bae47b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e193a16b-6090-48a0-9963-5761b0ac1062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f408ce3-040a-4d99-ac9b-ef7e8c2f74f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beaa13fd-6cb1-4279-8128-258075606e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6da880cc-e176-4436-86c4-74ae9d7a4418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f06ab56-7a74-4d9d-9d42-7417f71e88cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410dd7ea-f4ca-4859-b83e-a3db9163f31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33590e85-72a6-4fba-8563-a962bb9d7e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e436a2-7242-4f8a-9529-ee2831b04a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b755563e-f18a-4437-9f11-7511e5af4d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5426b32d-5a16-43ee-892d-414769013c79",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d56baf-a6cf-44e6-b6d3-000ab5536a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006e83ca-0a8b-42b2-8a35-1a1bcc27d866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067e3a15-1897-42e3-a98d-f5b3df207ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "abab2457-13f3-45c4-a3bf-bfed6af39cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1198f8ad-2eef-4424-ad32-edb6b8fb7946",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de23d8a-0caa-48e3-a228-dc9ca8a809f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a90428-cdde-46f5-a9b8-a913f24cff7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904fcf41-92e9-4127-9d13-d8d4e84c1bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "778f8f41-4b15-4187-ae58-abae8aa4794b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3a67ec-1fc5-4e34-97b8-66462b943118",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46f88d4-b59d-4d29-a5a6-900a374213e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02853c24-d166-447f-80d1-a227ffadef80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5657663d-9349-4b78-9aa9-a3c6e1b5321c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5e1da4-dced-455f-bf83-b65569b2535b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f2f88b-86dd-4130-ba30-4ff5f0965f3c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e705cb4-5106-4388-8f2e-4bd1d25a15cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90841df-4565-443c-8386-553718e3e771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff2ea32-cae0-45f4-bc2e-7d6e83de0172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcde0917-ed8b-42a4-bacc-1091cbb4aaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a652b2a3-dbe1-4428-a093-37fd5db23e3e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba17134-74d0-49c4-8e7f-56ce7e3d5bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7954364-deda-4c06-9e96-fb96bb729936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00fa65e-bdcd-44ce-9eca-bb848fde57b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b59a72cd-49bb-4a50-80bb-f11d96071b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab1a0eb-ed19-45f9-8e11-9a61ad9cd713",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9d9f76-5b2c-4527-84c3-9f62c679051e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a9dca8-a330-4f9f-a65e-e44488e42005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b2dff9-d2d6-4fd3-8a31-55eb810c351f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f60bcb18-bd09-4dc5-a2f6-0789f31f2c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194a1f9a-523f-4104-9330-b200da8a7843",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e1543d-a1fe-495c-9e12-f909364c991d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f7d40a-28ec-40b0-aec6-987dbfd93b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac06ebc9-e026-45cb-be19-881f784c9198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8d9d5c-cc1c-4ebb-ae22-214f5975ef5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008f39c9-b67d-47b0-9be7-aeca363dce15",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc03b85-db84-4aac-98b3-5d2c576b5e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d04b0d-f7c3-446d-8c34-66138faf01a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f837e750-e6b5-4b1a-baac-5ee56068f269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "773bc9f6-6c23-4e4e-9224-2d926c293e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f436d0b-cf98-48a1-bd48-c6b78687b191",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ea99ae-61f2-4a4f-a70d-e1ad043e87fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6efa16-adce-47b2-b2ce-7b642ac22db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da270ec-767e-4c23-bff0-5ee9e58f3676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f58f6c6-b878-40b8-aa60-8fafb178fc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a79a7c1-e393-49e5-b12c-d9d4e193b500",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78145d4d-8606-4d25-a9e4-6e9ecaf37acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc54b0f-0d70-4e24-9ba2-48c8fe9219e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5353af-f3dd-4283-90f2-56225bf2d83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fab135b-1807-43b6-a04d-7915524ba9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98cb8ad-2c8c-4feb-82f8-7aef2f93c7d1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5f85e1-01a2-49f1-be4f-981316135ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1bb0eb-a48e-4021-85b7-9c29f5ed28b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53444faf-a4f5-4ccb-84d6-00a1b5c208c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6849ad9d-54b4-43bc-a337-b386a4f7ad1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc2decc-7f84-4872-9b68-7aa63da8b7a7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6081246-632d-46cb-b991-d0abe7173406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c140f9c1-d5bf-4516-9109-51472d6dbae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d851e5-19cb-4c94-932d-be343f3777be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a24e9c8-da88-4927-8c11-80a9d5176160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a641a00-fdc1-4d8b-a22a-90d07af46f94",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fb016c-dc1d-434b-a14d-57a24d0c4799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ac0626-d46e-4a31-8415-e9f9b5103135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96915ef2-4374-4dfd-ad17-2d53adec4685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52aef516-2bd3-411e-a1f7-e9155212590e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dbbc44-5e9d-4306-9958-87da297da6ea",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378c0d2f-2e76-4e2e-a00e-235c755b36e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b855e6f4-df83-4654-a45d-d5c53676c5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d33777-cde3-467d-a712-b7cee66e22cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2d1dc8-16f3-4d80-8d68-a8bac9cab3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0c58c1-2b5e-4fe8-8454-5261fc121d36",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cc77be-a472-49cd-bca2-e6c5a162b71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb07d2b-5805-4c98-b726-350337329ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1b09a4-e957-41f6-8d17-aa48d0453317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7a9521-f3e6-4d37-8fe3-e8b8f5d51e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f430a1-0904-4f9b-903f-b42a8925c18b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360d6d21-616b-4093-8222-d61a8347928a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce930bf-7ca3-4120-adc8-fc966ab3af55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bb5d5f-5885-4217-b547-3a8dfc974bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1fa6bbc-9579-4d0f-8e53-b223411fa6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b79d352-bef5-4ae4-b128-44e0a382477a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4bb5da5-84d2-42e3-bb6c-f5cd221dc6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c24867-a897-435d-9a79-00c6fd140e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f25de4-97e8-42bd-844d-e7f77007980d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a035dc50-adba-460d-b282-3431f7afc162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f67511-414e-4596-90d6-43415da1aacc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22789536-a4dc-4958-a6e7-965a0c3aabb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60f09714-7714-4873-a242-57df240dbce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e443864d-6360-42f8-9eb4-d6eb878c82ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c27fa4df-dbc0-43ab-8b0b-a9bc2311739d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85f64be-a58d-46e2-8e9e-8e5980474493",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124b6e91-0d24-438f-9e23-db5222dd46d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95cd930f-79a5-40f5-9819-018d653f9450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2960cd2-8dd5-4c44-88d2-1519c5995200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a11e2531-4d79-4640-a808-e9a920e80cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dce9c5f-2f87-4ed2-95eb-758d27b792d6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976d5581-6646-4481-ac1f-604aa0f27ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c228d424-f40b-48f0-9e5f-d471b4c580ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8db838-58ea-4f14-8a19-a5ec872ba40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65ab60b6-8fe9-4f96-b37c-a5cc61955c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7fdf6e-b32f-4fa5-880e-7f94051bc15f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b3f8df-7abf-4115-9ed6-7c1869fc5eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4163087-66fc-4402-a65b-4ca86babf716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb20183-516b-494c-bea0-497848fb8e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f159ea14-0293-4ff8-8a63-47d91f1227f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b8b18e-072d-44f0-8597-f54055240890",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b378a6-04c6-471b-b434-24bb28091515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bde5a46-c531-49de-bdb6-60624b200cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3f5055-1a0f-424a-80b2-ba31df577b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "448aba3f-2d67-4cef-a6f3-5bac1263ef00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f783ad-6d36-4232-b8bf-1075d973b55b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f30f46-a611-44de-b270-6ed507688b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d362123-ccd8-4246-a7ce-78668da8d49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d9baff-03cc-4ec6-9aa4-c9a228485f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c49608-b5f2-458d-9ca0-021798e21e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf0bfaf-cd4c-4a05-a73d-7dc5c145e451",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735d2989-1b1c-4a92-beb8-fb129832c6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2e1075-0a94-42b5-b52b-dc97fdf0a6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2ebf2e-03d3-4293-bc56-d57d7b6ad442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ae39f41-6899-4afe-b663-ff73cbe3bc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4e8459-dc79-4471-bd57-b04e5ff94b6b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707b9757-d3e2-4926-9cd9-d55c8649351d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ba262c-211d-474b-9d67-2ae1a1e51694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3562366-57c3-4e0d-80c5-ea8d305f615d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "921f74bc-15dd-4660-bd3b-9d06ae26738d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4abfcba-a00f-4fc9-b721-2b2f88836e13",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484b0927-2495-4b63-8dc3-ee46aae78818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5bcf35f-1508-4cc6-a2e9-3802ac4a4406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68ee57e-fee2-4e28-af1a-fe28df335061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ffc86de-dcd2-4ae6-80a3-c2faad336e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee257452-1586-4506-81eb-78b169b66dd5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef05177-625c-4bb5-8fbd-c149038a7056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea94f68-fd1b-4bb3-a301-146336a329b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e299c28-2fba-42be-b885-0cde393bca8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8da114d6-677f-4012-a5a3-117154ec68d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2058f1c8-c42e-4fd1-bf73-fc9dad9abe21",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94aa1026-d475-4462-8d49-070e632e0a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bedc59-a255-48ac-845b-e6d108b7e67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631d5d32-04b7-4f87-9e80-57008dcc778f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0de87ad3-dcec-4b6d-803c-5c9434e49b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cb00ac-38f6-4401-a55c-4b7a2ac463e8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113f85d2-3af2-4aef-8c4d-abd990bd5446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769b04da-fe60-43c4-814b-d9ccb3ba6f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b4850c-46df-455c-9e8e-916084c1712b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3ecedf-090d-459c-a1dd-ac2161efcfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cad95a5-a36e-4c0f-b151-6910804a0a73",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c371f8-f1e7-400e-ba46-ae55f169ad77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfeb1fcb-a911-4823-9ce3-6542061305be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7239d94-a383-4dba-a0f1-ba01e2c36478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1744de7-ca19-44b0-8a7e-76fd81b29bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5dcabf-04bf-49a2-adee-7ea7444dbf59",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6ed56a-fa4a-4f15-a52f-e5c4103e218f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b04a26-ac94-4dd6-bc20-1dbfe0675084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a032cf68-546d-456a-bb29-d8d25ef266ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "058c89ff-de8c-4fc8-be52-dd5cd8758404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fafd1d0-f082-4fd4-950e-d4fa5c3f1f79",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ba61df-2173-46f0-917f-2da9a2e8db1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffba0bf9-a2d4-48f6-b823-1d343e73e6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3995b96d-abc9-45a1-b627-2ed6d0213668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "13b4e1a7-1482-4268-a07b-01fc67492785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b699df-1762-41d6-8113-487188516e60",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88791040-c92a-4519-9908-c4d93dacff1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5e1a16a1-11b1-448a-af77-a65afa1c0be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6b9d60-90db-400c-94b6-008ca6de8873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "34258a4e-bc4d-4be1-8d2b-5075732c5057"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1becbfa-b541-44fc-8832-9234fbc5d4de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd16db19-a5c6-4e24-b61d-897f42ed3b1e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df34e2c-9ccc-447e-b6f0-4a84078066ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aab7841c-ac49-47f3-abd9-aa40baa18408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b634a77b-1ccb-45bd-948a-1896323d512c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e4cd299b-891f-4944-9836-8895b8dbf9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f561154e-4204-4270-bc67-ebe1b48a862d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c01af3-74a2-4e5a-9bdb-9c0b5aea2625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56a9be2d-2789-4599-891f-552f6a27e188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9dcefc-7522-4cb6-81d8-e336dda4db5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ea9a11ef-1909-47c0-bc1c-4f20f2cb9e83"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "088f5c7f-40e1-4018-bff3-dfb6eb07c30c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68b653fb-3141-48d9-8b96-e270fcb31b7c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ef3a838-5bbf-4a30-89cb-e9a9f84c89b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43c7a40d-8cda-4bfd-94ee-a1b12771904d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bac2dbcb-5f2d-4e7a-b085-4274e39c09e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6030c49-9fa3-4051-9241-17d4ffd890f5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8056a8f9-b44a-481c-a689-658b477649f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4d99c309-0b80-49ec-8705-d57ba134ab72"
                }
              }
            ]
          },
          {
            "id": "1d89c2e7-79e5-4e95-accc-21344f13c8f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e60880fd-be7a-4584-8969-13d21d02d4d8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10eced75-157c-480c-bec3-3df9c13a2c8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e73fa11-e3f3-47bc-b211-dff391516ec0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78cbbb65-0cfd-4e4d-b567-1a45a53908ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f8fa65f1-5b29-4695-99a1-4738c1304cc3"
                    }
                  }
                ]
              },
              {
                "id": "3a121ae6-f49d-4fe9-804d-5330dd4b5a4f",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d89bb670-5b5d-4f46-b4f5-90311b9df780",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1baacde-6b92-4355-a897-9489d1deb15e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f2421bf-c54c-4be9-ad0c-3c6e0a345ba0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2aabbfca-0b0a-4d90-b8c5-e9c4855956b3"
                    }
                  }
                ]
              },
              {
                "id": "134e258c-fdaa-41de-b657-58205672b1c5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fd0ff00-f0df-4109-a393-1bbd061666de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17a6ce28-5ce1-49bb-a632-a030dec42579"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a8fe20c-cfab-4ef6-b57d-ebf9df5e233e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "41ef018b-6020-481c-8d79-ec3d21a3c93f"
                    }
                  }
                ]
              },
              {
                "id": "604c3eb9-b615-4cee-a811-8f542a71e6a2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c6390e7-c26b-4461-bbdc-960aceb608e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28d827ac-a812-4791-b262-e6eacc73afc5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d35a562c-c0e4-435b-bc66-705b42ef6b06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "42688e44-e432-4840-9398-67609c761a47"
                    }
                  }
                ]
              },
              {
                "id": "02f2a430-eb2d-4c79-a87b-534d286b6708",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f645790d-6072-4e6f-ba47-9ad609775919",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12888a18-7acb-46b0-abc7-c2a8b991d345"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ad51511-6571-40c1-90c7-61b5b2204882",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "11c39a1d-d701-4157-ac1c-fd47ddd3de9b"
                    }
                  }
                ]
              },
              {
                "id": "5454fbc9-72ea-493e-ab65-074343824e8f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae00142e-9fcd-4e65-aee4-5e8153d44d2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7259730f-1c1b-4528-803d-e5fda343592d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b50d3e9-5f6a-40f9-90aa-d35fee3f5a1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "20b77ce9-a09b-446c-85e4-ff0fdbcbf678"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55f13fb9-d255-4ca4-ab52-0f2e6afbe82b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57d9991d-bb62-422c-aee0-04c4557c2e08"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e11b9971-8703-4268-aacd-da8e28ad4c09",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2babba53-103e-4af8-ae59-74a99f05df5b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f8245fc-31e3-4efc-bc6b-c295cd8cb209",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0bb24533-e2b4-4ebd-a8bb-ca11ee6333cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "879732ac-9b80-4b78-ada4-50861ae618a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f15dfbaf-499b-473e-99d5-abe2951431de"
            }
          }
        ]
      },
      {
        "id": "ce3b9c9a-dfe6-469d-992c-e961dd915a73",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "76c54fe1-a6d8-4cf6-ba6e-45cae3d219ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6518254-ba11-48be-a506-c3dd9cf037aa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cff84297-8c63-4568-9dde-e1325baec3d2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f01ac5-4264-4f8d-a899-19cb78711c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de05f8e-51f2-4b9d-9707-95ce69090265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e876579c-ee3d-4527-a95f-fe5c3db5848d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fece152e-e7ed-443d-b95d-62c77f314996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3982b28-615f-4958-b0b1-06c99d031f63",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf4f62e-e744-4f87-bfe0-f2fb244be661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f23b227-cfc8-4738-92c4-52ab784478ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de5bad3-37fa-4e58-9760-b6bdabcd731f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37dd7cac-3e4f-4976-a565-e5cd3596beec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec99734-564c-4ac4-9421-c60a55ff0c94",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80390d70-627e-4b7c-bc13-26cf5b9738d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75eb9f73-3162-40c7-91b5-a3c427692c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b6fa34-d4d2-4476-8f3a-08d8c28a129c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae65578f-68a5-4eb0-92ff-b9c3177c9a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77039694-6a26-4574-a8ff-c139f6ba740c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d7a962-84f0-4db7-a380-ce0eda613d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbba39b8-103a-4d11-a9cc-6ec5d21662ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc56b24-f427-4e5a-a3df-5c6519657688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73e1baf5-1bab-40da-9a95-afb822aeafc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07556094-7329-48a0-9974-a5675973a755",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33ac1fb-b087-49b9-b7f9-c97709863d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9730da95-4afa-4441-a751-9d9e439150bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f715098a-3b88-4d43-814c-6c458fe11c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78247f4b-c171-4cab-9e69-5d4e8e48324e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5b39b2-7274-4bef-bbce-7e3a98d773c0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051c7e79-5d6b-4aee-b49b-27704367eb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf2a734-85eb-4ff7-a5fb-c0af8ade77bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5d5a2b-9fd5-487f-b750-396de901b173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92325b05-562e-4d9b-95e9-1f2711c4865f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feae0dcf-dd83-4f24-a386-0180c31a51df",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb76c8f-ec4b-4e93-9f1e-d935c578241f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3331ce0-73f0-42ed-86b1-510d69db2cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c230a69d-c888-4f1c-93d9-e5d398691645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f25b404-043e-447d-a8eb-5c629f7672d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d385011c-6436-4cdd-ad3a-af84515cc7f0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e3e1d0-a30d-4f54-a077-6d7c5c5e1982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dcbcb1e-681f-4594-9976-d52ac851171d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bdd389-5791-43f8-a535-60aa7a0e627d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c38bad8a-2b42-4352-8f25-e8c286bfe80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04313e4-0636-48d1-a38f-1c0409eee86f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a21d3d6-f81c-4301-8a4a-0e19c0a79a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119d4975-5d69-404f-8589-690cac59fe4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35977370-63f2-4434-a34f-f9bd3e3fc86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbe365f-17b8-4fb0-b046-4f0f609ec7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f333a7-4e2c-4396-9b31-09d0a24a079f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5300578f-52c8-472d-bb61-a659008a0c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac2bf00-09aa-47a1-881f-74282f60ff34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26afc081-063d-4d74-bd3a-32c97766e6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b34e4d-f98a-4266-9df5-538cf787bc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76d439b-bbb8-48ba-b2d5-dd520fee7dbe",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1a5e07-bcc9-44a5-9555-1193f45ee024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f112bf1-71f4-4a13-afba-aa85bb0f0a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e850cf-8b6e-4af9-be92-2048d474540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "344dc939-2cba-4c79-91a6-549e3ff87483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414cb161-4968-46b5-bf99-68e6d2355b15",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15e714c-4f76-4dcd-9288-e746aa112e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36895b4c-924e-400e-9b31-fe70933d3c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58afb592-6084-452a-a297-1a12ac9c4b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1594c8c6-89bc-48b2-9071-3e6c47d9c7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0872f963-2be7-49b1-a3bf-ca5b38c37cb0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09debb7-4fb7-4558-b32a-5e4e1e016a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a28efc33-67ab-4730-a81e-80cf4a1896d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41cbeb12-90a1-446f-8d8a-525420cc645f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2a2e42-44e4-4253-b4cb-1cf0bd322039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e411f651-1232-4b89-8723-666ab8b0593f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516993c0-c64a-4ee3-ae08-f3109751e5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfc6477-eeda-4683-b349-2259c2748839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d7449b-ed6c-4170-874f-2a15d597374e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "331bd1a6-e8dc-4288-a5cd-72a40721eabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31fe7d8-5d79-443c-841d-9970fa5cd725",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac2f64b-273c-487b-84eb-6a56f53816f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4420d23-e4cb-4fe2-a604-cf69fa7f71a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192b225c-b3e8-4cb8-8347-1f22b4e5b101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1e536d-b8a2-48d5-a877-6435354bddd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a006506f-25a2-4521-8c92-29771ea774a1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9286cde2-c959-458c-95d0-6a299049e0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5a2702-68e7-4093-87b1-8b269bec63d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08507ee0-fb79-4c9b-ba15-9e8843ba16b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b463c6e2-1337-4696-8563-1cd7d886b290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c69e5b9-61fc-4aac-8327-b516027895c1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4477af7-1ae1-424c-9910-9180ae896c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df92feff-8ef6-4e33-9a30-635f434c3194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8b7a20-652e-4a3e-b221-b3c7e302e82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "49650a99-1c9a-463f-95b2-75481bbf09b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad44e29-95af-4c05-871f-5d78adfb2ef1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8575e84-18f3-4132-ac24-9c124012ebd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d85fb27-a57d-48d2-a84c-cd7dcefce37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514970dc-eb2d-411d-9416-b8346f3789ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a23e015-7d4a-4d50-b851-7bafebdd8ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c491c79e-c7e9-4a68-8381-11e564bf3d5f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c57b26-c80c-45ec-a5a1-813b0a9bbe4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c244df-99a5-418e-b5be-e615436c906a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9434335b-1271-403f-9f33-6c19cecd5150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36d62e1b-169a-4da3-b232-e26050e33f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284a8a79-8062-4524-b03d-42fd31dfe2bc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02edee86-2709-40e9-ba65-32ff8c01a853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a67451-5cea-4f4c-a065-1ec930dcfa49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd5e40c-7eac-47f1-9a0a-31ab5df895d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9d1776-4228-43d1-a072-f26fecf3408b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8914ac34-e027-480e-9911-88a8e6bd4809",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea774bd-0145-43c9-b781-ad430f6f1d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2879e684-1e01-42e5-b732-eb2e9b668e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d3f394-a5af-4ebd-b2ab-ad59fbc1da80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63d4f139-7bdd-4db1-9efb-d891e28f2e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacc2034-e8d4-4fa1-aead-4b1fdf816011",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824e9eb0-7bd0-432b-add9-773a136fe1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b23fb9-a04e-4291-8385-a0308276690d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3885259-c565-43df-87e2-c18476131b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8ceac4-84c0-4842-a44d-e52e4da8c36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e583432-e6b4-418b-898b-1d2e158d6de5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342a2fba-9cb9-428f-9864-075c0f394403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b344ff1c-fa33-4992-9c59-d9ae76c066b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37de6929-f2b8-47bb-b2ac-dee5e708fd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b54efe44-4ef6-484c-bbe1-50c42d81a3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014ac8f8-4d78-45f1-8b3c-391b35f89e29",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba11d3e-429d-43c2-bb43-d9d333cf4b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cdc8ccf-2eb6-477b-87dc-d3dbf0b98cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dfaf94-3593-4ca2-a9f5-2d339450eca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29c69fef-f0e7-4ef2-a54c-ff35a253c329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ea91ed-477e-420c-bd4f-f0feee33955b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519ef3f1-d03c-45d4-94b8-33f845b3354a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3b8b58-a494-4491-91e0-5c82843a31f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2901d505-271c-417b-9db9-fc54302897ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bab30fc-4b1f-49bc-9d07-23e153c9d2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f49ca0-4b9a-4469-b4c4-3ec04cf2f64b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4366fb6d-7ccb-46dd-b4d8-9975e0680b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb06af8-d50b-41a0-821c-101f6da90f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13579686-6b73-4923-95ce-573f94e5f8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5fbd98-0741-4b0c-b41f-59a124300cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7685dff7-071d-4114-88bb-ea7bb1dd71ec",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80de7c16-e3e2-4796-b7ad-f128d5279110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a080677-792a-4871-b856-d93361d0cdf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9228775b-28f2-4d9d-b884-a79365c21c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1000c6-d6e1-4fe2-be77-c0c009dde2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009cc346-ab7a-46cc-b4bd-32de3ebab6a6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb03fcd-b43d-481b-9fa1-8d1d1e0d46ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502376dc-7c73-479a-b175-1c6af064ace0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a128aa4e-723b-4f25-8757-b3dc8840c563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69452bb9-db0d-43b3-a948-693f7c0f19d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2964042-542a-432f-b945-b6f1fa27ea48",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fca774-5fde-441b-8b85-fae66fa5d4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4f4b7d-e8fb-4a15-aa6f-f6224a8a469c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e118756-bfea-4989-8620-11f15af88605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "487a3f56-a4ad-4b83-9776-d6dbce365b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b5376c-f3eb-446b-acf9-9b66db56e28a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87499b35-1fe2-445e-90cb-63191be0a314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579d4b1a-1394-4b3f-86db-0601bdae6703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee1ae20-cc11-4338-b7ab-5a7acd3d7a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88bedb1f-1022-4d34-a287-b663237cf753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951fefe7-e493-4fbe-a785-5f0a2b2901e4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ce5c13-7323-4ec8-886f-ad675f458537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2343dbb-8ba9-4b1c-b3b8-ee6e0d95720f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6bc496-0c38-4504-84e0-cb2bc8122216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5be82c5-7561-45e0-b90e-dfdeed6d97d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3951fffb-2b30-4db7-a989-9bd910de46d1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fd1c74-671f-417d-be74-7089c7bc6918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66c21c1-50da-4a93-889c-d9de5388553a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c110775-bb8f-40eb-b6bb-72aad36495f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9b6d281-6a6e-4e3a-af53-e187dc2463e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bda058b0-3c15-4420-9564-95a4c7e0d4f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb85be74-8ae1-44e4-986d-21d6a89a5b9d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef494e7d-dcc2-4507-8a71-f368f45a1dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccc0701-3438-46e3-9766-8f2a8414b824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c843e515-9679-4cf2-aace-6132a5b189a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85481775-07bf-443e-851c-3d57dc616e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bc5bc5-0d5c-4e55-a8d0-91126117e965",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb191e3-dbd5-4c8e-92ed-70989001e26b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3fb25b97-9e7c-4001-9ad3-f7715657256f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8359241-dc3d-49b3-b706-a561762e3a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b74d8682-aa05-494e-be87-9401b4cf4043"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99bd0a74-e051-4d48-99bc-9449390267d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa28ca26-8ba4-4d1f-8d93-5275201409d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e41f9f2-0fd3-45a4-977f-b5c0979d779e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "866061df-73c7-452e-9955-6fa6dbb6cbac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e51a853d-69c3-4811-bf53-96262c23a403",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5cebd53f-1f14-4f31-8b76-f252760e3b4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43c0ac90-9ff9-4f00-b536-e5388f0e5217",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e920e7a-b2a6-49a7-82ab-28f8efd8a5f4"
            }
          }
        ]
      },
      {
        "id": "f5c4dd84-4a3b-41ab-b2c8-4f9bce1b9aa0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "97d187a5-3898-4bea-a9d1-545d748c1daa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d95ca73-9322-4436-8355-11b4f1ea1bad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "39e51b14-9300-402a-ad00-da1d2f3ebabb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e800fc59-e98b-4243-9301-8412038a9bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a382632-a0c1-4c2c-a08e-40e5a7bd5c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a148e98-4c18-41ca-a21e-7bd77c196248",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8445445f-ca0b-493f-8d86-90be27e0552b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1958f0bf-9c89-49e1-a242-ed4ba5465850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5c9c16-983a-4483-9ddf-4d96a3be1d32",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d05337-ff7b-4fc6-bf08-028b5a689c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75be7e94-11b6-4204-8dff-a45fa3123b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e115968c-67d7-4b3b-b24c-11caeec09631",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad35ff32-c2c1-4a9e-88dd-f32613299e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c5c03e-0ade-42dd-93fe-5c2e05b0afae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25faa35-b954-4d7d-a5f2-1058ce678d7f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdd2ad3-27c4-463a-ba14-aa7b2fb8c50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1ef288-d042-44e5-97e6-5a075c5069f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badb59bc-0033-4550-a017-f710630220b0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a9d002-5bdc-4d81-aa80-9ee901edde8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4059dad-3527-4702-b3bc-c98938366960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e3afd1-0dae-4543-b805-132aa0702fe4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9266b0-948c-42b7-9a58-eda7860fe251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8dec99-cb00-4564-8afc-d1f67071c66d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f8f8d8-42da-47c9-bf4c-2ee7c2bb6fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95200cfd-6b02-494b-a2fb-95b1382ca60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c83935-de54-4c19-abc4-ca6e69f81d6f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d42981-d739-44fb-ae88-2d9d0be5fa36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e002a831-3faa-4720-8a92-f19ad4dfe913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bd59c5-f441-4311-8896-50b43c555180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0805249a-a8bb-45f6-9e96-c4c0d5ce62ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38415c8-8d1e-4d65-a079-e5944045a90a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3c02b7-e9ef-4653-844c-b30a6afef8b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81023765-19fe-49c8-b768-7c9b56b7636c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "790d91e5-4cc4-4b31-afd4-823ee2d96aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135d156c-1581-4c84-8dc1-c99483fbc082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18059c3f-7a8c-47f3-a818-754103c09142",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752082cc-dfce-427e-93c4-5fbbf789be7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa01498f-4190-4ff7-a5a1-b1511019782b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda3a62d-3e06-4f4c-8fc7-94997bf22ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c459bc-45c3-4681-b927-66af7cd499b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed64a926-614d-4bc9-b7ac-d2e92ec37bdb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3485b7d0-b995-46c7-9acf-cbfa20b1a1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eead7771-fbf8-4582-b4a8-6c5717d0ccf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "805ef627-f6b8-40b5-a0bb-c472ebce1aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f269bb90-2df2-48dd-875f-18a1e492f2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e157f63-3e7f-44bd-9335-abee11071807",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9825a6a3-0599-4caa-b3cd-4cbd26fb8dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4bb31c-1e56-4363-bf57-eaecf552303d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb92f0e0-01ac-4786-baf2-cccb5e40e89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c38dbc-94d9-4482-900e-edf4e502df1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c29b6c-3438-4f0c-b22f-25c5ea7ccac6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d11eba1-d060-4aef-88d7-585b20b9fa95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d781bbf6-1167-4786-a5e9-d970c4cbea81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e121c2a-12d2-4ac8-a1ab-3e29ff808069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d536262-7908-4b83-8e26-8ee5d90ffd53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5098438-e1d9-426f-8d42-106df0e31e96",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f9bd10-1d3c-48af-8113-15e5d6cb8c56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73f173a5-c46f-4603-b4b7-54c9bbbe193b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "629a7c05-2401-4c80-9a4c-7785a7977690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e873a830-26dd-429b-a31a-d13bfe096caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abba6fd-34ee-4061-889a-5a1655025cd6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e3c8fe-dcbe-47b6-b4ba-63edf32f490f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df5bbc7c-2d58-4d93-9b89-32266622557a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced42526-7115-43e1-b5b7-867a47752bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79874ad-f20c-48bb-aaa2-c6008c278622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd03c1f-cc0d-4fb1-b82e-f16db1a7c4b9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d969c5-fdf9-456e-b0e6-17bb98810951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60c9ff83-a25c-4808-8f67-a99c4d24d4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e72c96c-4f31-44bb-bb83-28d2d571a729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfacd25d-9412-43a9-b1b7-4d5ac3ff60c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16403c94-eeb0-4c14-8d1f-5391d423de3c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7486a812-01bc-40d8-8812-c6b88fa41b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784d753b-b4e0-48a3-8680-bdedb89716c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac911ea-7660-4a84-bade-244f33f21d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510b7b4d-b393-4b56-8e5d-5fefb70ca172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e1d09c-3a3a-4aed-af98-1975104fb6b1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f749361-8046-45e8-806e-eb789753d566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40882d23-f9ac-4cc0-9ef3-4fefba0fa8d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574d6a72-9aa8-4805-aab2-99364d115f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4418da1e-f71f-4d3b-9504-3f12c1be88a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fd0bd7-d814-4aa6-9415-e603e299c869",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca72778-b3ad-4cb8-9ec7-69254f2235e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec50cc4-13ae-46b2-9374-63dfb4c5c89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ca6b37-b6ca-47d7-81c2-727f5a5c2a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac87f0ad-5629-426d-8a74-32af8f71bfe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb4b8bc-f497-46b3-8166-68f5e654f736",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cbc501-97ad-4838-8547-b4c17d7aef05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b823b7-c123-4b52-a529-628629ef38bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faff565c-db80-43dc-b338-be5802c325e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a558ff-8be3-4599-b458-8b397f2c9608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abb4c87-aaa6-4eda-a30e-e2f1c155e73e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3c676b-9a8b-4af5-abf5-3b355229933f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c31ebd-ade6-4dc2-9b8b-9718f0a01b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52106440-aa82-4aa5-8980-cdb37c6abaf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ebe644-4178-47ec-9e3b-9bfe7a7a40db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216ee2bc-7082-4d66-99bb-0c61d16c3bd3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1907a4-e2a4-4b59-a7b2-c9256f1bc54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcbbea9c-777b-4384-8073-12a84aa72c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae7033e-1b10-41ad-833d-1d6af6263714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34dd274b-8653-4acb-8584-4e162ca93081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07da083-63ad-4506-96d6-39295fc14097",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be71e5b-2e12-481c-8f0c-db4f4d84f98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d38e12-b806-4844-b8d7-50cd50141bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3035db5a-6d8d-4b0f-9c3f-b492a1a3b106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff61b55-2a35-421a-b48f-6b8f5212b0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8be58c9-0976-4a8a-acb7-39c025533c79",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1150b4e-18c1-4ad0-bbfa-e147949361ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f7dcbf6-1c6f-42ec-ae04-87a348f86117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dae581-bb76-4573-83db-ac827b7c95ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ec6c86-e661-4aec-bfa8-c033fba96207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4ef1a9-d868-4673-944b-c80f35a81d2d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4892ed-73a6-4ffd-9a34-64ac638f1893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "620a04d5-1529-4dd1-a86c-2ce746c5e606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a2447a-9e7d-4a6d-936c-adad99627ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddfc0bc6-20d5-4049-bc61-14d1ee42b3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f9908d-56ad-4ee8-9d97-04f9a88dc946",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc29d62-c311-4556-9552-2dbb793f7f4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3428895-5b5d-4a64-b24a-c0389cb38f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d06075b-b67d-48cf-965b-fbb4fd5a272f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1e5ddf-401f-4632-80e1-b080654151c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab83465-ec9b-447d-94b5-a22b72c196e9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f708436d-2909-452a-bef1-c93951de611b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a9cafb0-e804-4d2f-8d94-65c1b41d0db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0db5a6-bd31-4d53-b665-f9ee95efd6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bce6a8d-de0d-4f5e-9936-de2ac0f74d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd310da-eb0c-43bf-9349-90913ec8c901",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99afef68-c3de-42b0-ac94-5a7c9dec9e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a6418d-239c-4dec-9345-dc3e0bcd665d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45938001-3b64-4d18-b59e-ed3e99bdf293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec5c251-5327-47c9-b32e-0165c61d5b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4b8657-4c49-4340-97d2-73555ce8ef4a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35b64a4-f97a-4983-b9c1-44ae12b5ace5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3922fef-f577-417b-9af9-04498412a80d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2ba1cc-afb9-4d65-b2e8-f4246d784aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d1fce22-6e70-4884-90e0-80f004234210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72f1ead-895c-46ab-b90f-3d88e9ff53a4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0724da87-e89f-42f0-98fc-090e9f9dd05f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4ca3b1a-237b-4e1b-89de-0a82d7ba4937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509c7996-99bc-4509-9ccb-7deb2f2b0050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e3597a-ec3b-4046-a8e2-952b0324142f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2980a5e4-cb09-47a5-881a-c6ce8baa244a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9ff3fc-aed2-4e8c-b64b-9cf8031ab02e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7e0e396-32e5-41bf-b62e-29b412759aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202a39d4-5b5f-46bc-82ea-4c56b602d2a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcca1808-24ac-41fd-b6f4-ba40cfb4a3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c4e44a-6526-48cb-beb3-cb09eb951edb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721de023-499f-4cd1-a840-8a2a6d26a9d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df3baf21-113c-450f-bf58-01a96412f018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88116ca8-d0a0-454b-b50d-06539cd5b0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22f2476-78fd-4854-b275-535662405ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16c6dec-ca09-41b8-8fd7-06ec8f29354e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fab6491-e20c-47b6-b9a4-7e8119782fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "053c3510-5ead-40e1-b775-afae99466526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "090f3907-3b5f-4474-9615-1dccfb88ecf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a5ba83-0082-4492-a83d-457f6a64ecf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551f2caa-5b7e-4486-a134-f6d31e751aac",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81076bac-dc94-460a-b436-dc6943c8fb5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56a12a7f-9b5e-4089-9b96-b9775c51a082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a63232f-c16f-4f02-9ac9-4bb558f9d66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc539e9f-ca1b-4d96-83a4-dbcbc25abf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63cce267-bcaa-4679-91ac-674a969da5ae",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71cfd25-9105-4627-a3eb-0445d3a70f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94038dcb-2591-43fb-a90f-037241a15a89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f857dc-abba-4077-8223-209b8183271f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "516cecf1-2caa-4367-af84-ef55884610d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06435d1d-fcb9-4523-b0d5-75a309befc0f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f4d70d-4377-47d4-a70e-14a8646d4f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e770894-eb92-4d45-bd0b-f530982ecbb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2beb594b-9bd4-4c68-a6c9-232e66e43dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674ac594-fd36-44a6-8a82-12627aa0fa1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915d8dbe-981c-46a5-aad6-b30b4b93c02a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589cf5a7-c24e-493b-974e-27d8013ec7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e57c810-8c1a-4d52-8643-bf20dfdb78f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82894a71-4876-4dab-9efd-8c0e3eb993c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735c81e2-b170-4fad-af54-f491a441a989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b4d6a4-a38f-4b43-945e-9af034bdc0d9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6535073-e933-4e9d-be27-240ff98f3cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70a2823-1466-41ed-ae84-2e3b1d2e53da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7d7bff-d836-433d-8177-11aa2697212e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ede721b-6512-46cf-a932-71162a9ea428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6faa54d6-8d8c-4d57-aafd-f022b75ef3e7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d65901b-bee8-4b73-aac4-6acf77fd6387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462351c9-4868-4933-bcad-6e61534fa729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068ef299-cb57-4a9f-931e-7f9c90eb97c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04534326-27c4-4775-9d05-7f7ce137cfdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f93d16-952b-47e0-a24b-6abfe9003d4b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b81f2f-3c54-4407-b7cc-12939278cec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827e3064-44a7-4c26-acb4-397e6d9e01f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5cab95-d26c-4957-bb2c-da81a92d3314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34bcc48-6be0-44d4-a27a-52de89e27965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9afc54-409b-4591-944d-8bfc9a8323ec",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45af16f7-09c1-4eaf-b12e-d793af559a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d38edc-e939-4b38-af3b-5af4d2f82323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec52c3bc-b1dd-440a-9911-9bed70acb6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013e538f-ffa9-4823-8389-d68dcc9d4374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba76372-b3bb-4e0f-8243-7fbe52e20919",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6500aa-59eb-47d9-aad0-ca4f01296278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d300374-d1f2-4860-ad64-c104f9d46ce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10e2b6f-10cc-4ece-aa79-a71b6b411b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d385b03-ca9c-4a7c-81cd-8bcb811a9711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45ed6d1-21b6-4eb7-a541-30913bf43207",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12eeff89-5d5b-4bed-ac84-926e0291955b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5dc3851-d597-498e-ae9f-c04f1349a8c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266c6170-bfdb-41e4-a218-738e1263684a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da78830b-a008-4935-b1b2-fe4a1ff73752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27fcc4d-4fc4-476c-ab6c-8c05404b41b7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affd6e20-f39f-4882-8dbf-942adfe0c732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd15a23-91bb-4c38-ac73-a3d5d7fda517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d3bb3b-6c77-482f-a67b-e8ee90ea1f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776346af-4d66-489d-b07a-0bb3aa075681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52541f6-b11f-4768-88ea-dc52b09a4fed",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9299abc-abd6-44a9-b56b-afeaf8c81e6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85160f79-63b5-4b45-9f45-83693df0a297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ecc2a2-d70a-4bfd-9ac3-1e2f62b3dfb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f8967a-db2b-4b31-af9a-d02bcfd1a72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e962395-9c1c-46eb-be55-caf27e20166c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b692cc9-194c-48ee-835c-7e98bef8a373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a28b101-d277-4233-bb4b-e162851c9de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a636c023-8d27-4a62-b20e-b4bbea12b35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bc73af-64e8-4893-b64e-60c9f29b02d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfb6766-4857-441e-a20e-91d359dd6284",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe05bf0-f185-4ab7-9fd0-3d6381764df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4bb01e-3f1f-4f9f-af93-2bc1a606e261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ad5519-a4be-47d4-93bb-4efc84ff5bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7ff04f-7277-4632-9360-fb1b1efed362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a993882-e6db-4f85-9c7b-98c83a3e5629",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b48b64-b878-40a2-8e90-9e839f16ed5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59352aaa-bc9e-4d4b-a395-a2f0a2e5bb39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf67beeb-3afc-4bb6-833c-15af4e2de083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9916204-f8a6-49c4-8f33-ee922d54d406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8339c7-856b-4104-aa4c-e6e566c45c3d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98031b4b-b5e8-4128-a6d5-f7d787bbc427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69e2182-d913-4a4a-a521-be5417f054ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13317484-9894-4cc3-bd34-cce5a0874d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c51b79-5e1d-45ea-ab4a-99597bbdb07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ed08f1-2e4d-4fc9-a44f-69193c2ca25e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe957cb-2ca0-48ab-adee-aca2711bb277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b096dd-e611-476f-90fd-da619eb192dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11ce91a-ad5b-4cac-ba7e-af611698ef25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cdaf5b6-b3d7-4cff-b38a-de39e1e81f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee06c8d-463d-40bd-9e5c-7cccc9fc741f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cc03aa-a664-4451-a701-7659699b8f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b883c3-7567-4e3d-881d-4cf0d00abeb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e29b93-64af-480a-8ce8-242c37f44a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63dc4f1f-8e01-443b-82fa-6e1288cad763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16689747-6943-44ec-aedc-fdd674c5f72c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7e0ec9-de06-4579-b9ef-2d7459b0a61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2313bdfe-35a2-410b-8068-3ec8f9d01da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf075d2-e7c4-4c21-9dbf-6af06e5e30bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a07a77-b470-467a-8c2a-4b5a0c4c601e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadb143c-e040-49c9-bb9a-de72655e06d4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2223867d-108a-40da-b650-522315c172c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ee5dad-5e99-492d-a1b9-c8f47c50d57e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ec5513-92cd-454e-b5b9-27e51ac1d17a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d76b166-f055-4b42-b490-eb38c508697f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ff12e3-941f-4b42-9d88-7c10e782c150",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49890d6c-24bd-4472-b6cc-0e2824079dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54f2dad-7950-406d-90cf-e8a6a235129e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bccb526-55e9-4086-b809-c03fc720cbc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20a8594-c43a-42df-af10-65be4a3d7ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae7549f-1164-44cf-8994-0bb48c2276bf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a0b2be-b921-4948-af44-485c8d12534d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6d7747-05ec-4d06-9c7e-d034277d1298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773641ba-e05c-49ba-be35-c225e5e8979d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275f2f8f-b571-472a-8832-45546ce54f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abab84d0-e14f-4228-b51b-27e6e33032ac",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6108d9e8-f7d9-4fb5-a883-857667f32c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5fc914-4d0d-4759-afce-9bdd44d73048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a94f85-adb1-4fde-bb03-2a41a62a08b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482f846d-68d8-4a0c-b99e-20c522874676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee1208d-3c22-4335-8b93-8ba78ba32e3d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b307cd0-6fae-43f0-be71-65517fe52646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2379a726-9aae-4dd8-8b1f-d8f08d6c8e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2806885-e557-472e-8989-bf34a4f17937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "585d6dea-1afa-4459-b2c4-7c596ed78fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cb89da-2429-42c2-855f-409afffb71cc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6957b4a9-85d2-4776-ba09-1e53447988b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51035b8b-3871-47db-88e3-533fc31f468d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4faca9f-59e1-49a8-a111-fd01183010b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f432378-791b-4d08-833a-a515663f0dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef42fe3-58ec-45e9-9cde-4581be095249",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27a5c4d-7f44-4b20-8a4e-320890e65267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548af8f7-74ba-42bd-8dc5-fb7fc5641995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c816a3-ab4a-45aa-8b8a-194f7257ad86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6fba95e-f5a4-482c-9352-0ea8543886e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c425624e-ba42-4bdc-95d4-505dc70bab47",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8ce040-2b2c-4e43-bf19-c5f1f4df0df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b087a51-7617-45a8-8b8a-b80abf08e4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c018b5dc-3abc-4aa0-81f1-6a9627fd485d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db21492d-37ad-42a8-9553-c300ad65f6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2b105d-f638-4e5b-9c47-5a68fa242daf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7925bc-1327-4db7-8056-c9ce50faca7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17765d1a-e617-465e-86cd-6b331082a8a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55f2683-9da6-4569-83d0-cd562f535f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aea45c8-36bf-4265-b0f8-711a65c8843b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673bd227-c9f7-485a-aac5-b9a9ec50d71f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2618fa-61f8-4cfa-93de-e76315b82994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc3f76c3-1346-4351-a643-d416ee24ee5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da29ef9-d207-4f05-98c9-f4c767780d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945244a4-08c7-469d-b3d6-7d9863be18af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1590dad7-e995-413c-a770-7d74e29db463",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275f844a-8b4c-40ee-8c68-417d1c496005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f6f58a-28d4-4249-80d3-bfeacbfb8167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7e9017-99df-4591-bcbb-cd0e4120c94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e949d9-4486-42eb-a87d-3d6788f45494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa05d7b3-0969-4a04-a1b0-76948286b035",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b12cff-af53-4c84-a52a-42f2ec6c145d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a15c2a1b-94c4-4f0b-858c-3f63306ec3ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c861dd-6584-4754-a75b-4bf50f4128c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d51cc9-aeb0-44fc-a2f3-3513371f6995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6b3710-d19a-4d3d-ade1-ab2c56e9d36c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb94b755-9147-4aef-8b48-58f80bc2a1cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c23790-32d1-48ff-96d6-94d1e68ec3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b303e20-4b1a-4215-98ea-13d9688cb2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb559fa-7f29-4d81-8a23-829ccb09de4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256425ef-2d4f-4523-90cf-713a12e64755",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d183ee18-2360-4485-b0c3-447fe1993702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffbc0371-68eb-4ad7-b3e9-de2a612b6083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c092eb62-4467-4400-a66b-d122a7d8c36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7df15c9-b9db-45a0-86ee-c84c14910ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84e3f9b-b643-47c9-8456-a937957bf6a1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e7055b-53cc-48df-b079-37ee98a2206f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d99191b6-a8b0-4af7-afa1-833dbaef09ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d85714-362e-4072-bf83-539991da1e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bc18dd-49be-40f7-9a8c-2385321f3065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43eb86d0-f9db-4ce6-91b7-482fd432099f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37d905d-38ed-4849-bfd7-77689ba975f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e31cd0a-1bc0-4eb0-8976-60150a8a5287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676abb6a-c9b3-4303-9ae4-e878cc7e466c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41b08dd-9005-4a56-9115-6ae770a58bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39188b20-90d2-48db-844d-9e60b4fed3d2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74311862-b851-447f-a65d-2c83454eff12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d238d7b8-47a0-47db-aeb5-798c3a6203ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d203c54f-9127-475d-aa31-f2a7f4a6809d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa9a34b-af26-4448-98bf-2358481fcaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23aaab7-49f4-4154-91f8-c18302033de5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036d13dc-07b6-4324-bf1a-d6fdb9a13269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "784fe300-5206-4f9c-81be-219dc7178324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea588fe-fe05-4a73-86ed-48c8aad4bf2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6949f332-1394-401b-8c6e-7f5b11d6d812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1eb7520-ff3a-42ab-89d5-05af2ead6089",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0c20f9-1df0-4082-8bfe-f18e8a0b47e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "765a1d5e-9386-4ddf-a2dc-5d7ad7fd984d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "124ca56c-8ca1-494a-bfdf-937cae936b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64dc9322-b6af-4ce5-81fd-62215ca7643c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5353a243-aa7b-4a42-8548-a8571e8016e4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96321506-d9fc-475f-837b-24e85fb90dc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5601f293-b1a5-4f83-8019-0cb39f339d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8b145c-cdad-4d1b-b681-78d385ed0618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cd22a9-e76f-47d0-bd51-6e5a4763b089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7930eda5-ac88-4090-b3a4-073f82905b79",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9f6e76-7683-4121-9b19-35801ede8b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd05380d-42c4-4e6f-9658-c11b50925485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8953f6ab-5829-4fef-a5e2-c09a303004ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0341cc02-b9ca-46c9-8512-85c73a665301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce2413e-05e9-400e-b42f-881d96cd3a0f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ca12b3-1e2e-4517-9003-61b6316db292",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a36105fb-4abf-410c-86d8-e2300a2b46ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f331267-21d7-4d60-96a7-8ffb80e92e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe197b3-0b4e-4fe0-9348-9db7382742ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6715af-e4c1-48cc-8a4f-ea7daa830c46",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6012e5-3ddc-4eb5-8c8a-ae7bc7f8c53a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "355188cd-375b-469e-93e4-c3d7fef6e686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57921e44-03a3-4c13-a803-8b1515669ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b26c5e5a-7e47-4c9d-972f-f43261fc6b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86b481a-422a-4d0a-9d48-230f55cc887d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f13061-fd13-4059-972c-c9301b54c048",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49901938-4322-4920-a94c-3eac7bacda97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07509814-7ebb-4a7e-98b6-a310080a4f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c6e651-ac71-41ba-9c32-d5f0b7096644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c387be06-a3e6-49ca-af0f-3831daee5f93",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3af77b-d3d1-47e7-b8d7-1d3008a364ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e23a809e-5690-41f0-b09d-733fdaf3ce03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9febee0-89ec-4693-97cd-41b93685e1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf685ce-4452-48ad-8a8f-f81ee3aba310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9deacc7f-937e-4ce7-8866-e8579e6994e1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69b0630-8392-455d-8d85-052311c1357a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7b6c753-bb43-4aab-b843-85a14d350f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3e03c8-0fee-4703-b561-37163727e047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b683884-7787-43bc-a437-33fd28e5a8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850edd34-8820-417a-babf-f642662f9a63",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7d9ec1-ec8f-4bb8-a85b-95cca285deb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a8f3fa7-1bce-41d5-aa1d-cd27cac38884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbb1749-561e-48ba-9d33-4f2faa8fbf93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8533bdca-e6de-4465-9f37-5d714df4a4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fda4ed0-028f-4afd-8fa6-6ea884c7925d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8a9fb7-df2f-4dd6-a2f3-520feb0d4041",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d4eec61-2b51-4f52-b2f0-e804f23518f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d66638b-fa19-4859-ace0-fefd30aa1bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa76287-3437-477c-8cf2-0e1c09b6f03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b81762-5d35-4444-92ee-11a35fdfd2c0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a1ab5f-c8be-4ec5-97f2-fbbfbc52d0da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a13ac79f-3be5-4f00-a011-cf60bed86e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b749d1a-316b-4478-b3f6-b50042526af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e732a43-f296-4047-b675-f359749764ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1530d834-5299-4626-920b-26b44ca451ba",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24c35e5-e2f6-4800-8757-c0a6bea46bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "800311da-e133-46a9-a7d2-954bc40eb8e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "666d0ac4-8e9e-4a38-8f22-b5f6f8dc9ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830168bc-41a5-4d41-9060-f4718e7bc507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97db4c90-382b-432d-9f9e-61bbf0b956e9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1976f34f-35c8-4751-b395-e04277a03b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad3dbdd4-bec4-4556-b4e3-d4d246f6d555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8e9c90-b252-48e9-91b4-c34b7e33ee25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9ed5b7-3d30-4149-b0b2-08e53681f715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b42fa7-6923-4824-bfec-7ce41e83098d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c5c091-46bb-462f-aecb-abe3dbc8b570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4021e6ad-9b44-4251-823d-c65e377d6dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2b6a95-a7e2-4d6a-9b4a-edc0f909ba62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a53ba8-c021-4746-b848-630a7fb0a47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b55e94c-58ac-4594-ad74-c0d0ac38260e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b630a346-4a11-4077-9765-8b560145c7e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab2d75ad-588b-4f21-8ac9-5ec4c909d5f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8efb56-c1fd-44e6-8fd6-dd6e13873467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb967011-8807-482c-a0c1-92c78a26fe8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205c9dcf-de05-4fcf-8ab1-42ab741dc22f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707274ca-57cd-4792-87b2-b3e7fb726ae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a292fd5-bd56-4f88-9d41-9c8d2ed6bc16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ba8efe-c3ee-429b-a01e-63c5e12d6367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1297210a-953a-4bdf-97b1-3ff230224bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679324dd-6b1e-448b-a8bc-ca8d423f8b11",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3994d8a3-8ea7-4c43-887c-c9653f38915d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "816ea1d5-c1ee-490b-af0d-a5e1f574d68e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9f88ff-7622-4733-a4f0-0f0b8cf8e594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174bd358-d5a2-44af-b109-3ce6a7bae2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69da9bc5-2e13-44fc-bfc4-3b654a8895bc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69969c9-ed63-4d6f-a84d-398a87c4129c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cae4ec7-33d6-4dc0-ae55-56602d3ca153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4811d62-578a-4977-a316-2712e9167c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b8b460-9d72-4e5a-9fd4-7275ea363002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b491ad4-ab12-4b83-9b0f-55ec849465aa",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1b0eaa-54d5-44f9-9add-ed949e35ebd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef0638ba-c3fa-4db7-8180-12fef2ce6bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cca426f-6e9e-4c90-a294-cd8cc8b5b73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c97be3d-f3fd-4d92-81da-cea7acbd4fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87491c4e-c4f3-4d90-b046-a515b5f4418c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce13ddce-f4fe-4e6d-bfd5-481e0023c7f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "629b95ba-f4f8-44bc-8db7-eff57a8fbf15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d530aad-eb47-4b46-b4be-4709337eedc9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ccbd6cc-517a-4cda-a37a-512bdbac9666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff06b8f-5282-40b8-832e-f46ae3bea783",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d712d3-cec5-4670-b966-845eef05cc21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1e84b2-a920-4f85-99cc-6e0544101d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3c2f32-c46a-47ca-be76-54b0330540c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35da9a41-8c7c-4b85-9860-e40eca861f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc288db-7920-4f91-b895-7a991ff33449",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb7507f-7482-4f88-aa2d-e00927f732fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "693c7879-ae1c-45a4-8fac-7800631a76c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "201ab124-53ab-4802-a2be-522de3cfb218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7eedfc1-ddf8-4820-a8a9-500e0ec56cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed03750-62d9-49a1-9967-c67ec8afd29b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91dd1a08-009a-4a23-a993-a7cac69d6e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02fe3557-1c76-46e6-aa11-6b347cf87a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98270369-2920-4b1b-bf7a-1b78d52d3d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb0e5ab-0f19-4275-9898-b3354bf96d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94e8538-5825-449b-b6dc-21de40c8e3e8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa54587c-cd3d-4803-b12c-b4a2c4c073b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "726c2d7f-993b-4b3e-9152-ff176ced71ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75060c46-419e-4540-a280-c499751d64f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250e9ac1-6f2d-4859-a693-99b33b537300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd82ea63-90c2-43a2-af40-e95a3ba4cc45",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24982614-b8e6-4471-8f2a-8afebd582a35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4e1adde-fbb3-41f9-b1ab-88791eac1e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc67b60-96c6-4a8a-955d-d8f4bb856934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9323fc79-24cb-4985-b431-d02533718938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35660c5-209c-40fe-b941-cdecff7151f2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d0f2ca-3cc0-4921-bb70-646eff7e527e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2cccc3-4bef-4a17-ae60-71f1252d6778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "769822df-2b6d-45aa-beb8-f05d318d6886",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3049766d-2f6b-4005-b1db-afe268e4c6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed009386-7358-40b4-b243-a27b18dd3cee",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1642edf6-b8d3-4ba0-be30-155d9c097376",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c2b3ef7-a524-4dbd-a450-84ef15749bdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd620a6e-8ad6-4252-a821-b7a1beefe74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06628d73-b56e-4847-a9f2-643e04c51be2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b457100-47a2-4720-80e0-e3f074a50c9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b66a517f-8eb0-4d73-806d-04c66db9e259"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b5fb53c-dcd2-40d2-8134-18997792c326",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d556d425-d4c0-4b44-8aa6-1c446b1251e0"
                    }
                  }
                ]
              },
              {
                "id": "2c980088-1887-48f2-af7d-c2d47575ac8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "813b7717-2c1f-4ebb-8e58-42826d27dd33",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf57a0c4-790a-4a5d-91cc-7a3d1995e2c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "51b0e084-fc7c-4ece-8b3e-161edae573af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcab129-dd34-4b42-bfeb-e4760b6792a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a914c57-f0f2-4844-87cc-077cf5a94267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bac16bd-03c6-4ec9-84c6-68c6aa4a147e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f862111-aebf-428f-a932-434ffb053eaa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "232e44b3-c748-4499-936a-f14188a56303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b0e239-d2d4-4f83-9720-fff683ec230b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c89bf824-844a-455d-a5a6-919406e287aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb3f230e-b0ca-4761-9d26-979a590bc973",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48592ee1-d467-47ba-a72a-846cb40699b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17dc6103-c40e-4b92-be40-a6f7474c9f97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7489477a-8394-459d-ba70-1bad3853b602"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "45d181ab-bc6e-4fd1-80ed-bc9a2a9b03c1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "93b427e1-aee1-47b6-9348-8b83ef9bad24",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddaabbea-a4aa-460e-9026-9f04eddabe18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91ae0cc9-0099-474a-ac09-b2f482d184ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90f684bc-5e22-4c8e-abbb-68d13e256a02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a9a2b19-e083-490f-a43e-57b4c38e4322"
                    }
                  }
                ]
              },
              {
                "id": "08091ad4-8cc9-414a-8856-28a50be10a4a",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "040fb62d-7597-40f7-b481-91dab8622b88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e840645b-5f2e-4d90-9084-ec566d4a3aec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88344010-ef2d-4314-95cf-615b3ab0dc54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bd8a6da-d122-40fd-9fa5-dd09e7835a0c"
                    }
                  }
                ]
              },
              {
                "id": "1b7e83b4-7f56-4717-bffd-bc9fa11efe21",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61e41688-fd34-4c0e-bd0d-aa5b24569d86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6082ba13-d8a1-4053-be30-e7a4e1e9d5f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6853eda4-f34a-49d1-bd38-cc3eb529dfa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f2a314a-7b0d-4f0f-b5d7-fbdf903e5f7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eddb6426-061f-4e29-acb7-337662d24f0f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "238531ea-8671-4809-894b-a1128d1856f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "668b6b34-598d-4437-83f2-4c3741e3df8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29573b50-578a-4d39-90e3-e23df4a72757"
            }
          }
        ]
      },
      {
        "id": "f6f0359e-0950-48ba-91d2-dd2fdf7a3676",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0e624f9c-a997-4f03-b323-b014925b1be4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ef2df6a-a395-4932-8d2c-f1ab4c45aaf0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1824cd37-d0ff-46b7-a5d2-b051080cf29b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bf4833-c3b6-476a-8619-ee493f0fb03c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fcdbbde6-7d7e-4fe1-9964-7ebabeca7bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a84868d-cad0-481f-942b-44f2a5b9a6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf3cb95d-4ad2-43a9-bde0-f65fb17c336c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad91690-110d-4a71-9777-3da8c0b958d6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344d8545-b505-4bde-afce-e506a85c01e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bdb0b71b-d113-41b9-acbb-a0f2661dd5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4e8c3a-b80d-4338-b67f-c0d59a03e42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9b1bb60-3224-4bff-851b-7b474c8257a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b25777ec-0386-4b54-a1db-1bc7136ed292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f672bc0-0163-4292-b375-41dcaa775cb4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bca479ee-63a7-47ff-a48d-ee3539fe1694",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89dd3943-2e6b-475b-9654-72ffa2585449"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbed4ee4-0a88-4baa-98fd-d7671f34fff0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4142e743-1882-41e2-9a77-69a3bcb28df1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49af9259-16f2-4ebd-83cc-4ca2902777ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62028db5-6cb5-42d3-ab15-e3cf6d8eff0e"
            }
          }
        ]
      },
      {
        "id": "3b40995d-08a9-47a7-ba9e-663166256481",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4bf6f0b8-59ae-40f6-b96d-6163c66aa14f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b33c8eb9-851d-49db-830d-9da919fe8621",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1e2e5ed-181c-40cf-844f-d8c2894a2ba3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce537c1e-ac51-4cf0-abc6-dab70f8ec254",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "daa02fd8-95e2-4346-85dc-6456be73b8ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3af6cc4-03cc-46f5-aa5b-f11b871796b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d75ebd50-0bb8-47a8-9ba4-dee8e6831446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b505e18-13db-43f2-bc17-3d1333e77e3e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8444bfe-5422-4c01-a0a5-623dcb305dfa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "01e187f5-8b4d-46af-8a92-1524755bc7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932dcc73-d4e9-405a-a53d-0409810b3c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa22aeed-9688-4578-ad98-4152f041053d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42851d1a-40d2-426c-a5e1-db9ab7b69e25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "276536f2-62f6-400c-a721-fd97727b60f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c118d80-5dd9-4f3e-9457-434a16ea69b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba86dab3-a900-492d-a27b-34eeb8ea150c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "280c03bf-1606-411b-9ab7-6c31f02be200",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "69c04283-626b-44d1-b34c-896f7dcea3f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a3828ad-adfb-4cbd-bf0d-23e86be79a48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2fe3a66e-36ce-4aae-afde-4c44e8c27ed3"
            }
          }
        ]
      },
      {
        "id": "fe1fcd5c-4ed2-4896-bf39-95c057b3b740",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "20566dd5-24f0-474b-b863-d0dfb03c4ef8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2de2d1fa-5097-4eb4-a71f-a1de095ad539",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47f0cda7-68c0-4e98-bb2f-6fedf9df9f92",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b17983-9c56-4244-b858-d337f08090e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b9332b70-6d4e-4e21-8f12-fd77683a4b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5372868-76f7-4f07-a58c-db49fa613e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d322c251-3acf-47ed-927b-128466a7319a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5cb63d-ce11-4d05-bf50-8ec946b8aaae",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3342b0-4b60-46f0-9ff6-e70c0ef537f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ed041ccd-6aa4-4c86-a261-6f9eca227811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db36c5e-90cb-4c2c-b6e4-7d92b3b5fedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9c54bf5-64af-43c8-a467-1b05df1565ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6373f82-3c60-4322-813a-d109cf3514f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c50e3e8-230f-4279-8896-e65425f7f687"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08e4afc2-e7a9-4c58-8efb-3a96f3fd1381",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1ab13a9-d22c-4af8-95ee-d6d9d9ec68de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01a80a49-cdf2-454b-9e5b-4e080894ec3c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7246a031-fc13-468a-8a8b-9bdf13a42c04"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "033467a9-c669-400f-919d-3c2b0c1b4666",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7ca6c91-f531-4281-a738-b83c20b56cab"
            }
          }
        ]
      },
      {
        "id": "3dc35d4f-f50b-45af-9074-3fb531ea069e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22484fac-e623-4a2d-aeac-9871cfb1e7ea",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "caffac61-ca72-4338-9359-03acbd4b78aa",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "488ea3dd-79e5-4281-9ecc-633ebd0a07a4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67768963-f023-4d4c-9add-f1f16ec7c933",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c8e25b5-66b2-40dc-b062-693ead911690",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 90
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 129.08846153846153,
      "responseMin": 8,
      "responseMax": 829,
      "responseSd": 128.0807882877145,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667954776010,
      "completed": 1667954823160
    },
    "executions": [
      {
        "id": "bcced43e-e420-4fec-9aa7-ed8f9053d776",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3c97d696-8bd9-414f-90b1-f3c19fa64e76",
          "httpRequestId": "f759449f-6b32-4537-ac4d-c3805ed473a6"
        },
        "item": {
          "id": "bcced43e-e420-4fec-9aa7-ed8f9053d776",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5041241d-6cbf-4486-ba84-ae0992d46ab1",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "caa940f8-f4f9-4155-be49-8ec6cf142189",
        "cursor": {
          "ref": "24b2996a-1d6b-4e5e-adaf-683278e14aa5",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a0d10198-e8e3-4f01-916b-62ee61d5b0f3"
        },
        "item": {
          "id": "caa940f8-f4f9-4155-be49-8ec6cf142189",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ba52a211-6ee1-47d5-93a5-fdc95629ac08",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "63443cf7-ca41-4da6-8f08-4e5fc59d212a",
        "cursor": {
          "ref": "d535510b-8341-4100-bb9a-90ca61170998",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "86ace59b-d1ae-43ff-87ff-1c472a69ad36"
        },
        "item": {
          "id": "63443cf7-ca41-4da6-8f08-4e5fc59d212a",
          "name": "did_json"
        },
        "response": {
          "id": "91c45535-4266-4c4b-906b-0e856fef34aa",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35995fbc-d600-4364-9a7c-a74093fd3d2e",
        "cursor": {
          "ref": "153f877e-38d8-4d42-b261-32e8c0c76448",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0788ed84-2dbd-4fef-8c1c-7d7eacc5e371"
        },
        "item": {
          "id": "35995fbc-d600-4364-9a7c-a74093fd3d2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "6d4d15f4-2f15-4167-919a-882d98725894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35995fbc-d600-4364-9a7c-a74093fd3d2e",
        "cursor": {
          "ref": "153f877e-38d8-4d42-b261-32e8c0c76448",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0788ed84-2dbd-4fef-8c1c-7d7eacc5e371"
        },
        "item": {
          "id": "35995fbc-d600-4364-9a7c-a74093fd3d2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "6d4d15f4-2f15-4167-919a-882d98725894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1512da82-ee20-4e6f-a1d7-348e446a1d0e",
        "cursor": {
          "ref": "b1cb0956-eddf-45f1-94cc-d17153f964ac",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f3758761-23c5-4b8b-ac2d-e88e920d857e"
        },
        "item": {
          "id": "1512da82-ee20-4e6f-a1d7-348e446a1d0e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "14fbcf1c-8310-406e-b8df-e287c8c140c4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 211,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611653a8-17c9-4e0c-bd31-dfa6b526e8ef",
        "cursor": {
          "ref": "32f4147f-40b9-461f-b5e3-54f327a2425e",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "696edefb-621e-4121-acde-d652ea31acac"
        },
        "item": {
          "id": "611653a8-17c9-4e0c-bd31-dfa6b526e8ef",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "de6b5b56-f34b-4a9f-890e-7438cc805f20",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a968fb1-4197-4480-9b86-fa83eca5a1ab",
        "cursor": {
          "ref": "5778d91c-9a23-430a-8c32-e49b1137084c",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "936de45c-e628-4e1d-a5bf-fa69b4f62a67"
        },
        "item": {
          "id": "3a968fb1-4197-4480-9b86-fa83eca5a1ab",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ef61a1ea-2f24-4680-95a0-4198ba015189",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adac428-e985-475c-b93b-55e7d0c980f1",
        "cursor": {
          "ref": "386d3156-a836-4b74-96bf-40913f243f8c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "830e495a-4781-4e3c-94fa-41eae97cecac"
        },
        "item": {
          "id": "7adac428-e985-475c-b93b-55e7d0c980f1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9dd57bea-f351-4efa-a197-6d8a83871a9e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adac428-e985-475c-b93b-55e7d0c980f1",
        "cursor": {
          "ref": "386d3156-a836-4b74-96bf-40913f243f8c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "830e495a-4781-4e3c-94fa-41eae97cecac"
        },
        "item": {
          "id": "7adac428-e985-475c-b93b-55e7d0c980f1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9dd57bea-f351-4efa-a197-6d8a83871a9e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee0def9-8fc7-4945-b74a-55157c1baa98",
        "cursor": {
          "ref": "9a12db85-d319-4394-b7fe-28f25a0243bc",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "aec45947-dd65-4fb0-b613-9a66b80ab79d"
        },
        "item": {
          "id": "3ee0def9-8fc7-4945-b74a-55157c1baa98",
          "name": "identifiers"
        },
        "response": {
          "id": "455e3222-b13a-4cf8-8766-a7f45e5258cf",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec16e7ec-7b19-49f1-bf0c-517a6a2da520",
        "cursor": {
          "ref": "c687f9d7-48c8-4a0e-be32-80a5fd883f99",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "da1d9981-31c3-4b8d-9f7c-a40e1ec353a8"
        },
        "item": {
          "id": "ec16e7ec-7b19-49f1-bf0c-517a6a2da520",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "89f9bd70-11d2-4a8f-8371-d3eeaa1c5a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec16e7ec-7b19-49f1-bf0c-517a6a2da520",
        "cursor": {
          "ref": "c687f9d7-48c8-4a0e-be32-80a5fd883f99",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "da1d9981-31c3-4b8d-9f7c-a40e1ec353a8"
        },
        "item": {
          "id": "ec16e7ec-7b19-49f1-bf0c-517a6a2da520",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "89f9bd70-11d2-4a8f-8371-d3eeaa1c5a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8574e6-b8fe-4636-ad4d-b23b6f77b65f",
        "cursor": {
          "ref": "f0a525e1-9bec-46fd-896c-e64e7dff505f",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ae73f09d-6b55-4fa8-8ae1-0656161d983f"
        },
        "item": {
          "id": "5f8574e6-b8fe-4636-ad4d-b23b6f77b65f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2ca44b7d-d321-4039-af35-acec5063bbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e96b622-b7f3-4c69-a818-3d1a231bfe69",
        "cursor": {
          "ref": "e7a0dfa9-ff6b-4cf1-a6de-8d509a855b60",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "79951e40-71e4-4be0-9a0e-bba9b39514d8"
        },
        "item": {
          "id": "4e96b622-b7f3-4c69-a818-3d1a231bfe69",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "429caa07-dd5b-454d-a932-ca59880b7115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ab195a-97d3-4f99-a9dd-e8a4d6a3542e",
        "cursor": {
          "ref": "5d37e715-3729-461f-9475-d907c339ac16",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "355dbba3-54ee-487a-b128-48b621c47636"
        },
        "item": {
          "id": "80ab195a-97d3-4f99-a9dd-e8a4d6a3542e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "83757ca8-7e92-49d2-b1e6-b91f5538e2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d163185-327e-4857-9ad6-c1c97c516436",
        "cursor": {
          "ref": "442f77a5-e80c-490c-afda-15c14494747f",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "127009a5-841e-4197-9526-1d3e29eb65d1"
        },
        "item": {
          "id": "7d163185-327e-4857-9ad6-c1c97c516436",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2c712e67-d620-4d23-989e-f9b36965f970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabb636d-f1e8-403f-b71e-6a9804ef079f",
        "cursor": {
          "ref": "60d9b80b-405b-423d-b360-cb15dd9028c0",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e4747976-dbf2-4fc4-9e66-55749b187a41"
        },
        "item": {
          "id": "dabb636d-f1e8-403f-b71e-6a9804ef079f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6ed07c0d-2295-479c-a789-8684164e7c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc43fb2-4447-4683-8776-7a5f0b1bc2f5",
        "cursor": {
          "ref": "62b06edb-43bc-4fa4-8614-f3dce6ba5328",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "df8b1a52-d6db-498f-919f-f43f2062212f"
        },
        "item": {
          "id": "5dc43fb2-4447-4683-8776-7a5f0b1bc2f5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b7489fd8-e944-4bb4-a30c-2ffc98ab908a",
          "status": "Created",
          "code": 201,
          "responseTime": 671,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "604a77d0-c10a-48e6-bf33-03b793093ebb",
        "cursor": {
          "ref": "a0e814ed-f1e3-485a-b852-ca49cb99d839",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "337a778b-fce0-41c8-b30c-1a036b04a450"
        },
        "item": {
          "id": "604a77d0-c10a-48e6-bf33-03b793093ebb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "25b2a275-8810-4af3-aca2-be99f7a17316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffbba15-1317-48c2-8dfd-520ea740268f",
        "cursor": {
          "ref": "42fb4744-7ee8-4165-aeec-aabb91c865dc",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "229a2478-c70b-4bee-9f52-2c69b66feddd"
        },
        "item": {
          "id": "cffbba15-1317-48c2-8dfd-520ea740268f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b1fdae40-a37b-4445-bad0-ff6a6cdce7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d41a16-a936-42d2-859c-12aa6dbb729e",
        "cursor": {
          "ref": "44efe15d-23fa-4a59-a02d-134d329e6844",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2b8a68ae-e53f-4121-a40c-249b98e72064"
        },
        "item": {
          "id": "87d41a16-a936-42d2-859c-12aa6dbb729e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b8698b23-e13d-468a-a00d-d8b82b53fab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71cf703-6a4a-4711-a57e-510dd4f47b53",
        "cursor": {
          "ref": "6c42664c-7d94-4ca5-9db2-3e93ec6398c4",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "394592c5-99e4-48db-812f-ac0afcf8cff3"
        },
        "item": {
          "id": "a71cf703-6a4a-4711-a57e-510dd4f47b53",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "21abde55-5be5-4f13-9fe3-7dee299fb098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d155a3b8-b260-4322-b7c1-b7a22246fe51",
        "cursor": {
          "ref": "9fc2d166-c8d3-4e59-b760-dffbbde33b6f",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b0c7599d-76c6-489f-8a93-3b8ca894c2d3"
        },
        "item": {
          "id": "d155a3b8-b260-4322-b7c1-b7a22246fe51",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c70321b5-441e-4865-a59f-367b071a3b38",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 583
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f04dd650-714a-40f8-b819-5f1501365a7d",
        "cursor": {
          "ref": "68d0c1d1-363d-41c4-8d40-2728ea1d4fc8",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e23bf20f-bd41-4e58-9349-7515b1e412d9"
        },
        "item": {
          "id": "f04dd650-714a-40f8-b819-5f1501365a7d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3c6ed59b-2996-486e-bd41-66a341ccb7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0c080f-c7e1-4852-a2ca-fe036d95de2f",
        "cursor": {
          "ref": "dae71d61-e721-4c1c-aa52-ed4d061361ef",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "647555b5-1b78-4f66-b620-2ba7d61b5690"
        },
        "item": {
          "id": "3b0c080f-c7e1-4852-a2ca-fe036d95de2f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e57637cd-552a-4027-a5f7-0ca82642c725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0e7da3-d4d0-43b4-96a8-77b7e662c71f",
        "cursor": {
          "ref": "b9f529f5-ffed-4aaf-9db7-010c06d4db01",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "66dca499-d6e0-4679-b7a1-462096357894"
        },
        "item": {
          "id": "2c0e7da3-d4d0-43b4-96a8-77b7e662c71f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1c311c46-80c6-4345-ae53-c7b0274def0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b51b0d-372f-4dee-ad89-29ce0146059c",
        "cursor": {
          "ref": "07f5cb60-e3b4-47d6-9a9a-7b0abf515218",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ace8d602-1ce2-49de-8c0d-ff949ee9dfc5"
        },
        "item": {
          "id": "f5b51b0d-372f-4dee-ad89-29ce0146059c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "189f5044-f58f-4b54-b151-fec25ec08b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640a0303-d766-4128-a829-61d2eaf37d39",
        "cursor": {
          "ref": "a00ff9b2-6d8a-4750-837f-00905a4cf296",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0770036f-96db-4b5e-bb4c-70a8a482e554"
        },
        "item": {
          "id": "640a0303-d766-4128-a829-61d2eaf37d39",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "40ce2943-12ce-4d65-afa4-bbeb5e6577fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a817533a-42fe-4648-84f8-b7da307e6939",
        "cursor": {
          "ref": "c15c3324-0406-4a41-ad7f-deb31459d659",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "63022239-d41e-4d69-81a0-1fdd1f30cff4"
        },
        "item": {
          "id": "a817533a-42fe-4648-84f8-b7da307e6939",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "deab21f9-226e-4c5a-a4ae-42dd3723249b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b139840a-8295-4670-b4d5-75cce0ee4e88",
        "cursor": {
          "ref": "12db6a0e-cfe5-4fdf-96ca-5bb9901c8649",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a559f900-7a75-4cdf-8372-18086393748b"
        },
        "item": {
          "id": "b139840a-8295-4670-b4d5-75cce0ee4e88",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4e950e54-2dec-4d21-9819-5200083c7c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b742184-2427-4517-9613-546f3a128b0d",
        "cursor": {
          "ref": "e16bbd21-66c8-412c-a8e6-73cdae3c3626",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0a0c1ce4-ea95-48ef-aaa9-d6d60c32957d"
        },
        "item": {
          "id": "1b742184-2427-4517-9613-546f3a128b0d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e060f7f3-50f7-4b70-ad2e-b3394cf94f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de39358-9c74-4c66-aae7-0367a18c6872",
        "cursor": {
          "ref": "400ae49b-4ad1-4242-988b-14adaa07c05a",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1ee6b0cd-97a4-47f5-9753-601cbdcfaa7f"
        },
        "item": {
          "id": "8de39358-9c74-4c66-aae7-0367a18c6872",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1c6c9d58-2b6e-4da1-9b13-72399200ae15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a67142-d5ed-4425-85d3-0f512308de4a",
        "cursor": {
          "ref": "e1eaa941-20e8-400b-87e7-842fae40bcfc",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9816a670-73cd-4309-8b93-e034f21d3172"
        },
        "item": {
          "id": "17a67142-d5ed-4425-85d3-0f512308de4a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1933d550-450f-4e82-bc35-00608df7dd30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195157ff-58ba-4068-90c2-9247b082e862",
        "cursor": {
          "ref": "b63a4da0-b3f2-4cd7-a91a-23d624ff7ae5",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "51554a59-fb90-4143-a5cf-9c95e12f0682"
        },
        "item": {
          "id": "195157ff-58ba-4068-90c2-9247b082e862",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8eef1117-25db-4fc6-a625-1b7d3b9914c6",
          "status": "Created",
          "code": 201,
          "responseTime": 471,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "9dbda7b7-59bb-49c3-afa7-038cf4f0f543",
        "cursor": {
          "ref": "e39708f9-3d4c-42ea-a92a-a6f82323b0d4",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bf6d8216-5035-4c0f-9b1b-15214d55446f"
        },
        "item": {
          "id": "9dbda7b7-59bb-49c3-afa7-038cf4f0f543",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a0e85dc5-542d-4159-97ce-4965058ae05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbd6eea-8e7e-4906-88e0-77478576b418",
        "cursor": {
          "ref": "87bb3ab5-9707-463d-b3e0-d6059c745fc1",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "44fbb19a-4588-463e-903b-73cf98f62b76"
        },
        "item": {
          "id": "6fbd6eea-8e7e-4906-88e0-77478576b418",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "50f7e350-0105-4fa3-8e6d-035cdd5acaa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1ab4f2-b963-448b-aec5-f8d69eb27d38",
        "cursor": {
          "ref": "fbdc1eda-fceb-4123-8e78-ebddb9ea7591",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fc79bdef-431d-49b5-903f-83822cf830c0"
        },
        "item": {
          "id": "ee1ab4f2-b963-448b-aec5-f8d69eb27d38",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b24e26ec-3d55-4f50-a826-29ad7608008f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2478c59e-5fa7-4a23-a74a-55d988ea154e",
        "cursor": {
          "ref": "d53f04ca-0d4b-4272-bda5-0448e59b6060",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "98a0f94a-f93e-4b7d-a946-d4e99880053f"
        },
        "item": {
          "id": "2478c59e-5fa7-4a23-a74a-55d988ea154e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8290b6ad-8ce3-4a78-a2ae-4cfd9c5d1320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da103532-d5fb-466e-8ad0-4b9c1a3add0d",
        "cursor": {
          "ref": "1336c5b3-bea3-4b12-bd87-a13a9c8b9084",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ff411832-efa1-41c2-8165-918f86189706"
        },
        "item": {
          "id": "da103532-d5fb-466e-8ad0-4b9c1a3add0d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "56214db8-702e-4bfe-ac8f-bab30f24456c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cae0b9-2858-4220-a9fb-3eda4a330ccb",
        "cursor": {
          "ref": "887789df-044d-4483-bb2c-8bfd0101ce86",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fa8feb03-b103-4f88-987a-53f542a57b16"
        },
        "item": {
          "id": "06cae0b9-2858-4220-a9fb-3eda4a330ccb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a0ff0eff-7990-467d-b1b9-574fd5bc8d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74de7269-597a-4b7e-9c0d-8b5a4f513cf0",
        "cursor": {
          "ref": "bee44025-12f9-43a7-bf89-bc25d4fccbe8",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "462de0cc-1e05-481e-80fa-e92411a605a0"
        },
        "item": {
          "id": "74de7269-597a-4b7e-9c0d-8b5a4f513cf0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "37830bcc-c761-4453-b1b6-3d089e399429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc215c0d-e862-40f0-8118-1f9a79ad5d24",
        "cursor": {
          "ref": "efa74846-4dfe-430a-a5af-e901c898856b",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b2ce7340-eab8-4b9b-a7de-6b48ce4358ff"
        },
        "item": {
          "id": "dc215c0d-e862-40f0-8118-1f9a79ad5d24",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a2306b57-be00-49d0-8f39-51b0c038d496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf6a4e8-221f-4b8b-acbd-f1bc34b65918",
        "cursor": {
          "ref": "c5108161-2e1b-421f-bb1c-abb34e767931",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d1f48205-e76b-47bf-87d0-1faa59a05b01"
        },
        "item": {
          "id": "bdf6a4e8-221f-4b8b-acbd-f1bc34b65918",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a8faf826-3ddc-4c38-90f4-11e9b9dfeb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1164da56-c226-4793-928c-891f5fdf7241",
        "cursor": {
          "ref": "9044bc19-5bf4-441e-8b1e-7f8b145a637c",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "73a6c7ca-debe-4ed1-8922-937d79c40ff7"
        },
        "item": {
          "id": "1164da56-c226-4793-928c-891f5fdf7241",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c32c61d6-89a0-46f0-9264-8e563bff1407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bb4df8-e618-44e6-9f4c-2c6b96406f1c",
        "cursor": {
          "ref": "cea3ecdf-53d0-4dc3-8d65-c76f78c1fc23",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aa153660-f698-4a93-8d78-b89c9d31ac33"
        },
        "item": {
          "id": "82bb4df8-e618-44e6-9f4c-2c6b96406f1c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9676268f-208d-49c6-98a1-d5073684f8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98d90ec-22ef-42a2-bb47-be7e4bb889ee",
        "cursor": {
          "ref": "7c14a4b5-3105-4738-a81f-b1648f539594",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3ee89bf6-8c7f-4c61-b603-5d68d345ccaa"
        },
        "item": {
          "id": "b98d90ec-22ef-42a2-bb47-be7e4bb889ee",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0f8e3b71-ea22-4609-826a-db72c933280e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171a25b9-cf4c-446a-ada9-f578f1e94849",
        "cursor": {
          "ref": "73586cd0-3c30-4a2e-8035-802cd6df95c8",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c4e5e039-ad05-412f-8278-f86796365cf2"
        },
        "item": {
          "id": "171a25b9-cf4c-446a-ada9-f578f1e94849",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ef303cd8-f161-4d84-9d5a-21973b041eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 829,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a1f13c9b-7f7e-4f4c-8e45-6586530368a0",
        "cursor": {
          "ref": "cf255ecc-facb-4231-8b9b-cf82e38b6a0b",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bd3a6bff-7afc-4bf3-9742-10510f77fb2f"
        },
        "item": {
          "id": "a1f13c9b-7f7e-4f4c-8e45-6586530368a0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5a9374ef-d315-4172-8248-07ea0fdb2138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b490d344-8364-43d3-bf7c-547c810eda59",
        "cursor": {
          "ref": "f9df6f3c-d798-4b02-b56e-03701ee0a4bc",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f168d49f-a743-4f11-baa7-cc241aae503d"
        },
        "item": {
          "id": "b490d344-8364-43d3-bf7c-547c810eda59",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1b584b25-b457-4431-8504-387063e3f3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e8f312-76b3-4dc5-88cc-2704600bb449",
        "cursor": {
          "ref": "e9f058be-f827-4bc1-ba1e-81d27b78dd86",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f0193a12-c02a-4c0e-8ccb-a8ce2aad116f"
        },
        "item": {
          "id": "75e8f312-76b3-4dc5-88cc-2704600bb449",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "425818b8-fb8a-4b1f-aba2-0a14e1ec53bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1d2710-50a7-43c0-92d9-c720eb0146a4",
        "cursor": {
          "ref": "e4395ff1-cf13-4634-aa3e-7ea26132012d",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "04f1e248-33ad-4ec9-bffe-35acc2440388"
        },
        "item": {
          "id": "0b1d2710-50a7-43c0-92d9-c720eb0146a4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0f5332dc-b682-4c3c-8d91-6f092cf7abed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b75ef2-b475-4b50-8558-b7714fe2cf72",
        "cursor": {
          "ref": "8a56c6c1-f64d-4879-87dc-d5a852e1f49c",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5997d81d-1ff6-4f43-b26a-9a9f50948144"
        },
        "item": {
          "id": "04b75ef2-b475-4b50-8558-b7714fe2cf72",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9c0a15cc-8983-4104-87f9-742527c2e78f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5362fd2-0295-4228-802a-4b60ca2ddf56",
        "cursor": {
          "ref": "f968b315-808a-4602-8ea2-34b088ab9e77",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3fb5aef1-b711-4574-8f1f-45105785a109"
        },
        "item": {
          "id": "d5362fd2-0295-4228-802a-4b60ca2ddf56",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "12a57024-089f-4260-bbf5-8ca8415a6c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f010e2f-c53d-409f-8d80-ee1c4ba67923",
        "cursor": {
          "ref": "cfa0d307-5a57-4a70-8c9a-b0603fd7601d",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "04ae6959-8f28-4ec8-8a12-1ff724facf11"
        },
        "item": {
          "id": "9f010e2f-c53d-409f-8d80-ee1c4ba67923",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c36be47d-a85a-434c-b651-b7bf9a801386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6cb51fda-4d9f-4f86-ab3a-0461d247898f",
        "cursor": {
          "ref": "265fb100-afa3-4542-8cc4-a61152466753",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fc61071b-c0ff-4ffe-b4bc-d6f1026d9ede"
        },
        "item": {
          "id": "6cb51fda-4d9f-4f86-ab3a-0461d247898f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "df4fab18-4c96-4e52-b9c9-cd07e761c263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1b4a18-0651-4ef7-8686-baa360813772",
        "cursor": {
          "ref": "072a4bdb-193f-4b97-83ea-a312d0a246ce",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "351e9b4e-b5c5-4101-b7ef-799467d5a5ee"
        },
        "item": {
          "id": "cb1b4a18-0651-4ef7-8686-baa360813772",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "95f73f3c-cf5c-49c1-b4f9-fcdd9836946c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2eb67a9-7e3d-49c9-afc2-4d47ad4b2422",
        "cursor": {
          "ref": "856bde09-9118-4b59-bb84-c165c2724fac",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6bf51ae6-7226-4750-9f26-e4e261360159"
        },
        "item": {
          "id": "e2eb67a9-7e3d-49c9-afc2-4d47ad4b2422",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f2132c31-8b41-4594-a15c-712a4535f593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6320fe6d-2249-47e8-9c5d-86b59d193c30",
        "cursor": {
          "ref": "e15d6d90-f218-4a13-beaa-5f9d812bed86",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4b55ddb0-d7ef-4cfb-910d-b0f79d35a912"
        },
        "item": {
          "id": "6320fe6d-2249-47e8-9c5d-86b59d193c30",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9c53f256-e6ff-4245-910f-8020775fca86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465655a7-f2e7-404a-8c6e-cade0236dc7b",
        "cursor": {
          "ref": "c34a0930-eeb5-4078-b876-16ad7e43bb33",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5ca31c68-4490-4d21-b1ac-e119007e1746"
        },
        "item": {
          "id": "465655a7-f2e7-404a-8c6e-cade0236dc7b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a429bb5c-9fd4-462a-a2b3-c6b33549bc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0aa223-235b-4d2a-9fd9-1a93c0ef5a5d",
        "cursor": {
          "ref": "2e5f072b-75b5-403b-bc7a-29f8ee2593df",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "66d550b1-1139-491b-8c1e-8e5645c298be"
        },
        "item": {
          "id": "4e0aa223-235b-4d2a-9fd9-1a93c0ef5a5d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d423cca0-e25a-4853-a4d4-81fac104cb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb133758-2663-4afc-928f-c4e083086b6e",
        "cursor": {
          "ref": "6261068e-ccac-44d3-81e5-cf5856b6a8bc",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "83a57de3-8772-4660-b62e-c75cb19565ad"
        },
        "item": {
          "id": "bb133758-2663-4afc-928f-c4e083086b6e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5bbb47ae-a983-468f-8244-34d8f8eb95f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110bb216-5ebd-483f-a918-5d7c66807a78",
        "cursor": {
          "ref": "d78ecacf-6d08-4ce9-bfc3-2e16af9daa36",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2a39e52a-ab31-4d26-9060-dd705466a2cc"
        },
        "item": {
          "id": "110bb216-5ebd-483f-a918-5d7c66807a78",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "016a769a-9bf2-49b5-8575-a42c75f68f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16911cbc-1e3d-48eb-ba81-5bfb333fc7c2",
        "cursor": {
          "ref": "4c96f4da-34cf-45f7-a5bc-a45dd8c2847c",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "86dba4ad-6277-42a7-be84-b53bb8467a04"
        },
        "item": {
          "id": "16911cbc-1e3d-48eb-ba81-5bfb333fc7c2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "98727c4a-7646-4c78-9715-a00e1ffd0f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb16e0c-7c56-4a2c-a02d-7136b967b42d",
        "cursor": {
          "ref": "1d2f9c8e-03e3-411b-b436-68e2a6a4da96",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d2a2e231-cef5-4c42-bd7b-76ad4622fe57"
        },
        "item": {
          "id": "2cb16e0c-7c56-4a2c-a02d-7136b967b42d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3f76b748-9b25-454e-ae59-c484bf06f76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42264a1c-5e40-4b21-a408-b93a1fa8de26",
        "cursor": {
          "ref": "0eecfce8-0b60-4d5d-8a9d-2a8afa8024a3",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e841839f-60b3-492a-b2d7-0d83af882ffe"
        },
        "item": {
          "id": "42264a1c-5e40-4b21-a408-b93a1fa8de26",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3b922904-c2b2-4b97-92fb-79e793e9e1e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9c2168-99ee-45f7-a05a-a1d46e96d796",
        "cursor": {
          "ref": "7afd49a3-7a07-47a4-b645-4e22bf94e2d1",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bb68c6f0-7f0a-48f6-b91f-986051a17cb1"
        },
        "item": {
          "id": "af9c2168-99ee-45f7-a05a-a1d46e96d796",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8881a3b9-2f45-4939-8af5-890119270a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af55e35-83f8-4a55-8f02-b85485e6d685",
        "cursor": {
          "ref": "344beccf-ac1c-4bb3-85c9-08ce00dea3fd",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ff914e00-13b5-4bda-a351-81c3c5d7820f"
        },
        "item": {
          "id": "1af55e35-83f8-4a55-8f02-b85485e6d685",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ec722e2a-24b4-4571-9701-3acafda86e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0111889-c7fc-4bbd-b741-ec102f461690",
        "cursor": {
          "ref": "896c240b-8bad-47f1-a558-c25d1c058cf5",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c220d552-8ece-4be2-9cdf-0390b8f49b1f"
        },
        "item": {
          "id": "d0111889-c7fc-4bbd-b741-ec102f461690",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cc4222be-af60-4bc5-ac67-55bcd015dc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac21661-6396-49b4-b88d-2bf5e1bae47b",
        "cursor": {
          "ref": "e54d90e2-d824-4b6f-ab59-9e0f28e675e3",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8bc805fc-98fa-4450-b85c-c6c057b6cd78"
        },
        "item": {
          "id": "9ac21661-6396-49b4-b88d-2bf5e1bae47b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bac1eb83-b58f-4bf7-924d-336065fb4736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f06ab56-7a74-4d9d-9d42-7417f71e88cf",
        "cursor": {
          "ref": "16902f41-9073-43f8-8edb-5abb83482b74",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "291e909f-73c8-48a1-9d0d-1f0d1c7c9ebd"
        },
        "item": {
          "id": "3f06ab56-7a74-4d9d-9d42-7417f71e88cf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dca54dc5-4f39-47ce-ad02-2df35ec1e11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5426b32d-5a16-43ee-892d-414769013c79",
        "cursor": {
          "ref": "753d66e6-b35c-4a84-8ff6-ab81ced37a6f",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "881943f9-de17-4fe7-a465-daf4ca422167"
        },
        "item": {
          "id": "5426b32d-5a16-43ee-892d-414769013c79",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "677cecb1-b228-4fa3-a832-daab4931345f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1198f8ad-2eef-4424-ad32-edb6b8fb7946",
        "cursor": {
          "ref": "b5ff2b4d-6467-40e0-bac0-03237b7d4237",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c5cdaf73-2468-4064-ba85-01bc58fb878e"
        },
        "item": {
          "id": "1198f8ad-2eef-4424-ad32-edb6b8fb7946",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "00ef0477-a360-4bf7-a894-cd7d9b038e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3a67ec-1fc5-4e34-97b8-66462b943118",
        "cursor": {
          "ref": "af2c27d2-0eb0-4230-abcc-6bc4cfa2f652",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7ff2061f-3cf4-475f-b77a-469c325d9405"
        },
        "item": {
          "id": "9d3a67ec-1fc5-4e34-97b8-66462b943118",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "634da291-b4fb-45a5-bb3b-5e1a2bdfb6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f2f88b-86dd-4130-ba30-4ff5f0965f3c",
        "cursor": {
          "ref": "a6681d69-5b4c-4d45-8e3c-ee44ebec88f3",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "af4bdf7e-9c09-4551-8318-d48124d05a14"
        },
        "item": {
          "id": "78f2f88b-86dd-4130-ba30-4ff5f0965f3c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f86f4628-179f-4473-97bf-d3283d22feaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a652b2a3-dbe1-4428-a093-37fd5db23e3e",
        "cursor": {
          "ref": "742627c4-d4e1-4cee-8007-6e58631d4052",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "538ca1c7-b0d4-40f6-bc1b-42266a3fe38f"
        },
        "item": {
          "id": "a652b2a3-dbe1-4428-a093-37fd5db23e3e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3e0d5385-b891-47d3-a7a2-f5f5ca3eff06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab1a0eb-ed19-45f9-8e11-9a61ad9cd713",
        "cursor": {
          "ref": "6c180394-2b8e-4887-9921-49f0006cc0eb",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "05448181-e631-4d03-83be-1f57b92cdbca"
        },
        "item": {
          "id": "3ab1a0eb-ed19-45f9-8e11-9a61ad9cd713",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2691fac7-86da-4355-9bde-f8fa54405672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194a1f9a-523f-4104-9330-b200da8a7843",
        "cursor": {
          "ref": "6eba671a-34ba-4b68-a21f-0d27caea5de2",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "93742be0-bf39-4a80-9940-aef58076ab1b"
        },
        "item": {
          "id": "194a1f9a-523f-4104-9330-b200da8a7843",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7370ee24-26fd-4c29-9398-34d72e552473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008f39c9-b67d-47b0-9be7-aeca363dce15",
        "cursor": {
          "ref": "f70b9e4b-2c69-4443-8aaa-80b3f7123832",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b7b9e661-abbb-4179-b675-c648ff232b2f"
        },
        "item": {
          "id": "008f39c9-b67d-47b0-9be7-aeca363dce15",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "79628913-a1a1-4427-a681-638a8568044f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f436d0b-cf98-48a1-bd48-c6b78687b191",
        "cursor": {
          "ref": "e97151b7-3b2f-4df4-ad7c-7831c9113179",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "74c292a8-1853-4e62-8a37-4640a5ff5e13"
        },
        "item": {
          "id": "4f436d0b-cf98-48a1-bd48-c6b78687b191",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "813523c2-6202-4e07-854c-3227b0d29a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a79a7c1-e393-49e5-b12c-d9d4e193b500",
        "cursor": {
          "ref": "783558bd-9443-4d3d-add8-0ada7582d656",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a58ce0a7-14a0-4246-ad43-b9b3faa00b66"
        },
        "item": {
          "id": "4a79a7c1-e393-49e5-b12c-d9d4e193b500",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "91414966-a8ed-4924-aca0-2b3bfc5f68d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98cb8ad-2c8c-4feb-82f8-7aef2f93c7d1",
        "cursor": {
          "ref": "e412d56c-b5f7-4c55-a2a0-b97d15c955e8",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fa32060e-8e4e-49e3-943b-ab1d33afc1b6"
        },
        "item": {
          "id": "c98cb8ad-2c8c-4feb-82f8-7aef2f93c7d1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "da83383b-fc7e-40b3-b78a-884c0d80073a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc2decc-7f84-4872-9b68-7aa63da8b7a7",
        "cursor": {
          "ref": "286a2f17-fe76-4ecd-86eb-01ad9b11fa36",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0b350248-754e-4481-ae0e-6a83d7677c72"
        },
        "item": {
          "id": "6cc2decc-7f84-4872-9b68-7aa63da8b7a7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f04729d3-9c6d-42b0-9f5e-792ad5e31b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a641a00-fdc1-4d8b-a22a-90d07af46f94",
        "cursor": {
          "ref": "11eb24fd-534b-4cec-bc1c-c33b7e685266",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5cc2e055-5d55-4ed1-a9e0-35124c00c1b1"
        },
        "item": {
          "id": "9a641a00-fdc1-4d8b-a22a-90d07af46f94",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "46422386-ccf0-4c44-9196-eccda79ca3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27dbbc44-5e9d-4306-9958-87da297da6ea",
        "cursor": {
          "ref": "d582c302-fe75-44ec-92ec-85864b2cb555",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0f505d29-77ed-4ff6-84f7-c10add0b4d27"
        },
        "item": {
          "id": "27dbbc44-5e9d-4306-9958-87da297da6ea",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cf2582fd-54d0-490d-8e64-9b3729f66ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0c58c1-2b5e-4fe8-8454-5261fc121d36",
        "cursor": {
          "ref": "5b3fc2b4-76b0-4ff4-9d95-96d505bf778c",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "47400898-3f44-460a-9b03-a9494740e1a5"
        },
        "item": {
          "id": "df0c58c1-2b5e-4fe8-8454-5261fc121d36",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2d93da38-7a3e-4dd5-86de-1a81ea0b3d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f430a1-0904-4f9b-903f-b42a8925c18b",
        "cursor": {
          "ref": "2176e91d-7d51-434d-91e4-db0a034cbdae",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "83559ace-4b7f-4541-a56b-55ae6ce2ada1"
        },
        "item": {
          "id": "61f430a1-0904-4f9b-903f-b42a8925c18b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a225d5c6-494b-460d-991a-67bfb0e6af8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b79d352-bef5-4ae4-b128-44e0a382477a",
        "cursor": {
          "ref": "3320067d-915b-4ce3-af68-63b2d0e7c15e",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "80e2906e-858d-4a9d-b049-d64fe32c1ff5"
        },
        "item": {
          "id": "9b79d352-bef5-4ae4-b128-44e0a382477a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ba637328-6fe8-4ee2-a2c3-c90bfb02c348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f67511-414e-4596-90d6-43415da1aacc",
        "cursor": {
          "ref": "0232caa1-d130-4fa3-b9c9-2d34198ea290",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c5d4d453-27dd-4dfb-95dd-6e360beed4cb"
        },
        "item": {
          "id": "26f67511-414e-4596-90d6-43415da1aacc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6ee1e161-bc37-42c8-bcda-5ac0a80c1e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85f64be-a58d-46e2-8e9e-8e5980474493",
        "cursor": {
          "ref": "2f65077a-74f4-4732-a8bd-6684ff735015",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "87f44ca8-0654-412e-baba-5af0f5123269"
        },
        "item": {
          "id": "d85f64be-a58d-46e2-8e9e-8e5980474493",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "27f964d7-6d76-426d-8d1f-2014988da528",
          "status": "Created",
          "code": 201,
          "responseTime": 377,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "0dce9c5f-2f87-4ed2-95eb-758d27b792d6",
        "cursor": {
          "ref": "69d9a717-b57c-436d-8dd6-11997b90a0c3",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "acbcc019-8d50-4506-8fc0-4afa4ba666be"
        },
        "item": {
          "id": "0dce9c5f-2f87-4ed2-95eb-758d27b792d6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "98e390fc-baa2-484f-a765-6b817e4e10d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7fdf6e-b32f-4fa5-880e-7f94051bc15f",
        "cursor": {
          "ref": "d4d000f4-c06a-4ddd-890e-6785aa3f4d63",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d9ba4f22-7153-436c-a9b3-258142459511"
        },
        "item": {
          "id": "ae7fdf6e-b32f-4fa5-880e-7f94051bc15f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9ddc2b42-b5cf-4aec-b297-20bf7bd54622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b8b18e-072d-44f0-8597-f54055240890",
        "cursor": {
          "ref": "173ce001-3ecd-41c6-a97c-e964785758d8",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7ec511a0-2b55-4735-a1b1-51a19b72aee7"
        },
        "item": {
          "id": "76b8b18e-072d-44f0-8597-f54055240890",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8ceb87d6-b114-4522-b9b5-719a418ad21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f783ad-6d36-4232-b8bf-1075d973b55b",
        "cursor": {
          "ref": "791646ad-1d31-4358-a761-904da87edb30",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "422122a9-21e7-4639-8d7d-559b060c545b"
        },
        "item": {
          "id": "c4f783ad-6d36-4232-b8bf-1075d973b55b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0662d824-3e42-4979-aa80-877ce335e1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf0bfaf-cd4c-4a05-a73d-7dc5c145e451",
        "cursor": {
          "ref": "41371cc5-9e03-436f-9fda-5cebcc5a327c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "710e59f8-2362-4c0f-bb83-c10cfcd8b936"
        },
        "item": {
          "id": "bcf0bfaf-cd4c-4a05-a73d-7dc5c145e451",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c4bff2f3-40f4-4bee-83fc-f2ab967bad94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4e8459-dc79-4471-bd57-b04e5ff94b6b",
        "cursor": {
          "ref": "c1df9661-fc26-45ba-b49c-f0c9454cfd6f",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "70443267-3a4b-4d76-8e9d-47e79702c0f6"
        },
        "item": {
          "id": "eb4e8459-dc79-4471-bd57-b04e5ff94b6b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a87369d7-7624-44b0-a6c4-79af4f275778",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "a4abfcba-a00f-4fc9-b721-2b2f88836e13",
        "cursor": {
          "ref": "52d37237-3ead-4620-8360-d6a7918a6f22",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "02e6b7f0-1ee0-497a-8bc5-a883c610b4e7"
        },
        "item": {
          "id": "a4abfcba-a00f-4fc9-b721-2b2f88836e13",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "436a4941-aaee-40d4-a308-9d90d25cba56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee257452-1586-4506-81eb-78b169b66dd5",
        "cursor": {
          "ref": "ea14c3f6-3d14-4351-bf79-d2929901c73d",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ac493d3f-e1a7-4d68-955c-cae49053f828"
        },
        "item": {
          "id": "ee257452-1586-4506-81eb-78b169b66dd5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c88ef6af-329e-43b1-bcc9-0fc2e0ebc11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2058f1c8-c42e-4fd1-bf73-fc9dad9abe21",
        "cursor": {
          "ref": "c3521629-935c-4ba6-81ff-6baa170d5ca9",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8871bf2a-008b-4d01-92d8-465ed4638f8a"
        },
        "item": {
          "id": "2058f1c8-c42e-4fd1-bf73-fc9dad9abe21",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b4fc3d0e-4007-4e91-9626-a4ca2ff31659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92cb00ac-38f6-4401-a55c-4b7a2ac463e8",
        "cursor": {
          "ref": "02e9d516-8e60-4792-b046-6eb6668b14f0",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6deecb14-e5f0-4934-8d0a-393bbe8ba797"
        },
        "item": {
          "id": "92cb00ac-38f6-4401-a55c-4b7a2ac463e8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "43223350-9964-4daf-b431-982eb9992737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cad95a5-a36e-4c0f-b151-6910804a0a73",
        "cursor": {
          "ref": "53538b70-5fc8-4dbc-8bf8-56ba5afd8d69",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "108fd3c8-6f76-477c-94fc-a0bdecab489b"
        },
        "item": {
          "id": "4cad95a5-a36e-4c0f-b151-6910804a0a73",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9d65714d-755a-4357-8f2c-c97ae8e6a124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5dcabf-04bf-49a2-adee-7ea7444dbf59",
        "cursor": {
          "ref": "0809454a-b9a8-47c5-9537-04dba27a7465",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e158f522-5ca0-460e-9110-328f2c14c50c"
        },
        "item": {
          "id": "8e5dcabf-04bf-49a2-adee-7ea7444dbf59",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2221d177-14b6-44ce-a6ef-24bdcc5a93c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fafd1d0-f082-4fd4-950e-d4fa5c3f1f79",
        "cursor": {
          "ref": "fabf871b-df01-4dc1-8016-4f55987f37fa",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ab643690-1080-4d3d-b873-a743aa3f8a7e"
        },
        "item": {
          "id": "3fafd1d0-f082-4fd4-950e-d4fa5c3f1f79",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5e61b416-a7c3-47cc-be1d-ee0e45142432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b699df-1762-41d6-8113-487188516e60",
        "cursor": {
          "ref": "b7a29045-8b63-4846-b5f4-6d163b9c2dcb",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8a7e9443-470a-4518-b914-5755d5c22d8e"
        },
        "item": {
          "id": "b8b699df-1762-41d6-8113-487188516e60",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "07f675ff-b6a2-4db2-a3a9-291943e70b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd16db19-a5c6-4e24-b61d-897f42ed3b1e",
        "cursor": {
          "ref": "16c82ed1-f8b8-4dde-ac17-da57d4f5630a",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "246efeba-5a16-442b-b3c0-3886aa10fd62"
        },
        "item": {
          "id": "cd16db19-a5c6-4e24-b61d-897f42ed3b1e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f0102de6-5ab3-4c8c-970f-852ed4f25436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f561154e-4204-4270-bc67-ebe1b48a862d",
        "cursor": {
          "ref": "44ec7572-2ea8-44c1-b6ce-0614eac34335",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "49aa3339-91b5-470e-8a36-33a8f90efb19"
        },
        "item": {
          "id": "f561154e-4204-4270-bc67-ebe1b48a862d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "bde3b91f-fb69-488a-8abb-3b4dca0e2ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e60880fd-be7a-4584-8969-13d21d02d4d8",
        "cursor": {
          "ref": "6442d003-f116-43f3-b080-638134f4de20",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "87031b94-9f59-4751-9f26-6ec17d4b87f0"
        },
        "item": {
          "id": "e60880fd-be7a-4584-8969-13d21d02d4d8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b362f9ef-4026-4472-a134-ee219a59fa44",
          "status": "Created",
          "code": 201,
          "responseTime": 467,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a121ae6-f49d-4fe9-804d-5330dd4b5a4f",
        "cursor": {
          "ref": "6175a952-597a-4ed0-8a02-2e856805526b",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e7bae646-7763-4cd4-aa5d-f0ccaba1d6a9"
        },
        "item": {
          "id": "3a121ae6-f49d-4fe9-804d-5330dd4b5a4f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2527a505-cba9-4421-a2f9-4839e04f636f",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134e258c-fdaa-41de-b657-58205672b1c5",
        "cursor": {
          "ref": "d736be54-21ae-40fe-a481-4301c229abd6",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "caf4b915-2f3c-437e-b5be-044e883442cf"
        },
        "item": {
          "id": "134e258c-fdaa-41de-b657-58205672b1c5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0345d544-db62-4695-be5c-39c0faabf5a4",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "604c3eb9-b615-4cee-a811-8f542a71e6a2",
        "cursor": {
          "ref": "7f848bfd-19f9-4d53-b8bb-4959ae9e88a5",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3f748471-6321-4c1c-9fd1-060e4168d497"
        },
        "item": {
          "id": "604c3eb9-b615-4cee-a811-8f542a71e6a2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "20234fe1-e890-4a28-82ba-32c7c1caa2a2",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f2a430-eb2d-4c79-a87b-534d286b6708",
        "cursor": {
          "ref": "2debb925-ee12-4caf-83b7-0ce0f4ac9c11",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1f30d40c-cad9-445b-91b6-8ad5a4cbd105"
        },
        "item": {
          "id": "02f2a430-eb2d-4c79-a87b-534d286b6708",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1bf3f9db-2ab8-4a99-b46d-909c296691f5",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "5454fbc9-72ea-493e-ab65-074343824e8f",
        "cursor": {
          "ref": "230b0607-974e-419b-ad2c-5ab9b5aa1c32",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "969bec22-b8fb-4333-bc2c-23bfe5265e71"
        },
        "item": {
          "id": "5454fbc9-72ea-493e-ab65-074343824e8f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "41449abd-aba1-4a55-a128-ed9f09efa9a0",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff84297-8c63-4568-9dde-e1325baec3d2",
        "cursor": {
          "ref": "dbfdf3c5-d501-4efa-9f63-7296e2e701b2",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a9d362be-37e4-4c8c-b366-1b5dfcdc3a5e"
        },
        "item": {
          "id": "cff84297-8c63-4568-9dde-e1325baec3d2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d6cfa4b3-e428-464e-9034-b8591e73ef01",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "cff84297-8c63-4568-9dde-e1325baec3d2",
        "cursor": {
          "ref": "dbfdf3c5-d501-4efa-9f63-7296e2e701b2",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a9d362be-37e4-4c8c-b366-1b5dfcdc3a5e"
        },
        "item": {
          "id": "cff84297-8c63-4568-9dde-e1325baec3d2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d6cfa4b3-e428-464e-9034-b8591e73ef01",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f3982b28-615f-4958-b0b1-06c99d031f63",
        "cursor": {
          "ref": "3bf1e15c-18b3-40c5-96d3-f8dde0a387e6",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5c3ecb4d-3c89-48b7-bc70-031a7dbf2564"
        },
        "item": {
          "id": "f3982b28-615f-4958-b0b1-06c99d031f63",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4cdebbaf-e0fd-46ec-b6ac-48a69eb5d429",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "eec99734-564c-4ac4-9421-c60a55ff0c94",
        "cursor": {
          "ref": "c1f85d1b-0fd9-41e7-9886-af918f391cac",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e711ffc1-afc0-45f2-8f6c-bb4987a1f1c6"
        },
        "item": {
          "id": "eec99734-564c-4ac4-9421-c60a55ff0c94",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4fe40b8c-d20a-4dbb-8342-c8ca59b2a096",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "77039694-6a26-4574-a8ff-c139f6ba740c",
        "cursor": {
          "ref": "f69ceb41-ce00-49da-a4e5-0079387675a4",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "60f14b3d-821e-42a0-90c1-5829bb9b68d1"
        },
        "item": {
          "id": "77039694-6a26-4574-a8ff-c139f6ba740c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8f34b8b8-b92a-45c7-9dbe-36da436d87ee",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "07556094-7329-48a0-9974-a5675973a755",
        "cursor": {
          "ref": "a93bc01f-9fd3-4230-9189-bc009092d7df",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9b6e6884-1b6a-405d-940e-b06b0da9c607"
        },
        "item": {
          "id": "07556094-7329-48a0-9974-a5675973a755",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8434bdc4-0581-4a10-8e34-930ff274d6f5",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ef5b39b2-7274-4bef-bbce-7e3a98d773c0",
        "cursor": {
          "ref": "21a51065-e737-4948-b23d-912b224c975e",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7a233156-b166-40c5-9b50-3118372edae4"
        },
        "item": {
          "id": "ef5b39b2-7274-4bef-bbce-7e3a98d773c0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "04c21f2a-e330-4a7d-a090-ea2a2ca5446c",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "feae0dcf-dd83-4f24-a386-0180c31a51df",
        "cursor": {
          "ref": "b361e07d-de35-4ac2-bd93-0d28535fdf27",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ea074ffc-8616-4657-a126-b1b1a92a3489"
        },
        "item": {
          "id": "feae0dcf-dd83-4f24-a386-0180c31a51df",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bfef3f82-2371-4baa-8216-66851bb606cb",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d385011c-6436-4cdd-ad3a-af84515cc7f0",
        "cursor": {
          "ref": "db8c77e5-b1b2-43d0-90c1-882885d6595f",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "14837a70-56bd-4d2a-85b2-24902d638470"
        },
        "item": {
          "id": "d385011c-6436-4cdd-ad3a-af84515cc7f0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "231691b9-bdef-4603-9162-2e2ab252ad14",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c04313e4-0636-48d1-a38f-1c0409eee86f",
        "cursor": {
          "ref": "ec55758d-4319-41f1-a4fc-1ec7d575c2d2",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7d59cefd-78cc-40da-b3d2-c0a06f8b73d3"
        },
        "item": {
          "id": "c04313e4-0636-48d1-a38f-1c0409eee86f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b2c95a2b-632e-4da3-acc3-cabb6f7d6cae",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "16f333a7-4e2c-4396-9b31-09d0a24a079f",
        "cursor": {
          "ref": "86912d40-0037-40eb-8198-4859c17ec05b",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "674b198a-6158-4413-ab0f-45b34145385e"
        },
        "item": {
          "id": "16f333a7-4e2c-4396-9b31-09d0a24a079f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "12c575ff-b52f-4a49-9591-6b39bd582c96",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e76d439b-bbb8-48ba-b2d5-dd520fee7dbe",
        "cursor": {
          "ref": "7e12d4ee-3db9-4b93-b0a4-d370cc830cbe",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0b222511-7e7b-491e-b243-640a35cf0752"
        },
        "item": {
          "id": "e76d439b-bbb8-48ba-b2d5-dd520fee7dbe",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0cd0c501-d864-4e37-95c6-5445bde3af79",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "414cb161-4968-46b5-bf99-68e6d2355b15",
        "cursor": {
          "ref": "e42e6d79-f959-46df-9f71-83d05ace6b7a",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b7087620-ea4c-4c4e-aa5b-6b76fa0fbcb3"
        },
        "item": {
          "id": "414cb161-4968-46b5-bf99-68e6d2355b15",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3a47d55e-6ab2-4479-9ae3-93814fa85a6f",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "0872f963-2be7-49b1-a3bf-ca5b38c37cb0",
        "cursor": {
          "ref": "63890405-3beb-4122-81cf-46924963d6e2",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0c6ef89c-2196-44b3-a8db-15a9b6bee2b8"
        },
        "item": {
          "id": "0872f963-2be7-49b1-a3bf-ca5b38c37cb0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fd0ab479-315d-4e35-b861-839143e01bb4",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e411f651-1232-4b89-8723-666ab8b0593f",
        "cursor": {
          "ref": "7b381264-0b99-4093-ad9a-611148607ab2",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "79b2276b-2033-48f2-9454-891ce78a76b7"
        },
        "item": {
          "id": "e411f651-1232-4b89-8723-666ab8b0593f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ec33bb62-a671-42bb-9a5e-952c704ccd9b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f31fe7d8-5d79-443c-841d-9970fa5cd725",
        "cursor": {
          "ref": "ba731832-a002-4388-8872-d434cd33b8c0",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "407a39f2-6a59-4cf9-8768-db634952be65"
        },
        "item": {
          "id": "f31fe7d8-5d79-443c-841d-9970fa5cd725",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9d6c73d3-b100-46dc-ad43-0cde94574744",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "a006506f-25a2-4521-8c92-29771ea774a1",
        "cursor": {
          "ref": "37b2705c-b9a9-4c95-86bb-84557fd4222c",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "73123a38-b918-40c8-80ef-95a467dcd482"
        },
        "item": {
          "id": "a006506f-25a2-4521-8c92-29771ea774a1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8b2ae317-86ce-4128-a4ac-0e053e6334b0",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "2c69e5b9-61fc-4aac-8327-b516027895c1",
        "cursor": {
          "ref": "d7e102e2-00ab-422d-9149-76f943829e06",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "89f1a9a8-8a26-468a-8976-0f83d6c74507"
        },
        "item": {
          "id": "2c69e5b9-61fc-4aac-8327-b516027895c1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2f27c20a-e6b1-4416-9681-884a8c975da1",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "3ad44e29-95af-4c05-871f-5d78adfb2ef1",
        "cursor": {
          "ref": "6c739598-cd3b-404f-9e15-e7156f1c6099",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ccf17feb-ed48-4ea9-b93c-6a0a941b79b0"
        },
        "item": {
          "id": "3ad44e29-95af-4c05-871f-5d78adfb2ef1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9db8e4d0-3d67-4759-a0c5-20d47553453e",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c491c79e-c7e9-4a68-8381-11e564bf3d5f",
        "cursor": {
          "ref": "454fa2ab-3591-4aca-952c-bcdea416b222",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e2340d6f-b78d-4b9e-ab84-42b7131b6ece"
        },
        "item": {
          "id": "c491c79e-c7e9-4a68-8381-11e564bf3d5f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "91e2cf8e-6141-46ea-8561-bf1edf4dd69c",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "284a8a79-8062-4524-b03d-42fd31dfe2bc",
        "cursor": {
          "ref": "23597710-d362-4cc1-991e-a5bd2ff6b7f2",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "733004d3-b21d-4747-8f88-e1627a12306a"
        },
        "item": {
          "id": "284a8a79-8062-4524-b03d-42fd31dfe2bc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c1fcbb5c-348d-4290-bf3f-6594e726c4a0",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "8914ac34-e027-480e-9911-88a8e6bd4809",
        "cursor": {
          "ref": "bc66925c-a09c-4f7e-bd02-58944a35ef66",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ad14a539-97ed-4917-9881-2512a981ab9a"
        },
        "item": {
          "id": "8914ac34-e027-480e-9911-88a8e6bd4809",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ebdda12c-812a-4dad-9bfd-ce21e81c4642",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "eacc2034-e8d4-4fa1-aead-4b1fdf816011",
        "cursor": {
          "ref": "60f38106-5d07-4dcb-a7a0-08638e6356c9",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8785fa63-2d2a-4af2-9410-e6aaa8bcb0f4"
        },
        "item": {
          "id": "eacc2034-e8d4-4fa1-aead-4b1fdf816011",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c14f2d73-abf4-4539-a3e6-f3db0d1f8eb8",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "8e583432-e6b4-418b-898b-1d2e158d6de5",
        "cursor": {
          "ref": "c94f0f4c-ae65-4fc7-875d-0610c5cdd96d",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "aa9d46d2-f6a7-4286-a8d9-31b199c5aa80"
        },
        "item": {
          "id": "8e583432-e6b4-418b-898b-1d2e158d6de5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c7c7430e-7804-49ff-9901-5a04cf6f43b5",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "014ac8f8-4d78-45f1-8b3c-391b35f89e29",
        "cursor": {
          "ref": "0bf95799-bedf-4869-ae02-c743799d3088",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e844991d-7553-4f5b-8b55-6791cd2ac644"
        },
        "item": {
          "id": "014ac8f8-4d78-45f1-8b3c-391b35f89e29",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "153f5523-8c71-4928-b21a-ea68a695ae3a",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "67ea91ed-477e-420c-bd4f-f0feee33955b",
        "cursor": {
          "ref": "b8e66eca-d944-4e9d-af3a-599da3d37166",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "eb5a2694-fa4c-4440-b5b6-d5e18f603d9d"
        },
        "item": {
          "id": "67ea91ed-477e-420c-bd4f-f0feee33955b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dbd92875-d818-4dab-a5ef-a733b1849aac",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "64f49ca0-4b9a-4469-b4c4-3ec04cf2f64b",
        "cursor": {
          "ref": "c0ac376f-57be-4133-93a1-1b8f748991f8",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "326f031f-78c4-41d5-bbf4-31996a25139f"
        },
        "item": {
          "id": "64f49ca0-4b9a-4469-b4c4-3ec04cf2f64b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d2f36f79-122d-4610-b0ab-2e72f9204df8",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "7685dff7-071d-4114-88bb-ea7bb1dd71ec",
        "cursor": {
          "ref": "1ca46f0a-3169-4087-b8ba-fbe536413d35",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "16d5ce04-80a6-42d5-95f5-0f51a67aa44c"
        },
        "item": {
          "id": "7685dff7-071d-4114-88bb-ea7bb1dd71ec",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "56f69453-901f-4c89-b312-aa911e8f98b1",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "009cc346-ab7a-46cc-b4bd-32de3ebab6a6",
        "cursor": {
          "ref": "9b6b96fa-b2af-411f-9f5d-d1624391afb0",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2815c682-69ac-459c-9182-ef145789a8c7"
        },
        "item": {
          "id": "009cc346-ab7a-46cc-b4bd-32de3ebab6a6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "897fc175-3d19-4024-b3ed-be5691c3a3af",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b2964042-542a-432f-b945-b6f1fa27ea48",
        "cursor": {
          "ref": "14dff83d-e5d6-4804-ab3d-7cea4fe22eb6",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4302b35c-7a0f-4aba-a6b9-d941529dc24c"
        },
        "item": {
          "id": "b2964042-542a-432f-b945-b6f1fa27ea48",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cd89aec3-dd0b-407d-81d4-cc100ceeff54",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "20b5376c-f3eb-446b-acf9-9b66db56e28a",
        "cursor": {
          "ref": "46dbddb0-3135-4997-bb8c-6f168a42e7fe",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "346ace73-8347-4422-be6f-06cda6da1ce0"
        },
        "item": {
          "id": "20b5376c-f3eb-446b-acf9-9b66db56e28a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4f0bb469-7925-4f1d-a4e3-333c88f0a723",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "951fefe7-e493-4fbe-a785-5f0a2b2901e4",
        "cursor": {
          "ref": "79a74364-7a6b-415d-93c0-8e5c2725440a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fc1ff984-36d5-4837-88bc-51363845262d"
        },
        "item": {
          "id": "951fefe7-e493-4fbe-a785-5f0a2b2901e4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6f939535-c87d-4cc3-98df-62d2a0e5cef4",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3951fffb-2b30-4db7-a989-9bd910de46d1",
        "cursor": {
          "ref": "6f28f54b-2053-47f0-a67d-740239765eb3",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2ecddffe-02ee-4158-9946-b4e1bc3edc28"
        },
        "item": {
          "id": "3951fffb-2b30-4db7-a989-9bd910de46d1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8adc2310-ab91-4270-b2e6-70a169a8b442",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "fb85be74-8ae1-44e4-986d-21d6a89a5b9d",
        "cursor": {
          "ref": "e20f7f05-2026-4a02-996c-4409c7925e86",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "207e4a30-3c44-4fa1-a153-7dee41a09deb"
        },
        "item": {
          "id": "fb85be74-8ae1-44e4-986d-21d6a89a5b9d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "dbf8cbd9-b410-4d2b-bbf0-30fbb8a94499",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bc5bc5-0d5c-4e55-a8d0-91126117e965",
        "cursor": {
          "ref": "0692788e-7448-40c4-b68d-c01190aa394a",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2be24bf5-22be-4598-872f-25218742872f"
        },
        "item": {
          "id": "60bc5bc5-0d5c-4e55-a8d0-91126117e965",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d576a76d-e155-4355-a57f-35bc7f6b4ad0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 77,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e51b14-9300-402a-ad00-da1d2f3ebabb",
        "cursor": {
          "ref": "df9cfaf9-36c0-4fa7-904b-5a78b42d5870",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0e19ec8b-20cc-418c-a722-9a36d2523bc6"
        },
        "item": {
          "id": "39e51b14-9300-402a-ad00-da1d2f3ebabb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "db97923f-89d7-4146-ab5f-0436ba02f3dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e51b14-9300-402a-ad00-da1d2f3ebabb",
        "cursor": {
          "ref": "df9cfaf9-36c0-4fa7-904b-5a78b42d5870",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0e19ec8b-20cc-418c-a722-9a36d2523bc6"
        },
        "item": {
          "id": "39e51b14-9300-402a-ad00-da1d2f3ebabb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "db97923f-89d7-4146-ab5f-0436ba02f3dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a148e98-4c18-41ca-a21e-7bd77c196248",
        "cursor": {
          "ref": "205e732a-f4ce-4bf0-89ae-022c7177232b",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "63db73ee-2cea-48e0-9a83-67c8efb25c8a"
        },
        "item": {
          "id": "4a148e98-4c18-41ca-a21e-7bd77c196248",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "377f2988-907e-42ee-a205-7b20067c84f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5c9c16-983a-4483-9ddf-4d96a3be1d32",
        "cursor": {
          "ref": "da7bb57c-df09-4e6c-82c5-bdb89564574d",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fca354a9-f497-4068-9c00-541b9c87570b"
        },
        "item": {
          "id": "bd5c9c16-983a-4483-9ddf-4d96a3be1d32",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fa9d3412-4305-44da-b4f5-5a7357f267d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e115968c-67d7-4b3b-b24c-11caeec09631",
        "cursor": {
          "ref": "8ef15a9e-7e9c-46eb-ade6-d80d479bf763",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5f1881c2-9756-41dd-b39e-9200c05e8d15"
        },
        "item": {
          "id": "e115968c-67d7-4b3b-b24c-11caeec09631",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "392b7f4e-e8b6-4155-9aa9-e5613ddb8d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25faa35-b954-4d7d-a5f2-1058ce678d7f",
        "cursor": {
          "ref": "40f928fe-57cb-427d-ab0a-36378b103d6d",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "441fb830-dc01-4d67-846c-650089b3afb7"
        },
        "item": {
          "id": "b25faa35-b954-4d7d-a5f2-1058ce678d7f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "51848008-18bf-4e2d-b651-c906eb4dd5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badb59bc-0033-4550-a017-f710630220b0",
        "cursor": {
          "ref": "4128615a-1a26-4a7c-8c90-bcef191b4ea6",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8f3d5147-ab97-4205-8573-3fd1e5b98c67"
        },
        "item": {
          "id": "badb59bc-0033-4550-a017-f710630220b0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e7691e14-0c52-4b90-aaaa-ba5a5bc4fbea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e3afd1-0dae-4543-b805-132aa0702fe4",
        "cursor": {
          "ref": "58f60fe3-a642-451b-96ee-fc24c952c2ff",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4144334c-5f81-491c-8207-6b77802eec24"
        },
        "item": {
          "id": "c5e3afd1-0dae-4543-b805-132aa0702fe4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0c4933b7-988e-43ea-ba87-38d8a59298fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 688,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c83935-de54-4c19-abc4-ca6e69f81d6f",
        "cursor": {
          "ref": "9be38abf-0bd4-49b8-a553-ad369f36adcb",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "776de6a5-c8b8-44c3-9e22-55852d211d3c"
        },
        "item": {
          "id": "c0c83935-de54-4c19-abc4-ca6e69f81d6f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f1267ee6-5316-4e4a-b91c-3c2b0470144f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38415c8-8d1e-4d65-a079-e5944045a90a",
        "cursor": {
          "ref": "60d563ec-aa49-4e0f-9951-cb9d88c94f4f",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "67f7872f-3e27-47fb-af76-cc62b6bddf3c"
        },
        "item": {
          "id": "e38415c8-8d1e-4d65-a079-e5944045a90a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cd80a1e8-e533-4ce2-a9a4-c8c297f5e4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18059c3f-7a8c-47f3-a818-754103c09142",
        "cursor": {
          "ref": "54edc689-e78d-4cb9-9c2c-0fa044dd6d04",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "298fdbde-38c9-4f9d-b517-825408e8b3f2"
        },
        "item": {
          "id": "18059c3f-7a8c-47f3-a818-754103c09142",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d2f8b4a3-d649-49f5-a20e-d76147e0f4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed64a926-614d-4bc9-b7ac-d2e92ec37bdb",
        "cursor": {
          "ref": "018f594e-0e61-4b97-aabc-e6ff58e13752",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4f31e511-761e-49d7-9796-fe22a7e042f0"
        },
        "item": {
          "id": "ed64a926-614d-4bc9-b7ac-d2e92ec37bdb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d14bca58-a88d-4660-8a04-659c694c6485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e157f63-3e7f-44bd-9335-abee11071807",
        "cursor": {
          "ref": "f30c1fb1-fb04-43d1-9322-a49ae4ad5148",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4b123011-b87c-4ef4-8312-9596c2a538ee"
        },
        "item": {
          "id": "8e157f63-3e7f-44bd-9335-abee11071807",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "356028f2-df3e-46d6-8766-ac0dd400cbab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c29b6c-3438-4f0c-b22f-25c5ea7ccac6",
        "cursor": {
          "ref": "7fe1fa1b-0c1e-4b55-8b1f-7acbade99c21",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "004d3b5e-6914-42fd-9dee-cff7ec7973f3"
        },
        "item": {
          "id": "11c29b6c-3438-4f0c-b22f-25c5ea7ccac6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f4bf99fa-8472-4c06-b113-1f107932557f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5098438-e1d9-426f-8d42-106df0e31e96",
        "cursor": {
          "ref": "fdef07a5-6a11-44fd-a334-b54a65d3de52",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0e384f84-eeaa-48f2-8131-1572166314bd"
        },
        "item": {
          "id": "d5098438-e1d9-426f-8d42-106df0e31e96",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fcc86390-e57e-4e6d-b331-f3be759033ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3abba6fd-34ee-4061-889a-5a1655025cd6",
        "cursor": {
          "ref": "262961de-6b68-4c09-8251-ccf0dc0e17f0",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fe343c80-23b8-44fe-a9e5-74325d807690"
        },
        "item": {
          "id": "3abba6fd-34ee-4061-889a-5a1655025cd6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "651c69a7-a0c5-4226-a5df-4d85187d5e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd03c1f-cc0d-4fb1-b82e-f16db1a7c4b9",
        "cursor": {
          "ref": "1f5bdff7-526a-473b-8b09-d4e92545c655",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a52066ea-810d-45eb-ada8-e5285446eb03"
        },
        "item": {
          "id": "9bd03c1f-cc0d-4fb1-b82e-f16db1a7c4b9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "69ab953b-b1bb-42c0-bf85-3776dc86ec8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16403c94-eeb0-4c14-8d1f-5391d423de3c",
        "cursor": {
          "ref": "2a6bba00-10ee-498a-a4e1-83c8d92b12e8",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ad7c7389-1de9-453f-bb53-c9a644f50d0d"
        },
        "item": {
          "id": "16403c94-eeb0-4c14-8d1f-5391d423de3c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c2372653-cd1d-4372-a3ae-6070b2f91e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e1d09c-3a3a-4aed-af98-1975104fb6b1",
        "cursor": {
          "ref": "ac10ec08-f0ab-4e22-8658-6524aa18fe03",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "118270fd-2ee1-4b03-9044-448db235d56e"
        },
        "item": {
          "id": "77e1d09c-3a3a-4aed-af98-1975104fb6b1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b3823177-a08b-4678-94b0-deec8e330dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 365,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fd0bd7-d814-4aa6-9415-e603e299c869",
        "cursor": {
          "ref": "ca44e260-ecd7-4ece-a874-55e18dca03b6",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d2580b92-069a-46b3-89e4-a5f43b939e29"
        },
        "item": {
          "id": "38fd0bd7-d814-4aa6-9415-e603e299c869",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7402ec3c-c89a-4e67-ae91-a087c73cfa42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb4b8bc-f497-46b3-8166-68f5e654f736",
        "cursor": {
          "ref": "945b0df1-a29f-494b-9f14-0e7c2f687505",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cef21593-dcfb-48d1-bd3a-b858f3a4a0ed"
        },
        "item": {
          "id": "cfb4b8bc-f497-46b3-8166-68f5e654f736",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "35d673ac-646c-45f7-aa13-c66bfb42dcad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abb4c87-aaa6-4eda-a30e-e2f1c155e73e",
        "cursor": {
          "ref": "6fc4a188-1a02-430a-b3c0-354158c3ed89",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a354a9b5-1189-42be-b2ab-abe4409a5a0e"
        },
        "item": {
          "id": "4abb4c87-aaa6-4eda-a30e-e2f1c155e73e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b25b8592-43e5-4179-a149-76ab85b4b956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216ee2bc-7082-4d66-99bb-0c61d16c3bd3",
        "cursor": {
          "ref": "37f8dd8f-907f-4306-98b3-1192e963668d",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8da4edb5-4bd2-4cba-8e6d-5eacf5c22099"
        },
        "item": {
          "id": "216ee2bc-7082-4d66-99bb-0c61d16c3bd3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5efa2c2c-a0fb-4f45-a752-737167e61e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07da083-63ad-4506-96d6-39295fc14097",
        "cursor": {
          "ref": "e4fcb6ec-a8df-44c5-bda5-238fa750a4ca",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6bb59b36-5965-44b8-8bdd-35c41ce629ea"
        },
        "item": {
          "id": "c07da083-63ad-4506-96d6-39295fc14097",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cfa47574-f175-4940-911d-f9cf795610d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8be58c9-0976-4a8a-acb7-39c025533c79",
        "cursor": {
          "ref": "bf3f8c34-549e-4372-8128-bcf02d22773e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b07191be-d58e-4dd3-928b-228d39943869"
        },
        "item": {
          "id": "f8be58c9-0976-4a8a-acb7-39c025533c79",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "dcd2e1c7-42a2-4c70-9afe-8c69d5764879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4ef1a9-d868-4673-944b-c80f35a81d2d",
        "cursor": {
          "ref": "82a382a5-0d6c-4b95-a111-fd913344205b",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3a3e1655-b14a-4ce0-a4a1-88b6ebfd1e27"
        },
        "item": {
          "id": "0a4ef1a9-d868-4673-944b-c80f35a81d2d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "336813ee-1695-4218-8caf-a423428ee705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f9908d-56ad-4ee8-9d97-04f9a88dc946",
        "cursor": {
          "ref": "da64d570-5cfc-4666-8d8a-62e860613e6d",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1e97f9fe-f3d8-4d8c-961f-c6ca853b3b4a"
        },
        "item": {
          "id": "f0f9908d-56ad-4ee8-9d97-04f9a88dc946",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c6a08ab1-a867-4535-83fc-b90824ee4cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab83465-ec9b-447d-94b5-a22b72c196e9",
        "cursor": {
          "ref": "76915b83-72c1-456e-aecb-9c06836e08cb",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1b8d0768-cb4f-4cac-886f-45f3a2d47c59"
        },
        "item": {
          "id": "dab83465-ec9b-447d-94b5-a22b72c196e9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3df1b196-52cb-43dd-91d7-db9a5d5b655c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd310da-eb0c-43bf-9349-90913ec8c901",
        "cursor": {
          "ref": "f80114ef-5453-464b-947d-5f9770c1c446",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2f787520-a3e4-48db-8517-16826cd633a7"
        },
        "item": {
          "id": "4fd310da-eb0c-43bf-9349-90913ec8c901",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "873f9318-a1ff-42fe-a148-3b8edaf0db10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4b8657-4c49-4340-97d2-73555ce8ef4a",
        "cursor": {
          "ref": "fdfa3e1f-b750-4291-aac6-f28003fa4828",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "22772601-c81d-4db9-a215-3acf8e974661"
        },
        "item": {
          "id": "6e4b8657-4c49-4340-97d2-73555ce8ef4a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3cd70df7-a2f6-4ded-b130-2170ce71b9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72f1ead-895c-46ab-b90f-3d88e9ff53a4",
        "cursor": {
          "ref": "76c7ab0e-25ac-4ac5-b10a-ca16138892e4",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "568a2b13-54c7-4df2-8d81-b074c34237c6"
        },
        "item": {
          "id": "f72f1ead-895c-46ab-b90f-3d88e9ff53a4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "25ae03fb-ef74-4232-9d37-aed9eb1052b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2980a5e4-cb09-47a5-881a-c6ce8baa244a",
        "cursor": {
          "ref": "9e32b7ac-d463-4e05-b027-ee5cb9cd6e50",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "829cde5f-65c3-49d9-bc5a-15013a9fd5cb"
        },
        "item": {
          "id": "2980a5e4-cb09-47a5-881a-c6ce8baa244a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "096e974a-efcd-4a72-9423-04f16a04cb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c4e44a-6526-48cb-beb3-cb09eb951edb",
        "cursor": {
          "ref": "cc012e3f-4321-4e2c-9e48-e10b90d08b0e",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7c860898-d9b6-4194-9399-987749d06b97"
        },
        "item": {
          "id": "c8c4e44a-6526-48cb-beb3-cb09eb951edb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c68048a3-24fb-4054-9196-eaa3fa1506b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16c6dec-ca09-41b8-8fd7-06ec8f29354e",
        "cursor": {
          "ref": "ddbb219a-94ca-4f84-8801-329f63491a58",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e5c94f00-dff1-491c-bfe5-d198d89c14b9"
        },
        "item": {
          "id": "d16c6dec-ca09-41b8-8fd7-06ec8f29354e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d100285a-8f05-4b9e-8c2a-fe0c83762cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 510,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551f2caa-5b7e-4486-a134-f6d31e751aac",
        "cursor": {
          "ref": "eb051229-9018-4482-86d6-d3ba7395a5df",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f4e11078-b5c6-413a-8265-1f53e1399069"
        },
        "item": {
          "id": "551f2caa-5b7e-4486-a134-f6d31e751aac",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "917120ee-29e7-4870-a897-5cd2ab3f6e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63cce267-bcaa-4679-91ac-674a969da5ae",
        "cursor": {
          "ref": "9ec32cd1-e33d-4325-b09a-6a46f6511cda",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "00017399-257e-4706-ab20-9c6dbc7e8d1d"
        },
        "item": {
          "id": "63cce267-bcaa-4679-91ac-674a969da5ae",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7c18feaf-390f-41e6-8059-53d7444c7bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06435d1d-fcb9-4523-b0d5-75a309befc0f",
        "cursor": {
          "ref": "f7dc1cb9-b970-43fd-8588-b8b21b8d6135",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "877094b8-3a4a-40fb-bd99-d52e2609d8cf"
        },
        "item": {
          "id": "06435d1d-fcb9-4523-b0d5-75a309befc0f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cf25499f-b70e-40af-a233-ad6036ebd631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915d8dbe-981c-46a5-aad6-b30b4b93c02a",
        "cursor": {
          "ref": "4ea476b1-ec43-4208-8b5b-a62ea115e1f2",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5bfa10a2-437d-473b-a0a0-6392f6a3be5d"
        },
        "item": {
          "id": "915d8dbe-981c-46a5-aad6-b30b4b93c02a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0f4690d0-9473-4d20-95a7-4d30bf379ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b4d6a4-a38f-4b43-945e-9af034bdc0d9",
        "cursor": {
          "ref": "0139e42c-db2a-4a7e-b610-aba2b9676817",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c1675733-c300-4346-b024-c414af13283c"
        },
        "item": {
          "id": "d9b4d6a4-a38f-4b43-945e-9af034bdc0d9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "77b1fc2b-81a6-4f93-b252-412854567cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6faa54d6-8d8c-4d57-aafd-f022b75ef3e7",
        "cursor": {
          "ref": "a95a46b8-6dab-4dde-aea6-3a952ce2254c",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6650ccaa-053a-4653-973b-c857bcdd4b2a"
        },
        "item": {
          "id": "6faa54d6-8d8c-4d57-aafd-f022b75ef3e7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f02adb0b-c78b-4dd4-8486-5f75ebe9f0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f93d16-952b-47e0-a24b-6abfe9003d4b",
        "cursor": {
          "ref": "e5a40d37-aeeb-475a-b82c-4ed34fddbb18",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5ebaee51-3599-4040-9566-0189b03cc802"
        },
        "item": {
          "id": "f5f93d16-952b-47e0-a24b-6abfe9003d4b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "acbdc404-209d-4bc1-b153-8b867f6d74a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9afc54-409b-4591-944d-8bfc9a8323ec",
        "cursor": {
          "ref": "5c7e2e7c-21e8-45bc-99a3-ce086783c13b",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cacce04a-1ce6-403a-9b94-8bdb2a02a038"
        },
        "item": {
          "id": "2d9afc54-409b-4591-944d-8bfc9a8323ec",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e881454c-220a-41c4-9403-dc32b1a320e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba76372-b3bb-4e0f-8243-7fbe52e20919",
        "cursor": {
          "ref": "4f1d3385-8ed9-47c1-b4c8-0824edc24d38",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b90a828d-b152-4759-b714-d92cc46b7c55"
        },
        "item": {
          "id": "8ba76372-b3bb-4e0f-8243-7fbe52e20919",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e341ed19-1067-4e4d-8054-5932d6cdccec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45ed6d1-21b6-4eb7-a541-30913bf43207",
        "cursor": {
          "ref": "15a77514-cedc-4e14-9c0c-7d629fe810b6",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bb3abd97-2e12-4dfc-ba34-4d3bcd3106ee"
        },
        "item": {
          "id": "d45ed6d1-21b6-4eb7-a541-30913bf43207",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "880efddd-267c-40e8-bf6e-4803035ffc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27fcc4d-4fc4-476c-ab6c-8c05404b41b7",
        "cursor": {
          "ref": "4f549cdf-ca39-4255-8b9c-a05202411756",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6f6f2179-9390-4c90-bab7-cc650e572244"
        },
        "item": {
          "id": "c27fcc4d-4fc4-476c-ab6c-8c05404b41b7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b176286f-f228-40ba-97d9-4632ebd82463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52541f6-b11f-4768-88ea-dc52b09a4fed",
        "cursor": {
          "ref": "c9a88540-f765-4f3d-b4fd-6c56ae8deffd",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6708ddf7-d299-4aa8-a4a9-abaefa05a988"
        },
        "item": {
          "id": "c52541f6-b11f-4768-88ea-dc52b09a4fed",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c342539f-8c5f-4877-bdcd-f51ee2603dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e962395-9c1c-46eb-be55-caf27e20166c",
        "cursor": {
          "ref": "9951c521-221e-4072-a29d-9127b80c8ba4",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2f5c48fb-dc4b-437d-bdb7-cc20eac2ce4d"
        },
        "item": {
          "id": "8e962395-9c1c-46eb-be55-caf27e20166c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7eb720fb-f729-4b88-b15c-76d3737a1ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfb6766-4857-441e-a20e-91d359dd6284",
        "cursor": {
          "ref": "c31d04ef-e2e4-461d-82e3-e4a6a04fbf22",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "96ac0247-00f2-4dec-931e-c595a98eaeef"
        },
        "item": {
          "id": "ecfb6766-4857-441e-a20e-91d359dd6284",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d06988d2-2b11-4249-99e4-c82370a2faab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a993882-e6db-4f85-9c7b-98c83a3e5629",
        "cursor": {
          "ref": "31454481-9137-47ff-ac5a-d6fb3aea00b1",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8fdeea7e-45d4-4aa0-8267-ddd769ebb94a"
        },
        "item": {
          "id": "4a993882-e6db-4f85-9c7b-98c83a3e5629",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "31c4dfca-95bd-4c0a-a220-9069d07afb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8339c7-856b-4104-aa4c-e6e566c45c3d",
        "cursor": {
          "ref": "c960bc64-d2c3-4468-8516-1bb209ca20e4",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d1b20a15-060e-4f8d-9478-fe8f9520a211"
        },
        "item": {
          "id": "5b8339c7-856b-4104-aa4c-e6e566c45c3d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "78687e04-3ae5-427d-90a3-94a7bde96837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ed08f1-2e4d-4fc9-a44f-69193c2ca25e",
        "cursor": {
          "ref": "67a9129a-996a-407c-bfb4-4cc2095bd5fa",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "141f762f-c530-416b-ba56-4008ef329adc"
        },
        "item": {
          "id": "f2ed08f1-2e4d-4fc9-a44f-69193c2ca25e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "84f08bcf-a8be-471d-8638-f3c8bf133ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee06c8d-463d-40bd-9e5c-7cccc9fc741f",
        "cursor": {
          "ref": "ada31946-771a-4c6b-8658-d75392e8d1f1",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e9bc2393-206c-4883-9d11-8a9200b274da"
        },
        "item": {
          "id": "fee06c8d-463d-40bd-9e5c-7cccc9fc741f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "45174cf8-fd10-4717-88da-399e7fee81e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 383,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16689747-6943-44ec-aedc-fdd674c5f72c",
        "cursor": {
          "ref": "470bb7b7-e91a-410b-a1c4-3106d40ea67c",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ea34491a-d186-4e8d-9418-05009067e14d"
        },
        "item": {
          "id": "16689747-6943-44ec-aedc-fdd674c5f72c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1cb83a48-0861-40ad-984f-dcbb0287c8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadb143c-e040-49c9-bb9a-de72655e06d4",
        "cursor": {
          "ref": "45bca5b1-5748-4c62-8365-274a1ae6fc52",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "dd9c8553-0c47-4ebc-ad48-cfab4eaf3761"
        },
        "item": {
          "id": "cadb143c-e040-49c9-bb9a-de72655e06d4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4e15bed9-1fe4-4d57-9756-61e911ec05af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ff12e3-941f-4b42-9d88-7c10e782c150",
        "cursor": {
          "ref": "a6de8f5d-48e6-4e9e-9b18-7a32c06fd9e1",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "56afd61c-0e2e-4a32-9b6a-657edff61038"
        },
        "item": {
          "id": "14ff12e3-941f-4b42-9d88-7c10e782c150",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "09d88ae8-1da2-4d0d-b774-01851dcfd14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae7549f-1164-44cf-8994-0bb48c2276bf",
        "cursor": {
          "ref": "87d1411f-67e3-426a-bcb2-3e6d4e0ecc51",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cea7ff06-2fc2-453b-b25b-88be260c6d94"
        },
        "item": {
          "id": "9ae7549f-1164-44cf-8994-0bb48c2276bf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e79b1cfc-25c9-4169-bcca-e7036e400609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abab84d0-e14f-4228-b51b-27e6e33032ac",
        "cursor": {
          "ref": "78f98c35-8712-4ebe-9bbe-3ac0cacfbebb",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "eeb615a4-16c9-43a6-96b9-c02202a852e8"
        },
        "item": {
          "id": "abab84d0-e14f-4228-b51b-27e6e33032ac",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6eeeac55-9d64-462b-9a13-e9f6b5dc6d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee1208d-3c22-4335-8b93-8ba78ba32e3d",
        "cursor": {
          "ref": "c1ff58d7-77dd-41ee-be92-d9a09e0b7928",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b37bd105-b2f8-440c-8e55-01b06852a306"
        },
        "item": {
          "id": "eee1208d-3c22-4335-8b93-8ba78ba32e3d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f8f20e1b-1bf1-452b-9b3b-001d38377868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cb89da-2429-42c2-855f-409afffb71cc",
        "cursor": {
          "ref": "38fedffc-6b41-422d-af23-814c9c0ca3b3",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bad00158-9fc5-46d6-83ee-2f26597e7752"
        },
        "item": {
          "id": "56cb89da-2429-42c2-855f-409afffb71cc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "85d780ba-6e91-4880-8dac-564a05a40384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef42fe3-58ec-45e9-9cde-4581be095249",
        "cursor": {
          "ref": "fff328da-d483-4ee1-81da-233630a92fb0",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "28d31083-21b3-434f-bb17-1b8fa25a1f97"
        },
        "item": {
          "id": "0ef42fe3-58ec-45e9-9cde-4581be095249",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9a895fa4-75a0-4bcc-9571-74b8ae883d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c425624e-ba42-4bdc-95d4-505dc70bab47",
        "cursor": {
          "ref": "78a32b76-ee1e-49ef-b658-712e7e6c4fb6",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d1475e39-8166-4f19-8a9b-54023ee47768"
        },
        "item": {
          "id": "c425624e-ba42-4bdc-95d4-505dc70bab47",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ef6ac685-8a62-4a0d-9383-b9b3d954e8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2b105d-f638-4e5b-9c47-5a68fa242daf",
        "cursor": {
          "ref": "6a6cb5d5-5e64-40c4-bbad-748b06221c14",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cbb0cb63-3c48-4e68-896f-4df7a8cf737b"
        },
        "item": {
          "id": "ff2b105d-f638-4e5b-9c47-5a68fa242daf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7dcad182-08f4-47a8-a103-a4220959507e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673bd227-c9f7-485a-aac5-b9a9ec50d71f",
        "cursor": {
          "ref": "cf09958a-f7a9-4d1e-a801-c6dd0c6bb227",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c5a094da-cef6-4f69-997e-d3f508fc1cd9"
        },
        "item": {
          "id": "673bd227-c9f7-485a-aac5-b9a9ec50d71f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c3796b7d-1cbd-43ca-bf48-f3531d7c0874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1590dad7-e995-413c-a770-7d74e29db463",
        "cursor": {
          "ref": "157befb8-33b8-47cd-863f-4444b66d4f28",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5072a042-250e-4657-8d81-4886a85f202d"
        },
        "item": {
          "id": "1590dad7-e995-413c-a770-7d74e29db463",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "44dc9c0a-257e-42a6-9ea6-ab39869fe398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa05d7b3-0969-4a04-a1b0-76948286b035",
        "cursor": {
          "ref": "6ac05c8c-8077-4080-b708-3ce65c6170a8",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "da9c1bc2-4da7-4d11-bc3b-29306d74b017"
        },
        "item": {
          "id": "fa05d7b3-0969-4a04-a1b0-76948286b035",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a8202fe2-0468-4782-8ae3-7104a1d04672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6b3710-d19a-4d3d-ade1-ab2c56e9d36c",
        "cursor": {
          "ref": "002aea80-389d-4bd9-afff-94e8cb4cd326",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "48a55903-511a-4222-b66b-f0d7f7cf24d2"
        },
        "item": {
          "id": "ac6b3710-d19a-4d3d-ade1-ab2c56e9d36c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4764b668-142a-49fe-a8dd-01cc7a866134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256425ef-2d4f-4523-90cf-713a12e64755",
        "cursor": {
          "ref": "e6eae956-0fde-4dc9-bf8d-c64541cfb30e",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6245c674-446b-4021-b55a-767b023866e6"
        },
        "item": {
          "id": "256425ef-2d4f-4523-90cf-713a12e64755",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "91bd37b4-6e5f-4682-bedf-996ba7264a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84e3f9b-b643-47c9-8456-a937957bf6a1",
        "cursor": {
          "ref": "090ba545-98ed-4296-ba9b-e9a21ca90fdc",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3647da92-2b55-44e3-b5c7-7934197ff61b"
        },
        "item": {
          "id": "d84e3f9b-b643-47c9-8456-a937957bf6a1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "054b1819-df95-45a4-9d3b-7be7229ecd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43eb86d0-f9db-4ce6-91b7-482fd432099f",
        "cursor": {
          "ref": "03bb1ae1-72c0-4557-8832-d3c575e12cf6",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "98c7bfd8-4a17-449c-b92f-b9624314cb90"
        },
        "item": {
          "id": "43eb86d0-f9db-4ce6-91b7-482fd432099f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5fbd3c22-749f-4726-9bc0-cba9cdd809ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39188b20-90d2-48db-844d-9e60b4fed3d2",
        "cursor": {
          "ref": "4772ec91-a192-4f6d-8d3e-8fdf1c3338b7",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f64c04e4-c2b7-49fc-8b08-b60068ac0a2e"
        },
        "item": {
          "id": "39188b20-90d2-48db-844d-9e60b4fed3d2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d886be96-f23f-4739-965f-6614bcfa86ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23aaab7-49f4-4154-91f8-c18302033de5",
        "cursor": {
          "ref": "3ee2025a-5c38-4bb4-bdff-7c7ab4a89708",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a434851e-a8fe-42a5-ae01-ab891eea6c00"
        },
        "item": {
          "id": "a23aaab7-49f4-4154-91f8-c18302033de5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "047aab52-4323-4d5b-9d15-059251462c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1eb7520-ff3a-42ab-89d5-05af2ead6089",
        "cursor": {
          "ref": "f890a0e2-909b-45a0-8e47-4140792a170a",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8c735571-3c10-4118-b9aa-e95460a6dba6"
        },
        "item": {
          "id": "c1eb7520-ff3a-42ab-89d5-05af2ead6089",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f497ec36-67d9-4d26-bd3a-3ec675a0c4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5353a243-aa7b-4a42-8548-a8571e8016e4",
        "cursor": {
          "ref": "d93713e0-4907-48db-85c2-9b82736af0b5",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3282bd22-32ab-4fa6-951e-738cad03bc44"
        },
        "item": {
          "id": "5353a243-aa7b-4a42-8548-a8571e8016e4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e6297388-b2da-40a8-a701-26023b5a08b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7930eda5-ac88-4090-b3a4-073f82905b79",
        "cursor": {
          "ref": "86d6aada-490f-4cd7-b601-3f3f71a97409",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e31ebd8a-1acc-435a-9d23-f09c0e945d01"
        },
        "item": {
          "id": "7930eda5-ac88-4090-b3a4-073f82905b79",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c2c4592a-f295-4d2a-a8b9-3f5af3beaef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce2413e-05e9-400e-b42f-881d96cd3a0f",
        "cursor": {
          "ref": "f1a4eaf8-1e41-46b8-96f1-3c918077c44e",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "07c9be53-d993-4589-9f20-c944aded395f"
        },
        "item": {
          "id": "1ce2413e-05e9-400e-b42f-881d96cd3a0f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b3b8383d-bb69-4615-b416-3fcf0aa05fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6715af-e4c1-48cc-8a4f-ea7daa830c46",
        "cursor": {
          "ref": "2b390543-08aa-46ad-bc38-c6a45358fab1",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c0ee80c8-5cbf-463c-97a4-9333a67c00d1"
        },
        "item": {
          "id": "ba6715af-e4c1-48cc-8a4f-ea7daa830c46",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b61e6026-414b-4876-bd67-daed7e88a3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86b481a-422a-4d0a-9d48-230f55cc887d",
        "cursor": {
          "ref": "8dd4d4ff-377e-4b55-ad46-3ffd5fdcb8a8",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b2a7ab42-0965-40ee-92c6-de3ae61601e7"
        },
        "item": {
          "id": "b86b481a-422a-4d0a-9d48-230f55cc887d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "471a8af8-150d-420c-b766-b4b67468e171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c387be06-a3e6-49ca-af0f-3831daee5f93",
        "cursor": {
          "ref": "1c62e3d7-35a0-4150-ac3d-1a39770cb6b0",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2fa03bdb-95fd-48a2-b871-8700eb7363b2"
        },
        "item": {
          "id": "c387be06-a3e6-49ca-af0f-3831daee5f93",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6b31408b-4dca-4fd4-a988-1e62d5930623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9deacc7f-937e-4ce7-8866-e8579e6994e1",
        "cursor": {
          "ref": "bebd9ad4-6456-4239-a7c5-c27b00a2af5b",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9285f5ac-7891-4974-b315-bbb12bc94b20"
        },
        "item": {
          "id": "9deacc7f-937e-4ce7-8866-e8579e6994e1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "112dfe75-cbae-4677-a285-cdbabfed0125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850edd34-8820-417a-babf-f642662f9a63",
        "cursor": {
          "ref": "d4ddb8d9-a6ef-4e74-b09c-942ea890ead4",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ffc78685-77a8-4ed7-b165-c2570b8a3451"
        },
        "item": {
          "id": "850edd34-8820-417a-babf-f642662f9a63",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "719d2de4-0501-4e49-ba56-7f4e171289d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fda4ed0-028f-4afd-8fa6-6ea884c7925d",
        "cursor": {
          "ref": "b0a7aa6b-53be-4354-af1d-471f16997aa1",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cec789a0-3aa0-467d-8b19-af9421d58ec6"
        },
        "item": {
          "id": "4fda4ed0-028f-4afd-8fa6-6ea884c7925d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2b0650d8-a6fd-4113-a97d-43b0726711db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b81762-5d35-4444-92ee-11a35fdfd2c0",
        "cursor": {
          "ref": "b4a74019-38b0-44cd-9ec8-c6ddf6ce031d",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1ff49869-bd4e-4fee-8016-8983f951b679"
        },
        "item": {
          "id": "70b81762-5d35-4444-92ee-11a35fdfd2c0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3b860d17-5901-40dd-8f91-f5d8c7b340b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1530d834-5299-4626-920b-26b44ca451ba",
        "cursor": {
          "ref": "c0d4cddd-1cad-465a-82c0-79a2a47c0e4e",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ead0e74a-4262-4fa6-b083-4d52f0131ea9"
        },
        "item": {
          "id": "1530d834-5299-4626-920b-26b44ca451ba",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0156a8b1-9edd-475d-b58b-9625ca30d276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97db4c90-382b-432d-9f9e-61bbf0b956e9",
        "cursor": {
          "ref": "d3726ab4-f2ec-4f38-855f-b0de35ec2e17",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8017d6ef-eac4-4594-9344-f60a2db4e592"
        },
        "item": {
          "id": "97db4c90-382b-432d-9f9e-61bbf0b956e9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f17cc39f-8b4b-4bda-b3ac-8f396a306fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b42fa7-6923-4824-bfec-7ce41e83098d",
        "cursor": {
          "ref": "9b80d55b-fc35-4e20-a645-5276cfa9cdfd",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1d7a6cde-a165-4afe-b678-fcb4a89715bf"
        },
        "item": {
          "id": "f2b42fa7-6923-4824-bfec-7ce41e83098d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d28bfc72-adb1-4548-94e4-b2c8d56f79e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b55e94c-58ac-4594-ad74-c0d0ac38260e",
        "cursor": {
          "ref": "37f588bb-d776-4f9f-8e0b-f39ce2aa1620",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0fa9a5ac-1fa9-4aa9-bd76-8cc3be96d851"
        },
        "item": {
          "id": "5b55e94c-58ac-4594-ad74-c0d0ac38260e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bd4e91fc-2295-4023-ba2e-fafcf47cc9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205c9dcf-de05-4fcf-8ab1-42ab741dc22f",
        "cursor": {
          "ref": "7094cd4b-7b09-40fb-883b-4b6f97e0942f",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6356305e-dcc5-4eac-b5c3-4c7f3fc89081"
        },
        "item": {
          "id": "205c9dcf-de05-4fcf-8ab1-42ab741dc22f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9e9dc4cc-5419-46bf-8574-966a53e99c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679324dd-6b1e-448b-a8bc-ca8d423f8b11",
        "cursor": {
          "ref": "46de93e4-14ae-48cb-aaa1-f5073c25fffb",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "14d478ee-7efb-4906-9c7a-57ba71144331"
        },
        "item": {
          "id": "679324dd-6b1e-448b-a8bc-ca8d423f8b11",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "92b5c038-64b1-4ec5-bbec-18a9f2719bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69da9bc5-2e13-44fc-bfc4-3b654a8895bc",
        "cursor": {
          "ref": "7d251bf0-6746-45af-bcac-14915fe59058",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f42898a3-0091-406a-822a-7dce125b0b67"
        },
        "item": {
          "id": "69da9bc5-2e13-44fc-bfc4-3b654a8895bc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fc21b5fb-1c7d-4a2d-8bcf-84214c217fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b491ad4-ab12-4b83-9b0f-55ec849465aa",
        "cursor": {
          "ref": "18895719-d2a9-4203-bbac-3a317c1e1831",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6dc8c005-6357-4893-8019-e2c0480f5b06"
        },
        "item": {
          "id": "1b491ad4-ab12-4b83-9b0f-55ec849465aa",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "48335418-8717-40cf-b4c5-dd8171cd7b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87491c4e-c4f3-4d90-b046-a515b5f4418c",
        "cursor": {
          "ref": "e4023a87-b11d-4938-a256-a81b3dde9c74",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b8d48d8d-245e-49dd-8570-929716333e23"
        },
        "item": {
          "id": "87491c4e-c4f3-4d90-b046-a515b5f4418c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c20ba18c-00ea-460e-b5ef-c5eccbc8bcc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff06b8f-5282-40b8-832e-f46ae3bea783",
        "cursor": {
          "ref": "6b8a2375-f3a4-42a8-b931-d6f26306696f",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2520337a-a3e1-402d-98cd-d311b5252071"
        },
        "item": {
          "id": "dff06b8f-5282-40b8-832e-f46ae3bea783",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c10a6bad-a947-465a-9fe9-c4257cd35e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc288db-7920-4f91-b895-7a991ff33449",
        "cursor": {
          "ref": "dd777b3b-4269-4d06-90e2-3c216b055776",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a972fe08-8023-4e3d-ad11-27d49443515e"
        },
        "item": {
          "id": "cbc288db-7920-4f91-b895-7a991ff33449",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "55700f88-f8c8-4961-a2c9-2542657bbbd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed03750-62d9-49a1-9967-c67ec8afd29b",
        "cursor": {
          "ref": "e88265f0-193e-4d87-888d-228a41d9ecca",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0a19ca64-00dc-4bf1-8316-3b9b3f06d616"
        },
        "item": {
          "id": "bed03750-62d9-49a1-9967-c67ec8afd29b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3d07eec3-1539-4403-b6fb-5ce28545e934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94e8538-5825-449b-b6dc-21de40c8e3e8",
        "cursor": {
          "ref": "5979a0d5-fa27-4394-81d6-bdaa11be9d81",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "74bbe13a-a418-42d5-8914-df46e9e5d52f"
        },
        "item": {
          "id": "e94e8538-5825-449b-b6dc-21de40c8e3e8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d1ce770b-0e64-447f-bd8d-e8c4ff3e4a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd82ea63-90c2-43a2-af40-e95a3ba4cc45",
        "cursor": {
          "ref": "cbba7dd2-1a42-47f9-b183-bb8ccc35fd0c",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9d1a5011-c873-484d-bba1-53287e4de4ca"
        },
        "item": {
          "id": "dd82ea63-90c2-43a2-af40-e95a3ba4cc45",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ec67fc71-0024-410a-a6c4-583883c931c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35660c5-209c-40fe-b941-cdecff7151f2",
        "cursor": {
          "ref": "6c9ca65e-45d1-4f48-bb68-8254e33009fa",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3ad357f0-9b75-48ea-bb53-1887883718ea"
        },
        "item": {
          "id": "c35660c5-209c-40fe-b941-cdecff7151f2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9ea3abe4-8db4-4e7f-84dd-97eaf6f49670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed009386-7358-40b4-b243-a27b18dd3cee",
        "cursor": {
          "ref": "aac2a934-3825-49d8-9c44-3cc41b2dbd97",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "86ef4016-33a2-44bf-92c9-5f6d00620819"
        },
        "item": {
          "id": "ed009386-7358-40b4-b243-a27b18dd3cee",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e7ae8613-1987-4699-9dd3-69cd9b103112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813b7717-2c1f-4ebb-8e58-42826d27dd33",
        "cursor": {
          "ref": "08037853-b151-4243-86ad-2f9fc9ba0046",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e92c7577-6521-4aa4-84f1-1a11930245e9"
        },
        "item": {
          "id": "813b7717-2c1f-4ebb-8e58-42826d27dd33",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d27a5e70-fd0c-4143-a7cf-725d095bb602",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bac16bd-03c6-4ec9-84c6-68c6aa4a147e",
        "cursor": {
          "ref": "108dc429-6f17-45b8-9630-d17d45e6bb0c",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f0eabcb3-8cb3-43cf-a8c3-f82bec994dc8"
        },
        "item": {
          "id": "5bac16bd-03c6-4ec9-84c6-68c6aa4a147e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "94adf693-eaec-467d-834c-acaf9cfc2ceb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b427e1-aee1-47b6-9348-8b83ef9bad24",
        "cursor": {
          "ref": "faad910e-4ab6-40c1-97db-87342c8aaacc",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8b6b5dd4-e012-4bf5-ba65-94e418ebc0be"
        },
        "item": {
          "id": "93b427e1-aee1-47b6-9348-8b83ef9bad24",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4525dcb3-f4e2-4c1b-ad10-9371f2b70509",
          "status": "OK",
          "code": 200,
          "responseTime": 558,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08091ad4-8cc9-414a-8856-28a50be10a4a",
        "cursor": {
          "ref": "85603722-a89d-498f-94eb-8fcd58eb32a2",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a8e021ac-e65b-4b6c-8717-87b1ff69de7a"
        },
        "item": {
          "id": "08091ad4-8cc9-414a-8856-28a50be10a4a",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "eaf64da3-f94c-4baf-8ace-36e99b46ce67",
          "status": "OK",
          "code": 200,
          "responseTime": 389,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7e83b4-7f56-4717-bffd-bc9fa11efe21",
        "cursor": {
          "ref": "0cfffcc9-4309-44c1-a5ad-1d0d93bdb56f",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "56b77499-0c16-4cb1-9bba-d6cae1245756"
        },
        "item": {
          "id": "1b7e83b4-7f56-4717-bffd-bc9fa11efe21",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0bf38619-973f-413c-b3d1-342596ae9c1d",
          "status": "OK",
          "code": 200,
          "responseTime": 766,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1824cd37-d0ff-46b7-a5d2-b051080cf29b",
        "cursor": {
          "ref": "63e4d2df-d57c-4ca6-8050-b0d940d003d7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2a55a8f0-f600-4153-a988-2670de10ab38"
        },
        "item": {
          "id": "1824cd37-d0ff-46b7-a5d2-b051080cf29b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9aac7922-1aed-4c87-9aaf-a6c659e06cda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1824cd37-d0ff-46b7-a5d2-b051080cf29b",
        "cursor": {
          "ref": "63e4d2df-d57c-4ca6-8050-b0d940d003d7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2a55a8f0-f600-4153-a988-2670de10ab38"
        },
        "item": {
          "id": "1824cd37-d0ff-46b7-a5d2-b051080cf29b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9aac7922-1aed-4c87-9aaf-a6c659e06cda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1824cd37-d0ff-46b7-a5d2-b051080cf29b",
        "cursor": {
          "ref": "63e4d2df-d57c-4ca6-8050-b0d940d003d7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2a55a8f0-f600-4153-a988-2670de10ab38"
        },
        "item": {
          "id": "1824cd37-d0ff-46b7-a5d2-b051080cf29b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9aac7922-1aed-4c87-9aaf-a6c659e06cda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad91690-110d-4a71-9777-3da8c0b958d6",
        "cursor": {
          "ref": "1a6c8139-751e-4a3c-b214-50f2b1444f55",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8eecbe57-a02f-4a89-9ace-e1523a72c969"
        },
        "item": {
          "id": "aad91690-110d-4a71-9777-3da8c0b958d6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d56005d4-d304-4c4b-9eda-4d8a6bcd860d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e2e5ed-181c-40cf-844f-d8c2894a2ba3",
        "cursor": {
          "ref": "ff08a3dc-e5b1-4ae1-91fa-b657892d67a0",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "086b04f2-c1b2-4a09-b09d-2979fca6cb02"
        },
        "item": {
          "id": "e1e2e5ed-181c-40cf-844f-d8c2894a2ba3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "feeaccc0-ac0b-435c-a7e9-09c5c046b86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e1e2e5ed-181c-40cf-844f-d8c2894a2ba3",
        "cursor": {
          "ref": "ff08a3dc-e5b1-4ae1-91fa-b657892d67a0",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "086b04f2-c1b2-4a09-b09d-2979fca6cb02"
        },
        "item": {
          "id": "e1e2e5ed-181c-40cf-844f-d8c2894a2ba3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "feeaccc0-ac0b-435c-a7e9-09c5c046b86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7b505e18-13db-43f2-bc17-3d1333e77e3e",
        "cursor": {
          "ref": "1781b2ca-aec3-4881-8965-a438cbc24b05",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f54eda12-bfd0-429a-94fb-c2f9bbd81637"
        },
        "item": {
          "id": "7b505e18-13db-43f2-bc17-3d1333e77e3e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "1c3aac30-c163-4b87-b96f-a7d8d12bfa53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "47f0cda7-68c0-4e98-bb2f-6fedf9df9f92",
        "cursor": {
          "ref": "1e66a664-dc1f-4b3a-a2d0-35d169dbb529",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a332e0b2-8e38-4b4e-911c-1aff5cfdbbd5"
        },
        "item": {
          "id": "47f0cda7-68c0-4e98-bb2f-6fedf9df9f92",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "55aa4c0c-4fd7-4fe8-837c-12ab3dbfd9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "47f0cda7-68c0-4e98-bb2f-6fedf9df9f92",
        "cursor": {
          "ref": "1e66a664-dc1f-4b3a-a2d0-35d169dbb529",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a332e0b2-8e38-4b4e-911c-1aff5cfdbbd5"
        },
        "item": {
          "id": "47f0cda7-68c0-4e98-bb2f-6fedf9df9f92",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "55aa4c0c-4fd7-4fe8-837c-12ab3dbfd9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3c5cb63d-ce11-4d05-bf50-8ec946b8aaae",
        "cursor": {
          "ref": "e450786c-4d28-4983-ae09-d2d247cbcfdf",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "df876487-82b8-428d-9a1d-88f5787f3214"
        },
        "item": {
          "id": "3c5cb63d-ce11-4d05-bf50-8ec946b8aaae",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "4629d0d7-bb7d-417a-a573-ec4029ad97b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}