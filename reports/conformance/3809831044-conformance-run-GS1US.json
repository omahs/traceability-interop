{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "07437da4-6248-410f-8cad-0b8cec82984a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6ed407e2-3a61-4e0a-a5a5-e4c6e4425a00",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "346aa0b7-5b77-44cd-8563-91844d8d4656",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "204f584c-6a8b-4000-8119-76db2c6ed877"
                }
              }
            ]
          },
          {
            "id": "7c9f0f0d-5c17-4365-b1bc-a11a1061ad37",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a5b4379-1aa2-4011-a2ce-8db059b5887d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0aa9104c-a1e2-4ea7-ba09-561e1781543b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8cfd304c-b52d-4bea-88b6-d9c618bcd8c1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "86a939b4-a0cd-4d26-8072-020310b53b28",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ffb7471b-e323-4e13-865d-d01f17dd2797",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "032e86f1-7b95-409c-8301-0025c1620ca3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e283646b-33e6-4cf3-a274-971d74a305cd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a9a1c688-7f3e-46cb-8fbc-651aad602fd0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57724da5-bb88-4e28-97c3-84172b970065"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "066838df-bfe3-41d6-8755-202cbcc349a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "abf6c28a-4322-48c8-b1d0-5ff38d84c273"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74b9ad70-b377-4fe8-9511-c140ba0d947f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "56b072de-e3c7-41d9-b4d0-aa6a7722784a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89b78c03-9c13-4eea-909e-26f475ec2169",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ec5cc15-e8c4-43eb-973c-da8445ffbcef"
            }
          }
        ]
      },
      {
        "id": "68f69066-0e9f-4991-99ee-d99bc57400e3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "af89685c-88f0-4682-b58e-238f62c718e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6634c47d-ca27-4c41-9f89-2e90cab1a488",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "622460a5-d9ff-4d86-8a0b-987e453edc87",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087afad9-f12f-418a-ab5c-c4007494ed2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59dbffcd-62af-4126-bbf9-9856ef6c087d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da17dbc3-237d-43cc-8d05-29fa435eccdb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885b9d87-9877-4eba-9912-bc09696e7e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8e76cde-b2f5-4d4c-a1db-9488ef4fa8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400618c3-ac65-49be-88b3-a6e595937abe",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976e69c4-a6e1-48d7-a203-5686eac9d1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01a8c451-2b95-4853-8f63-2128aa69430a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7f754b00-d79e-4bb2-89f6-2375b9236928",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a4d55b8-7f05-4b04-ad21-18d3660d1833",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bda0ba-bc77-4993-b334-28ab9ac73a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbd19b44-aa7d-4b89-967a-5499998bdec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c76b5a-6f5d-4b78-8428-ad9c09d9a14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad192f7-4b36-4a49-9d6c-7e6892f658f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b1deed-eae7-486a-a10f-884d8902dcbb",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bda1101-9321-4002-a168-00f91c1e9d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d3c93d2-9c7b-4f50-a89e-2164faa93bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961a27a4-3656-4309-a99d-86ac626bc480",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f8442362-6b3f-4022-bc14-1c002aef6596"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2f0ae763-43e1-4d11-857d-b49c3e1a9643",
            "name": "Positive Testing",
            "item": [
              {
                "id": "64aa5568-2c6a-4bcd-aae5-9486c18e7524",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5e3bb7b-8697-4b71-8b9d-4ca569f5f153",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "60a0db7a-b148-4264-8632-e30cff115a06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09340a4b-2303-4ca6-9bc1-03c6a5b84631",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8537bc66-6e56-4b48-b376-0fdb0889d908"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "233dfa1d-43aa-42fd-8f5e-20f2e30aaf22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8e26168-6ebb-480a-b6ec-b2f9505967b4"
            }
          }
        ]
      },
      {
        "id": "536366bc-e339-4eaa-9bb4-0b453c2a93ef",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "00694bec-cc17-41ff-8a6d-3c1a25fbdf24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ecf78018-9dda-4f02-8630-cfd9738610a4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c75f0dfc-0608-4133-bb1d-f972bc977b8e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e654b162-c60b-43bd-828a-106904b885be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b26484e-e023-4d8f-9bdd-d6ef4e756684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21316aa5-9e8c-41bc-b84e-9a488adeae61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be33c9f5-cac4-4a13-aec7-237729f53dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798f6c41-4a1e-44fc-b46a-e7ee74c55122",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07276050-bdd8-4593-9a3a-7ecdc91ec684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1286b14e-4ed5-4ea1-b632-ac29d28e4820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0098b7ad-2395-427e-af69-3d762433fc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a59d326-cb6b-470b-a195-f0558a8ed6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d6c36f-f269-4a82-b5fe-ccc8affce039",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81aa748f-04d5-42b7-b9ac-522416a576f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3aaee7-ab78-4a24-b569-f2db86dedf0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e47257-8748-4353-8df6-bb11ddda6836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa450145-9794-4f98-956a-1ba2ad2098d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af65d6c-1bb9-4110-8c64-b8e67c3fbfb7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c366f9b-d991-4440-85da-f6a08e574ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22c052a-68ec-40e6-ac84-32017678340d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff432f9-d839-4bd2-9a8c-df4624cd01d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62782e7f-b844-4b78-990b-cb80c080faa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c735660b-d4a1-4dcc-98f6-4c71530385c0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219cbca3-1094-462a-8740-7d39936a4bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb4fa41-f986-4296-a8ba-42fdb52b4a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a451013-4f6b-4e96-a9af-44f935d4ce2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f7bcadb-55fe-451e-b331-b5d0e9ae3c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7168ae5a-9892-4418-9350-dd5a09769b3d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb7d7a3-8eee-42c3-b059-466299388bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "528fa7fd-5a6b-4b05-b976-5063d3767085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39817ee-ffe9-4c8a-884b-82b28404b8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0046c4e9-426a-4c43-9053-44c3993cf59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0557588a-5f58-418d-ae54-06b87404d744",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35926c78-8b32-4c95-a500-890d19c01f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1637c347-a459-4e88-ae7e-99f0252ef056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1818ec0d-2d13-4bb2-84e8-8ca9af490229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b242fa6-ac05-44df-bd14-03b3a3e8dcb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e46293-7194-4b53-9b03-8d2e963efb3c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944241b6-0ad7-4f26-acac-f5d92f924443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515aa140-211d-4a24-9c62-59794ddf2a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f08c0fc-a7d6-483a-b217-1d90335504a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16b64152-458b-4848-9c5b-4b1c4f6c949c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c66299-4f77-4360-8413-0c228a1baeb3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202065be-2162-411c-a7b1-1bc132f8a7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8befc4-5b9b-44d4-a33c-26283d06548a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b1498f-fc3c-41c6-b823-0c5f4424ea0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56bd48d6-21fa-4004-8292-7b22f5056ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba15f17c-9f34-48c1-9330-baf238301a86",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0643908-e1ac-4a3c-88fb-806c225fc9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7fbbb7-84a1-43e9-a34c-388a3220b499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1a3ba9-1913-4ed2-9605-e7ac706fa7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcdb662a-329f-4529-b917-e150b0ba36e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ea07cb-2a58-4cab-a438-1a7b8a19ccc1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cf1456-5945-415c-bbc2-06defda0bac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ce43a5-8a62-4bc9-85dc-86796b20d347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ec9977-c713-467d-a074-e19823e7f8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1de8dccb-d591-4bc2-9886-e9605f602562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72be3ae-b8de-489b-965d-90f5e65cd9ff",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e47b62-64db-4ee6-b645-391a90ce463c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0659cd-b2c4-4120-9bf7-b4cbe874482d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f970e5e0-f6cc-4786-b29a-dbecf92b2ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73e0aa85-3ded-41d7-b163-af9ab99e8069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0abf6db-7f0a-4cd2-94be-94dcc01d23f4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aeb5d3f-2c36-4620-86ed-2adb52ff039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9232098-e0ae-4daf-a945-828e3538b443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1434784-dced-4e2d-9a20-50976a792fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88edce79-caf9-42d5-b349-07272e1c1fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dce298-5130-440e-99bf-66cfaebfbd2d",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8111a2b0-70aa-4f8e-b4fb-63e7097a271a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fa344c-c80b-4025-b6af-5a4472da0eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681224a8-f3d6-4f78-9914-79a4bf995011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "17020292-080a-45f5-96bb-a1730b7260a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9d7a48-3f96-4324-86c5-d9120000242a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20717a36-472a-4560-be26-11829f2bb5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63071cba-ea90-4307-a3df-6f01dd741294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c021188-c3e6-461d-a1a0-efcb6a390f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f43155d2-b0be-4c21-b06d-aa43c0024edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123412a9-e0c8-46ba-98a1-1b55823402a4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bc5c3f-c9e8-46f0-bb3c-a6d7dd311e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0854f3-432f-4e08-a43e-ae5662ebd75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d748ac-c833-4d3c-a321-9806c25e0797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dce54b3-e23c-4fd4-b7ef-c70eeeb2bfc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d1c06e-759c-4051-a7ec-4b4a0a7f879a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ba2062-6a17-40cb-b389-6c8b5e5d2302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb0fe99-bb80-41c9-97c1-013494a58b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f42e424-e68f-467b-bfc9-5bdb9718b7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4aab4433-e4c5-4cd6-8f57-1a43c35128f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9c0a0c-9c81-406c-9a48-5c7a1c38eaff",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce6cc9b-6eaf-4d84-9ce3-743180fd4321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e212efce-7da8-44fe-afe8-25c7a3e3ce33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20c4f0d-37a6-4e1f-ba6b-bce1bbd56339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8fd4892-cab4-45bc-8bbf-df78955ffbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ec9829-e862-4cdd-8a21-0393aa937c2c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f18a213-dc9b-4b72-803f-d23b87c22901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cec5997-97f7-4671-94f6-e35d78ec8041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a71ddcc-8249-486b-ae0b-aa47ea502b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18a07872-a3ed-4992-b9c5-b30b29e2d662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c7b0da-dcaa-427c-af4e-ec8481641883",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7aecdf-0aeb-4b09-9a6c-aa637d2fc44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195091a0-6677-4d50-a044-2b34651262b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10feb864-6d71-4937-90cd-fe11f894d230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "354803bc-29fe-4e6e-98b5-40f6d211c1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599d7df8-8658-4a34-bd01-e714ac348701",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6420818a-5b0e-4a6d-9833-0cf4e1d2454b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecebea22-f4c4-4935-973a-81a167e166f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2b9455-585d-484c-9a42-d2b9f0ee8812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb632c1-464c-4c77-b5d1-42f184686815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db7d73b-eb50-4992-bd69-61025a190ae1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ec9ccd-c60e-4817-9f4c-9a4c39270377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0e56f6-e6ec-4813-9ea5-94658acb9a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108abc94-2b16-4c08-9e32-6e3a8f1f1f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "549d13f4-ae02-483c-8f1a-037833edbd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077d22de-1741-4e68-81a3-256afa3f35f4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87f5246-ce84-47d6-9a62-df84bd21d130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15850145-ec50-42c6-980d-dcbc2ed3f2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55147b34-e760-4f0d-b7a7-6ba8d635d68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3347a8a-da8c-48d9-87b3-85cbe4808eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac2da1f-7d0e-4db4-8a5d-a0d9d7d01ae5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9ccd78-6430-416b-86c0-4a5fea835689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b22cd83-a8d9-43c1-aac4-79b6fa3e53a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a85f891-0679-4b14-8dfa-03fa9b393813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4073efaa-f0c7-42eb-9abe-29a691409eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48d2373-8d67-407b-96a5-eedb6eef123f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397d5d51-b2b7-45a8-bcba-7a6fcdd694c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590be249-037f-49d7-b78a-e2fc606a2751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c043459-3daf-4048-8dbf-b0906a48e5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c019d38-8cf8-487f-8342-d08ce8368db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0246398e-3075-45e5-91a3-9b56b1e0411a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7a2ad7-d625-468a-a189-a4497e84c571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2264aa-d633-4f53-8f41-8681036e5920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f31cf92-6796-4309-b55b-f0987747752b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e52d83d7-72ff-48e2-9e3f-fc9ad2b0cc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b9e016-7764-4b5d-9555-d76b69260d24",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac03e90e-6400-48d8-b667-114a9313f986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712f248f-1999-42ba-80f5-eb0bf2105f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995f953b-6e13-45f3-8895-ec13a31efe4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe5757e-f405-4a83-9ca4-5020637803c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74d8bd7-5cc1-41ee-bfa5-d465776a0a60",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b9be0f-b0a2-4ac5-9c66-6ca9fbf5835a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c362580d-54aa-4f0f-9254-3648d93435dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e037dc32-261a-4c23-8de5-78bf228fed67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed21b25-0c7d-4d79-bf89-5986e20e811e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15e348a-6cc2-402d-8a81-3b17cb5ba12d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f55f20-4f7f-43e7-8062-c5ecfa4c17b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ac2a60-1147-4c8d-8016-a81d2b4f3510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e80805f-0e8a-4fa5-8ffc-528a958c6bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5774430b-071b-4a94-8349-799ab9360f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d938cebb-6cfc-43f2-9ac3-b33474c01d46",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8e61fd-4eed-470b-a29b-2e8045e1e7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23cfb59-e0c7-4612-84ac-078089fbdbae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a54961b-e78d-4374-b363-74a54d90fc49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dffc5471-b28d-4f13-94b7-156c5bc04f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe5d5fa-f629-46f9-92cf-e0a15ad6aee6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5fe6f9-8a68-4462-b6f1-86fe44cdd397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32f3ed5-48a4-4fbb-8ef1-ba7ad13f1c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc8f8aa-9d9e-4569-a893-637b511b0342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "35a29111-e0eb-43de-8813-6e19d8bb4504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c110d970-9446-468c-8d68-e13e35fc63d2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d714e3-78c0-446e-b89e-f2b2177f5fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c5b05b-21b7-45e3-a035-e637da64e67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98d5cad-0cae-43a7-bd05-2f8d28a69713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "27ee72c6-1578-482f-8bff-934d910937d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37f5685-aab3-4a5b-b820-f36f1a87c272",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0f3e80-f7d4-4c59-8b5c-f963a449eb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ba3ecd-adf0-4a6a-b3e6-4ced5ed574c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012ca4c6-5986-44b0-bd62-f648a9eb5793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4766918d-a768-4d4a-82d6-4e58961c935a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cdefff-d718-4a85-8679-d1efad8e3ffa",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e717538-6ef1-42a7-8fe3-0d839df6e438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656a94ba-40ff-49ca-b854-eae3f8bfc979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d607fd-fdb0-4452-ab00-51f3472c49ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24227abf-d9a2-483d-8187-3f6d7feaef14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23fb579-5139-4c74-ac0c-dadeaaeb190d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939ab658-1a98-4e85-9341-3776a041955a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9fa674-2dbd-429d-ba44-d022fd254219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932a466b-5894-4fd9-a88f-c224c6929e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b87859-f70b-4c25-b2de-5caf03bf465a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59899e8e-c604-4241-b637-7eeeaeffd84d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3d5a9c-e1d0-46cf-8cc8-84f8619bbb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333c225a-de36-4e74-9351-059759b57a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8a7a8f-31c2-4976-80ee-39d091424862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c62625a3-99a3-4ed5-a13a-d7d6381a2349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db9124d-ad97-4762-b2b8-9d7e6f290d84",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530a3789-c0e8-4d0c-9716-43906173fc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce1e691-6a2e-45ef-810f-23e1c0a4a668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218e56e8-164e-4638-9240-f9644a91081e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "af5d9f03-b1e3-4182-bbb7-8d918c193260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226f5591-bf75-4417-b3ac-d9cdb7ed00ef",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94692b83-b498-4346-9331-a84b7ab55443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28984a3b-bb6f-4d36-b608-25f61a86498d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b822a0-169b-4d0f-aaf0-d4fc9e6630f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9de314-ccb1-4ed3-94fd-5bf9409c3505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbbb617-e50d-47fd-8534-4440a9add10d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa4456d-1f43-463e-a573-4ee5ae30f5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a695b40d-692c-4d18-be0d-b1511ccedc96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9facbc4d-6148-4053-862d-a8f257c213cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "141f4098-91d2-4a3e-8947-ee097020274d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265e5b3b-7611-49b8-a9ca-6d28707159a5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79974da4-16ae-4d7e-9ea7-4cadd91c0803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703b22e5-7728-43fd-8aa3-8661ffa25f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a90f14-3fe7-492c-a971-1e16da41260d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff88af98-84c8-45d9-a9ed-10f977a755dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608cf8fb-1765-4d1f-9018-a8c7bda77109",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0c4a77-09aa-4254-94d8-9d34b4697ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d50bf71-44af-402b-b7ca-6b715e0995cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e630983d-67b3-45ee-992e-38f47f4d62ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fae70d4-e0a8-4bea-86ce-0c0982b719d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e393c946-32ba-43cb-a723-a00e6a89362d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb4d101-295e-4758-aac3-385bc8a0784e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94ecc7c-0deb-4430-9aad-73c9df477ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25115050-09a6-47bf-b257-db36cc4d8898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b265a897-07d4-4e2d-a108-1aab12d990a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1d49f6-3e07-44fe-b770-51a1148ecc24",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49edd26f-8582-45a1-8a11-0cc3268d69ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734a6add-f81c-4050-bafd-6a049901f067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb46208b-39b5-4ebe-b57a-f5e6d2131013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d535fec-c741-4c31-ad18-1016034537c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49791c4f-ee68-4434-8dc4-74db69810352",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49df95e-a699-45a2-b277-f36551b07dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24fc93d-8e56-49eb-bd89-44238d5c69c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f780a7f5-b56c-4766-979c-5d6f4cce7487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7176edb5-479b-4f6a-9e6e-07f19443ed83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0c90db-37fb-4abd-b9ba-e6244e8c75a8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d764785b-d750-40e6-a16f-b4bc1401fb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44836006-0547-43a1-a1ca-05fbcdb8c391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbb862f-ccba-4e34-8ffc-6718ce2cd716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3498232f-c497-4cc1-996c-ecbbee917e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b7e181-bf67-486e-b0ea-e829f1afacc8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca079bd-8350-4538-a0f7-3517a320afb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38f9133-16fe-4d57-afd7-20e7e4c8e5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7bc815-7e4a-48ee-856e-0cf609323827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d231d07-0e3b-4e22-9eb7-fd030c30440f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22e073f-fe3d-4ab3-a1ce-000f629cf841",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accce247-d181-49be-81b8-08ba2a21acdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c6ffd2-7232-4842-a6bc-dc8694614ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290d4bfe-09a1-42cd-889a-df2111f55086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1541f3-8c6b-48f1-a078-58459fd36540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7993d3d4-2b95-4138-b9f5-70c79f591918",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a65211d-492c-4a86-a385-979d8acdca61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6d7581-16bb-4dbb-82d0-1eb25db67370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c828d88b-9ab5-4cae-a13f-587d5f159230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56ddb002-9959-470d-8fe2-1ad7708977c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa328dd-5634-43b1-b33a-f0c636f350c0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2702fda-6a89-4cb2-8509-0bc2e81cc344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b4b42d-8805-48d2-9844-bc775779460b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bd2180-4867-43f8-8c99-8580382410e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f67c4c-4166-46bb-8ccc-df86d2c02396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efb9167-b589-4004-a3ad-560e92f1665e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba12da6-5e2e-42dd-a496-c17d9867fb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c2f6810-82c9-44d9-bf42-05db323c1529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e249136-aa4f-4242-a416-c40bf1005767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24116c60-4ae9-42fb-bb7b-9214d60d5c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf08cdc-35b6-4ad5-9c5d-1327beb39dab",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f28f22-8afd-4395-9052-1f02e478c29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58858640-5566-4796-b822-2d3f4532f846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e090103-735a-4928-8404-953f4c084f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a035090-e86f-4dbf-839a-565b7c97e22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb00bc07-54e5-4c28-bea1-bb7a74cd4f1d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6135dd0e-4c22-43ad-b7ce-d3e5d68f229c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a41195-f793-47ad-b7ba-3a5786125c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2a2fd3-30bf-43f5-a364-be10456d29db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5310e668-d10d-4b36-96be-5ada85f654f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8a752c-cff3-4b4b-99b4-c6d01c8377ca",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738578a5-bc66-4d51-bd6b-7b16efc1322d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50386af2-f006-45c8-be56-0e899ee45171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957c2131-76e4-4fc1-adae-0bdb4ebeab74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3d088c-934f-4235-a769-e59f633be91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d290a22-d6dd-46c1-9875-373fdb258ae4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746d9401-1fe0-46f5-a33a-b11ded44eb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2128dce4-400d-4f5d-87a5-bce389a29089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd03d2a-df1c-4dfb-ac4f-8120b45033dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4da5113a-db3b-47c0-bbd6-5ea4f02a2a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24555af0-289e-4e6b-a588-3489c5183372",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed7132a-2e16-475a-927a-84380fbf8142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e578c1a-578e-42c7-9b75-15f84cfa0df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d31ce7b-71ae-4c81-bf35-547fb5084c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ee1ed5-aed6-4533-85d6-1a3fe9b5b627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941eac71-19ea-41eb-aee1-a82f762c960e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26df6f24-f1a0-47cc-90f6-e10b7e522f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77dd2cb-6b08-4511-961a-e494e9970c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9750c95a-96ab-40c1-b410-c6b9dea7bdf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a426bc1-30e6-4e9a-be21-1ed844a1c7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a0c0b4-39f0-4e9c-b7dd-60910686a325",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84214f00-6dd6-40a8-b922-6c1c4863beec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63358197-ccbe-45b8-b735-046790d32c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484c9523-e922-4d06-a063-ffc6b33e9ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dffb448c-8ee5-4b0d-bbc7-658e70c957ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed812ca5-3792-4f71-8c9d-8283857ac217",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49acdbff-1191-45d0-a381-6ecd60fd73e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7485bec-1b2e-4d35-8eb6-a60b0d109fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8518035e-d3c8-4110-847e-c6cb41e06e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "60634713-3927-41a4-a212-fa686a0e621e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64dcaa0b-549a-44f5-a0b6-f12628ca5403",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131638c3-ab9f-493d-ab02-b3a707fe058c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4153ab-1068-4d9e-9794-343911d33bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8bc874-3f9a-42f5-8050-85e615357f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d533bfa-9de0-49b8-ba06-d38d0b247315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb4d67a-cca9-41fb-bd2e-1a5011bde98b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe1ac86-e407-4418-adc5-1367c8fd293e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f20b09-1204-4c5b-aa21-129c7e5acd99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0a0f83-0844-4293-babb-0ce09cf4ffe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fc951c-0c6d-431a-9e5c-5b1ca1072563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22870f47-c32e-4484-b610-fe3e82a03c17",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43337aa-37a7-4198-82ea-c0b4f904e46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ad4ceb-ea8a-4ba1-a118-5a41417a5815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f17d45d-77d3-484e-8861-40387c4082e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "076f3d2f-91de-4361-9561-a4d13c99d154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8f1f14-f5ec-449b-af1f-f3288e8cc754",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f6fbf8-bdcf-4518-95da-dc16b7aa5042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb15cc36-52aa-4239-b206-bf7f4f708ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8698dec0-da3a-4345-b918-65f630aa67e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3cbbd1-7692-4278-9f32-d0a351c8ed12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8df940-0eee-4859-9468-7e89d796a12c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21aa44b7-6d9b-48cc-964c-91cba4cb45d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba4e587-6321-4f99-8012-90242003aad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0c2b43-7259-48b7-9da9-c88832360c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8943f8f9-07e3-41a9-a00b-e3e96bec1890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56af3aad-453e-481e-99c4-fb1ab76e768b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f224961e-8825-4930-8b1f-eda041dbec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c4fd7a6-b310-4499-b338-b51d8d1200a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34233b10-1d74-400b-9629-6eaba1bc4158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3f2a5c-ae40-49eb-8328-4b3da50c0702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acf45ec-d69c-493c-bf03-4709524362d0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4550b4-e68e-47f4-a021-6353521e177a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348dc38d-dbcf-417b-a6db-d3a40ebf8dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2feb16a4-1577-4fd2-960f-f8920b31f4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "89e1f913-d640-4be3-906b-650614e71f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2793d94-3f0f-4a50-82d6-32e7b5a114b9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8840b3-caa1-46a7-8f76-e7d8236254e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f877705a-e5b1-4895-9369-02779873eba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d3bb8a-90bd-45a6-a617-2c2fd3a2a787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8fd77b-e4b8-44eb-9e26-c14891fcf7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e783a6c-e187-48d5-b645-a59a341a190b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "815671dd-fffe-41e3-82f5-0b7656e9359c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82537015-aaa2-40bd-8a61-11ea13f8e682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b2b601-fd2d-4e4a-9482-7230accd7337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e7c7a3-af2d-490b-99be-71938d1bb156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a37fe1-9873-4860-b822-fda5fa304e63",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5dc4681-0d91-4b04-a356-7f594a0ebe57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f745e7ae-4268-4294-9668-422fe23ae0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7323e5-ea1b-4c56-83ed-f5596b37bdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf4d7a9-7d63-4a8b-a4cf-3f4890e58802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1775a6-ffa4-4bff-b362-60ad6c5c73c5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181a9e6e-a0aa-4f19-a1c1-8b7d214046ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b7675d7-9e71-499f-81b4-42fdbd96e2fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d417cbf1-d087-4645-a4e2-fbe2b5615256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3748268-a6cd-4349-bff6-f524a90db742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4dff7a-f6c1-4df9-b9ae-6108d09d6470",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a947757a-6f33-41e5-b273-da86b71eeaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afeb93d7-60f0-4e11-98de-1dc155a4c29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327ffee1-1363-456a-a851-453b83cd32ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0b5d5e-7537-4f15-b184-4f8c499e0f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef11cf80-c0a2-4322-9efc-633e047e6414",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2022cfa8-3710-43c7-b800-77cf9997cbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cce3972-4352-4078-9334-b09177076e2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8a5f87-ef89-4c48-acf8-6b0a1d876691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f39168d-415e-4ee9-b9b4-500a5f8f5b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ae3369-2fd1-4eb0-8eb3-251e929e7ded",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1bb1eb-ca4a-46f4-a114-60f74ad0565f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1730c5c5-1018-44bc-be2b-c6120d821784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad39bd0a-52bd-47d5-9b22-24f858df2678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "166cd935-7d04-40d2-be15-e8d5de76a6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcba52be-988c-40fa-a0ab-9c1e6b54461a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570a0550-50cc-4158-b213-7efdf669abb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e50826b-f8f6-4fc6-9d01-6c0b1e910fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b959b6d0-4dfe-406d-9ff1-f34cce96069e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3029668-8a86-4c2c-809e-846cf2275466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8983fc63-8db9-4bd1-9044-c23f790426d4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec670954-67f2-494f-b271-d9e51b02ad68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a21eeef-b777-4c44-a476-dfd06a5ce9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf83c5f-db4f-4e2f-bc3e-644267ee91b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a89ca0-edab-4f64-b1c6-e755addaf9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2123c50-1c50-4de3-b595-664fd4731dd2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63de19d-2bc2-4693-b3f2-7b2dca715dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21993a7-b2d0-4881-ac51-3d74d3995707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc7728a-1ad8-45f1-b1c2-fba552c63912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc743e5-568d-4c2e-b134-bb0e8d6d9084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45f11d1-ab1f-4ae9-ac7c-e2ea2f07bdaa",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d4d3db-6595-424b-9728-8b7517469813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c67780fe-cdbb-45ff-a119-902d84f53cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b74dfa-35a0-41b1-8e50-1bb832736cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a3c2e5-8414-46a2-b462-0193381307ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc76a64-a8f2-49dc-946c-6adc9bef69d1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c333dc-80a3-4ae6-a788-731c8490200e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93279af5-3299-4109-903c-15a1dd402f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba18f66d-b4d8-4bfc-9a7c-3b9fc27436a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "09364069-cb6b-4f61-b473-a830bf241337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524dbeae-620f-4f2e-af60-f636734b9a29",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f97786a-ba61-4d69-8214-52a30a72cac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1298a6c2-1ff7-4fc0-9f5c-fad5686b7ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55882a90-080c-4a87-b150-ad0906220735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3062f7da-7f1d-49fd-8f9a-958589cd5d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c7a1f6-faae-4e60-b87c-757df80962f7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e8ef5f-e988-4d7b-8a1a-e6ed9381bd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f51fb7-161a-4fe8-9ddf-17ccf6ea2b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea0bde4-9109-4389-bb66-ed0d2325bad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86a20c05-6115-4108-80b9-29f75fea0be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380f2db1-577d-43f7-a658-906fed288867",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2cffc2-022d-47fe-aea5-1ce7a1c64ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f44173b-506a-40a2-9466-ad304d840958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be721630-14a2-4a0f-83b2-29fae3073ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a14b7652-ceb8-418d-8319-25abdd3ec4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6302e93-8c11-491e-bc1a-24705fb0fb2e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc8025d-7e5c-4392-90a1-c6ef2d819157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64cd395-d73e-4fe7-892c-abc7f8bc9cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4f33d5-e5f0-4cfb-a286-100a06fba72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7953bfcd-e9e5-45ea-a1cd-0167e3174299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1812a134-c141-4cfe-a5ad-0a2ba320ea80",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2d59ba-239e-4e0f-9c35-8054b16241e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc30ae0c-d691-429b-a700-bddd3cc65f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f320037c-6954-494c-baee-cf51764df8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "020a7908-fe52-4fd9-95f1-46f1530b962d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3558006-d68a-474f-861d-d2c179f617d5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "647a7ae3-dc34-454d-a23b-94b69e39eca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82bbac47-496d-42ce-abf6-76222ace667a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e530df2-bb36-4666-b873-359b2bc5b99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b461c75-0080-4819-b89a-f7069ea9245f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364e8832-0a6e-457a-88ea-0182d2b8f137",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85938fe-0ab2-4cff-a707-413dad476a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "127b55ce-1798-4633-82d8-fc7caaabd1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae053ca-60f3-48c8-8f4c-80e662e9a3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61704b1c-58e0-4dd1-9d89-f04a59e834f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccec12e-9b3a-40f0-8d3c-4e689837ba6d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897ea4f1-1a64-47e6-8d05-8e08d0596225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274e3156-886b-4bce-9139-7fea9ee0ac44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b63d1c4-4491-4bd7-9b7f-dca71fa4a891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f947e2d1-0a4d-44bf-84f9-437b598808c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4fcb0a-8422-4e2b-a53d-97264e67b76a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d65b4e-bc00-4e76-8005-13a8597ec7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f428929-412e-4375-9cd8-e308dc524579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f06ec4-445d-4f94-ba09-eabef7fbf1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e365b70-6f04-4a64-85d0-a249cc51d222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a635157a-80ff-4a5b-bbbf-5bc776fae21f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf6fe9f-3e13-48a1-bbc2-d8823e4b9448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa382d7-9fa0-45b9-803f-78abf32f0c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82845b0-e7a9-45ef-96ab-2b967421105b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c0f6adb-5e5b-4cb8-a7aa-50f634182dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18676d5e-251f-4a6e-99c9-d3ee81e5d562",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11c6bd8-e38e-47e9-b6c6-fcbc6b042399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc19dd0-fd39-4748-8a7b-2039ee9a5985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ec89ba-98ba-4132-a779-d98a95f97528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5e8e93-2ae8-4396-bc7d-c0d563739a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ff2926-c7e6-46c3-9f95-b8d5b0d22eec",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ce8032-a3a1-486c-adbf-50b2e0161e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a0dda8-a43b-493b-afaa-fa6e486ac9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc992c9-0dd2-4f32-8914-0a2f13a0652d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "34e5106e-5d1f-43dd-87f9-cdc9c2f55764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d272bfb-071e-48b3-9b04-68aeb1f4c856",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b152ced-2909-4717-bbb8-dea5b9a5f9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06cbe2d5-0a69-4fda-b72b-0cbb86297355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86d4bca-29ec-41ae-a331-d5eb9d2c5552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7988c9d8-d6be-48be-a6c9-f14f539bedcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244fc88d-4ba1-4c57-9eb8-0ae6e698753b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df23e0ce-1be9-4fc0-b150-eb40524fdc56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345281d4-c5e3-4a8a-b238-fae3f95422e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91629200-1137-454f-850a-468d927083f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "639fc795-443f-4803-a5aa-86a95c3773e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd86fbf-b15c-42d5-85ea-8f9618b6fc94",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cf4990-69f7-4b0b-bfd9-905a82166052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10758580-59b3-4a69-b63f-b4b16d24c88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114f683a-2db4-47f8-938b-2b48eda83d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f068a750-cf3f-41c5-a9a0-ecdfc4804b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d12003-2fa2-49d5-9eee-e460520075a8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d065c5ba-27ce-4ede-be3a-e50dd5e3620f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3104cfc1-3e72-4715-8d46-878474f3d9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae08642f-f1b0-4ee1-86d3-61641803b48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2accbb17-6632-4304-9e51-bc5d5292ddcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f28239a-960e-40d1-8c84-9cc70b171af4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7adcc9f-68c2-4c9f-94f7-2ce8a67a9ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "72a29773-7bed-4e33-bf5b-a3a1a1fd2c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47123ee-551b-4440-830f-c37b916463b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0cc9464-77da-4898-9a67-2bbe33f409d5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ce10f7ec-2a33-40e1-8cef-d92ce49979c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3ff71b7-c018-468c-9fb6-94154ee39778",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6dce3b-97b1-4fa7-9121-67a642620463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c978806f-5689-4224-a30b-36e51734e58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797a30f1-c7cc-47c6-bf00-a571baaf6f6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "78aa5dce-e58d-4e76-ade0-d8ba75e69b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69505f1c-52b3-403e-bba0-b3e9558889da",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890ff39f-98d6-463a-ad3b-9772de771015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b19d85cd-6880-4611-b274-23213eba12bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670d75cd-68e1-4cab-80ff-fb1c96a16837",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "61feb8c0-5a04-4d95-8a9c-4465a3d41403"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21471fc6-58bb-48bb-aea6-fa7be9117297",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e4f826e-6c95-4a93-8ed6-dcee07021d6c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28802459-45f8-4763-9143-f4025ed42e72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6d282ce-c674-4df9-aec9-6bc274868c97"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3376ab4-b417-4de3-a477-f094c6f7eb45",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "598f12c5-206d-4e68-b64f-b486efbe905a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fdf833e9-9a22-4736-828a-732cad49ee08",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c4d4025-d35a-4f84-806f-bb9b251e74de"
                }
              }
            ]
          },
          {
            "id": "814ac5f8-1d30-4c74-a044-dc2ca1db1803",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ae061729-2a09-48e7-b916-3b1611cf549f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e84f5cf2-63ae-459d-9e3b-a9029e88cb28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91a836ff-f141-4e50-b778-c34d768abf5c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02446ef9-4094-40f9-a64e-cc964becf096",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "52880ac1-d2c7-4a95-a5a7-b168f31d7212"
                    }
                  }
                ]
              },
              {
                "id": "265b95d6-3644-4a10-aee7-92eb130983c3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf2845ee-2c75-4cf6-bb8c-815d814b2efb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b4c9f51-213f-40eb-ae44-3c6068f3fe86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63f07d82-e978-4fcf-b859-e335d082c9de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "368ebf59-50b6-4569-a6d9-56938193bc29"
                    }
                  }
                ]
              },
              {
                "id": "01c922ab-b90f-4e52-8ea6-3b6c38273abf",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6ba9cee-2570-4881-9238-19d87ed73092",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d90e4bcf-85a4-4556-a0e1-0cd789011bf3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49b8338b-e3db-45b1-b240-285d7392c62c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a06b08fd-b27a-40e5-a1b1-e89bf78146ab"
                    }
                  }
                ]
              },
              {
                "id": "41f4d805-d14b-4c0a-96cd-b99dae12fbcc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db683a5b-1793-48f0-a020-a6e4d8751eef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "607be5c1-8609-4f72-9414-8df5cc4f4312"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f836763-65bf-443e-a174-f5a42b49421d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9cc111f7-73fb-40bd-932b-69501bcfaa14"
                    }
                  }
                ]
              },
              {
                "id": "2f1a3f8c-4aee-4bf2-8e6c-93abebd83288",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f64f46a-d1c0-4fe4-8920-496e8515001a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6725228-2c56-4b68-8030-021c010efd6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2c3301c-301b-4e00-aae1-19c78e7061c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "db8dbad6-111e-4967-8d87-95abb7049fdb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6219b6b-6d2a-46ba-9468-271db0b806e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb500621-395e-42e6-9697-cf8133aa1892"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "48fff7d8-9994-4b67-9d6f-86cf13add52b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "874a0953-1b05-437b-b28a-639d9042a3b4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4faf8785-1c96-4b22-b411-0bcf6844a89b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5a42d9f9-d134-499a-acf6-90d2418c3ec3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a435766-459e-42ec-81ae-bcff160cc557",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c975c329-56dd-4bf0-8502-c6e3213c052c"
            }
          }
        ]
      },
      {
        "id": "0c645a6d-d259-4908-b68c-c028821f4ddc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "785d6d1a-7738-4cd1-b446-d8b5a30fe246",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6ab9090-b6a7-45f8-90b7-d42a9bffa1c3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54a0054d-ecf7-4506-8607-92b6643916c9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5824e620-b2d6-4269-af0b-a30895ebca79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c6abb0-3ec0-4f27-af9b-4a6828c686db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33612fc7-deb0-4e0d-b3ea-5c44254dffe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b34672ce-2e37-4a8e-85f3-c3e92bd63faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbf7723-f5a0-4bf8-93c7-3a5c7cd2726e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13947903-8c0c-4f48-857e-82e7c1dc1d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d07fc71-2356-45ef-a56f-316119a16740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa127f57-ac18-4a97-be4a-5510fa10cfea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29185bd9-2ef8-4dca-8599-3c1c56a7be41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cabff01-d1f8-41ba-a1c1-321902b7574d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef2c910-febe-411e-a84b-4262783749d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c491a0-0086-4bb7-a2ef-b876bc5d938d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c319db19-8d25-4a02-9aae-6349f83d9a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4509254f-6e21-4765-acdb-c5db9d562eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fd8909-4e60-46d6-b0c6-4a0ef911d4cf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc28bf62-f44d-4383-8479-92e4876938e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8883de13-4cb0-464f-8df2-5be56e4a2087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7eb28a-28ee-4861-93ca-23b61cc2c179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2c2c47-d0ae-4f1d-aa68-eda45a8a31bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c35df7-c07d-4fc5-9fd8-c9b87c52dbab",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b187cf-5595-41e8-8b2b-703f296ddd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ce7732-26df-4e65-a561-6ae1fa496618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a5eb4e-f3e5-4531-8736-41528de0c64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2ae5e0-1e14-43e7-931f-048cda03ff91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017d3f85-4fdf-4c6a-bd2f-5e4f22f3700a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f38ee8-c991-4552-816e-3df3c703e297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c845af-4513-495d-93f4-023b12313d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31340803-c86d-4882-8fa0-eda122cd06e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d88bf9d7-6b1c-474e-92c2-5b872b00dde1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97dd43f1-d467-412d-a30a-003a329a60fd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f510d81-90d6-46f7-985f-531a6ec9e475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9891c655-c697-4e14-af1d-60469bc197e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ec974d-779e-484e-8014-c5941453dee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "97e7eb14-2769-45fd-9dd7-e49b959e59ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b16b91d-d09d-43b6-a228-b7b32d88d149",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aabe802-fa7e-47cf-917a-7ceac5f8f2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c41cc9-9339-4b9d-a27d-2e5cc2fa45ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8ff6e6-391f-401c-a71d-0932243cca23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84953f4a-355e-48a4-aa18-148c4a70b203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60256ae-bb04-4420-ac63-ea4b6721fe65",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20df798-c3ec-486d-b933-a6886e9cddc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c41872e-f6fa-4455-a894-c4d9dfaf94cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90183972-f052-474e-9035-030f8fa181ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f89616d8-1c1b-41d4-916e-9dd475308fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d58c6f-3818-4e6a-8a5c-980342cd354f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ae4cd7-a4c4-4ffb-ac59-e5b0b238411d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e05423-700a-4921-b9ae-750c2ccc0f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a163dac-621a-4a39-a0cd-ba953244c872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f89bf1cf-9423-4c81-b57b-89cdfdcd7ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a28060d-1a17-420e-a271-462daa3e4bfd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b8dae7-a354-42b1-a926-d51baf403ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac77ed0-7297-4cb6-b378-c0f0ada18852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0b80fd-e078-4ff2-9201-b12dabf7b41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5907fbb6-0543-410e-b4a6-2a57df8bebb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7650c9-00bc-4d78-badc-b5bf45d719a9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c0792c-027e-49e6-8592-75f8162f93b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed2d824-ee22-4c43-82fd-2ea5f38faa27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd7a2f2-1f2b-4d1f-950f-e2c8c8db6b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f84a881-8c01-4015-960a-d7eb90d260f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a096087f-ffc3-4e3d-a5bb-5fc4320832f3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9284a8-0462-43da-a91b-487b6612496f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233ab428-a0f8-4f73-85d1-f2e00d861a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc65c0d-94b3-439e-a276-d13441be83bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbca89d-3a8c-4690-a778-96a225a9d888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d220ec6-5b0d-4b79-a054-7cf4757f116f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9989e82-3da7-4049-b26a-d3a17157f97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab771866-a0eb-4bb4-9758-8bc61728e8c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b9b6d0-29f8-4b20-a76d-68d4e4331d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b09143d9-d21a-462f-a012-6a8fb58cc4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb963a45-277d-4f9e-8276-57e5c83ae18e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5175b058-439d-419c-855b-794558c3e4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c20414-7d83-4eaf-826a-b516b5b788d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6033ccd4-1afb-459a-93d5-fc52baeee6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3abb90b5-dd09-4274-8905-98a03aa56f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42fb98c-f428-4a8f-b919-251060e59b18",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48017b66-339a-4937-bca8-58b552b3b271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ab828e-5049-4113-a9a6-27c6e5283bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c036ff-1e9d-4b10-8383-460f418016ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "10c5ff8e-eb01-422e-8c90-d4794bacc634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c475b1b-cb33-493f-b349-a00069499112",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7d60e2-3907-49f6-b101-228d49b4ebd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddd38c5-9d1c-4882-a119-6aab74fc7bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cc3147-3b01-43f1-b5f0-53436f3f4d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "72633a9d-15d9-4905-8e50-42e392c80000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dac9278-3c9d-4e30-b46c-4a1062306ab6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7b286c-fce1-44ad-a722-d0f0efdc9d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466231fd-27a2-459f-8a34-4158b87de7e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747a812c-7418-4382-b61d-c99e6250e45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "df17e419-b765-4c95-bf2c-ae7077e4cda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4529cf-0dd9-45db-9dea-a5a98081436e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccd5af4-3d65-4b29-81b1-f99a2a930c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be53fc5d-f6c5-40e3-b850-15de3c27126f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da09f9d-dd8b-4a5e-b736-7f751b162f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "488c4565-10c3-4161-a2e4-7cbd328a2dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b74f16-dee1-487d-82b6-eac4824cc1de",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffb6399-08b5-47ae-b345-4a129b196366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43427f44-c74d-4669-a876-d6bb218a84e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e5b2d7-d87c-4052-bc44-b7186bf57690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56f7e91b-b307-4fa6-b4a6-d497d149b8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fdb89d-2f0f-4b5c-9e63-c328c649aae4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe53181-abc1-4703-92eb-0a868f0fd6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747fa44b-1149-4728-a139-be01e0c6f6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44361b68-40ba-404d-8a38-31a1d12b137a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80abdc39-0ac7-48c0-b556-745fbfc91969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3d097f-a042-4246-a950-010d5694e822",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbab3331-0e76-4c4f-9553-1706c88ccea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88917c21-eec0-4ac5-b1cb-7c70baebc0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5afa2b-3d7c-4205-9d04-c97f3d6e35bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5062db71-aac1-442e-abb5-efc6de2c4aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6124fe-0305-485b-902a-4839e3adbcbf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba3abe4-120d-4fcb-b850-d6b5abbda171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c11fd64-315e-4081-b073-2b430672ee69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2d7e9a-61a2-4e42-8b17-c3eb210c4d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "544cbf23-7f5a-43cd-84d3-9820c3886129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf3ffac-e642-41e6-ba85-5e78a0ae3114",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba84e698-a283-4801-9d38-f27a26cd2410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53e24e1-295c-4243-9797-f75f38a596fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193656dc-8ffb-4429-8c5c-afdf823b2212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "971d9139-8129-4a8f-a8db-33659f394647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d445b986-5a03-4f72-b851-c5f1a7f6055d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75a8fda-8621-47df-b564-930bb8c9a5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35083e90-452a-467d-8dfe-58386ffdb341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8203708-81ec-4ca3-95fc-a1159e9f1aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef0fa8c-104e-4c94-80bf-b7e85328610f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bcae35-7ec1-4d78-87e4-7b7fc581994d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ba3977-e9af-4b87-a23d-2e54d353b9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b254ab-ca95-4d8b-8d56-37deb0521f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1133d2-275b-439d-820f-dc0baf335ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2cbfaa-242e-4c9e-806a-a65372e7f798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc87280-4b82-4e35-8157-c8eb3ad330fa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0e86d7-8536-47cd-986a-1cbfb2c06b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d7d881-e9a6-46fd-b6d6-5325dbf4de4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c9b5df-9cb7-445f-8fff-755b34d9d05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65319389-d344-4a8f-a9a2-df862eb05b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b460df-44be-473f-b47d-3793ef35db29",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "842c1c5d-8a7f-4c04-a470-deb88685c3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27e12fc-a9ea-47c2-bc85-ef0460002794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc36416-5f53-4eb6-98fb-51715ad7521f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cad132b1-c574-4cff-a163-ecd9743e402e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3040269a-21b9-4a22-a2d4-93376a7757c6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a402dc-7948-48d6-9f9b-2d376c3d0224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bfda2a4-c8be-4145-81c8-4df0ce9127a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e39734-8334-46ad-bf70-997c1c85c05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba475d28-ea09-485b-8651-2208a836cba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efe2d44-f526-410a-a4bd-57c0c0352c39",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5f8a22-5ee5-48db-8c59-a36ba4f38062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50795183-bc80-4baf-9cea-3b8cc8e3092a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10730803-56b4-4cba-baf0-ed88c69f99ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6937e49-e4be-45cd-8096-921c14ea5b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9e3d58-0e77-4605-8898-c7e67e8c6fa0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad663259-a85c-4ab0-8016-f5a24570779e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab5462fb-4416-4daa-bd8a-ed3b2736f786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067f5f07-da4f-42b7-8279-4f58f8c96e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "099f14f3-63e6-4de1-8681-aade3a2e7846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7324473-e53e-449d-91f5-c068c7b94182",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a5fee2-b8b3-47bd-8167-6a65f14f51a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fab5a81-7387-4ed6-8c48-54f822a845c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b21efc-48a2-4958-b217-6affce4ec351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe86ad3d-39b6-42cf-927e-4ee32ae09145"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "04185802-49f5-422b-8e20-eb8de993b021",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82ea1afe-5968-482c-b38d-47ebe613c2bc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e07eb09-378a-4e58-99db-2207068596ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37486786-d32b-4c75-98fd-bf25865d3128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "034b6276-0ac8-44f5-b155-e2163d0716c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c53fe6cf-d2be-46eb-8742-61a601b97b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1ba2e0-4353-4609-93e7-e81916c8d42b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52320b5-fa70-4dbe-b456-2db63d394d66",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "44839d08-59ae-4a79-aad5-8268f9d146b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e682c607-148b-4031-affc-c56943519e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1480172-5ae1-4c2c-8a28-f2f2ff52c52d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "615229a4-9358-4781-b1be-49a5b269e177",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29f26845-1714-456a-b818-7fe78bda0d93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1c4fd25-5925-4d4b-8017-772cee759055",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc1cbb59-35a1-4c97-b9bf-b6528c4c7b5c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de136ae8-e08d-4552-8ea2-89843a502819",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b833961-1dc2-4316-996a-3d713eaf6fb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60948885-89a0-4b78-8675-35a4f2ae2c55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f2c1d8c-2d3f-45a1-ae01-afe4e1c1a72e"
            }
          }
        ]
      },
      {
        "id": "5bff8c9c-ff77-4051-8f02-72146029796a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "63b325cf-dbbc-453b-bab5-0bc28845823b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b015098c-3558-4d20-b15c-e85ba910ec3e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04aa801b-d89d-4ef2-a4fc-a7de80ffe186",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b47127-d00a-43d8-b39b-c0b1ce724702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001808d8-9de8-4b7e-aa86-c660b7f34498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478ab076-a166-4b92-9b63-c66c54995b57",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae1c105-c10b-41e5-a563-203e0b6dd1c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6ec3c0-ccff-4a87-8fe7-da4b6759caf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1878a230-1a58-4ab2-96f6-d2519f8993e9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe27a0f-4801-46dc-b57c-98b56dfb0d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07dbcd6e-97fa-4521-a670-5245f515549b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a7100e-48c0-47f0-aa34-4fffd4583ba8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928e8a83-2d23-48e8-8ce9-f12d6e7772a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed13b7f-9a74-441a-b02c-9c7d832337d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f876ca-5619-4a4e-9d69-a8684441d17d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb04439f-5c12-4e5d-a32e-02669384aa68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7240b4-ad45-4bf4-b408-1fb6239c2668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdceda7-2c4a-4769-9117-34cc681f700d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02cb0b5-2fff-4ebe-8e8e-e4212e3da2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94435c4b-503c-46dd-aab7-f6de0ed68f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0196155c-82b2-45a0-836e-02900523fefe",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97327e75-91f5-4606-904b-2a04d4557632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30a7628-67b0-4712-a391-a05233b5951d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733d0338-b92c-4b69-a098-3ca239ef5865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "decabd7f-dd7e-4759-aa65-8ac73465d339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c8d781-4ab5-46cb-a6fc-43bc99aa66a5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac952351-b2c6-46f3-9ab9-3154cfcdff86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f96e90a-6f7d-4855-a262-c79f8a528158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9dec07-af92-4053-a522-bef96249634c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6ef4d4-0316-4767-9956-2b04dba77d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb41aa1-f744-4983-acb8-17bd8516c8cd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc3fb05-60ec-4834-96f3-dc96462d3044",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeddf1ae-1ee8-4966-872e-49e94f45f790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b79e52-5350-4ffe-b868-195815d570bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66fb10d-aec4-4315-8adc-4cfc565d4a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7d87c8-9345-455d-9ace-66a7ded51ee4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523e3207-2cc9-41b9-b0c8-14cb6474428e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39f6ad08-39e4-4813-9cea-4768f8149ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874e32a9-0b90-4cec-8876-5cf482d75db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be0457c-8790-4091-89c4-898efd68c82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a30539a-4cd4-430e-9f93-66cbbac0966e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4774afda-b886-4699-a7dd-3fc4802eedba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e274ff3e-ef88-4287-aa71-fad7a6dd8a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba64ae0e-0186-461f-a055-de66d3e4bc09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0b3bc4-c2fa-4fe5-8729-00676c4a04b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d190a5-9e75-4a24-a44b-bb66fdfbc1a2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd35a6e-6ebd-47d7-8656-8a5706306d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d42a93-cc9b-4943-a729-1bc729536bae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82067582-ebe5-4b6f-b8fd-4e0912c6620a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75af66de-2b40-461a-a949-152afcaccf09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b181b7-f64e-449c-9a76-0e70d46f1915",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64061444-38c2-49ad-8aa5-1cef84402df0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c273b0b-eb74-471a-86ed-09e2d4b30338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30308fa3-9db1-49c5-a6c1-ad9238000413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afeef662-be7a-4475-85d3-e28cb0f3e431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb2d293-47f4-4fe3-9976-7ea3457cd7f6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2c0db1-26c8-43ec-85a3-9b8d832f4a53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "874d4e04-8c83-47d5-bab9-5c3e82befde5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b19a275-c06f-4d6f-9ee3-b6235e40fcad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d462e432-405a-4084-a435-2e338f9c6ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188f3a6b-7065-4be7-b75d-db359d4d19e8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9661e6b3-494a-4add-8ad4-01d92871dccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38f7f28e-cf44-42f8-a172-1d508a5a6e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d67470-7ff6-4f3a-9a0f-e1cbc0153e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7194ca6-8bd4-483d-a90e-bd2d602842fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24303a52-208f-4104-a4e6-e2cb4b8caa28",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daf29c4-8682-4f31-874d-7841f97fcbdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7516e8b4-17ab-48e9-a04f-3465ad7bbf7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93316b3b-abdf-476c-8ece-574e2d65f74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd16815a-9197-43b1-96e6-a0c85217862d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0da452b-bcfa-43d4-adf5-5ee23ca19a31",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9a6154-8e72-463a-b724-fc590b5da4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48c9581-3a18-413a-8344-c1aa701f1702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41949cb1-bb98-4f5a-842c-8dcc83b888c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7228e2a8-a0f2-4478-8c45-5880f37283cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98250c3b-33cf-4fe4-bea8-05d0119ad7bc",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f339c6d-4404-4abd-80b0-e1f36053f620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde1d63a-56f0-4a7e-9d10-b51acea0d6bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3251e51c-f776-4cb1-97d1-1416b1135961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef27cd7-c982-40a3-8b8d-007194219c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0f786f-71f6-405e-b87c-ea68bf736730",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650f6e71-3f05-4287-819c-84d6a514865b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5bdb53-a11c-486b-b9c1-55c8d879be78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc61ae63-8ef9-4151-a80f-1d19dc7310b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f76a36c3-5b9c-4555-b2f7-41538b6dd2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11e384f-c7ac-41eb-b316-b233bc855e0d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61d465e-c369-46c2-8c56-66268c8a9201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53163f53-daee-4b66-be62-1d2c1459a6bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "609042b9-17b7-4a7b-8b82-591fd7b6692d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038af75d-bcf1-427c-9c69-b0bafbb9ce3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ddc0793-db03-4f95-9633-642c8a38bb7b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ee2b15-913f-4c84-be1d-35c131631ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669ac936-7888-40e9-82f4-7ee561a4b989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f0838e-8978-4dd9-8102-ced3b5c3023b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823870ac-fc67-4218-858c-1c3f89c7a7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b640dc-8544-4130-ba5e-9034a8e83bfa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7b054f-c9b9-4426-80b6-a54676049f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7f22d1-ab67-4182-b038-9728224a9c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8857e399-e393-4087-9d1a-24c95512265c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825a20a1-071e-49d7-9482-fddf2114741e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a174fcfb-1a72-4ec9-b99b-4ee8415b1aaf",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2584c25-796e-487e-a245-636e53180626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0012c7f5-c6fa-4a63-bd76-c3a7975eb3f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6452a317-89e1-4260-ab71-2cbdbc628566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2678ab-0244-45a2-90bc-7d009a64d28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc32ab07-c1d1-49f5-894d-0ee2615cbd92",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bbb1a4-51cb-4b16-acbf-9400cb8e05ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52408d9-aa92-4055-a48c-7127bf14d136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91de7f43-b6e5-4ccc-90a1-2b6a9e7287f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb737c58-2530-4dcc-8a74-da129b232d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ed846a-55c4-4a72-b06a-3d0934bb3059",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b4f631-4d7a-4e9b-88a2-436183cd94a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "039d3a66-65a1-433f-acb3-9d367b5f4fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "971d679e-4d39-4dc4-828b-7b6c488bf38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cd2095-6f83-4838-9348-6ba929e9a23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e940e6b4-6ac8-4b15-99b9-5fcd929e9536",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bbd119-c5d8-4c06-8031-212470dac3e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "218f1515-b83d-4e99-a5c1-9c71aa7b631f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7916ef91-7507-4149-bb50-65a7c4f8116c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92bc9e52-8477-4dd4-a217-353c1fd1c5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb694d0d-bd61-46d1-8dd2-009e36d73884",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507f1d51-8ac9-4f0d-a5b7-fd4bfca64395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "616dc52e-64dd-4492-a420-e4a6eb210c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "991938db-3fa7-422b-ae37-6fab0f6a318b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969e68e4-cd90-45c1-b533-372abfdd7d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94b7912-2586-4ded-a8ac-a9cbb27d857b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127172b3-ae7d-4831-b62b-2a6d6d585d2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be04c6b-5a22-42be-a4e7-c37c33a34a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f220b9-226b-487f-9cd5-c60e83ad208b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "561b3978-7c3b-4dca-b8a6-9cacfbba3cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a9050d-9f96-425e-8f9f-169d4c4d4fff",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a53eb6-26a5-4926-9e6d-4141a3cbd64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af41c08d-7a99-47f9-905a-ab50c3996823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fa7fe2-cb87-4441-a544-a7a543a027ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10798fc6-69d9-4ef0-8b20-35e47a458c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47f43af-19de-4d80-b202-a9258e2480d8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877fbbef-8c2c-4bf6-814a-e2e6a7ab8270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c33cf288-348e-4650-9091-bf4e991acb28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce31f18-47c5-4c6b-8c62-a8269c9a9b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754daf68-aff2-4e8c-b069-aaa407290b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ba57f1-78bd-4b7c-b387-15ca6f29d704",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31de22fa-3ca2-46b6-a32d-2f2c047a6815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0266c34c-8f53-4473-8cad-05eac96ed3c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1987d709-de08-4188-b77c-502ea348263d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fec77c-0fdd-4259-8b7e-a81d0c82c072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df195212-bc29-4a89-b498-68d08ee86d68",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565e77dd-aeaa-4a03-b7cf-8085a58f8cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "922caa37-be4b-4918-8e6a-d92a6e4076f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea7fcf0-23b4-4c07-b892-b8e9964f658d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d79730-bf16-4f96-b3dc-adeb1ea010c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cf400e-5246-4a90-a253-9b0f9214d5a3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418f5f1f-f025-4295-a1a5-f0438654da88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4797c912-f773-466c-9230-cdbb3cd32cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a19bbe-4fde-4623-ab40-3ff86ccbd37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6bc43ad-33c8-4f66-8681-7287791528e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ecced17-48df-4e7a-9b3f-e006a35812c3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fedb16b-ad2e-482e-af7f-4bcf8cae2cd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "152390d7-44db-4901-b604-cc48afc3b727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caf594c-4c07-4e93-b926-3a3f9bbdfb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37288fdd-b183-4274-a398-d2c49c8217bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382f2e2d-16e6-4e06-9980-6d328d3b059f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4963ce3e-2b89-46d3-a28c-7f977f53e3e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7c03db5-c791-4ca9-b82f-474fd9d0b0c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba72cfa3-4325-4522-ab48-2ba613ab0146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde495f9-191c-4377-91b4-870515fdef65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea085aef-3929-4694-838d-a489d983204e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d159f9-8232-43a3-a2ce-71513c6fd628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d46e729-890b-44fd-8a40-7a8866e56b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa2fc2f-dd73-486d-884e-be62ee40535c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b566ba-df9f-4ec4-aa3a-a74ccf724fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58515a8d-0c58-4060-ba18-59e8265a6c1c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242a5d9f-0aa6-44f0-a307-b57a7d7d9051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f2a950-ceea-4a4d-8668-c9e652b4afd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d484277e-a66e-4250-9623-b9f7f1b4164f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e2bb38-1e0c-4511-b07a-c56ac9668c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643a7133-36da-448d-a4ac-1a09a8f3ab3f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4e1d94-1a6a-4dd9-8c23-df49fca3c6a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70976329-1b92-460b-8f9c-dc223a20737c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7048e21a-4237-42be-a10a-c5a28980a1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d982c286-cd96-4b06-a6b2-1a65f1c6aff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4ec478-97f2-4115-b84b-357f81fd6bff",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbabca0-2bda-499f-9f09-5dfdfd3cc92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdf12d8-fea0-4d8c-8467-e40a0c1ad9fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5e4ae3-adb2-4e8b-b7cd-3a443c1f1072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df6dcbb-0a85-475c-b7f8-493f95dacb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f516211-cdba-4b8d-bd8a-e989341d86b3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577f47b1-a577-42b2-a182-5a36f4750293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca687fd-d8b5-4c59-aab8-c2d708bf16e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbf8426-8f0f-4cef-ba2e-c336181dcc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "194e3947-944e-435d-96ac-f0d7983892fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a943d407-706b-4add-955f-0234da6dc752",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723c8893-feb3-4dee-9f2a-c0dbb443ceca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a289136b-6693-46a1-a479-3b657afbf5da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "324c5193-30e0-4c53-a880-0e3fae4555ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf625748-2b43-4a37-b758-487b146f8e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1263f18b-63d0-45c4-8811-7a52c8d849b0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e61516-85b2-435f-b37a-ea708cab93bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1ca1ab-f224-4700-8c48-1fc5092c8957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56530aaa-edb0-454f-86e8-f94100c934ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409cf039-c38b-47ac-8300-a15c34259e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678398c2-cc23-49ea-a68e-757f0bb888e4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8449591-9591-4d8a-8693-58b1bf06c104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be2a2d20-3f16-45e0-b4cb-d42e4b0dc966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b154011f-7edb-4867-9076-0231eed8f36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de11f349-64c3-475c-8ab5-62885620abb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1357b19-b5dd-4722-8201-9069e743b1bf",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611e24af-b079-410d-a3a4-8f1617845d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8550fae1-b43b-486e-833d-0e815361833f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e62f38-9ab8-4efa-82cd-6ead4ca37fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6bdb098-f0a6-46ba-8098-1d3cd792294a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0cf968-d4c5-484d-915f-530e62bdd1c0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a6948a-da8e-4539-82e2-b76ef422b2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e23c66c-d1ae-4272-a51a-48e7a3c0695e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ef1145-72db-4952-9d79-852ef46c9e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4828b282-7245-4e33-b9b3-0f67421b1b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e39f4b7-20b9-4c9b-b1fd-bb74829a8bd2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1601777a-3330-4318-9eb3-552843422427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5b2ef7-5969-4638-ad79-3cd59ac4c300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4bf97a-fa26-4243-bc78-36cfe7a48cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77164e8b-efbb-431e-a7d8-d06ece8ed6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99b99d3-d6e8-4747-942d-12447edf9b4c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64652d75-2a0d-4015-87ec-7e46ecf81bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea40422-2a5e-40bb-8c06-ec020ade5371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f3ace8-afe5-4e8a-85d2-0fcd87b21f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29ac8fb-2bf3-4e09-aa9f-6345797b234c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ab509a-0578-4cf1-a3f1-4b53809f8c4a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50d4670-5d17-4f20-8ad7-1e0aa71096c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c97cc2e-86f0-402c-9f58-c91f62b51085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c670ab5-7c1b-4774-859d-007a39d7fd38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f6c3db-6833-4816-84be-f8865a5819d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdac7027-60bb-4339-a7a4-442bd47af825",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632198ee-b515-49d5-b46a-eefcbeca4bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf0697a-9d34-4a18-a9ad-d318edddca79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afdefdc-c759-4282-8c29-fef84f7c8cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9f9609-e7d3-4698-be38-966094adba9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7895fe37-d33f-4a22-91c3-c95779f1a800",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a36fe8d-008d-4a04-b8a2-e62417507458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65803db2-a5e0-4bc0-9b15-e69f402df129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7f4d5a-f379-4da4-9693-a8b3f2ae8397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abc5b49b-cd40-4a73-bed4-82cc0eaa689d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a2228b-c885-40ac-8582-f830c38f3110",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9272a749-43a6-41f3-96af-70c494bff68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d657a0d4-5f78-4c55-9e27-34d4ec56c99f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d816eb-f0b3-4f42-ae58-b36cf7991ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3434f20-24e9-4441-900e-2e7e486e5993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0470a5c2-3db5-4e3a-87a6-758af6db9968",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7a4cb8-f57e-4d83-8b90-7d34431e85f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a6451e-4581-43ae-b599-283b0fd0451a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc752824-0cac-4270-a0f9-40812a5b5ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0993faf1-8050-4642-b1c8-14db2bc25d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba9e92f-44ce-4f96-abf6-0150db5761a4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a851e18-5a76-4462-8f31-7f66ac3807f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256b2b30-19c6-4fe7-b81d-830dd51bc2b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac5564b-81c9-4dc5-ba7b-6f9aec859ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f00eb1-c01f-408c-8c8b-751474eb2e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c57b8ce-72f6-4893-bf56-6ef549e464c5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e16bab-5b79-469e-b6db-c2910dc8bbbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a5c914-d3c7-4349-9325-af88e5405d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2261954-c85a-434e-b7c7-e69f3383b8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266e6a4b-0391-4d7b-9b54-c5a1980207a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1297a44-d5e6-4946-986d-40042da25458",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce04e884-cfca-42f4-aa72-4e1726351215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2d4bca-4a08-4aca-9db2-5e3d94e0439e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3c2d02-ac01-4713-a4bd-c81c43f5683a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfa6a9c-411e-4e32-b3e4-346961606c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c6db61-f43b-456d-a7fc-bad64233efdd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38beec9a-7346-4341-bf69-adbc505928e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f58af76-aac2-4cdf-bb5e-2aca55d0d846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe39fc9-1524-48f4-880a-1d889de357bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d900d3-e2bc-4615-96e6-b2bb7e134c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8adbcd2-7c00-44fa-859b-2a90d8617782",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b48662f-9e41-41a1-87d0-568957d6cf69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b55937a-4a5a-4fa0-b7c9-31bd1c00b880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c7b679-142d-446a-812d-f4de0620c08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4996bf-455c-4228-928a-1a23859ba0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb19ad5e-8687-47e7-ae91-d95f7d048535",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da51d17c-83de-4c70-ab48-e8e9c02ec4cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7185e1e-eda6-4e05-bec5-6e931c383d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa43fd0-0ffb-4cce-8a39-cc34f8142bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06a893b-d6f4-4089-a115-80b26d343020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70fd645-305c-4a96-bd2f-464cbced1f36",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb21931-d39f-40f1-96f5-3fbf2810a9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d1ecf7-dc61-4a02-89bb-79b4690e9c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5f21b5-5d9c-4fc5-81e5-ef98003ae846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62b0f9b-3232-4716-8a64-4566e3fd3d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74450f0b-2d2a-467f-bb56-9a8742916ed1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6934246c-3439-4e92-b5ef-28d83387c0fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47e4835-c852-4c7e-9e60-a6c7fd258159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d3146c-9071-4e5c-bb0f-34c8bc9594c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21c88aa-38d8-4b89-a3e8-837134a7c4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9972bd-6abe-49bf-8591-cbfb539c516c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c58d300-0b2d-4859-9672-6f0500baa8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6c64a5-3fad-41d8-ac8d-8465827f1136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2079b02-4f3c-480e-b85f-04c3926a5fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3920df38-0750-4abd-99fe-7e0f2f360055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357ecd9e-bceb-4622-b667-96044e485bfb",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fa9c1c-9de4-4c11-9e68-03b2eea43196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ddb388-42c6-464e-8912-74ec51bb8b07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1d47ca-80c4-45e1-aeaf-d16289ca4c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528a8760-6299-4d52-93bd-5a8812e73dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2773b1-fcea-41a9-8734-54d570d9aed6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989c9f86-9245-47d4-b2a1-6ad45f962700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f635416-bb7c-498b-af96-0000109638ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73cda1e-819a-4755-b5b9-23b245ddd118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bb4ef0-c81e-497b-9961-05d32e7ab4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a88a2b8-c5ac-4503-b4bb-e09cfd482d7b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b5d00b-64d3-4510-b646-a65e7e5ccbc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17830483-dd97-4eaf-94e0-a34f747a3cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1aa0ae-88e9-49fb-b67f-c8aefd2b21de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387faaff-5d42-4974-bef4-883d91bf42ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dda0144-13b9-4d11-886f-a89758e3113b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab6ab8b-178c-4043-9021-a73ac521c052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c716878-abd7-4b66-8ab5-7059a3de1e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d614918c-d6af-4374-a618-20a9d821cdc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931de4b6-a757-4034-877b-650270d92cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51d1fdf-bc99-4d6f-a81f-9cda71d9a538",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4127b500-c050-4cbd-ba75-bd0329980e17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56fe9b85-69b7-4861-b286-160f0e2001e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdb4794-d17a-488c-9fcd-44d20a270d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01385067-d0f8-455b-b587-d40b14541d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b26dd6e-3e8b-4abb-99a9-c7f92a7d81cd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d54679-dbe8-4fd5-b106-694c1a8194ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7159f09d-c618-4b6f-8bbb-4570fe030132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec0a940-83e0-499a-b9e0-716c3b73d1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c24323-8b97-46ce-9182-2524e16bfdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c665ccd-48d4-442a-8f89-eae4530180d3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fee9f92-e0d1-418b-ac9b-3b7537f6723f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c448dcd2-8ff6-4ed0-9a72-1f0923c62b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5158f542-3bc1-4d65-8164-c745ac0251f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1ca330-6669-41e3-8d69-4d2857ffb131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445ea4a2-e418-4164-a438-fb771ef18700",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cfe221-8252-402a-976d-0512ce4a7201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb61f1f8-b7b0-42fd-a68e-12e2601f0722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9cd560-902b-4e23-ae8b-e5745f9a3eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75cfbe33-7a39-4a50-9210-de8ba23f5e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cdfbcb4-70bb-49d2-97c6-cafff4acc10c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ffffee-d540-446a-8003-06313a4fa711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d3e2192-001b-4506-940c-1f64d66721a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf33c138-b9ac-4650-b95f-cd0fc60399c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d471e436-0860-46a1-804f-384267a41fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d05574-0284-43a3-8c51-709cfd2fc7d3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eff0f07-d37d-49c3-bde1-7b0757c14f95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "759d575e-fb6f-4119-976e-87497931579b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd52ca10-a9f4-4b3a-ae54-a6fce3ff2a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e30e8f-8a41-487b-a858-5b7142fc20f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef11a2e-0178-4883-a5ab-554104daa413",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b67d41b-4a71-462e-a949-f1704a46ff07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252ed6a8-ed59-4988-93ba-287c9e4ba9e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a74062-7d0b-4d21-8ea4-0e8371993de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2018913b-80c3-491a-b3df-02644d650291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e2b9ed-b333-48c5-a3cd-20422216464b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96143afb-ac08-4fc8-8a76-ec453e1a810f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51c1feac-fd57-4ed9-a062-ee1b53e22e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f00a5f-0f51-4371-8675-080e593a114a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0c7d33-b488-4281-96c6-b7c01d3153ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f308e97e-ddd2-44d1-ac6b-ac8f23fae9f6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccdc3008-5647-4eac-8009-c072291ca315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c035a343-1bf6-4b5f-b756-c694de7b3a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfaac42-62f6-4bfa-b77d-3771c58602c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f58ed3b-96da-4d28-b8f7-07d75fcbe339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6eebe5-8be8-407b-9f4f-a8ea0a43d5d9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fde37c-811a-402d-88d3-724d96fc4122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12c5a4d1-24d4-4794-a80e-73bde17a3406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ceb142-8ec7-434c-8b5c-7088e448ffae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a684b4ce-8ed0-4617-b81c-5235d9651984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e0c779-a244-4a63-81a1-c78dee2db2a1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10aac99a-cc2e-4cc4-b40b-2c1983c3615a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "306cbfb0-0328-402f-a951-4d24e4820574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8074d7a-4e1c-479f-b936-130250ed75b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141af330-b996-4267-b0d1-7d17e8862ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a6255d-f15a-49c9-9ee6-598029423458",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3732e7-d0ec-4d0c-a1cb-bb718dc28ef0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72a591e9-1c4a-4fa4-ad7c-6c91c2d2535f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efa4dba-ddb3-4a35-b067-5e086acd616d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0720e0a6-a5f5-4a26-b1e8-1ad0abd4766b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40dd2be3-0378-463a-9960-8303cceff7d4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fedcc919-6b7a-4067-9af7-a35724edc629",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d03e5925-fd41-49a8-b3cf-75d1407aee6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d4d253-5fc0-4220-93b5-ce258b873e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714dade3-87a3-45a2-b437-94c966339718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c1c502-b1c5-4a73-af0d-9a5f9c6c98ea",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24a1bdf-6c34-4755-8225-ae0bdd8864ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dd2f318-f2d9-4b74-83ad-c09f4c46cd48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68b08e7-544f-4494-b207-a5aec65cf4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc66458-093c-423f-b558-7d38df7d4557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72971895-b8ee-4502-9bd4-f783c7533fba",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac003f6-bf74-43bf-ab12-d470bd122d0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf9cbe78-638a-4ccc-8e29-dc652aa6ae3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcea4f3e-e386-4312-b6b8-6c32e2e44c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1394a1-afe0-490e-a6bc-ebf1f04edcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccb03a2-3622-4c0b-b41c-6b22b394d26c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5893491d-172f-4efd-bf6f-364fb3b858ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "670ec26e-2132-4927-837c-66a1b0cd49c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2531f236-c65c-4cb7-b23f-64fc367d63a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add832d1-7667-413f-b12f-2bb86f926dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af34cf60-99ec-49fa-974f-64297c8ab70f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761dec08-eae0-481a-b804-2a6fdbdadd37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "821beb16-d075-47c7-bad4-1429658ead58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e034d7-d7ee-4fdd-b852-42b09a37046d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f669cf1-27bc-4797-953f-936a510fe5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992cf1dd-a678-4372-b6ab-67830f056db1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea028295-9eff-48f8-988b-5367a7d70fff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19b96571-be4d-4444-a95f-c90651d78336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5b7773-00d6-4131-8e5a-beaa8fb1c9eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe5e683-d3d1-4eb4-ad77-e9ddb70f8bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841c7f74-a61c-44ca-89a0-785033435b48",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ca2337-5cc3-4148-8981-89864f46811a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20d4cb3e-611f-4baf-9826-1d5153713400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f574bc-83ba-4ef5-b6d2-fbe67aac0d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5acc00dd-1410-41bc-b6f4-2ccf59906b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c0772b-fdf1-44ff-bf93-c6c953ad5f1a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1816caff-3cf3-4998-a175-2c54b9fc749f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27150f57-2b66-4f40-b383-2707b8af196e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc7639d-3994-4a0b-b5ee-61df50bb64fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed9aa00-3ac7-4bba-97e6-25b3ddbe5099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c3f4ea-e656-4a46-8c9c-604b52c5e406",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c4a496-3626-460e-85f6-53f30ac89c2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ebfa0f1-86df-49e4-94a0-d1530065fec0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad940e4-c28f-4242-b125-13fd89933669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa74f765-3730-4cd4-98a1-2cabc18841be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68a1f87-a3a2-483d-a525-731c1fa3b65b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718dabb0-ff10-461a-8447-23d327d098a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8b8adf9-d32d-4f14-a1cf-e7faddb17226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49af1e3-3412-42ea-995e-6a1c0e421dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6d4363-b32e-4746-a986-c8541ee3339c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb53d192-651d-4b7b-a22b-4dbc4c4e28e8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2c7d14-6e39-4231-8879-0bd5acd9ea1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab1e589-025d-4bf0-ad58-cda026d6256f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf938847-ac1d-4e82-9e36-b670542e9510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552df580-b72b-41e1-9174-4b8e622a5723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4b9a88-a8dc-4738-a05d-3b2d48c34858",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6c771c-6d81-46f5-b0a0-b84de6a407a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e3b49a-fe4c-446a-9a3a-6c7892661995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af79947e-ebb7-45cb-b90f-3f2e3771ee80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eea9e89-1880-4de1-9dea-1ad9fe221be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18b5bc9-0e99-448b-bf24-a9d14424ea47",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623e2bc9-3c73-4b62-8b3c-7e8b6fb57c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39bbf223-2fb0-4262-8464-dfb7f712f97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d0e99c-47b8-48f1-81e9-5481b21927de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6470d0d-8a9a-4528-bccb-43e9ddfb5abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28476f40-6974-4dd9-8849-4f216ac4e7db",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da62989-3b4d-43b7-9469-789948e727af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9504a647-6f0e-4d56-a398-27d4557166b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16f1d28-1f1a-48d6-860f-0272bbb9e2ce",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8bdd36-f575-41d3-a513-4e6382629427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34f2fb0-9944-4fb3-bc74-d8ac88b78107",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142b9960-3adb-4630-88cb-8178eae2ed0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4efdb6df-656f-4904-8f1c-ce76b7f15dd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc554660-810a-4308-a26d-b0955dbe6d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c191038-136c-4dc8-9f03-db2f572efc47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeaf596-cb79-4cc2-9bb1-899c8ae034a6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5f8dbb-b011-4a0a-bf31-7d8a4cf1bc0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cb48ca3-faf9-4d22-92aa-1f3d9a3471cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb18ee96-c024-41ef-a83c-ae590b57b46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26443bc6-53ae-47f5-928a-1ae070f40514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ca72c7-3448-47fe-8910-23d9ff2dff36",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51d50bb-556e-4bab-91b3-f213ab193ba3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def47e1f-77fc-4a21-9774-2edfe8005a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db327db5-9662-41de-b833-bca918ada439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a886c085-3ffd-4d9f-87a3-4654d2e15ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc540e21-8f50-43d6-8822-95ef3beabf7a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4018c2dd-581d-4386-94e9-2f35bfd548a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a45082c-92e8-4bbc-9831-80257f1d6d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccea6982-1941-4f61-8368-c5e99c5809e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c08cdf8-2f58-4dfe-8800-28ce937587eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9aaa93-cde5-4ba4-a442-32325539398b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242a053d-d4b2-42b2-9237-f166efaa8a26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3198194c-6f04-46de-936d-a069231f782c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be40b1b1-5580-4350-94d6-d5a6f7bf32e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1129ce8-7cd0-4a25-bf75-3e81200637a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ac897b-bafb-4413-ba6e-fea7c785f533",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721845d0-1185-44e8-9113-fb7e2fea1d12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e03fedab-9aa5-442f-9a52-70db9b506249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2a1662-766a-483b-978b-c5a93a6a66a5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a085723-dd2d-4b46-8ad9-650d96232bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b10bda4-210c-470d-b640-961cd826b223",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b214180-841e-4d09-9a02-81f6c91202d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e4f4a06-6f9e-4cd7-9320-b35ac36a00bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e079b29-d503-49ae-bef4-2d9100c15942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4baf7217-100b-46bf-8230-82197cb630ef"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a973e11-ac76-4a76-8932-2eea308f063d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c732e21-b15b-4de8-8ecf-5650bd7c72cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a5f1497-8134-4a71-b723-2253a9d4d4bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15d3f8a0-06fd-47c3-97b4-2162cb86ed71"
                    }
                  }
                ]
              },
              {
                "id": "2c2ae7a2-e26f-4cb2-a90f-9fcdd4b2edb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4dba5f0-e76e-4e1c-a64e-c6d8a3a534a5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac67db4e-d13c-438c-9d2b-d98f8a2c100b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "127df662-cf4c-4960-9cf4-cdb049172693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85894b2-cbdc-45c3-af0f-32a6025a3535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "892996d3-15d8-420b-8681-a3a091db1666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86147856-ec67-48ea-9c1c-242baa6e6009",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71e278d-fec2-42f2-9a06-2f7e61582169",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6332fc39-9610-4237-bc60-7897af6d8e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0471268c-6cc7-4eb0-881f-a07c6323580e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63844fe5-d853-483b-a1e9-cdc276bb0803"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e25f73bb-c57a-4a45-afa2-77f2c29f1540",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03c84eb9-f531-4f32-aaee-200634d4f94c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a048251a-243a-459c-8c70-e1fe96f0d952",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de5d1013-dcaa-4de6-bf45-d92e861a707a"
                    }
                  }
                ]
              },
              {
                "id": "5970b9d3-3fc9-4928-a065-879bf0377362",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9d292c7e-a94c-4bbd-b80f-aa7912b2d3e4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cc9748-6e11-40ff-a439-8d5acc5e0347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "30402a5f-dc5d-464f-9ae0-7f6fded7e295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02845570-3e22-4507-9599-aca7f1627fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f36251-8ca0-4a21-9da0-5234626d487c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bd9e6f49-f375-4cf1-86c3-859a6bdd4ad1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "90fc0b37-14d4-4dce-a005-6a6cd18b9f4e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b05d5e8-2d49-4be8-8990-8c70bdd2a036",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "149970c6-bc2e-425e-a1ba-550ae3d99234"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3b83a5b-e82d-45df-909d-8d8603c3de7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3799325-dc7a-4e30-ba81-125d1d1a5c54"
                    }
                  }
                ]
              },
              {
                "id": "1795dee4-8d30-43cc-bb11-9e43b6f7bc17",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1db2e0ba-c09c-45e2-9430-8d723f23b9a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "38ed4b26-83cf-4541-aa93-ceaf6d01e32b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bf9937d-2702-41d2-873e-119f45dd7cd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6ed5e3b-4dff-4522-995d-aa5a2403ffbc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d41b9e9f-439b-4053-a369-bb87c08b542c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d8275480-06be-4d02-a40f-69ff2387ece4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3829b93-f858-41b2-b4ad-936038681367",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a953ad7-755c-40d6-a598-9cba6caab84f"
            }
          }
        ]
      },
      {
        "id": "73fda354-f126-4127-a801-2c303ca66be8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7437d6cf-876d-4e4b-bcfc-bcd5bcab84fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c338b086-4e3b-4707-87ba-0c0976cb2137",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "870035f3-0948-4a88-8356-ab102c67cfed",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efa9b63-2625-4512-8d1d-5c7ed7825a16",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "09434053-5156-45fc-b7eb-d1db973fc934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fa246a-c1c0-42f7-a052-d4f339c5a924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c00093a7-7a53-4b8e-ab5e-024fb3633d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042d0eb4-a81d-47c6-959b-f1c6b71211e9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e7ec4d-bfb5-4aba-b082-42f70614c83e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a5f7563d-2120-430c-90c8-cb4375b30f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68efb43d-62ad-43cf-9c05-73777c4f7dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3cb319c-7837-4cc6-bec8-ecd14710f153"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "599bf1d2-df40-4ca7-99f6-4c90523e9c3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a0f8726-bbba-4049-ae86-ed3641e1da19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5f50619-0dfe-4e0f-acd7-bea042a0b9a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76583f60-775a-4993-b076-852edb6c7539"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "505a1a44-28ad-4ea7-b739-b0ee164470ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "345a18ef-7b3f-480a-8505-b864727bd995"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b159ffc-2d3c-48c4-9326-56b01539c930",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ffbdbcaa-349a-4fe7-bc7d-3329f806bc1c"
            }
          }
        ]
      },
      {
        "id": "4f152619-976b-47f0-a3c2-27465bded9c3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b402e3fe-f443-46fd-80fd-35a020e81a14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ee9ddbe-1052-4372-af0b-fee2bc4089a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3612ae2b-29e6-4c1b-aeca-a2921191c41a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63bd1f2-7e09-4502-b300-8812d6ab74e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "90698bde-02cc-4f27-a979-3922e6d608df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e65b88-85c5-46c7-b0c5-a3fbdfa10b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69f147d7-5425-446a-9f45-19a7757c2d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890f65bf-8fec-4517-a830-f0d3ddf467c2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8533c3a-369e-46d1-92cb-58ebb3715579",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c5d33f85-49f8-4470-a30c-0afee414e6b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c008c7e-b788-4764-ae43-9da3078b11e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0943adf0-ff1f-4965-a74c-2ecda982effa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4f6d13d-cd7e-4e1a-96a8-9e2295a3e384",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85acd550-a3ca-4778-9093-7f3a7dac416f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9898cba5-12f4-4225-9fe9-2d5992a1f502",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df16e8b1-4888-4562-9344-dabae2b26313"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a532e735-8595-436a-87f7-f9e1760e4fb8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc6c22bf-0f7f-42e9-b79e-6f04be00b0ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c490b2fa-0f27-444c-b7e9-b995da2927b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13dfafef-3361-4701-b264-b5f80b4a5a17"
            }
          }
        ]
      },
      {
        "id": "93e9037a-da8b-48e8-9da8-12fe12e7aeea",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d1317923-4d0c-40e0-a5e0-0f4f7ba116ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83b4b2eb-72c0-49d1-b2f9-13bb5785b7af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "281c61e4-f9f1-4c6e-be0e-be15db079e24",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5232151a-b72a-460e-a05e-9572e8339c5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c3047133-9c43-4094-8726-660d825f110f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17248e11-ad88-48f4-bf79-ec13345e7803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d35652da-483e-47fd-9e45-250bad80d33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a5da91-67f3-4330-b50f-69f615eaa486",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d38d64d-70c5-44e0-8d03-24aabc654aa1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "73fbe1d7-74a9-4a01-98a3-06a03f371195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83357e8a-3381-4bd9-8b73-bdf015ac07fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0364f87d-b77b-40ca-ad61-519b392635ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d2db8c6-4f34-49d5-99d5-f332a8e44710",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78bd1477-ba7d-499c-bba1-d9f623f283b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1016f82-8afa-49fb-b7ac-1fa2cd12b1b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "584be744-4086-4f75-bf63-820aeedebd9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5293025-f122-4061-8e64-70e12f006e5c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b44623b3-bf54-426f-a65b-24f880a76f73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d5760d8-1928-4e58-a2fc-31c00ae6addd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "730e9cbe-5ae1-45fc-ae1a-9a070649a704"
            }
          }
        ]
      },
      {
        "id": "e564b11e-b0aa-4bef-9ec1-a2baaf5d7ec7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a10a7c7e-4bf6-4fd0-817e-297c5f8334a5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f0baf4f-df40-4c83-a920-0853b704d8fc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a7b3b9bf-6f1f-4f4d-bc3e-37b06da77151",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc1b4062-bf05-4d0a-9b52-0cdcf1034f67",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0b42c84-fa69-41cd-b84e-0bfcc83d4de5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 443
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 139.88366406870492,
      "responseMin": 7,
      "responseMax": 1627,
      "responseSd": 215.33418717776064,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672447006777,
      "completed": 1672447053188
    },
    "executions": [
      {
        "id": "6ed407e2-3a61-4e0a-a5a5-e4c6e4425a00",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "48e7297d-81db-4296-a6c1-a62e6ebcac7f",
          "httpRequestId": "9fa5a9ab-d23a-4d75-bb91-909473d84769"
        },
        "item": {
          "id": "6ed407e2-3a61-4e0a-a5a5-e4c6e4425a00",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1ba38608-6cae-4856-965a-903fd69e1f1e",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "7c9f0f0d-5c17-4365-b1bc-a11a1061ad37",
        "cursor": {
          "ref": "ee08b19e-2ea1-441a-9185-93e361ba6c1f",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "eea6589d-d2b1-49a0-bb52-76aaaa2d48f4"
        },
        "item": {
          "id": "7c9f0f0d-5c17-4365-b1bc-a11a1061ad37",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6042bc32-426a-454c-9697-50d6bc2bfa4e",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "ffb7471b-e323-4e13-865d-d01f17dd2797",
        "cursor": {
          "ref": "5214c555-b16b-42e1-9f32-e320ec0eab8d",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f8e17d4a-9265-4e41-950d-88a67adfe9e2"
        },
        "item": {
          "id": "ffb7471b-e323-4e13-865d-d01f17dd2797",
          "name": "did_json"
        },
        "response": {
          "id": "5fa4423d-7740-4e1e-ad28-eb9b178f10a9",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 1290
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622460a5-d9ff-4d86-8a0b-987e453edc87",
        "cursor": {
          "ref": "6860119f-268d-4716-82d1-08232614f195",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "df85bfb7-21a1-48c8-a198-59c4e982a6de"
        },
        "item": {
          "id": "622460a5-d9ff-4d86-8a0b-987e453edc87",
          "name": "did:invalid"
        },
        "response": {
          "id": "aebbf1bc-6dd9-4920-ac8a-e2e095cf8c11",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1111,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "622460a5-d9ff-4d86-8a0b-987e453edc87",
        "cursor": {
          "ref": "6860119f-268d-4716-82d1-08232614f195",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "df85bfb7-21a1-48c8-a198-59c4e982a6de"
        },
        "item": {
          "id": "622460a5-d9ff-4d86-8a0b-987e453edc87",
          "name": "did:invalid"
        },
        "response": {
          "id": "aebbf1bc-6dd9-4920-ac8a-e2e095cf8c11",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1111,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "da17dbc3-237d-43cc-8d05-29fa435eccdb",
        "cursor": {
          "ref": "dcdd7827-c56f-4b04-82ba-5c6187a7df73",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "497d205f-6038-4e19-a8d6-fddeb0b5aae5"
        },
        "item": {
          "id": "da17dbc3-237d-43cc-8d05-29fa435eccdb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a4cadc01-3d4b-4c2a-8066-09b26445a059",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400618c3-ac65-49be-88b3-a6e595937abe",
        "cursor": {
          "ref": "2b163159-b2b3-4975-96f0-526314531373",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cf4af74d-7df6-49a5-99d4-f56086043f54"
        },
        "item": {
          "id": "400618c3-ac65-49be-88b3-a6e595937abe",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3202ec50-8e46-4ba9-8484-392d318829d4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4d55b8-7f05-4b04-ad21-18d3660d1833",
        "cursor": {
          "ref": "f1095ea3-e6e1-48c4-b528-5dedfc6ac4d6",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "201d4400-24c6-4975-89e0-0cefae8fab38"
        },
        "item": {
          "id": "9a4d55b8-7f05-4b04-ad21-18d3660d1833",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "eee8c7de-89b0-4c52-b060-b51c18bbdd08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "77b1deed-eae7-486a-a10f-884d8902dcbb",
        "cursor": {
          "ref": "1ada671e-77c7-4977-9eba-4fb41b78e749",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1b281b1-2a7f-483b-96c3-c78ef9aaa3c2"
        },
        "item": {
          "id": "77b1deed-eae7-486a-a10f-884d8902dcbb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3ef19369-f5ad-4467-a3bd-8b542fad48ce",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 1185
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "77b1deed-eae7-486a-a10f-884d8902dcbb",
        "cursor": {
          "ref": "1ada671e-77c7-4977-9eba-4fb41b78e749",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1b281b1-2a7f-483b-96c3-c78ef9aaa3c2"
        },
        "item": {
          "id": "77b1deed-eae7-486a-a10f-884d8902dcbb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3ef19369-f5ad-4467-a3bd-8b542fad48ce",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 1185
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "64aa5568-2c6a-4bcd-aae5-9486c18e7524",
        "cursor": {
          "ref": "d7006c2d-d8ea-44d0-b585-4add7459ed90",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "79fbe806-097d-463e-949a-6fe5fd8a12a6"
        },
        "item": {
          "id": "64aa5568-2c6a-4bcd-aae5-9486c18e7524",
          "name": "identifiers"
        },
        "response": {
          "id": "9102c0d0-4fcf-43c1-8faf-a86eb48b07c3",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 1185
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "c75f0dfc-0608-4133-bb1d-f972bc977b8e",
        "cursor": {
          "ref": "5e98dca4-34c9-4c34-90fd-a1232ce234fb",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "96dad44d-1206-415a-9a15-12b4a11e09ca"
        },
        "item": {
          "id": "c75f0dfc-0608-4133-bb1d-f972bc977b8e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d1966b00-d6ed-46cf-acf3-2d0677a8be82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75f0dfc-0608-4133-bb1d-f972bc977b8e",
        "cursor": {
          "ref": "5e98dca4-34c9-4c34-90fd-a1232ce234fb",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "96dad44d-1206-415a-9a15-12b4a11e09ca"
        },
        "item": {
          "id": "c75f0dfc-0608-4133-bb1d-f972bc977b8e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d1966b00-d6ed-46cf-acf3-2d0677a8be82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798f6c41-4a1e-44fc-b46a-e7ee74c55122",
        "cursor": {
          "ref": "8f04a5cf-7bb9-4a44-b5b7-9099a158bcdd",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f6161511-8517-4c14-81f6-fd298ade55e4"
        },
        "item": {
          "id": "798f6c41-4a1e-44fc-b46a-e7ee74c55122",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0117d7b3-e3ee-4df3-b368-d4b202d3ca94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d6c36f-f269-4a82-b5fe-ccc8affce039",
        "cursor": {
          "ref": "02eace87-39c1-4dc9-8fc7-35a4b13211c1",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6b793ec7-55b7-4884-94ac-c4df1f4e397e"
        },
        "item": {
          "id": "c2d6c36f-f269-4a82-b5fe-ccc8affce039",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "6ec48bf5-439a-48af-96f4-89ca86c7c3b0",
          "status": "Created",
          "code": 201,
          "responseTime": 1385,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "0af65d6c-1bb9-4110-8c64-b8e67c3fbfb7",
        "cursor": {
          "ref": "af601103-27be-4cf9-94c9-229ea24eb151",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "974f2f3c-6848-4514-ad28-a01fe5d58bc3"
        },
        "item": {
          "id": "0af65d6c-1bb9-4110-8c64-b8e67c3fbfb7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "406d974d-41df-4879-9294-ff4572226b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c735660b-d4a1-4dcc-98f6-4c71530385c0",
        "cursor": {
          "ref": "64bfa659-d4bb-4b97-a5c4-80e908b4bb43",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "394408a0-2c99-4e8b-9cb2-dabccc88e0c1"
        },
        "item": {
          "id": "c735660b-d4a1-4dcc-98f6-4c71530385c0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "49f52f8f-4b88-4dda-b67c-a7f5c3de456e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7168ae5a-9892-4418-9350-dd5a09769b3d",
        "cursor": {
          "ref": "cdc24383-c9c7-4357-a66b-1601acd33d75",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8af69a5b-ffb5-4cd7-9409-f3edb5498c18"
        },
        "item": {
          "id": "7168ae5a-9892-4418-9350-dd5a09769b3d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2ad712e6-4131-4201-ad30-c9b65ad42290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0557588a-5f58-418d-ae54-06b87404d744",
        "cursor": {
          "ref": "c5f6340a-21b2-4528-8bda-15c91841220e",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ce57e75b-0a94-4265-b755-10d1ee91a730"
        },
        "item": {
          "id": "0557588a-5f58-418d-ae54-06b87404d744",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "70b6ddf4-877a-4fbe-b025-c7b319e1ce84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e46293-7194-4b53-9b03-8d2e963efb3c",
        "cursor": {
          "ref": "d28bce38-e5d7-4a66-a0f4-e72c0861ed0f",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7e84982e-47ca-4d2b-9b04-8d8c21b84d24"
        },
        "item": {
          "id": "d4e46293-7194-4b53-9b03-8d2e963efb3c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8d8830a8-1cf3-4bf0-b696-ee15a6660ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c66299-4f77-4360-8413-0c228a1baeb3",
        "cursor": {
          "ref": "abdf86c8-997b-41de-9232-5a425b087c52",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e73b6c05-aad7-495b-b500-48475a7e7c00"
        },
        "item": {
          "id": "96c66299-4f77-4360-8413-0c228a1baeb3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6ccd3038-952e-4cbb-8809-eed3a5f2e13a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 563,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "ba15f17c-9f34-48c1-9330-baf238301a86",
        "cursor": {
          "ref": "e5ec13e7-8d52-4d21-8bbe-86095313258c",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3b43845d-8f28-4b4c-80bb-f688ef58c0fd"
        },
        "item": {
          "id": "ba15f17c-9f34-48c1-9330-baf238301a86",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "777a1c27-4738-4a68-883d-ff06204cb0f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 481,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a2ea07cb-2a58-4cab-a438-1a7b8a19ccc1",
        "cursor": {
          "ref": "115375dd-9c70-47f9-8ad0-21d646d87aed",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ea0de57c-9f1e-417e-9c50-42c3347a51e5"
        },
        "item": {
          "id": "a2ea07cb-2a58-4cab-a438-1a7b8a19ccc1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0dbe0fa4-3ee1-4e7b-a8e2-016f5b4c7622",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 636,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b72be3ae-b8de-489b-965d-90f5e65cd9ff",
        "cursor": {
          "ref": "1ef7582f-bb7f-4422-a97d-a5690abe472c",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0fde9818-3f7c-4af7-9891-e366d4c0ceed"
        },
        "item": {
          "id": "b72be3ae-b8de-489b-965d-90f5e65cd9ff",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "804ecd42-9baf-49a5-93a1-ab7208eb3072",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 237,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e0abf6db-7f0a-4cd2-94be-94dcc01d23f4",
        "cursor": {
          "ref": "86ccc97a-a8d8-4992-a091-0afed4ee99bf",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "314a14ad-ecd5-4d3e-8d5f-26ea9b179f61"
        },
        "item": {
          "id": "e0abf6db-7f0a-4cd2-94be-94dcc01d23f4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "972c415e-5f9d-412b-bbc1-0d69cd344f75",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "d8dce298-5130-440e-99bf-66cfaebfbd2d",
        "cursor": {
          "ref": "219d601d-799a-453e-b3ab-f97025de26ab",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d6659b8d-382b-4c91-99b6-a74f4ca11e66"
        },
        "item": {
          "id": "d8dce298-5130-440e-99bf-66cfaebfbd2d",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "bf032168-872c-493e-8a5c-9cc13f2468aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 274,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "bc9d7a48-3f96-4324-86c5-d9120000242a",
        "cursor": {
          "ref": "39e3619c-9ef3-4989-b62b-06c8c3ebc32e",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fa89c062-60c6-487a-a882-39e06dc58afd"
        },
        "item": {
          "id": "bc9d7a48-3f96-4324-86c5-d9120000242a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bd51d827-c811-453f-82c2-203ef0cb35da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 156,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "123412a9-e0c8-46ba-98a1-1b55823402a4",
        "cursor": {
          "ref": "ad622a63-2d6a-47f1-84f3-57fd87429604",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1b67db2c-02a3-4585-9105-d743f8c42763"
        },
        "item": {
          "id": "123412a9-e0c8-46ba-98a1-1b55823402a4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8778109c-a6ee-4ed7-b262-fbadb0fecfc5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 297,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "02d1c06e-759c-4051-a7ec-4b4a0a7f879a",
        "cursor": {
          "ref": "f0f63e60-dabd-44cd-86dc-3a6f420d4da2",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d1d666ad-4634-472b-8c87-d0f808285807"
        },
        "item": {
          "id": "02d1c06e-759c-4051-a7ec-4b4a0a7f879a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "09856e4c-7480-4ac3-be1f-a69662612f5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 116,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "fb9c0a0c-9c81-406c-9a48-5c7a1c38eaff",
        "cursor": {
          "ref": "d0cb0a45-dfce-4c96-8586-fb7a6981ed39",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2d43e37f-6b22-4296-a9e4-764b2a5b3a6e"
        },
        "item": {
          "id": "fb9c0a0c-9c81-406c-9a48-5c7a1c38eaff",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dd0b3015-b2f3-4120-a24a-c6a71f593148",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 289,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "83ec9829-e862-4cdd-8a21-0393aa937c2c",
        "cursor": {
          "ref": "92a90166-fd49-4232-9b6b-320efed26a63",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "59c8cda7-4884-4e22-9dc9-9d78b87f8149"
        },
        "item": {
          "id": "83ec9829-e862-4cdd-8a21-0393aa937c2c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "eafb7d54-09b6-43ce-8c89-b8b0ce02720b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 114,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "33c7b0da-dcaa-427c-af4e-ec8481641883",
        "cursor": {
          "ref": "509fff3c-d479-4708-b27e-073fc0d72ffe",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "26b25f85-f3f2-4b92-a77c-c9be490576a2"
        },
        "item": {
          "id": "33c7b0da-dcaa-427c-af4e-ec8481641883",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "03d7f199-6cb3-4981-ab8d-c04b52bc1963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599d7df8-8658-4a34-bd01-e714ac348701",
        "cursor": {
          "ref": "abe78a1a-f17f-46e6-8e1e-ac6a18aaf475",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3063ad3b-7b5c-4269-8de5-ce85cdb47f80"
        },
        "item": {
          "id": "599d7df8-8658-4a34-bd01-e714ac348701",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "33405748-c40c-44bf-b210-25c7aba75b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db7d73b-eb50-4992-bd69-61025a190ae1",
        "cursor": {
          "ref": "b1850d80-e51e-4f95-a77c-e5ccadb4076c",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8a5102a9-dd32-491e-914e-cf2a32c23374"
        },
        "item": {
          "id": "8db7d73b-eb50-4992-bd69-61025a190ae1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e5cb3300-67b4-488f-b8ed-e3e0e7f2f8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077d22de-1741-4e68-81a3-256afa3f35f4",
        "cursor": {
          "ref": "632f3f32-7580-40a0-b323-6d7c46fcf4f8",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "17bd1490-976b-448b-a3bc-e42df2df9ff4"
        },
        "item": {
          "id": "077d22de-1741-4e68-81a3-256afa3f35f4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "de5e752b-9874-4bea-a0d9-cbca5611d101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac2da1f-7d0e-4db4-8a5d-a0d9d7d01ae5",
        "cursor": {
          "ref": "d11822af-c7a3-4712-9edb-05ae7a607f79",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "419d3b32-6edc-4603-bc1d-942a9f5d9335"
        },
        "item": {
          "id": "8ac2da1f-7d0e-4db4-8a5d-a0d9d7d01ae5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "93f865cc-eb8a-4110-98ab-354b7bc3542c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48d2373-8d67-407b-96a5-eedb6eef123f",
        "cursor": {
          "ref": "8e729687-63f4-4f33-b91a-5cca3ebc451c",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "36b5f0c5-c162-4a7d-b9cd-c4375b66859d"
        },
        "item": {
          "id": "b48d2373-8d67-407b-96a5-eedb6eef123f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b759c9af-431d-403f-93dc-234bd34d705a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0246398e-3075-45e5-91a3-9b56b1e0411a",
        "cursor": {
          "ref": "74356ae5-2866-4358-a15d-5ce06abe9786",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "27eac9c8-8bc3-4a24-a2ea-8b5c5be562e5"
        },
        "item": {
          "id": "0246398e-3075-45e5-91a3-9b56b1e0411a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cee3726b-965b-46c1-a157-4831cbc639d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b9e016-7764-4b5d-9555-d76b69260d24",
        "cursor": {
          "ref": "8f4ec3e5-a121-4366-8021-49839efa0647",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8f5ae575-c3b9-485b-b898-02cb73f61be8"
        },
        "item": {
          "id": "72b9e016-7764-4b5d-9555-d76b69260d24",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9ca10ecd-9816-4413-873a-fcd83e7756a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74d8bd7-5cc1-41ee-bfa5-d465776a0a60",
        "cursor": {
          "ref": "0973912d-c241-42cd-a6a8-0151c561bc90",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "42fc1b75-0cc9-48cc-bbc5-846a7594f930"
        },
        "item": {
          "id": "b74d8bd7-5cc1-41ee-bfa5-d465776a0a60",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "93b24899-3bfb-4a13-9d94-4de27da5433e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15e348a-6cc2-402d-8a81-3b17cb5ba12d",
        "cursor": {
          "ref": "3ce1f55e-a55f-4900-b1dd-4e579ed8124c",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "779b1d15-5461-4ab8-85f0-6ca07346f9e7"
        },
        "item": {
          "id": "f15e348a-6cc2-402d-8a81-3b17cb5ba12d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "183ec2b8-c770-457a-b666-d006ac97d950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d938cebb-6cfc-43f2-9ac3-b33474c01d46",
        "cursor": {
          "ref": "dad8dfde-fdf4-4097-b3ab-414e3075b137",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "794b6214-c815-4eef-a381-ef828962075a"
        },
        "item": {
          "id": "d938cebb-6cfc-43f2-9ac3-b33474c01d46",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5b88abb8-72ac-433d-a2d9-288b6e458957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe5d5fa-f629-46f9-92cf-e0a15ad6aee6",
        "cursor": {
          "ref": "555f5309-f063-4f56-b4cb-86e3c8865249",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "785487e0-c0ee-41ee-8a25-5ad10c639f62"
        },
        "item": {
          "id": "1fe5d5fa-f629-46f9-92cf-e0a15ad6aee6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "42bd7bf7-f6ef-4683-9bb0-12525abe8030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c110d970-9446-468c-8d68-e13e35fc63d2",
        "cursor": {
          "ref": "83bb8c4b-1b51-4ca5-9780-8809eed0f87e",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "449651c0-b8ed-4617-8fe1-a5f29da03cef"
        },
        "item": {
          "id": "c110d970-9446-468c-8d68-e13e35fc63d2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ba29e23a-24e8-4431-8737-baebe5776a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37f5685-aab3-4a5b-b820-f36f1a87c272",
        "cursor": {
          "ref": "4aed0291-799e-4dc5-bc8c-9bf2a64cd8ba",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "84447fbb-c438-45ef-a9e9-9fa84d69fc0b"
        },
        "item": {
          "id": "e37f5685-aab3-4a5b-b820-f36f1a87c272",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3a9b9891-b097-4d2c-ae7b-84c0efa874b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cdefff-d718-4a85-8679-d1efad8e3ffa",
        "cursor": {
          "ref": "badc6a7a-9e5b-4257-ac7c-3acde8d5028c",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "92f62d02-895c-44e7-a5c9-f0732c2bf3e5"
        },
        "item": {
          "id": "21cdefff-d718-4a85-8679-d1efad8e3ffa",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2434117b-9cfc-453c-a331-b083523ab914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23fb579-5139-4c74-ac0c-dadeaaeb190d",
        "cursor": {
          "ref": "4ce73c37-c151-43be-b467-5164cb648746",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4a44717e-c1d0-453e-af8d-b9cf50e3aa01"
        },
        "item": {
          "id": "d23fb579-5139-4c74-ac0c-dadeaaeb190d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fd20a4d1-55a9-40da-8808-17fb4b91ae25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59899e8e-c604-4241-b637-7eeeaeffd84d",
        "cursor": {
          "ref": "732f6b3d-5194-4f5d-aaec-264581940201",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "739c2dba-7054-41fb-a6ca-cf16b772318c"
        },
        "item": {
          "id": "59899e8e-c604-4241-b637-7eeeaeffd84d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2ca4bf11-7a88-4154-842b-b1a82f5cb546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db9124d-ad97-4762-b2b8-9d7e6f290d84",
        "cursor": {
          "ref": "94b82fc8-45cb-4cf4-8036-2245e1534980",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3508dc0d-3bef-428f-8bd8-31f32d7f9869"
        },
        "item": {
          "id": "3db9124d-ad97-4762-b2b8-9d7e6f290d84",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9d9f25b6-0023-48e5-9cd0-a6d123d5019b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 677,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "226f5591-bf75-4417-b3ac-d9cdb7ed00ef",
        "cursor": {
          "ref": "20ff1b9a-4272-4cbe-8ae1-d2431759900f",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "79988b31-2926-45f6-9580-0f7472c11431"
        },
        "item": {
          "id": "226f5591-bf75-4417-b3ac-d9cdb7ed00ef",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f71fabf0-82c4-4535-81ec-0e5f972ad71a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 494,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0dbbb617-e50d-47fd-8534-4440a9add10d",
        "cursor": {
          "ref": "160d5b96-55d2-4724-8ac0-d3cbfe431b81",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "293f8242-1001-4848-99cf-47bdfb4faef0"
        },
        "item": {
          "id": "0dbbb617-e50d-47fd-8534-4440a9add10d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "05e25f6d-ec4e-4b65-9ab1-789357067f22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 226,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "265e5b3b-7611-49b8-a9ca-6d28707159a5",
        "cursor": {
          "ref": "c5929e86-f5ae-4c1d-b216-cb5db6810edd",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d0d6d83e-4073-4ce1-9211-b36b5b68602c"
        },
        "item": {
          "id": "265e5b3b-7611-49b8-a9ca-6d28707159a5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6f32f6d1-a3c0-48a6-9b09-cf207a7dbefc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 251,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "608cf8fb-1765-4d1f-9018-a8c7bda77109",
        "cursor": {
          "ref": "3e8f274d-804c-4328-a4c5-de11432f0fde",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9dc21051-ef00-4d40-a76e-8032d7a8161c"
        },
        "item": {
          "id": "608cf8fb-1765-4d1f-9018-a8c7bda77109",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9b166d0a-2605-42ee-8249-1f586185869e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 460,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e393c946-32ba-43cb-a723-a00e6a89362d",
        "cursor": {
          "ref": "1c5f6c91-01c9-42b1-8898-80d6cf655d10",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "18226726-c81a-4b3d-9eca-3eb1cb81dd91"
        },
        "item": {
          "id": "e393c946-32ba-43cb-a723-a00e6a89362d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4d1ad195-c8da-4352-b362-3f4821546432",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 580,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cd1d49f6-3e07-44fe-b770-51a1148ecc24",
        "cursor": {
          "ref": "3b4f5950-0e9f-42da-aa04-72ce11b6d4aa",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fac8f598-bb39-47a5-94c8-8c29d9b7e3b9"
        },
        "item": {
          "id": "cd1d49f6-3e07-44fe-b770-51a1148ecc24",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5b697c9a-4cf1-446d-84cd-88755f0437fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 238,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "49791c4f-ee68-4434-8dc4-74db69810352",
        "cursor": {
          "ref": "e1e45714-38ab-4d84-bcf4-4ec2d02c7279",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "224178b8-88e8-4f25-a858-d85bd0549b69"
        },
        "item": {
          "id": "49791c4f-ee68-4434-8dc4-74db69810352",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "718b0cf9-1962-43f5-81c5-310ee2b2f5e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 223,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "3e0c90db-37fb-4abd-b9ba-e6244e8c75a8",
        "cursor": {
          "ref": "70e7aa5f-b541-4e87-829c-339702126837",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "108e5a67-48f2-4233-a3a3-d51a9306c7b8"
        },
        "item": {
          "id": "3e0c90db-37fb-4abd-b9ba-e6244e8c75a8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "454dd743-a8d8-4df2-b72e-a2a7e5e0b62b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 243,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "b7b7e181-bf67-486e-b0ea-e829f1afacc8",
        "cursor": {
          "ref": "b9140a89-f59b-4034-838e-18e1debd2ae5",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7f1536cc-9668-4d58-851a-0eb370bfdc4d"
        },
        "item": {
          "id": "b7b7e181-bf67-486e-b0ea-e829f1afacc8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c10c925d-8739-4df3-bf8d-c35895e62249",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 407,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "d22e073f-fe3d-4ab3-a1ce-000f629cf841",
        "cursor": {
          "ref": "753f528d-d319-4da5-b802-33b18331dc6b",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "26807e53-a6d7-40c9-b2c9-4a2dc52b7a6e"
        },
        "item": {
          "id": "d22e073f-fe3d-4ab3-a1ce-000f629cf841",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d0b4bdd8-d497-495a-8854-904701c79598",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 245,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "7993d3d4-2b95-4138-b9f5-70c79f591918",
        "cursor": {
          "ref": "b06d673e-325b-4fad-be07-ea59445b80a8",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "602920e6-6b33-4a7e-acee-d4e83d2d7222"
        },
        "item": {
          "id": "7993d3d4-2b95-4138-b9f5-70c79f591918",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7f186cc6-3f5a-42f0-b55c-837f018d3332",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 259,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "afa328dd-5634-43b1-b33a-f0c636f350c0",
        "cursor": {
          "ref": "193265ef-194e-4e84-a028-c291428c4f46",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6d3163bf-d37b-4966-b954-219565075fda"
        },
        "item": {
          "id": "afa328dd-5634-43b1-b33a-f0c636f350c0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "028af5db-3eb8-41bf-8de0-4cd599b06363",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 262,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "6efb9167-b589-4004-a3ad-560e92f1665e",
        "cursor": {
          "ref": "427e44d7-173b-46d4-948e-cb21f8242c90",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3a647c13-b22e-46ef-8660-b101164ee907"
        },
        "item": {
          "id": "6efb9167-b589-4004-a3ad-560e92f1665e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "125799f3-b880-43a5-a68a-b54c15670941",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 264,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "eaf08cdc-35b6-4ad5-9c5d-1327beb39dab",
        "cursor": {
          "ref": "b7da639c-eca1-4353-8c3b-5342b0b0f76b",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "82eff246-63fd-4d18-8202-07eb1d4ae9c7"
        },
        "item": {
          "id": "eaf08cdc-35b6-4ad5-9c5d-1327beb39dab",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ef4360ba-c2cc-4095-a668-f7b7d859d597",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 284,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "eb00bc07-54e5-4c28-bea1-bb7a74cd4f1d",
        "cursor": {
          "ref": "497df538-1725-478b-b4ba-d2822435dfa2",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "23ef721d-e71d-40cf-9f4f-2e49c292d313"
        },
        "item": {
          "id": "eb00bc07-54e5-4c28-bea1-bb7a74cd4f1d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f33f0b9c-2ff8-4a5c-b3f4-f70336170ad7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 299,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "1e8a752c-cff3-4b4b-99b4-c6d01c8377ca",
        "cursor": {
          "ref": "ef0f8861-6166-4117-aba7-3dac9c80618b",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c2d74668-75e7-41a0-8d0b-7edb46efd33a"
        },
        "item": {
          "id": "1e8a752c-cff3-4b4b-99b4-c6d01c8377ca",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c62d1e9e-b1d0-433d-878f-e12e4e3aaf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d290a22-d6dd-46c1-9875-373fdb258ae4",
        "cursor": {
          "ref": "e10d0ea7-ad2f-4654-b25f-5d35ee46eee4",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e5aec78e-3135-4d99-a504-6e9f6d0f8aad"
        },
        "item": {
          "id": "8d290a22-d6dd-46c1-9875-373fdb258ae4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "61dee222-28cb-41e7-904a-0426c2d9a925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24555af0-289e-4e6b-a588-3489c5183372",
        "cursor": {
          "ref": "fffd8e99-281d-49c6-b92c-0c9147aa3862",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f636001e-06dc-451b-bf87-b2ae11fa6b6e"
        },
        "item": {
          "id": "24555af0-289e-4e6b-a588-3489c5183372",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4366a17c-29f5-427c-84f5-cf0661ffec6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941eac71-19ea-41eb-aee1-a82f762c960e",
        "cursor": {
          "ref": "5fcaf7f0-3c01-413b-8040-85dda0fd64c4",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "deed66db-52fb-494e-b658-c063f59d222a"
        },
        "item": {
          "id": "941eac71-19ea-41eb-aee1-a82f762c960e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3baf1114-c6e8-483a-a183-53cfa1c45fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a0c0b4-39f0-4e9c-b7dd-60910686a325",
        "cursor": {
          "ref": "bd175fd4-8686-4dc6-bb9f-3b4d29c7ae02",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2c54fbe5-74c3-4b6f-bf9a-dda99045c18e"
        },
        "item": {
          "id": "69a0c0b4-39f0-4e9c-b7dd-60910686a325",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "eeaf77ec-d552-4931-82b6-258d7d0c29c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed812ca5-3792-4f71-8c9d-8283857ac217",
        "cursor": {
          "ref": "df975e63-6ccc-47fd-975d-d7c0052a8174",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "69ca3cb3-2f42-4bae-8b2f-d97aa6d4fa28"
        },
        "item": {
          "id": "ed812ca5-3792-4f71-8c9d-8283857ac217",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "37edf61a-f5b0-4cf8-b1e9-1ede0c4f35be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64dcaa0b-549a-44f5-a0b6-f12628ca5403",
        "cursor": {
          "ref": "65689ba3-a87c-4ab6-881f-93ee1faebd9a",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "43b88078-1447-4e51-8f21-f17d7d3323f0"
        },
        "item": {
          "id": "64dcaa0b-549a-44f5-a0b6-f12628ca5403",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "81abeabf-eb62-4ac4-89d1-42e4c2cb6e00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 306,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3bb4d67a-cca9-41fb-bd2e-1a5011bde98b",
        "cursor": {
          "ref": "d10ba416-f5a7-4e9f-9ba2-cc3338876a41",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bc81ce15-658e-4e7c-b64b-b116e674d33d"
        },
        "item": {
          "id": "3bb4d67a-cca9-41fb-bd2e-1a5011bde98b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "02485d5c-b4c7-4535-aa24-f4d042fe4daa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 258,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "22870f47-c32e-4484-b610-fe3e82a03c17",
        "cursor": {
          "ref": "643b5ed5-fdb1-47bc-9152-921b85b22e39",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d99b27b6-0470-43bb-a2e5-d5fc35abac6c"
        },
        "item": {
          "id": "22870f47-c32e-4484-b610-fe3e82a03c17",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "babb8309-d9a5-4629-b1c3-0f76e446952c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 248,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "aa8f1f14-f5ec-449b-af1f-f3288e8cc754",
        "cursor": {
          "ref": "2d2892b1-ae39-4a03-a424-1a27156cd654",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4df31be1-f8ac-4dc3-8c64-7e91d67afbe9"
        },
        "item": {
          "id": "aa8f1f14-f5ec-449b-af1f-f3288e8cc754",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "073f8a9c-a771-4176-a976-3463ca091695",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 372,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "de8df940-0eee-4859-9468-7e89d796a12c",
        "cursor": {
          "ref": "4627c2be-ae46-4679-9d63-4d52909c3529",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ca2c72c7-7c45-473c-a667-30e3af72dcd5"
        },
        "item": {
          "id": "de8df940-0eee-4859-9468-7e89d796a12c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d5d577c3-e6ca-4f58-ac26-9cb66e24a418",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 250,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "56af3aad-453e-481e-99c4-fb1ab76e768b",
        "cursor": {
          "ref": "c348f708-356b-4315-ac54-61192b1db5cd",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9db9a0b9-eb2c-49c8-9f46-21ba09439c49"
        },
        "item": {
          "id": "56af3aad-453e-481e-99c4-fb1ab76e768b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "49b89ca4-d2fc-4c74-9da9-185f8fd8f725",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 235,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "9acf45ec-d69c-493c-bf03-4709524362d0",
        "cursor": {
          "ref": "9eb744e2-4211-4a15-8778-d8ed35cd93d6",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "beb771f7-35ff-45a0-a751-3df95d7ddff5"
        },
        "item": {
          "id": "9acf45ec-d69c-493c-bf03-4709524362d0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f9ff04ea-8dc2-4eb9-8e42-00d0613c1125",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 733,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "f2793d94-3f0f-4a50-82d6-32e7b5a114b9",
        "cursor": {
          "ref": "21dd07ef-301f-47f0-809a-56cb06a1be9b",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "42622e93-980e-4372-b809-badea3d91151"
        },
        "item": {
          "id": "f2793d94-3f0f-4a50-82d6-32e7b5a114b9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3af0c7c5-60a1-476c-851f-fcdbcd3d918d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 345,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "7e783a6c-e187-48d5-b645-a59a341a190b",
        "cursor": {
          "ref": "1d9a0e1b-bdb1-4178-af9a-e1cee2b843de",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "91d3dd4f-1626-45bd-bf41-c7da3a0d2a31"
        },
        "item": {
          "id": "7e783a6c-e187-48d5-b645-a59a341a190b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "92959d99-e3f1-45b1-9cc9-67e39c097d03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 640,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "76a37fe1-9873-4860-b822-fda5fa304e63",
        "cursor": {
          "ref": "97c3b895-0861-4b25-8d2b-ad071c5b2a31",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "35a22fa9-faeb-4277-8e85-1adcf80afec9"
        },
        "item": {
          "id": "76a37fe1-9873-4860-b822-fda5fa304e63",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6dfe28fa-5249-4cf7-9911-bb88d641137f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 280,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "ea1775a6-ffa4-4bff-b362-60ad6c5c73c5",
        "cursor": {
          "ref": "54ab3f65-e4a9-4c8b-9623-6a0d240d3764",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "df2323e6-c50a-406d-959c-318ef67a68fd"
        },
        "item": {
          "id": "ea1775a6-ffa4-4bff-b362-60ad6c5c73c5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "97f848d7-50ae-49c7-b26f-5b53a84c02db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 328,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "7c4dff7a-f6c1-4df9-b9ae-6108d09d6470",
        "cursor": {
          "ref": "ac7e2fea-f28c-4a6e-b588-aebc464a8547",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b21ce9f1-78ca-41c1-8660-d10a9cccf07a"
        },
        "item": {
          "id": "7c4dff7a-f6c1-4df9-b9ae-6108d09d6470",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5ab8fc13-c90f-4346-9aaf-4d58397f5d9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 273,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "ef11cf80-c0a2-4322-9efc-633e047e6414",
        "cursor": {
          "ref": "6cf17ba8-8475-440c-b753-f3f0dd5df986",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cae840e2-7807-4263-ac94-ad53a2d357ad"
        },
        "item": {
          "id": "ef11cf80-c0a2-4322-9efc-633e047e6414",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "665fc07a-3114-490f-9b0c-8a7ac186d08f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 226,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "70ae3369-2fd1-4eb0-8eb3-251e929e7ded",
        "cursor": {
          "ref": "8321df61-fd90-4d1f-93f6-9ec05f6bff67",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "cc62ef55-a0de-4546-812d-0d69ab6209db"
        },
        "item": {
          "id": "70ae3369-2fd1-4eb0-8eb3-251e929e7ded",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "02f42204-8089-46b3-92c7-5727afacb7d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 254,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "bcba52be-988c-40fa-a0ab-9c1e6b54461a",
        "cursor": {
          "ref": "52511888-3fde-44fe-bba1-ff141ad4bbf0",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7b2a041e-fda4-4d21-a22f-1af3ff0864fe"
        },
        "item": {
          "id": "bcba52be-988c-40fa-a0ab-9c1e6b54461a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "649fcf82-44a4-4af1-940b-069945982665",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 275,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "8983fc63-8db9-4bd1-9044-c23f790426d4",
        "cursor": {
          "ref": "ecddd7f2-6bd3-44cd-80ed-0ff11c5a616a",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "53a06719-4bc7-4597-bebe-e0c41ca1cb50"
        },
        "item": {
          "id": "8983fc63-8db9-4bd1-9044-c23f790426d4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5f06f7d3-cc3b-4bc7-bdbb-c68b028c0cab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 311,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "e2123c50-1c50-4de3-b595-664fd4731dd2",
        "cursor": {
          "ref": "0d879cf5-31a5-47c9-9c2f-022dd37bfbe4",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1cd56597-c9d4-4859-9cc6-49e6102eb133"
        },
        "item": {
          "id": "e2123c50-1c50-4de3-b595-664fd4731dd2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4fde0f7e-136e-479a-aefd-995ad2f5ddd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 264,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "a45f11d1-ab1f-4ae9-ac7c-e2ea2f07bdaa",
        "cursor": {
          "ref": "b94340f6-a0e6-4985-bb0a-bc1ad7fddeaa",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "35e1a306-390b-4ff9-9a55-3726389313f1"
        },
        "item": {
          "id": "a45f11d1-ab1f-4ae9-ac7c-e2ea2f07bdaa",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5ec425f6-ad7a-4b39-92ef-e2f9078a9746",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 231,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "6bc76a64-a8f2-49dc-946c-6adc9bef69d1",
        "cursor": {
          "ref": "db050c20-dbbc-47f1-9440-bcd906487d2e",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "73496be4-fbec-4df4-b4a6-1d5282266589"
        },
        "item": {
          "id": "6bc76a64-a8f2-49dc-946c-6adc9bef69d1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "dea2882f-79dc-4987-a917-8c190ef6b448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 240,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "524dbeae-620f-4f2e-af60-f636734b9a29",
        "cursor": {
          "ref": "ff0c6473-1516-4c69-99cc-5cb09c84b6bf",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ba85bd8f-02a6-4384-8c7c-d80a861a0efb"
        },
        "item": {
          "id": "524dbeae-620f-4f2e-af60-f636734b9a29",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "26a8f437-0ee6-4246-a57f-fa6af7404344",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 326,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a2c7a1f6-faae-4e60-b87c-757df80962f7",
        "cursor": {
          "ref": "830326eb-3edd-4136-b064-284b57633286",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "df029139-62e1-42a8-83fb-4b120f8b8075"
        },
        "item": {
          "id": "a2c7a1f6-faae-4e60-b87c-757df80962f7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d1d0ccc5-28f6-464b-b68f-dea62c72e1bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 236,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "380f2db1-577d-43f7-a658-906fed288867",
        "cursor": {
          "ref": "28800d44-f9ad-443f-8160-60aa9905770e",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "10785fcc-bcc4-48ff-9731-450fee4e5211"
        },
        "item": {
          "id": "380f2db1-577d-43f7-a658-906fed288867",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b6facc0c-7af9-4e07-b5bb-696114c45094",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 451,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "c6302e93-8c11-491e-bc1a-24705fb0fb2e",
        "cursor": {
          "ref": "1f252534-bc17-4234-899f-755d6b13e3b7",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ea9fedf4-ec21-4080-83b4-dad6eec4cf59"
        },
        "item": {
          "id": "c6302e93-8c11-491e-bc1a-24705fb0fb2e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a0e87a58-d1d7-4b3d-82a1-58d0f2bd7abb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1271,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "1812a134-c141-4cfe-a5ad-0a2ba320ea80",
        "cursor": {
          "ref": "afb40889-4a43-40a3-bbcf-eab11c751811",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6ab9ae4a-352a-40f4-b7b3-2d55422bc32a"
        },
        "item": {
          "id": "1812a134-c141-4cfe-a5ad-0a2ba320ea80",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a6803099-4c7e-401a-a640-64392fe99f58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 236,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "e3558006-d68a-474f-861d-d2c179f617d5",
        "cursor": {
          "ref": "e1257d3f-df45-4484-9d14-bade13aa04d3",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c70daa4a-c789-4eec-9a3a-a1efaea19d65"
        },
        "item": {
          "id": "e3558006-d68a-474f-861d-d2c179f617d5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2f8f564b-d993-4bd2-8b87-0fa51a877178",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 249,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "364e8832-0a6e-457a-88ea-0182d2b8f137",
        "cursor": {
          "ref": "3d07ebe9-c1ca-4555-a7b3-7f7a56eebc60",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a263881c-84cc-4a6b-a31a-193366d5d883"
        },
        "item": {
          "id": "364e8832-0a6e-457a-88ea-0182d2b8f137",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7d57c475-13e2-495d-9279-2a4d790f2d87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 239,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "6ccec12e-9b3a-40f0-8d3c-4e689837ba6d",
        "cursor": {
          "ref": "75cd1cd7-0f2c-4203-b138-43c6d0a124e6",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6eee511e-ec5d-4ec0-b1e6-f5fa84d210b2"
        },
        "item": {
          "id": "6ccec12e-9b3a-40f0-8d3c-4e689837ba6d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f6d874bc-eefd-4ff4-a813-d16e880d26b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 276,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "7e4fcb0a-8422-4e2b-a53d-97264e67b76a",
        "cursor": {
          "ref": "3068346d-9e25-4a0d-992a-53458aacbfde",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "96fe272c-61ee-426d-b099-9a78ab42d4cb"
        },
        "item": {
          "id": "7e4fcb0a-8422-4e2b-a53d-97264e67b76a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6c82c0b0-c00a-468e-ba68-357d1e77ddb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 348,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "a635157a-80ff-4a5b-bbbf-5bc776fae21f",
        "cursor": {
          "ref": "42f6c1d7-3c04-4372-8e94-d8962175c43f",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3e4564f0-f40d-48b5-8056-17047e748b21"
        },
        "item": {
          "id": "a635157a-80ff-4a5b-bbbf-5bc776fae21f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d6f2b656-cb07-4a62-835c-1ed303d2d9c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 338,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "18676d5e-251f-4a6e-99c9-d3ee81e5d562",
        "cursor": {
          "ref": "788c8fc7-cdb1-410a-8f44-b04e91165b45",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2066624c-d2f1-4359-acde-cb7e7c4f9da6"
        },
        "item": {
          "id": "18676d5e-251f-4a6e-99c9-d3ee81e5d562",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "374a5492-3026-4053-84bf-a4b4110aa651",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 259,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "d1ff2926-c7e6-46c3-9f95-b8d5b0d22eec",
        "cursor": {
          "ref": "bbec0124-037d-40a0-b111-5d93a983b7ca",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "42be9353-6c8b-4f38-b8c0-e370a208958e"
        },
        "item": {
          "id": "d1ff2926-c7e6-46c3-9f95-b8d5b0d22eec",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2e377ef2-bc6e-4fbc-883a-4c341f4524cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 268,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "5d272bfb-071e-48b3-9b04-68aeb1f4c856",
        "cursor": {
          "ref": "61a28ce8-86ba-4055-8019-c93c2f40f505",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9f7873b6-0636-477a-86af-4ecac78ded94"
        },
        "item": {
          "id": "5d272bfb-071e-48b3-9b04-68aeb1f4c856",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "58f4a99f-dd63-4ec8-b6cb-1c4926023ffb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 250,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "244fc88d-4ba1-4c57-9eb8-0ae6e698753b",
        "cursor": {
          "ref": "a1015283-bfb0-4190-8243-f2a3279e1b53",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "208af201-39e8-4338-bd90-2b97ce87f266"
        },
        "item": {
          "id": "244fc88d-4ba1-4c57-9eb8-0ae6e698753b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9bcc5dca-713b-4380-93ce-459d9669b40c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 309,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "3dd86fbf-b15c-42d5-85ea-8f9618b6fc94",
        "cursor": {
          "ref": "12e7d507-3657-417a-9f65-45c077446486",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5e7b7f3e-2fcc-44fe-a428-a65544a29a8b"
        },
        "item": {
          "id": "3dd86fbf-b15c-42d5-85ea-8f9618b6fc94",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ba6fef40-b3f4-48ec-b241-2b484a6e9046",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 248,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "61d12003-2fa2-49d5-9eee-e460520075a8",
        "cursor": {
          "ref": "d9603648-9db8-4e16-b2ef-c60f9e7c7a7c",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "80904dcd-818f-4fbf-8d5e-87c44cd857d4"
        },
        "item": {
          "id": "61d12003-2fa2-49d5-9eee-e460520075a8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7fcec980-24d9-4246-b945-aefca3eff234",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 255,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "9f28239a-960e-40d1-8c84-9cc70b171af4",
        "cursor": {
          "ref": "898c2f42-3bf7-4fdf-a1d4-0b409c9c2c5b",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0106316a-36d6-47fb-8275-dab87c84b96d"
        },
        "item": {
          "id": "9f28239a-960e-40d1-8c84-9cc70b171af4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c56648f3-e235-4228-a786-ec1d5ce19078",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 255,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b3ff71b7-c018-468c-9fb6-94154ee39778",
        "cursor": {
          "ref": "fdcf3dfc-cfa1-40a6-8a46-b18c63c6f150",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "58e46593-0d01-4556-9e33-c971367d861f"
        },
        "item": {
          "id": "b3ff71b7-c018-468c-9fb6-94154ee39778",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f0287753-151b-4376-b97f-9eca88d5c51c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "69505f1c-52b3-403e-bba0-b3e9558889da",
        "cursor": {
          "ref": "cd6bfad8-26d2-4658-a7bf-9891bda60662",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2a4f1504-b020-47e2-a5d2-3527005730ee"
        },
        "item": {
          "id": "69505f1c-52b3-403e-bba0-b3e9558889da",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "944f83b3-05e8-49ef-b685-81258a283704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "ae061729-2a09-48e7-b916-3b1611cf549f",
        "cursor": {
          "ref": "98a98e43-9b07-43c3-b777-f87b6a675ec8",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1e75f40d-d60e-427e-a5f2-5fae4bd9407f"
        },
        "item": {
          "id": "ae061729-2a09-48e7-b916-3b1611cf549f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a2d4fc9d-06d6-4cf0-8cf1-cfd1e9c30b5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 271,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "265b95d6-3644-4a10-aee7-92eb130983c3",
        "cursor": {
          "ref": "03c7a419-12ba-4fb7-8651-9569a81e5cde",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "47fefaa8-df54-4932-8389-13a2192c118d"
        },
        "item": {
          "id": "265b95d6-3644-4a10-aee7-92eb130983c3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a6ba4e2a-cd01-45a3-bfa3-fe073c807a1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 287,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "01c922ab-b90f-4e52-8ea6-3b6c38273abf",
        "cursor": {
          "ref": "b79c7918-3348-4736-8246-038c69bd700b",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0eb4f7bd-3ccd-43d6-a351-45b4ca8bf383"
        },
        "item": {
          "id": "01c922ab-b90f-4e52-8ea6-3b6c38273abf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1e9ccb30-6161-4247-9487-8a846cee1b6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 390,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "41f4d805-d14b-4c0a-96cd-b99dae12fbcc",
        "cursor": {
          "ref": "dcaa86b6-1cd8-4d92-8a48-d9272bd3f94e",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fbf9b0ad-dfbc-47db-89d8-271d231d7200"
        },
        "item": {
          "id": "41f4d805-d14b-4c0a-96cd-b99dae12fbcc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e1a84cf3-4ea9-48fb-88aa-4417a477b911",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 256,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "2f1a3f8c-4aee-4bf2-8e6c-93abebd83288",
        "cursor": {
          "ref": "63d680ff-b834-4d1f-8e3d-20345ba1504b",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "142ff3e0-a68a-40bb-91f3-160ecf005929"
        },
        "item": {
          "id": "2f1a3f8c-4aee-4bf2-8e6c-93abebd83288",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9f8825bc-32d3-4899-b045-5e9e30dc7965",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 277,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "54a0054d-ecf7-4506-8607-92b6643916c9",
        "cursor": {
          "ref": "9df6b06f-92d7-4928-a1cc-1f0884a85a82",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "469ddd1d-e8bc-40fb-a843-99891d3dea82"
        },
        "item": {
          "id": "54a0054d-ecf7-4506-8607-92b6643916c9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3d456dc8-ae81-414d-9c5c-f0e7ad3cf2a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "54a0054d-ecf7-4506-8607-92b6643916c9",
        "cursor": {
          "ref": "9df6b06f-92d7-4928-a1cc-1f0884a85a82",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "469ddd1d-e8bc-40fb-a843-99891d3dea82"
        },
        "item": {
          "id": "54a0054d-ecf7-4506-8607-92b6643916c9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3d456dc8-ae81-414d-9c5c-f0e7ad3cf2a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "bdbf7723-f5a0-4bf8-93c7-3a5c7cd2726e",
        "cursor": {
          "ref": "a3c4ccc1-89b3-4b0d-b106-79924cf4d889",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d95342bb-83d3-4478-aeb1-45fdeea0b47e"
        },
        "item": {
          "id": "bdbf7723-f5a0-4bf8-93c7-3a5c7cd2726e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "42860383-2e30-41b6-b12b-378d561f81af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "8cabff01-d1f8-41ba-a1c1-321902b7574d",
        "cursor": {
          "ref": "c95b251a-a3e1-4bdd-a39d-7c72bf0181ae",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d7ff99ce-b332-4113-af4b-05ce6f3ec641"
        },
        "item": {
          "id": "8cabff01-d1f8-41ba-a1c1-321902b7574d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "17e7498b-e936-4f2b-8058-5d02cb6870dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f5fd8909-4e60-46d6-b0c6-4a0ef911d4cf",
        "cursor": {
          "ref": "c6c43d9d-e983-49b0-8ce2-cc0685d12c26",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "725eb0a1-33d0-4503-9fde-aa1793ae99ea"
        },
        "item": {
          "id": "f5fd8909-4e60-46d6-b0c6-4a0ef911d4cf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "63db4b36-99a4-4f2a-b709-507f8042e2ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "41c35df7-c07d-4fc5-9fd8-c9b87c52dbab",
        "cursor": {
          "ref": "a27a974c-8396-4b85-85bb-87aac29ca49f",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ecb0b86d-dd01-4047-8e23-da7c98dbf6a6"
        },
        "item": {
          "id": "41c35df7-c07d-4fc5-9fd8-c9b87c52dbab",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7dce8da9-8063-4a88-a258-a207eec02a59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "017d3f85-4fdf-4c6a-bd2f-5e4f22f3700a",
        "cursor": {
          "ref": "8dc145fc-664f-4d4e-991d-0c32d64a45b0",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a5a0d5ad-c66a-492d-9901-cabbd7dfca89"
        },
        "item": {
          "id": "017d3f85-4fdf-4c6a-bd2f-5e4f22f3700a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b100f6ab-5d79-46df-ac1f-9d5f4b2e3f0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "97dd43f1-d467-412d-a30a-003a329a60fd",
        "cursor": {
          "ref": "7ab48278-79ef-4ae8-9d30-5bb3e279381c",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fedc31de-4bf9-491f-90d9-11e92d9a7864"
        },
        "item": {
          "id": "97dd43f1-d467-412d-a30a-003a329a60fd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "233129f9-c1b0-4628-96ab-640a9f756b7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1b16b91d-d09d-43b6-a228-b7b32d88d149",
        "cursor": {
          "ref": "754b31b6-e560-4d38-aed3-d0f3bfeec187",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "15c9c078-8fc8-4198-b8fe-3db28611d3fd"
        },
        "item": {
          "id": "1b16b91d-d09d-43b6-a228-b7b32d88d149",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e9332610-ab85-4a30-a85e-24e829dbed1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e60256ae-bb04-4420-ac63-ea4b6721fe65",
        "cursor": {
          "ref": "fefe257e-9c51-4372-9940-42a97953e7e6",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "446f9d2f-179a-443e-8c90-cd756986b5bf"
        },
        "item": {
          "id": "e60256ae-bb04-4420-ac63-ea4b6721fe65",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "597f9811-3871-468a-9a4a-a598cf2d0718",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "02d58c6f-3818-4e6a-8a5c-980342cd354f",
        "cursor": {
          "ref": "ec00a74e-0f73-4423-933e-0854f92694bf",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "876cf8bb-913e-4344-96fc-89e997d3695e"
        },
        "item": {
          "id": "02d58c6f-3818-4e6a-8a5c-980342cd354f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "92005a20-461a-433d-aac1-cc6930195797",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0a28060d-1a17-420e-a271-462daa3e4bfd",
        "cursor": {
          "ref": "16a4a594-3d58-455e-8715-965772752153",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7e78a282-d9de-4fe2-a692-82926a3672cb"
        },
        "item": {
          "id": "0a28060d-1a17-420e-a271-462daa3e4bfd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d4a6710c-d593-49ea-9495-061d397c4f98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5c7650c9-00bc-4d78-badc-b5bf45d719a9",
        "cursor": {
          "ref": "1ed86407-7d47-4e0e-a14c-2943b7318179",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7adc9272-d58c-4e23-97e5-8e0de793af89"
        },
        "item": {
          "id": "5c7650c9-00bc-4d78-badc-b5bf45d719a9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8166cb46-1823-4402-9e29-decc17aaf32a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a096087f-ffc3-4e3d-a5bb-5fc4320832f3",
        "cursor": {
          "ref": "b9c72de9-652d-410b-a64a-1cc90cbdd7bb",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2d770f25-9b53-454e-8b8f-b83487859426"
        },
        "item": {
          "id": "a096087f-ffc3-4e3d-a5bb-5fc4320832f3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1569964b-4600-42d9-9032-351c14a605c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "1d220ec6-5b0d-4b79-a054-7cf4757f116f",
        "cursor": {
          "ref": "3502384f-f18e-4079-acad-d6d5e1e774c3",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5701fd0d-211a-4b5b-bfc1-cb87fee6d36c"
        },
        "item": {
          "id": "1d220ec6-5b0d-4b79-a054-7cf4757f116f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d6e82624-92d6-4e03-8e3f-a699b33569ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "eb963a45-277d-4f9e-8276-57e5c83ae18e",
        "cursor": {
          "ref": "c4f2df7c-f936-4e08-a57a-0707b94b2361",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f6fca383-e9af-4e22-b4e9-086f8e0940d9"
        },
        "item": {
          "id": "eb963a45-277d-4f9e-8276-57e5c83ae18e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "631cf26e-890a-4ecf-886c-48200fe49bf2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c42fb98c-f428-4a8f-b919-251060e59b18",
        "cursor": {
          "ref": "8505f915-f4f3-4926-abcf-c9838ef0926b",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8180d50b-062a-435c-8fde-b516d3dfe038"
        },
        "item": {
          "id": "c42fb98c-f428-4a8f-b919-251060e59b18",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "89233fec-3b56-41f2-97e8-725b4b24270c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "0c475b1b-cb33-493f-b349-a00069499112",
        "cursor": {
          "ref": "721c46c0-fddb-47c7-8a91-55299366f761",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fb1aa42e-87a8-4ca3-b382-3752091dd01d"
        },
        "item": {
          "id": "0c475b1b-cb33-493f-b349-a00069499112",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "93b38e8c-86c9-4d54-982e-c3eaa617e9aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5dac9278-3c9d-4e30-b46c-4a1062306ab6",
        "cursor": {
          "ref": "981070c3-c1ab-4fd5-9e10-8c73c748fb13",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a01b620b-e946-41cc-9eb8-31f12382643d"
        },
        "item": {
          "id": "5dac9278-3c9d-4e30-b46c-4a1062306ab6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bc02e326-9684-4137-905d-4b470473e08b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8b4529cf-0dd9-45db-9dea-a5a98081436e",
        "cursor": {
          "ref": "217456d0-b2b3-42aa-8469-d6a26278050b",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e3a3fdb5-7c02-42ce-b8f6-b30555666ddb"
        },
        "item": {
          "id": "8b4529cf-0dd9-45db-9dea-a5a98081436e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2013a776-1e9a-453f-84c7-d6f906bf2e88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b3b74f16-dee1-487d-82b6-eac4824cc1de",
        "cursor": {
          "ref": "f367f845-1599-4ce2-92ae-06d48ec16046",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b62492ee-659b-456d-a5ed-f97b2dc5c399"
        },
        "item": {
          "id": "b3b74f16-dee1-487d-82b6-eac4824cc1de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "79043a6d-9742-477a-b0d6-1490a7e09266",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "93fdb89d-2f0f-4b5c-9e63-c328c649aae4",
        "cursor": {
          "ref": "6eacd9c6-e2fe-4890-8816-85109ed4b037",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "95904ab8-dcbf-4950-8e98-033bc0842482"
        },
        "item": {
          "id": "93fdb89d-2f0f-4b5c-9e63-c328c649aae4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80137c91-fb03-499d-85a7-a49e5d85813f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "df3d097f-a042-4246-a950-010d5694e822",
        "cursor": {
          "ref": "3a7f5461-5823-41fd-9590-fe5f6dbafa0a",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2f93aa9d-3f78-4e50-a9a5-008f62906534"
        },
        "item": {
          "id": "df3d097f-a042-4246-a950-010d5694e822",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "25697412-d6f1-4b92-8752-eb0ed0300246",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "cd6124fe-0305-485b-902a-4839e3adbcbf",
        "cursor": {
          "ref": "c98e2666-f269-46cd-8833-56a022adf91a",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fe1ac9cf-9855-432d-9657-5558fdb8e605"
        },
        "item": {
          "id": "cd6124fe-0305-485b-902a-4839e3adbcbf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "22de2029-5ff7-4d34-83a9-2fc4e7396240",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "dcf3ffac-e642-41e6-ba85-5e78a0ae3114",
        "cursor": {
          "ref": "9e9034b8-4f6f-4536-a8b6-5ff825ef356c",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4fadb51c-adca-4b3b-b0df-61078ccf7f5f"
        },
        "item": {
          "id": "dcf3ffac-e642-41e6-ba85-5e78a0ae3114",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2c3ffa8d-b667-437f-b2ea-1d38d557af56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "d445b986-5a03-4f72-b851-c5f1a7f6055d",
        "cursor": {
          "ref": "bfe632bf-876e-448c-bd0d-c3acaa39db5d",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "780e0492-1452-4353-bb38-24c1fda3b71c"
        },
        "item": {
          "id": "d445b986-5a03-4f72-b851-c5f1a7f6055d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a00d25dd-b88d-47c4-b3ff-1e8bbee72e7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b1bcae35-7ec1-4d78-87e4-7b7fc581994d",
        "cursor": {
          "ref": "27221050-b332-46c2-a6eb-bd8832892d82",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "645eb34b-13ff-4909-a8c7-63f1bef42267"
        },
        "item": {
          "id": "b1bcae35-7ec1-4d78-87e4-7b7fc581994d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a1c9bb29-bf63-430e-84db-f98c04c284c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ccc87280-4b82-4e35-8157-c8eb3ad330fa",
        "cursor": {
          "ref": "b8401072-cd58-4bf2-90e2-a502e9acb5ab",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2d0487d7-4e8c-4d89-876c-6df37160927c"
        },
        "item": {
          "id": "ccc87280-4b82-4e35-8157-c8eb3ad330fa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b290c890-094a-4ea2-ad8e-4d48da59101c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d5b460df-44be-473f-b47d-3793ef35db29",
        "cursor": {
          "ref": "d34fa021-c9ac-419e-b1ca-508ce4e37a61",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1cd63b9e-3dea-429b-a36b-69032298bec3"
        },
        "item": {
          "id": "d5b460df-44be-473f-b47d-3793ef35db29",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f595e931-1d71-456b-bcc3-0c0875104ec4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3040269a-21b9-4a22-a2d4-93376a7757c6",
        "cursor": {
          "ref": "89fb8121-164c-43b5-86f6-7c8da47f08b4",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dffd809b-356a-4fd8-8c4d-1322f20957cf"
        },
        "item": {
          "id": "3040269a-21b9-4a22-a2d4-93376a7757c6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a03d446d-b8e3-4ed6-9504-8764e56f0cbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "6efe2d44-f526-410a-a4bd-57c0c0352c39",
        "cursor": {
          "ref": "f90a0308-80db-44a9-a80f-e186f2f2b571",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b3b87057-4d43-4551-8efd-55bd7ee6a67b"
        },
        "item": {
          "id": "6efe2d44-f526-410a-a4bd-57c0c0352c39",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "35d1ecd0-9297-4f1c-8f7f-e1df625ad4f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ae9e3d58-0e77-4605-8898-c7e67e8c6fa0",
        "cursor": {
          "ref": "ac53af5e-afa9-47f6-8f07-27f569e03743",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7f0f3b31-dfd6-485e-8b47-0ceafd9ef847"
        },
        "item": {
          "id": "ae9e3d58-0e77-4605-8898-c7e67e8c6fa0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "afc7ec65-ebb9-4a16-a041-cf8e2619cb6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b7324473-e53e-449d-91f5-c068c7b94182",
        "cursor": {
          "ref": "df828e28-24b2-4dbf-8ed4-886394bbba0e",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8c8ffc0e-883b-4acc-ad7d-9d36e78985c1"
        },
        "item": {
          "id": "b7324473-e53e-449d-91f5-c068c7b94182",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c399ef0c-52f0-407f-9889-a438504fe85e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "82ea1afe-5968-482c-b38d-47ebe613c2bc",
        "cursor": {
          "ref": "e6ddf2f3-c338-4ba2-a710-4170f683f0c6",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d82a4fb6-6fe0-4a13-948a-fa807088a83b"
        },
        "item": {
          "id": "82ea1afe-5968-482c-b38d-47ebe613c2bc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "44d6b3da-20f0-4b06-bd0e-f3c57caa7f53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "4b1ba2e0-4353-4609-93e7-e81916c8d42b",
        "cursor": {
          "ref": "0d4af0d1-6693-4010-a96a-907c41d42c27",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86caf036-d6c1-4eb4-8ffc-49da9d4675fe"
        },
        "item": {
          "id": "4b1ba2e0-4353-4609-93e7-e81916c8d42b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "de662f3e-5702-4e59-95a4-1ad16f05b9c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "04aa801b-d89d-4ef2-a4fc-a7de80ffe186",
        "cursor": {
          "ref": "cc80d8c2-7c7b-4dd2-a88a-24816d7b58db",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7ad330b9-6a7a-4269-a8d8-f38405dc4c92"
        },
        "item": {
          "id": "04aa801b-d89d-4ef2-a4fc-a7de80ffe186",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8af23620-2df8-42ea-be79-4e25df34c70b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "04aa801b-d89d-4ef2-a4fc-a7de80ffe186",
        "cursor": {
          "ref": "cc80d8c2-7c7b-4dd2-a88a-24816d7b58db",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7ad330b9-6a7a-4269-a8d8-f38405dc4c92"
        },
        "item": {
          "id": "04aa801b-d89d-4ef2-a4fc-a7de80ffe186",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8af23620-2df8-42ea-be79-4e25df34c70b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "478ab076-a166-4b92-9b63-c66c54995b57",
        "cursor": {
          "ref": "73ea2232-ba09-4bb2-9629-43472eb36c51",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7586fae3-5e9b-4cb9-9364-cb4c00aa549f"
        },
        "item": {
          "id": "478ab076-a166-4b92-9b63-c66c54995b57",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3770938d-986b-4de8-99dc-84cfdc389801",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "1878a230-1a58-4ab2-96f6-d2519f8993e9",
        "cursor": {
          "ref": "a2e13939-30be-48d9-ae2f-5bae811d3741",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7f3b127d-4bee-47a9-bf3e-ba848d018528"
        },
        "item": {
          "id": "1878a230-1a58-4ab2-96f6-d2519f8993e9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "de39dd91-2db0-43af-8190-0e36ce12f25e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "34a7100e-48c0-47f0-aa34-4fffd4583ba8",
        "cursor": {
          "ref": "66c8b744-390d-4b3c-9b92-68e5228da5ed",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c00bbf3e-df92-4778-b3b5-fb856c478d68"
        },
        "item": {
          "id": "34a7100e-48c0-47f0-aa34-4fffd4583ba8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c2d34af8-5bb3-412a-8625-c64c699747b9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "28f876ca-5619-4a4e-9d69-a8684441d17d",
        "cursor": {
          "ref": "87ce38df-e7e2-4710-b916-dd08c7a2b89d",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c894a240-8cdf-42e0-8c02-af76b3ed29da"
        },
        "item": {
          "id": "28f876ca-5619-4a4e-9d69-a8684441d17d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1085e26a-a059-4b1a-b7c9-4ff3afedb3c4",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "3bdceda7-2c4a-4769-9117-34cc681f700d",
        "cursor": {
          "ref": "158a9682-8bf8-496f-934e-79c980b45e37",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "df51f53d-2f81-4d3d-8517-652ea50ce80a"
        },
        "item": {
          "id": "3bdceda7-2c4a-4769-9117-34cc681f700d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "13782685-6eaa-43d3-b61a-e472e31ddcc2",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "0196155c-82b2-45a0-836e-02900523fefe",
        "cursor": {
          "ref": "2289d285-126c-46eb-8985-3407dbd68fb2",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4f725415-c629-4c63-8607-89b847a2cf25"
        },
        "item": {
          "id": "0196155c-82b2-45a0-836e-02900523fefe",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3e107064-1004-43f3-bbf5-8154eb17fab8",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "40c8d781-4ab5-46cb-a6fc-43bc99aa66a5",
        "cursor": {
          "ref": "c3c664ad-8a3c-4263-b662-e81181957475",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "896b18fb-6589-4634-888f-0cb1537340aa"
        },
        "item": {
          "id": "40c8d781-4ab5-46cb-a6fc-43bc99aa66a5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "13a840b4-ba97-44cf-af77-d6b0fdccdf94",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "ecb41aa1-f744-4983-acb8-17bd8516c8cd",
        "cursor": {
          "ref": "c25eee95-cbd9-4b00-b1d7-68925ff5e2bb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2dc43ffb-e6cb-4a07-b557-0d1eb61f804c"
        },
        "item": {
          "id": "ecb41aa1-f744-4983-acb8-17bd8516c8cd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "aca227e1-acbd-47b0-ac49-1f2153d87a73",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "9d7d87c8-9345-455d-9ace-66a7ded51ee4",
        "cursor": {
          "ref": "625747bd-9136-4f25-a325-96b512a1402b",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f3710c3c-c743-4273-b7e9-b3ade4a18079"
        },
        "item": {
          "id": "9d7d87c8-9345-455d-9ace-66a7ded51ee4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "15108d9c-4919-4ccf-a9b5-3978a41afbdf",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "5a30539a-4cd4-430e-9f93-66cbbac0966e",
        "cursor": {
          "ref": "33772718-f4d7-4cba-8a2c-abdcd4faf82d",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "586abf04-12e4-4195-a6df-9256a2b22acb"
        },
        "item": {
          "id": "5a30539a-4cd4-430e-9f93-66cbbac0966e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "53fb4d5f-a8dd-42d5-91cf-1773e41a3995",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "73d190a5-9e75-4a24-a44b-bb66fdfbc1a2",
        "cursor": {
          "ref": "2bad4d2f-01fc-49c9-9db5-f62f4e5bc537",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e7a0f6f0-1cb1-4e43-9daa-431f84162cd5"
        },
        "item": {
          "id": "73d190a5-9e75-4a24-a44b-bb66fdfbc1a2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "abfca56f-1420-4878-9919-45dc2d912a8a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "a2b181b7-f64e-449c-9a76-0e70d46f1915",
        "cursor": {
          "ref": "46b175cd-6087-4a55-bed9-22cf157dfa69",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "49a899c5-81db-4b19-83bb-7b5ee24d2c47"
        },
        "item": {
          "id": "a2b181b7-f64e-449c-9a76-0e70d46f1915",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "49f5335d-de40-4b21-b25e-93e1c34a18ee",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "0cb2d293-47f4-4fe3-9976-7ea3457cd7f6",
        "cursor": {
          "ref": "cb0bce9d-32d6-4ff1-9f52-6d9fabbfa474",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "93dace8f-015f-48a0-a23a-4de1b8c2d130"
        },
        "item": {
          "id": "0cb2d293-47f4-4fe3-9976-7ea3457cd7f6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "301b3e57-a0e0-49e3-a13b-b31307dd7acd",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "188f3a6b-7065-4be7-b75d-db359d4d19e8",
        "cursor": {
          "ref": "2eb17ed1-2f76-447b-810e-3e610da1c7cf",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "13373d2b-8a71-4a98-9e52-853f125d2ec1"
        },
        "item": {
          "id": "188f3a6b-7065-4be7-b75d-db359d4d19e8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dd85402f-ddb9-4c95-94e2-aaccd808add4",
          "status": "OK",
          "code": 200,
          "responseTime": 739,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "24303a52-208f-4104-a4e6-e2cb4b8caa28",
        "cursor": {
          "ref": "308a87a8-2982-42b5-a5c0-4e65ccfeda64",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e5a21f52-b1b1-44f3-a6f8-90c0cca594a7"
        },
        "item": {
          "id": "24303a52-208f-4104-a4e6-e2cb4b8caa28",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "63790bbc-70fa-49a7-a9bc-24f9fe0347fb",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "e0da452b-bcfa-43d4-adf5-5ee23ca19a31",
        "cursor": {
          "ref": "94316ddd-895f-439a-af9f-ab4befa88007",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5537e1ab-5f24-4b1a-9984-caa61746609d"
        },
        "item": {
          "id": "e0da452b-bcfa-43d4-adf5-5ee23ca19a31",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c77f412b-1036-4207-ae19-2541ee68fbd1",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "98250c3b-33cf-4fe4-bea8-05d0119ad7bc",
        "cursor": {
          "ref": "ce3d03d9-064e-4a0e-a5db-0de6aa64c133",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3e7e5fee-6f62-4014-8d77-c1fce9d01620"
        },
        "item": {
          "id": "98250c3b-33cf-4fe4-bea8-05d0119ad7bc",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "2e6703b0-8a5c-4c2f-af69-c3692f5edace",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "1f0f786f-71f6-405e-b87c-ea68bf736730",
        "cursor": {
          "ref": "6e9efb91-5ef5-4138-a973-1bd9b7f50e15",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ccdcf97a-3091-4335-99f5-a808985fb85d"
        },
        "item": {
          "id": "1f0f786f-71f6-405e-b87c-ea68bf736730",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "26008e2d-f74b-4fab-89d0-11e879c535f8",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "d11e384f-c7ac-41eb-b316-b233bc855e0d",
        "cursor": {
          "ref": "22cf367a-f85d-4164-9979-3852acb6229d",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d7f88ca4-dc49-42c5-82fc-0a8f647d95c5"
        },
        "item": {
          "id": "d11e384f-c7ac-41eb-b316-b233bc855e0d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e97581b5-7a7b-43c6-84ba-8b47379f4f38",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "0ddc0793-db03-4f95-9633-642c8a38bb7b",
        "cursor": {
          "ref": "239cfabf-f419-4fbd-b923-8e7b4099b18b",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "05399944-c182-4ef8-89e0-1a5e85c97d22"
        },
        "item": {
          "id": "0ddc0793-db03-4f95-9633-642c8a38bb7b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "237b1182-5928-4ae7-b52e-5bdfd58ca6f6",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "a4b640dc-8544-4130-ba5e-9034a8e83bfa",
        "cursor": {
          "ref": "4a536ebd-cdca-4180-8961-9bc8332fd48d",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0c4a8f70-833e-44b9-8d29-033a2a4c4b7a"
        },
        "item": {
          "id": "a4b640dc-8544-4130-ba5e-9034a8e83bfa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a0d9f335-3f63-4b8a-9618-eca661f3cfe0",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "a174fcfb-1a72-4ec9-b99b-4ee8415b1aaf",
        "cursor": {
          "ref": "7bb6d060-e16c-4655-96ea-ae42d9a1764e",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8aabba04-8365-4e20-884e-1ba6fc8faf63"
        },
        "item": {
          "id": "a174fcfb-1a72-4ec9-b99b-4ee8415b1aaf",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e83fab57-2b11-402c-9690-a2f71ec74b27",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "dc32ab07-c1d1-49f5-894d-0ee2615cbd92",
        "cursor": {
          "ref": "41cf0dad-0cb9-4b30-8e7c-7e022027275c",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "418d98c9-a08e-4f7a-bdd6-3dbcce8eed2b"
        },
        "item": {
          "id": "dc32ab07-c1d1-49f5-894d-0ee2615cbd92",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "72a296b4-4f24-4a09-9bb6-c07037beaf0a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "f6ed846a-55c4-4a72-b06a-3d0934bb3059",
        "cursor": {
          "ref": "bf73cec1-42c6-4aee-93be-138e7968bc61",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8685364d-898c-4e06-a5f1-ed73cfe9f66d"
        },
        "item": {
          "id": "f6ed846a-55c4-4a72-b06a-3d0934bb3059",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6cd9c3e4-1a59-400e-90fb-8661167a7177",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "e940e6b4-6ac8-4b15-99b9-5fcd929e9536",
        "cursor": {
          "ref": "4a47f4e1-01ca-4ee6-b7a5-d725ba030f9f",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "883edf0a-cea1-4817-8619-0c749124d9cb"
        },
        "item": {
          "id": "e940e6b4-6ac8-4b15-99b9-5fcd929e9536",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9927bd85-7108-4d76-acaf-7e6d9c84663a",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "eb694d0d-bd61-46d1-8dd2-009e36d73884",
        "cursor": {
          "ref": "af95b4be-b796-4b03-855b-53f4a5a4a3e9",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b47f89d5-7cf1-464e-a994-9599a254cb11"
        },
        "item": {
          "id": "eb694d0d-bd61-46d1-8dd2-009e36d73884",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a4d4c2a4-aacd-413d-9741-1cc57354e23e",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "c94b7912-2586-4ded-a8ac-a9cbb27d857b",
        "cursor": {
          "ref": "f6c82a92-1071-4207-b597-264c85847849",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1e860f2b-4029-453c-ac42-6f2bbb517b34"
        },
        "item": {
          "id": "c94b7912-2586-4ded-a8ac-a9cbb27d857b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "99cb4be8-5548-40b3-91e2-a2238e7d14e3",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "71a9050d-9f96-425e-8f9f-169d4c4d4fff",
        "cursor": {
          "ref": "0ce90af5-c0e3-4791-b247-b215276d4d3e",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c5f877f0-1632-4899-b957-9ba6605cdd4f"
        },
        "item": {
          "id": "71a9050d-9f96-425e-8f9f-169d4c4d4fff",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4a886956-4d3b-45f4-8227-b0fc1d0d705e",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "b47f43af-19de-4d80-b202-a9258e2480d8",
        "cursor": {
          "ref": "898e1130-c43d-4a2d-b98a-c880c9e6ea7c",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bff28c2f-99eb-4b32-a163-98ec607c8127"
        },
        "item": {
          "id": "b47f43af-19de-4d80-b202-a9258e2480d8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "df5e28b8-07bb-4e39-9e25-548c110bfb0d",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a1ba57f1-78bd-4b7c-b387-15ca6f29d704",
        "cursor": {
          "ref": "1113a649-c433-48c9-b550-67635458a365",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "574c9201-bf39-473c-9658-19ba9d24f5bc"
        },
        "item": {
          "id": "a1ba57f1-78bd-4b7c-b387-15ca6f29d704",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5ccacfb3-b409-4ff1-a936-7c881a05f296",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "df195212-bc29-4a89-b498-68d08ee86d68",
        "cursor": {
          "ref": "de44bd33-dc31-4cdf-92df-230ba7461a8a",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fa7fd783-898d-4b03-974f-46105199bb0a"
        },
        "item": {
          "id": "df195212-bc29-4a89-b498-68d08ee86d68",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "04a6bec6-cd86-49d9-9b4e-01fa302e3ecc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "f3cf400e-5246-4a90-a253-9b0f9214d5a3",
        "cursor": {
          "ref": "4f6e023d-8183-4587-942f-13aca89cbe30",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "65752c8b-5e40-4af3-a79b-64cd315d0eea"
        },
        "item": {
          "id": "f3cf400e-5246-4a90-a253-9b0f9214d5a3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6807fd65-67b1-441c-bcd6-83ac81d02f5f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "0ecced17-48df-4e7a-9b3f-e006a35812c3",
        "cursor": {
          "ref": "03988330-c4fd-4df7-953c-de6bb266d908",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5871d255-439c-4e5c-9de1-4ec0a4fe531b"
        },
        "item": {
          "id": "0ecced17-48df-4e7a-9b3f-e006a35812c3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "03e521ed-78aa-4408-8ff2-55dbd518119e",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "382f2e2d-16e6-4e06-9980-6d328d3b059f",
        "cursor": {
          "ref": "5ff07651-0eec-4a1f-8b6c-c392ae322ea4",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "916072e7-46ff-4535-8a5b-950d61441ec5"
        },
        "item": {
          "id": "382f2e2d-16e6-4e06-9980-6d328d3b059f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "af83004a-4b35-4534-9107-2efc6fb3962a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "ea085aef-3929-4694-838d-a489d983204e",
        "cursor": {
          "ref": "14f1c72f-1eff-4ee4-bf84-ee65f764944c",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9b438388-f184-4c54-81e5-8fda7072ca8b"
        },
        "item": {
          "id": "ea085aef-3929-4694-838d-a489d983204e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8cab00b1-132c-499a-bb81-fb706399db46",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "58515a8d-0c58-4060-ba18-59e8265a6c1c",
        "cursor": {
          "ref": "d6e991e2-c094-4f07-bd61-d7a9dfbcdbb0",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d86b6f1e-dbb3-4465-8415-1338553b024c"
        },
        "item": {
          "id": "58515a8d-0c58-4060-ba18-59e8265a6c1c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "83ebba4b-3a57-45c6-9d33-17715e503b93",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "643a7133-36da-448d-a4ac-1a09a8f3ab3f",
        "cursor": {
          "ref": "3d84ecb7-f41b-4918-a83b-999322ba2d71",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "142f2dac-1318-44e9-8698-f17b2b4c1ee8"
        },
        "item": {
          "id": "643a7133-36da-448d-a4ac-1a09a8f3ab3f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "95251cde-69a1-421b-bdce-c1ca24a7a6fd",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "7b4ec478-97f2-4115-b84b-357f81fd6bff",
        "cursor": {
          "ref": "f7437641-b9f9-4dd2-86dd-6b5fc154531e",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3c86cdbc-8ded-40a8-a398-101fd56dc2a1"
        },
        "item": {
          "id": "7b4ec478-97f2-4115-b84b-357f81fd6bff",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6164f994-248b-4f12-b9bf-d37e5477c0c8",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4f516211-cdba-4b8d-bd8a-e989341d86b3",
        "cursor": {
          "ref": "e9fbc271-78d3-4c94-962d-431c3fd10433",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a229b9c0-1291-4ea1-bab3-1cd527a15242"
        },
        "item": {
          "id": "4f516211-cdba-4b8d-bd8a-e989341d86b3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b7582ff0-8180-4410-8ea4-36cf637ec776",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a943d407-706b-4add-955f-0234da6dc752",
        "cursor": {
          "ref": "2f14e899-23f8-4af4-a313-1b5b4086b90d",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "243b5454-15e7-4f77-8363-80afc6af08be"
        },
        "item": {
          "id": "a943d407-706b-4add-955f-0234da6dc752",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5a3dd938-32aa-4fe0-8071-9f5f7b071eb1",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1263f18b-63d0-45c4-8811-7a52c8d849b0",
        "cursor": {
          "ref": "c49f07cb-ba03-4fdd-b50b-cf5934475670",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "61fb695f-6505-4b10-b21a-1c087f3c5abf"
        },
        "item": {
          "id": "1263f18b-63d0-45c4-8811-7a52c8d849b0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1d2a5802-28d3-4d87-a668-aeab9b94b85a",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "678398c2-cc23-49ea-a68e-757f0bb888e4",
        "cursor": {
          "ref": "5655056e-15ef-4da5-a106-0d72e32e60e9",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3a005261-bc44-4a3f-93cb-36ed95bca2db"
        },
        "item": {
          "id": "678398c2-cc23-49ea-a68e-757f0bb888e4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "14289847-b939-47a5-be07-a3c13daebe12",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b1357b19-b5dd-4722-8201-9069e743b1bf",
        "cursor": {
          "ref": "8e1717b1-4632-4b30-a42f-c37f20777251",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4b16bd7f-bddb-4356-b848-47948fd1fcb6"
        },
        "item": {
          "id": "b1357b19-b5dd-4722-8201-9069e743b1bf",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a4049c45-bfe0-434a-8e8e-8c2c53393ce4",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "eb0cf968-d4c5-484d-915f-530e62bdd1c0",
        "cursor": {
          "ref": "99ed3a20-98dc-4189-9ded-598a077c4ce1",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3385137e-75b9-4d57-a90b-372ee4f36ad9"
        },
        "item": {
          "id": "eb0cf968-d4c5-484d-915f-530e62bdd1c0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2d3a929e-0692-4f32-bae2-923bcc0e7edf",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6e39f4b7-20b9-4c9b-b1fd-bb74829a8bd2",
        "cursor": {
          "ref": "5d52129c-0fa8-4d87-858a-05a76a94d255",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ae99b609-b0b6-4734-9457-fdeff0232908"
        },
        "item": {
          "id": "6e39f4b7-20b9-4c9b-b1fd-bb74829a8bd2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e469206a-636e-4a63-a967-fabc5904afc8",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "f99b99d3-d6e8-4747-942d-12447edf9b4c",
        "cursor": {
          "ref": "1ce8b70f-c692-460d-9e1f-a40117f37e5f",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0d326a44-d906-42fa-b108-626755f5b259"
        },
        "item": {
          "id": "f99b99d3-d6e8-4747-942d-12447edf9b4c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "96574da7-f017-4c20-8c8a-ef1b49f95bb8",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 72
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "77ab509a-0578-4cf1-a3f1-4b53809f8c4a",
        "cursor": {
          "ref": "8392ada7-b14e-479d-9154-348388c48c30",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1e43ad44-831f-4950-8326-65ac0c2e13d6"
        },
        "item": {
          "id": "77ab509a-0578-4cf1-a3f1-4b53809f8c4a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "510eccdc-9af3-4640-b4d7-2a90ed37b7aa",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "fdac7027-60bb-4339-a7a4-442bd47af825",
        "cursor": {
          "ref": "83ea6505-96bc-4b40-b7cb-5296eaa0dec6",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "26e005bb-1e99-45ae-8ed8-a6eb0f54ad73"
        },
        "item": {
          "id": "fdac7027-60bb-4339-a7a4-442bd47af825",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2db0ad23-b46f-4db2-9e84-eb35e36bba7d",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 72
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "7895fe37-d33f-4a22-91c3-c95779f1a800",
        "cursor": {
          "ref": "bedac50b-220a-4d0a-b9f0-8595e2d21d98",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e4c6de8f-d339-4d2d-a967-f20b7a003d01"
        },
        "item": {
          "id": "7895fe37-d33f-4a22-91c3-c95779f1a800",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "958bd7af-c03e-408d-a1d7-70a45bd2ebe2",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 76
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "46a2228b-c885-40ac-8582-f830c38f3110",
        "cursor": {
          "ref": "e90b30cb-5521-4189-a2b8-7025d5c83188",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5511f532-5559-4d5b-97db-c26090e143da"
        },
        "item": {
          "id": "46a2228b-c885-40ac-8582-f830c38f3110",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "92eec857-4e78-4174-809e-fe88d9f7480a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 72
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "0470a5c2-3db5-4e3a-87a6-758af6db9968",
        "cursor": {
          "ref": "8c43708d-75ab-4629-9fb7-40808ef551e0",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9e1de9fb-f157-4930-ba94-cbb7c3ededd4"
        },
        "item": {
          "id": "0470a5c2-3db5-4e3a-87a6-758af6db9968",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "25dd25e5-7a1d-4a22-a4e3-3b58769719a6",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "1ba9e92f-44ce-4f96-abf6-0150db5761a4",
        "cursor": {
          "ref": "953512a0-8a05-44ac-b9ee-00335069d191",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "882ed7e9-3015-4975-b562-7c25377e447b"
        },
        "item": {
          "id": "1ba9e92f-44ce-4f96-abf6-0150db5761a4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "98a7d1bc-b04e-41d5-8cf6-53fafb4de0d8",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "1c57b8ce-72f6-4893-bf56-6ef549e464c5",
        "cursor": {
          "ref": "c74f47fc-5a66-48a1-9cd0-19b913ba267b",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9ea6bed2-8c38-4933-82d2-23825f7055da"
        },
        "item": {
          "id": "1c57b8ce-72f6-4893-bf56-6ef549e464c5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "51f59899-d1f4-46c1-b682-b8361bc51535",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "f1297a44-d5e6-4946-986d-40042da25458",
        "cursor": {
          "ref": "b3b59a18-e743-4b35-b593-53b11274f7d8",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1fe6e66e-658f-4d6b-80a1-c77a6a7f63b0"
        },
        "item": {
          "id": "f1297a44-d5e6-4946-986d-40042da25458",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "935c304d-d424-4f01-8c5c-666d95786d71",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "c7c6db61-f43b-456d-a7fc-bad64233efdd",
        "cursor": {
          "ref": "af588cbf-ea18-40b8-bcd8-06a8d1995673",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8071fd9a-baf8-490b-9d90-96f6ba85ed18"
        },
        "item": {
          "id": "c7c6db61-f43b-456d-a7fc-bad64233efdd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "57d3705d-7148-47b1-b702-237b5a1963aa",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "b8adbcd2-7c00-44fa-859b-2a90d8617782",
        "cursor": {
          "ref": "da4863e2-ea7b-450a-8a89-3e6e6fbb175d",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "02a2bd79-0556-47de-b407-2d6ffd515ec9"
        },
        "item": {
          "id": "b8adbcd2-7c00-44fa-859b-2a90d8617782",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2096a180-dc67-414d-912f-063919477c76",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "fb19ad5e-8687-47e7-ae91-d95f7d048535",
        "cursor": {
          "ref": "39e66e54-4dd7-4831-8b8b-a8e6128f8934",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1744c0d4-476a-4bb9-be97-e23de2ff7c51"
        },
        "item": {
          "id": "fb19ad5e-8687-47e7-ae91-d95f7d048535",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "acda193f-50c8-4b76-b584-b4f26ebd65cd",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "e70fd645-305c-4a96-bd2f-464cbced1f36",
        "cursor": {
          "ref": "f77a8855-47a6-499d-89a1-1f3c2bd72d7d",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "334a0ad5-b2ff-42d4-9a23-0cafba89a962"
        },
        "item": {
          "id": "e70fd645-305c-4a96-bd2f-464cbced1f36",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "71dc97f8-fc41-40be-9d06-1a5469160a68",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "74450f0b-2d2a-467f-bb56-9a8742916ed1",
        "cursor": {
          "ref": "0550c76e-58b7-4c85-bf6a-dc8d169088e2",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0b8f51e6-fa38-4679-a034-dd31ecb196bb"
        },
        "item": {
          "id": "74450f0b-2d2a-467f-bb56-9a8742916ed1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "16aef8d3-fb5a-48b7-bb9a-0c06fc254275",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "bc9972bd-6abe-49bf-8591-cbfb539c516c",
        "cursor": {
          "ref": "650f2a14-9806-4a2f-bdc0-f5d0366ccb11",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f392bb21-13ad-4244-9a8e-d7c08d139a09"
        },
        "item": {
          "id": "bc9972bd-6abe-49bf-8591-cbfb539c516c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "98b6e174-cdef-4050-88b9-e1180c2e6446",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "357ecd9e-bceb-4622-b667-96044e485bfb",
        "cursor": {
          "ref": "ab5c282a-da32-442a-b325-21e25852849b",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a46d9b0c-8b14-48a7-af40-b7cabe0560a1"
        },
        "item": {
          "id": "357ecd9e-bceb-4622-b667-96044e485bfb",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5a3ad09a-648a-4b74-a25e-79fec64f3477",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "9c2773b1-fcea-41a9-8734-54d570d9aed6",
        "cursor": {
          "ref": "87425f04-a02b-4786-91d0-98484cf7c43b",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0762f19b-c66d-435e-b93f-f4ac53dbfdf8"
        },
        "item": {
          "id": "9c2773b1-fcea-41a9-8734-54d570d9aed6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0a196c90-622d-47df-902d-22a7550e8706",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8a88a2b8-c5ac-4503-b4bb-e09cfd482d7b",
        "cursor": {
          "ref": "f4fd4294-1bf2-4834-baf5-f58e949e1605",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ab6040e1-328a-4f48-ab87-9ac0f95d629a"
        },
        "item": {
          "id": "8a88a2b8-c5ac-4503-b4bb-e09cfd482d7b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a9127990-572a-4975-9b71-f95cb020a129",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "1dda0144-13b9-4d11-886f-a89758e3113b",
        "cursor": {
          "ref": "e6df8ff6-5b9a-4ca6-85ef-af920a8d64c8",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bb201ae8-2264-4d2c-a5d0-48ecb76f4db3"
        },
        "item": {
          "id": "1dda0144-13b9-4d11-886f-a89758e3113b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bb2b6d73-94d8-44ed-9675-d6c0c2228851",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "f51d1fdf-bc99-4d6f-a81f-9cda71d9a538",
        "cursor": {
          "ref": "460c9474-5c1a-49b3-b9f1-09bffa2c9ca6",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "71e2a6d8-5d65-4853-bf08-ddbc8f061817"
        },
        "item": {
          "id": "f51d1fdf-bc99-4d6f-a81f-9cda71d9a538",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2b798880-9a9f-4bc0-870c-48ab26a309d0",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "7b26dd6e-3e8b-4abb-99a9-c7f92a7d81cd",
        "cursor": {
          "ref": "fb6bc850-ab78-408b-9a6f-194464875d3a",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9714feda-ef43-45de-a985-49b37d8950cd"
        },
        "item": {
          "id": "7b26dd6e-3e8b-4abb-99a9-c7f92a7d81cd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6770db3a-b56e-43ff-a223-0fba19e285d3",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "7c665ccd-48d4-442a-8f89-eae4530180d3",
        "cursor": {
          "ref": "e9684241-7199-4f01-9ad4-3de642f0267f",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4823f721-7362-499e-9671-bb8802d06b19"
        },
        "item": {
          "id": "7c665ccd-48d4-442a-8f89-eae4530180d3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f1959fec-37dd-46c1-a6ff-c2c4e132ed40",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "445ea4a2-e418-4164-a438-fb771ef18700",
        "cursor": {
          "ref": "4eb47a9c-d220-4940-a13c-ad4103838767",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1bb51d2e-a6bc-4c08-a800-e5300c0e776b"
        },
        "item": {
          "id": "445ea4a2-e418-4164-a438-fb771ef18700",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cd098c79-427f-40fd-b379-c900d386614d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "1cdfbcb4-70bb-49d2-97c6-cafff4acc10c",
        "cursor": {
          "ref": "ef6df917-fa20-4cf8-ac38-d1bad4242e22",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e27e1d52-e81c-455f-9a5a-a8ccfd2af888"
        },
        "item": {
          "id": "1cdfbcb4-70bb-49d2-97c6-cafff4acc10c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0d99716e-f88b-44e2-990b-ddc364b753f5",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "91d05574-0284-43a3-8c51-709cfd2fc7d3",
        "cursor": {
          "ref": "0e855fd4-4c56-4190-9b78-64c2d59dedfc",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "80ff282c-124d-46b3-8615-2cd25999527b"
        },
        "item": {
          "id": "91d05574-0284-43a3-8c51-709cfd2fc7d3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e1d8690a-79db-4b12-99b1-1d180ccfb357",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7ef11a2e-0178-4883-a5ab-554104daa413",
        "cursor": {
          "ref": "cab58b46-e5f6-4988-b446-7f4ad91e0a62",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2191ee26-8ce6-40e4-ab35-7e9a0ab9a811"
        },
        "item": {
          "id": "7ef11a2e-0178-4883-a5ab-554104daa413",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ea51c004-d99b-40c1-ba71-683154de9ebb",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "08e2b9ed-b333-48c5-a3cd-20422216464b",
        "cursor": {
          "ref": "85d77c92-7e59-44ad-a9f7-c5f11073483c",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "18991454-564f-4519-9cd2-7f7ebb7e0c13"
        },
        "item": {
          "id": "08e2b9ed-b333-48c5-a3cd-20422216464b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3460ef98-7419-49e4-b733-8de38f9b8ce3",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "f308e97e-ddd2-44d1-ac6b-ac8f23fae9f6",
        "cursor": {
          "ref": "5c46a108-a38c-4d27-9503-c73f5dffa0e2",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ac005f44-453b-4a6a-affd-13077954f3fa"
        },
        "item": {
          "id": "f308e97e-ddd2-44d1-ac6b-ac8f23fae9f6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "65d72eb4-ba6d-4aee-94f5-ba9669915ceb",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "4a6eebe5-8be8-407b-9f4f-a8ea0a43d5d9",
        "cursor": {
          "ref": "b5ae4112-dba1-4d75-a0cb-b02f4110d0a8",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f4647790-0937-4df1-8604-e333212e0cb4"
        },
        "item": {
          "id": "4a6eebe5-8be8-407b-9f4f-a8ea0a43d5d9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b7a764e6-3ed2-4165-98b1-0ebbec55a8f8",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "77e0c779-a244-4a63-81a1-c78dee2db2a1",
        "cursor": {
          "ref": "cf77f8ce-8d27-4be3-85ad-225a472be3f9",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "05d138f9-5a1f-4474-ad68-8ff0918aff8a"
        },
        "item": {
          "id": "77e0c779-a244-4a63-81a1-c78dee2db2a1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ac044219-4503-4f3b-b51f-d1b3c88cb577",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "34a6255d-f15a-49c9-9ee6-598029423458",
        "cursor": {
          "ref": "11c4c79e-c24e-4f50-8452-0191e2adae11",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5c3e0af6-a289-4ea5-b973-279aaa091419"
        },
        "item": {
          "id": "34a6255d-f15a-49c9-9ee6-598029423458",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "37a8a015-f1d3-4cb0-8adf-b8cdc02e208b",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "40dd2be3-0378-463a-9960-8303cceff7d4",
        "cursor": {
          "ref": "c2744048-f02a-4aef-8a8e-4186ae3a91d0",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "71e564d9-48bd-401c-8f9e-91e1f54d1caf"
        },
        "item": {
          "id": "40dd2be3-0378-463a-9960-8303cceff7d4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e7f2de1b-da56-4e46-9ad0-6a2f6fd005a2",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e2c1c502-b1c5-4a73-af0d-9a5f9c6c98ea",
        "cursor": {
          "ref": "5c02af3a-7b51-46a6-9927-a1523a9024bf",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eb395bd6-0fec-477b-9a61-e97549b2623d"
        },
        "item": {
          "id": "e2c1c502-b1c5-4a73-af0d-9a5f9c6c98ea",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ae020303-889f-4f59-bab3-5d6bc47ea549",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "72971895-b8ee-4502-9bd4-f783c7533fba",
        "cursor": {
          "ref": "6fbe21b0-3556-4ae7-b16c-58a7cc601b14",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a9558e3d-ccb1-4afe-931c-cb8eeb7a8694"
        },
        "item": {
          "id": "72971895-b8ee-4502-9bd4-f783c7533fba",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "efc6c13b-c332-47ec-8c97-0ea4dfc39e37",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8ccb03a2-3622-4c0b-b41c-6b22b394d26c",
        "cursor": {
          "ref": "6419e9a2-542d-4c10-960b-dc9761e294ee",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "808894f3-59c9-41c9-a139-4a87a117c828"
        },
        "item": {
          "id": "8ccb03a2-3622-4c0b-b41c-6b22b394d26c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c3cac6b3-9d2f-4051-bc13-641febe74f03",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "af34cf60-99ec-49fa-974f-64297c8ab70f",
        "cursor": {
          "ref": "3133f87d-7b57-4258-acb7-6b24393c3d8b",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3c9d3a41-cb7a-4cb6-8ca3-f1adc9c2281d"
        },
        "item": {
          "id": "af34cf60-99ec-49fa-974f-64297c8ab70f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2b5cdf00-2fea-40d2-9690-ed0ce1b086aa",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "992cf1dd-a678-4372-b6ab-67830f056db1",
        "cursor": {
          "ref": "e2d279fd-7e88-43a7-8dc2-8c7bef3d07db",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d7586fa6-dd8d-4e46-b8ae-7039de5b445e"
        },
        "item": {
          "id": "992cf1dd-a678-4372-b6ab-67830f056db1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fb15b4b8-7377-42de-9002-ea9d27f42ca4",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "841c7f74-a61c-44ca-89a0-785033435b48",
        "cursor": {
          "ref": "3d83205b-b198-4cb4-ae62-23fdbaecd836",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "52522ac0-b66e-4f53-b24e-705d18bf0ce7"
        },
        "item": {
          "id": "841c7f74-a61c-44ca-89a0-785033435b48",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "59d87441-97e3-4b57-b201-803e216c2a57",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "43c0772b-fdf1-44ff-bf93-c6c953ad5f1a",
        "cursor": {
          "ref": "460144b2-34e0-44c3-9d79-0a290a52e6ca",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4b867ebf-33d4-447d-a2d9-fe38386c2bc1"
        },
        "item": {
          "id": "43c0772b-fdf1-44ff-bf93-c6c953ad5f1a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c7df9e6d-1fba-41be-9c58-3fa6a5d63f54",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "a1c3f4ea-e656-4a46-8c9c-604b52c5e406",
        "cursor": {
          "ref": "9d30074e-b909-4324-87d5-eb2acbd3066e",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a43bb8a8-ec36-4d3f-960c-193b53723fe5"
        },
        "item": {
          "id": "a1c3f4ea-e656-4a46-8c9c-604b52c5e406",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "10f3d627-bbe8-4b98-96c9-02810599a026",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "b68a1f87-a3a2-483d-a525-731c1fa3b65b",
        "cursor": {
          "ref": "ccaf40d1-5584-4ef3-bd16-0da800ed8bcb",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a34dc3f0-a496-4b01-bc68-4a85cc6a0b5c"
        },
        "item": {
          "id": "b68a1f87-a3a2-483d-a525-731c1fa3b65b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c3c75b00-bfab-4c14-a688-7f4da9510e98",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "cb53d192-651d-4b7b-a22b-4dbc4c4e28e8",
        "cursor": {
          "ref": "fd624264-ef7b-406a-b592-abf54eb835d1",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9e344ad7-caae-4d29-b286-92a421591358"
        },
        "item": {
          "id": "cb53d192-651d-4b7b-a22b-4dbc4c4e28e8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e9b302e1-13d5-4715-b660-aa4f6f406e84",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "7f4b9a88-a8dc-4738-a05d-3b2d48c34858",
        "cursor": {
          "ref": "8c556b7e-c828-4605-a201-60f7c649191d",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "11eedad7-3a70-4ec4-a1e1-56112299b383"
        },
        "item": {
          "id": "7f4b9a88-a8dc-4738-a05d-3b2d48c34858",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "122bac19-2b95-470c-a837-0abfc48f07f0",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "f18b5bc9-0e99-448b-bf24-a9d14424ea47",
        "cursor": {
          "ref": "13a9edab-bf2b-4c8f-b373-fab2924f0906",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "275681ce-d5f1-47f5-b42f-928f7a206161"
        },
        "item": {
          "id": "f18b5bc9-0e99-448b-bf24-a9d14424ea47",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c1e3eec4-51d9-481f-a3b9-7098d58d6322",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "28476f40-6974-4dd9-8849-4f216ac4e7db",
        "cursor": {
          "ref": "7e12d49f-4016-4187-8f33-100e069643df",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7e12887e-89a4-45d9-b7ea-1562959336be"
        },
        "item": {
          "id": "28476f40-6974-4dd9-8849-4f216ac4e7db",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a93c9b34-2078-427c-8d47-deef7ca0377a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "a34f2fb0-9944-4fb3-bc74-d8ac88b78107",
        "cursor": {
          "ref": "80a29a61-f0ac-4b16-9e6f-048329f29bf5",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "07563d75-798d-43e9-ac81-989ab92e1b00"
        },
        "item": {
          "id": "a34f2fb0-9944-4fb3-bc74-d8ac88b78107",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "554e388a-cc95-46ff-9246-fc1c99e157ec",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "edeaf596-cb79-4cc2-9bb1-899c8ae034a6",
        "cursor": {
          "ref": "944e84e9-c31d-4870-ade7-55d556a02a58",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f1ac7f2e-b050-491d-960e-a9a043e978b0"
        },
        "item": {
          "id": "edeaf596-cb79-4cc2-9bb1-899c8ae034a6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0913b85c-3ea1-4716-9115-be6b10efb1ac",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "50ca72c7-3448-47fe-8910-23d9ff2dff36",
        "cursor": {
          "ref": "ee75ba0d-b69c-4da7-896c-398917670e3d",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "96373ba0-c0c1-4a64-94a9-d201c4f302ac"
        },
        "item": {
          "id": "50ca72c7-3448-47fe-8910-23d9ff2dff36",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9b1d0417-dd8c-4afe-90b8-a2138a050a19",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "bc540e21-8f50-43d6-8822-95ef3beabf7a",
        "cursor": {
          "ref": "bf3fe0ce-1af5-45e1-a3c8-8cb7a71cb714",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9989a069-4a98-4e46-b37f-8f947588339d"
        },
        "item": {
          "id": "bc540e21-8f50-43d6-8822-95ef3beabf7a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5c791780-bf10-430b-af0c-ee84ab45db56",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9b9aaa93-cde5-4ba4-a442-32325539398b",
        "cursor": {
          "ref": "b8384924-7b2c-42b9-aafb-990490dbe904",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3d061362-f972-4a8b-97d5-97ed152e5b86"
        },
        "item": {
          "id": "9b9aaa93-cde5-4ba4-a442-32325539398b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e7c0ac57-f5bc-4236-bb5f-b54b9a47f5e3",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d8ac897b-bafb-4413-ba6e-fea7c785f533",
        "cursor": {
          "ref": "6dd788d0-53d0-4378-b8b9-b4f6703c3d05",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a5deda5b-5550-4da3-a356-a65417b400ec"
        },
        "item": {
          "id": "d8ac897b-bafb-4413-ba6e-fea7c785f533",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a1453096-cfc4-4c71-ac4b-402a1802c155",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5b10bda4-210c-470d-b640-961cd826b223",
        "cursor": {
          "ref": "159b3b16-d3d6-4520-807b-cd5e9a795d8e",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d560fdb9-fea2-4377-8b3a-b9afc8ef7368"
        },
        "item": {
          "id": "5b10bda4-210c-470d-b640-961cd826b223",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "54bb8a52-880a-485e-8631-9f587a4c621d",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f4dba5f0-e76e-4e1c-a64e-c6d8a3a534a5",
        "cursor": {
          "ref": "d219be6c-7c28-43af-8fc3-de8ae7da53d9",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "230a3c12-6f77-48bc-be6d-1d052e7fd1de"
        },
        "item": {
          "id": "f4dba5f0-e76e-4e1c-a64e-c6d8a3a534a5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "14ef559e-4f45-4c06-95b5-55c15c0be556",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "86147856-ec67-48ea-9c1c-242baa6e6009",
        "cursor": {
          "ref": "690e2b2b-7e91-4dc8-91ef-6c170bdf5085",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8fff0ab9-7f2e-40cb-8d54-e8932aa7a8cd"
        },
        "item": {
          "id": "86147856-ec67-48ea-9c1c-242baa6e6009",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "96d934f7-6dac-406b-8c20-0d9824a68d09",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "9d292c7e-a94c-4bbd-b80f-aa7912b2d3e4",
        "cursor": {
          "ref": "2a124de2-f5c8-469d-a86c-861758e0d27f",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1cbb7139-d46e-4915-ba58-69f19dce561c"
        },
        "item": {
          "id": "9d292c7e-a94c-4bbd-b80f-aa7912b2d3e4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ddf9182d-34b9-46d4-ab30-9b0da4429868",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "90fc0b37-14d4-4dce-a005-6a6cd18b9f4e",
        "cursor": {
          "ref": "4c5488d2-b358-43b9-a1c0-84d12baf02bf",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a895be62-36b9-403f-8180-212c964e1a12"
        },
        "item": {
          "id": "90fc0b37-14d4-4dce-a005-6a6cd18b9f4e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "515cfae6-bd16-4ac4-8c05-077683dbc1d8",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "1795dee4-8d30-43cc-bb11-9e43b6f7bc17",
        "cursor": {
          "ref": "23551213-6d89-46ac-945b-ec0b541eb7fa",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7ed6e304-8e6f-445a-8dcd-3857c9d73bac"
        },
        "item": {
          "id": "1795dee4-8d30-43cc-bb11-9e43b6f7bc17",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5b26db5b-5a15-4dd5-8a1b-86b09bcfe028",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "870035f3-0948-4a88-8356-ab102c67cfed",
        "cursor": {
          "ref": "a677e5f0-091c-41ed-8a23-4720f015cf2f",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7ad31789-8fc3-41a0-ba90-bd772a1a72ed"
        },
        "item": {
          "id": "870035f3-0948-4a88-8356-ab102c67cfed",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "870035f3-0948-4a88-8356-ab102c67cfed",
        "cursor": {
          "ref": "a677e5f0-091c-41ed-8a23-4720f015cf2f",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7ad31789-8fc3-41a0-ba90-bd772a1a72ed"
        },
        "item": {
          "id": "870035f3-0948-4a88-8356-ab102c67cfed",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "870035f3-0948-4a88-8356-ab102c67cfed",
        "cursor": {
          "ref": "a677e5f0-091c-41ed-8a23-4720f015cf2f",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7ad31789-8fc3-41a0-ba90-bd772a1a72ed"
        },
        "item": {
          "id": "870035f3-0948-4a88-8356-ab102c67cfed",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "042d0eb4-a81d-47c6-959b-f1c6b71211e9",
        "cursor": {
          "ref": "31eadd40-680b-40ed-b875-81ea0acbc365",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0031fc87-5350-4107-a7cb-b648abc06f7d"
        },
        "item": {
          "id": "042d0eb4-a81d-47c6-959b-f1c6b71211e9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3612ae2b-29e6-4c1b-aeca-a2921191c41a",
        "cursor": {
          "ref": "fc9365ab-6699-4a03-ac6c-135cc8a4ee7e",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8ffc403f-1b6d-43f3-9582-d4f5f3c27de3"
        },
        "item": {
          "id": "3612ae2b-29e6-4c1b-aeca-a2921191c41a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3612ae2b-29e6-4c1b-aeca-a2921191c41a",
        "cursor": {
          "ref": "fc9365ab-6699-4a03-ac6c-135cc8a4ee7e",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8ffc403f-1b6d-43f3-9582-d4f5f3c27de3"
        },
        "item": {
          "id": "3612ae2b-29e6-4c1b-aeca-a2921191c41a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "890f65bf-8fec-4517-a830-f0d3ddf467c2",
        "cursor": {
          "ref": "36042b74-0649-4550-b05a-9b0d3d106aa5",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "da28e168-7ec3-4bfb-916f-71b80ebd2756"
        },
        "item": {
          "id": "890f65bf-8fec-4517-a830-f0d3ddf467c2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "281c61e4-f9f1-4c6e-be0e-be15db079e24",
        "cursor": {
          "ref": "78375b06-28b9-4793-bdd7-baf3d8916682",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "570aa18f-aebf-4d8d-aa3f-7a221aeda08e"
        },
        "item": {
          "id": "281c61e4-f9f1-4c6e-be0e-be15db079e24",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "281c61e4-f9f1-4c6e-be0e-be15db079e24",
        "cursor": {
          "ref": "78375b06-28b9-4793-bdd7-baf3d8916682",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "570aa18f-aebf-4d8d-aa3f-7a221aeda08e"
        },
        "item": {
          "id": "281c61e4-f9f1-4c6e-be0e-be15db079e24",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "e0a5da91-67f3-4330-b50f-69f615eaa486",
        "cursor": {
          "ref": "468606e9-bb29-4935-abc8-797dee7574da",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "aa310150-a34b-431f-ab61-c8d8ccc8c887"
        },
        "item": {
          "id": "e0a5da91-67f3-4330-b50f-69f615eaa486",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}