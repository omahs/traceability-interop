{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c8ecc3ba-8a05-4d27-bbf2-09eefcd13248",
        "name": "API Configuration",
        "item": [
          {
            "id": "2614816f-8b57-4899-a226-b33a4dd30c9a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6b4d58bc-2b84-4862-908b-ca591f0a6126",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bb83100-1108-41d5-9d79-e1a9cb73206e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "404e5b5d-9a13-4c5d-a56e-a67acdecad71"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "6e61b61e-8968-4ffb-8164-e701ca06deb7",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "104eb6b8-e268-4597-b169-6d59c7117428",
            "name": "Negative Testing",
            "item": [
              {
                "id": "175fbff3-1f33-4c30-b482-15ae82ff1883",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2404fd89-84e3-46c1-8869-d582cf275991",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b3f978-200e-461d-b28a-b42fa89140d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c3a1fe2-303e-48eb-82ab-d349a950c92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e724002-d188-4fbd-8da9-afc778ab154a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9bb0b3-be2b-4048-b385-4c3c7fc230cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02abc88c-3380-42af-aa59-083fcef5a8d6",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051b6699-1466-4dd4-b0fc-70c81f4ea082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ff54dd9-21d3-416e-9312-cace6a0640ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a8bb82-c7a1-4071-aa50-a12052241569",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9183dd42-6f02-4c9a-aacc-03b741a7219e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1742e143-0933-452f-9085-5be1d3499660",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c1a646ce-0b83-4ed6-a5ca-af476fb4dd95",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cea2737-d941-411f-a99f-3ffb42e80c17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "80f44d70-0fa3-4fcc-9e84-27eb2cad47e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77451638-e0e4-4bad-8f96-b8e3c554244f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "ccd28c7e-f9d8-4b98-85fc-25dc9674f639"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5aca48da-7434-4e69-b66e-40078a6691c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "246efc86-25f9-497c-88ce-60e72fed323b"
            }
          }
        ]
      },
      {
        "id": "1351aea6-3315-4696-b4ff-e487c09be995",
        "name": "Issue Credential",
        "item": [
          {
            "id": "0f9dea0d-8f2b-4fee-8d21-cb9bdb6d9baa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6021042f-e565-4953-abc9-06cf38626450",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "10d2dc8c-886e-4029-b675-d2d09d09c92b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3c0c4f-467e-439b-8575-6ddb1fb358d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b31164f5-89cb-4fd4-83d1-fc7faca5c973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e12de9-5f06-4dab-9d22-e262b8cf5201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f2f160c-5479-4eb5-876d-4be007dd937c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f12c6d0-54cb-4c6b-bca3-f24c194f7fab",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bb70da-51ad-4e19-a13c-91fcae0ee847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d53d39-d41e-4b16-8e51-865be5afb6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91120d0c-82bc-4022-a50a-9bda00b602e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1df03a89-bc77-4242-9fc0-fdcf24587446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6fad2e-e8cb-4ed2-ad25-24b26853824e",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b644e144-6826-46f8-86aa-1aac4b9140ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756ca451-bf5f-433a-8c8b-148d7739ce13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473f0ae6-fae2-43dd-b450-265a7bb4dfa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "336ebdfa-2f8e-4430-8fd0-e985d0dcda44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bf127a-51ed-4ec3-9b5a-cc956fe236fd",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3d95d8-6c0b-47d3-9da9-27bd31967b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4fda95-c8dc-4406-91fc-c1d56d6c11c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1da87a-f17c-463a-a9a3-64e406f2565c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14aac6da-65c4-464a-8717-7e72148fb460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1200dd10-d512-400e-8669-735cd7edeaa1",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d89469-d347-4320-9576-c07172fc51f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f12cc83-a812-435c-b149-95131bc11f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e27336b-5fed-4601-9b30-431b0a164e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae4fb135-1f57-4b82-8f62-9683caa361ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d01052-e12e-4688-894d-a07656c3a1a8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf14b0b7-49b7-4eee-9803-21c78b361be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c030216-7f61-4428-98b6-ea605a64b5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc04312-734a-4e87-a33c-14977a0136c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94b1e418-49e2-40a9-93ff-b5e9db2cd01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758c8e54-bb8f-4ee3-8169-f96d5e190147",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05516a1b-cad6-41c3-91fd-1dfdce7f0b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24eeedff-3ffb-4c5b-986b-98c05fb4d5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f05af74-1979-4df8-a426-e2406537c05b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "767162a1-8231-4dc1-83c3-10ecd54379fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3437fda-aa7a-4057-94ca-0b0e7f970f16",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a46c8f5-c832-4c92-b2ce-ad2f374093d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b6c8019-df5d-4db4-bf2b-b513ee6443b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61bf74f-e48a-45b0-878f-57ed9de6e71d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90d64f65-dee2-463a-a1c6-db9edff5362b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f07e2a3-aedd-42ea-821d-148bcf1a1268",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bb15f8-8e09-4850-b8df-de0aec526939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95917605-1155-4f57-8f61-62c8b5cb3379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83a228d-d923-4df8-9731-7ae1fe827a2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afdd8864-6f3c-49ba-b6df-40e8ae81e8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90e17c4-0199-4e30-819c-2a4e18d5e7c0",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9258d109-ab31-4795-9d26-e307be4c3dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f56bf17-49a4-47f6-a374-8d36734a8007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadf3518-26b9-4d1e-a2ce-5fc82fdef869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f851231-2634-4196-a1a8-646fab4a64ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5915cecf-4f14-4a16-a3b6-b97f56cd6044",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412cc583-f257-41a7-a015-d96a947436f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b86597-f723-46e1-aaa4-ea957bc25bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de2d2db-c4b4-4df1-a075-cb69a0f47557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ee2fe9e2-7363-4ac2-9ed7-e2d6679d306a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b2f003-ad3f-4227-8a5d-be8bbd17d54a",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8215bef5-d29b-4c1b-847b-ebd72656b412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0d15ff-a832-47c5-a375-b0529fc3fb74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7895c1ab-315b-4c83-b9ee-5ac95001d227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "134737b2-71f0-4173-a843-f69ae5bde201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2da39a-fe28-49fb-b933-f9b46203f836",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a24c805-5069-4ba4-8abf-16d04828df92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c559cf62-264b-49a8-941d-7aefd79f024a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf3f4b6-9458-4649-8183-9f87d235f689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "0cf98747-f2f7-4142-87f0-b9e07fd3f74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c686ee1-7b4e-43cd-a304-edba9298bca6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e758c1cc-40ff-49c3-aaef-48b119da2509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff441be-b656-4bca-bb40-2dd19f15c3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c508e7cc-b75b-4270-a2de-f1b2d4cc8e54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc92590d-2445-4367-a795-b482bc9f79ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc74c0a-c5b4-47d8-810a-2fe72e2d6d20",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2541e27a-32b0-49ac-8c1c-b5a2a9fd4fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d126ed5-ba8c-4df9-8738-0ed85b518e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd5ae53-217c-4ed5-b2a7-c3684e2458a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "786964a2-ee0f-4c32-b16a-933e12f0df8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64277247-85f1-4da1-9f80-d2ae351dbaef",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e118588f-dad0-421d-b2c4-d189253ceea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24350be-fc33-4aa7-b5c7-6cea46ac2114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becdd533-57ce-4a94-8bc0-bb9a05406613",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eeca173-7854-45ae-b9a3-a3c09d65ed73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164cef00-50b3-4ae8-a43f-90b65b4f06f0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf9f159-f326-48df-8923-52e8dd336cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d2042f-1eb9-4d5a-9ebc-36af27b9aff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea16250-da09-4136-a76c-fdea0e2d7fa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d7895d1-d58f-4956-9194-9ec0fcb47234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ffe1c8-d84e-416e-95cb-5b8bbcde58b6",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6036bcc1-f493-4223-8b14-70b1583a501f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67ec0fe-7d19-47a2-a5c9-d5f72584d265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c23ecce-8fe0-4630-841c-0333b3489b16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44b0daab-d28f-4de5-beec-ca58b4617d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c555daf-6e56-4ad7-9ea8-b9444bf0f132",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87793dd8-e216-4d90-8edd-95e7974e2fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a4f279-1d46-49e5-b320-5f80a6a818df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac35a6c-7c9f-4cd6-8e21-3acfaa5c458f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4db44f8e-b8a8-485d-bbba-6bd0982e9237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b53ef17-bfc3-43cb-9b23-8dad8de9b13b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce257f4-7a6c-4d4a-b9c0-c0a59d7ef7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1f7c7c-b932-49ff-8cfd-9dd02a8024c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b37310-701a-416d-b081-8d27e71ddea7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82802b15-e232-409a-a750-8e2bb568fb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e8d909-a255-4d25-9874-61ba05d81a38",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2a55d2-f199-478a-a3cd-a2103b68771e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe04001-9d40-40b4-be78-e8b2f0cc84b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5546929a-9672-40cf-a94c-2c6f54221544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f22c4a2-de80-443c-bcc9-c9b25d6d74f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5475f6d-d59a-4025-b140-8ac6e5ebb2ee",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aca44ef-ed9f-408f-9b23-842521e34ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b10d5c-be68-40ac-b05c-7cf00cacfb96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad373f4-584e-42dd-968c-1f3b0839029e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d003e633-fc7b-4cb1-bef8-7f425e5c6170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c842344d-737d-4cfd-b1b2-6cc7a617d42e",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628c9fb6-1436-4f26-a1a5-6fad2ca60edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8d9356-ba85-4ac9-89d1-64f86a7b0a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4095c509-4c15-4697-84b1-d2f3c921dbda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f1c126c-d38e-4faf-b0fd-f517a3767680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4b4992-41ef-45f7-9198-a8bc1d0d299a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab74553-be15-44dc-9f85-81a021ce575f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb789f1-f048-431e-8cf4-e76d7b03d7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058c71de-4a1d-44e8-8cbd-1ea2c9ca8a71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e39288e2-d638-4b06-8a10-a420e2ed6996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8210866-1375-42ee-a82e-a923aaf23e45",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3babecab-d9de-43f5-8fab-bb73f9aa9dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2987f736-a0bc-411d-b3e4-401fd42afdd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5350c3-19c7-41e2-8080-c04ac9a096f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a30720d6-050c-4672-96ca-0c1401b77df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2cb2d0-d670-4f8f-95ad-112460ab7af7",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f5e619-750c-42d0-a42d-4b9bbbca4605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17cc13a6-5234-4d04-a8a9-88a94b8abcd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50fbc96-de8d-43c0-9f3e-2e7e617e56d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d31d273c-9267-4ba9-a50a-a90cc50ccc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97818a5a-725b-425c-a69f-6b6a9df51918",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c607f3-9562-47df-8371-88a5e91c0b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b86278-5604-44b4-8fc1-cd57682ad90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7055a508-68e7-47c9-ba40-a40f294030a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00ed13bb-fbcb-405b-a9f8-6e66fa605394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6962d205-0734-4527-b82e-af6b866650db",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5029ab1-e887-4528-bacb-6d1a72dc67b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2421fc49-9f80-414e-8a41-e1135ea5a3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5f3487-c606-4b70-80d3-cb8b443ad961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ee065ae-4289-4388-b61a-8a5058af3b83"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0590d7e5-f407-4817-90c2-cf082e82472a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ac4287b-8873-438a-9a47-c550249962f7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2168140-d7c3-4628-bd02-a1b0681be615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da96573d-ed85-4f92-bf75-e99130379725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b112801-b8d0-4a2d-957e-359dfae13dfc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "48803209-1a58-44ad-9fd0-d1b6ee190f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fe8136-fc7b-4655-a6fa-9471783ce844",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772c5a26-5472-4a92-97fa-e83df6d07780",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "500d2bc1-399b-4b6b-945a-382dfc69a7a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f138a3-23f9-46d1-8f19-ae2ba51dc4dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "414814dc-c8f9-43a8-865e-bdf1a22a7411"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d507ad2b-4e49-464c-8963-3ab771419d35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36e20a8d-678f-446e-9236-3f96d9e0bf53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c526028c-0d95-4c30-9da2-bc4e2d4e7d03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad79faa9-4bf3-4dba-bf80-1ecad23c1c33"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb330ac3-c09c-4a07-b262-465acbc198e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c7538698-3d3a-4c39-aa3a-b758b4d68af0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6bccecb0-4360-45d4-8def-08aa354bbe54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8520dd7-fb00-4ef4-b51e-bd22ccbe41ad"
                }
              }
            ]
          },
          {
            "id": "e65b2e53-4a01-4c40-acbc-2dd24b5ed52c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ef0a8602-6369-404a-8b50-5cdbe4bc3f10",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f45be027-125b-4acd-a56b-3c1374f59417",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42eec1eb-57ce-4022-b5a4-9fde0d875704"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6993aa9f-2ceb-450a-8d82-c8897fb3e767",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "afc3f52a-622e-4462-9fcd-8a6295f07c0b"
                    }
                  }
                ]
              },
              {
                "id": "c08b9f3a-0193-4278-96d2-3ed60658f412",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2102172f-ae30-4ecc-b4df-82b3f649e7ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4738be74-4ddb-4981-9210-1653d047066e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6ae6f72-d26c-43a5-ac2e-2ab106e2b356",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "8f85634c-60b7-4433-856a-3481e4dc6920"
                    }
                  }
                ]
              },
              {
                "id": "4d30b0a3-dd05-4c06-9d56-6b7312f914f4",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10e81a9e-899f-474e-ac81-9771c2baf3c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68dd2417-377f-4a99-801b-c95cc4bfe4f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cc2a2ab-eb20-4962-b68e-5c7d045e49a3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "74dda6b8-604e-4569-ae6d-32c762d167b8"
                    }
                  }
                ]
              },
              {
                "id": "71c89147-85b2-4bbd-bb05-03f62258d99e",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bd15dac-ee18-4805-ab17-ea809bb0c059",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b20d081a-905f-4867-9b49-dcdceb6dce35"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7b1252f-972a-45b3-85bb-a7f9ac553233",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "17e0fd9a-9376-45c6-be77-e352ad18c596"
                    }
                  }
                ]
              },
              {
                "id": "49a8fb9d-5580-4cbf-b891-6f6751c3877e",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa5bbe97-20ef-40a0-b7e6-8a521a80bee5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "931db6ca-8ff4-405f-97e2-a0f9f205b222"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c956f27-f8c7-483c-8c78-f3d5d78a39e5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "c9fe44b2-2c12-4ba5-9a86-2cccbc0bf057"
                    }
                  }
                ]
              },
              {
                "id": "ce389555-15fc-4c61-a1c0-9ce982f5cf2f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "216ccad2-3e51-41db-ab1b-b234a80be6c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30a8c10b-666e-4b86-98f9-29a102fe6f53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dac48d7-ec71-4471-a2a3-7659786f2063",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "efac141e-c912-46b9-9e70-c0f84eeb827b"
                    }
                  }
                ]
              },
              {
                "id": "422ada6a-0509-40d8-ab06-e3764d030e95",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68d53f74-7f44-4681-92c8-8416e62573e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04fca56e-172c-428e-86fb-d3d2a2fa2178"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b55c880e-f04d-472f-9ef6-b62a1bdb894d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "a4e8bd98-5062-46a7-bead-17098b3bd5e9"
                    }
                  }
                ]
              },
              {
                "id": "64296a2a-8fea-4190-b17b-c11bc3ce9cde",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "180568a1-e22d-4122-8761-e6baa454a98c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3b029da-2076-41d8-b370-1f451408e266"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee1af8c3-c07c-447e-a4a5-df3e82521e10",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "a8eaa3fa-6e73-4502-9b28-4fdeab64c0cc"
                    }
                  }
                ]
              },
              {
                "id": "d144372b-12a5-44be-b884-4560a58f0f7b",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "070dc950-3518-400b-abaa-dff324b7d8da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8e9fe2a-c0ae-4cb5-95fc-9ec40d0c57e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bef8cc6-1413-4b64-8eb5-39aeda7da992",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "08391fb3-9014-46d5-8a3c-f05b97495e6c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "791ed747-69a7-4b9f-95f2-5840a244a5f0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a008d8f-fe0e-47c5-8a1b-d96d05382df4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02c4d289-a222-4498-ac72-5531bc6a2bef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b0a65eb-9690-4c4e-8ccd-5cc7963b6201"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "130d5b09-cce9-43bf-9b20-872a11dae789",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "caf1bc54-618a-48e5-9e3c-4e34bd3e86b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9176325-f79b-4b05-b9a7-e2e3bf7e4915",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5188761-185c-4c47-b86d-ff788c674683"
            }
          }
        ]
      },
      {
        "id": "a455b105-6a2b-453d-a31e-c1442a286c48",
        "name": "Credentials Status",
        "item": [
          {
            "id": "d16b0373-d60a-45b1-8028-bec0745596de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08b73734-6971-4f1f-9045-297349fdea68",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76be462a-b446-4edf-9176-df6046f27abe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def08ccb-8f8f-4c1d-bc2c-684fe34af8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc1da2b-5127-41f2-ba87-bcd5b3cac298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2f20fe-9654-4147-87bf-840bd51afe63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ded8eef-752f-4c23-905a-31f9607bf9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516e7618-d0b1-4e49-9d39-dd65f9a76b2f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9886e842-2797-4a79-a740-16250ec3eaf5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87d88d26-4b41-4ae1-81c7-b0b08641077a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d394c0-8c28-4158-81f9-3128556010d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b78aa70a-d30c-4521-b6da-e8d8c0404482"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dd184c9-58a2-4c96-92b8-26ef9208e79b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "562cb9a0-2dec-4f6f-917e-70a7c4140cfa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "047f2846-0e6e-49f3-bc38-45453305d70a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20b2570e-ffca-4bbc-83b2-9f08d61c5091"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05389904-42b5-424e-abaa-a3c69f3ffa61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "cf680782-5095-4065-bb8f-23e230c08afa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "418f3c55-7ca5-4bf8-9f5a-a593fa59c700",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99d25afb-7feb-4fa1-b007-9b134b2afbbc"
            }
          }
        ]
      },
      {
        "id": "ddea6bb2-f593-4bb0-b422-f301edf4d117",
        "name": "Presentations",
        "item": [
          {
            "id": "d09328c6-6469-474a-9cd3-8f3a92357b11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03fc0cde-8c34-4a60-8cda-670339a85cdf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c0d52af-d528-491c-a473-c0e9879ea399",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d062f73-416d-466a-b9e4-ce94b8704d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c5f103-f0bf-4ce0-ac49-df4b318d02ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74bbb98-642b-469f-91d0-ed37d8d96f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "548646a5-c57d-48fd-a741-7c37845b0366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ac178d-e074-439e-ae69-5163326413d3",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f454163-319a-4cd7-811d-731eb57cd34a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfe5eb46-73ff-444f-816b-7f8430b5edd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc533389-fbc2-47eb-94cc-e6e0395fb2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bca4d97-1241-4382-9118-d5e10e29edd4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8493b90f-c648-40a5-a594-dfeb6d8eef57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6d74243-1aa5-4b3a-9739-743fe5b470a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "900659e4-ea2b-4a6e-a1b8-27794dcb07ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27a9d4a1-64ac-4bc9-8100-d60d3eaebb62"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a98798c-f78d-4a1c-80b5-177dbc78192e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "e1eb0bc6-45c5-4afd-a60b-4ec801002350"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93e3378a-d7e8-4078-9156-f2fbe6b4ded1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a754e21-351c-4ddc-900e-a7bb0a63d6cc"
            }
          }
        ]
      },
      {
        "id": "1dd455e2-ba9b-45e9-9dc8-fac952360e71",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "db69e207-e006-4a4c-ba8f-570fd080ee1f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23a6a69a-8ebe-4dc8-9b31-ad13f07139b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95651a6d-8538-4126-8f49-23e5c28d64cb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bae699c-03d0-46a4-b3cd-1498eb24d65e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57397b18-2c46-4ac1-814e-c4863ffcf101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918dd46b-27f0-4a6e-a3fb-cdc8c46f3688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41d43e8a-ed46-47e8-b4e5-1d99b9588646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514d9516-a095-4730-bf02-ed0e05f4b3d4",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6f1bed-a47b-4535-9039-ab4c5b3fbee4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "932ef51b-822b-497c-823c-f25a192fa480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e42a79c-7524-428c-80d9-0e4123e84b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ab2d8ef-42f2-445e-b466-68ef3dfa2ff0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41822371-739b-4509-be97-4bde383baff3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dd08c16-bbc6-4364-9ca9-078df8356c28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2de382a0-af17-4f0e-8c57-83a6e6e3e570",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00e7098c-eb1e-4fcf-8e76-7d0dec7a59e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49a6e0d5-cd05-4d61-9a42-24f92b7ab652",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "a17994a5-a890-49a1-a1a7-3275be7a16f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ed772df-52df-41a3-9aae-5b1d5da0dc28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04f2eb9f-1eb9-4d57-9d8e-5cdeb101715e"
            }
          }
        ]
      },
      {
        "id": "7f6b6452-fa4e-439e-aad0-fb77e29ff066",
        "name": "Presentations Prove",
        "item": [
          {
            "id": "3b37b344-363d-4e5f-9ef2-b5564310ac7f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6802ad5f-dbeb-4b73-bf4e-9ce70823cf08",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46b0a436-5e03-4231-9b0b-8acaf86996e2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9766865-cd55-4917-b98a-d30007fcb89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771e6a8f-62c4-4590-9dd2-b8084cd125b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daaeaf66-9b47-46e5-a61f-d1f9e98d3d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6aa02097-ec31-4a03-9daf-f42f5abded3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a54a919-a6cc-41bc-a0ab-2f6c050de824",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb85d9f0-dad2-4aa1-8f2c-4d4efbe89d50",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7be17a93-ac53-421c-8305-1cf9673c8a36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0745292-6696-4f4e-8b1e-b3a661e530b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb306d86-a421-404b-aacf-3061194a8681"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11e15459-84aa-4d55-89e6-be7f08b876df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b169f35-cd36-4c74-b561-3a06ead11de7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "03413a33-0bd0-43f6-9cbc-0924d2656ac1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09182967-e39b-4ba6-95aa-ec245efe3036"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8e091db-7dc2-401b-8b5a-179e55521521",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('prove:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "02b8299a-24e4-4cc9-aa39-3c948c2ed93a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7a7763a-340b-46d8-840d-e76f456c0691",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be3dc4fb-45e8-49aa-aed1-44fba403735d"
            }
          }
        ]
      },
      {
        "id": "e936b6d2-6d1d-486e-8cd8-5eee1a2148be",
        "name": "Presentations Verify",
        "item": [
          {
            "id": "d05a065d-1f5f-4c9a-bba6-d8bff8cfa290",
            "name": "Negative Testing",
            "item": [
              {
                "id": "955d8026-849a-4579-836f-43b0c0589202",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b96dadb9-3347-400a-844d-ea4598723c73",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73961486-758e-4acf-94c7-65695e3fe1c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795865ae-f994-480f-b376-8ed94f1f5998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5d9235-5f69-4621-940d-500bb55e7a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8299afe9-ac7f-4512-a454-72d7f6a9a22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd52673-9122-45d7-b1e8-012e68fd2d55",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676b50a5-7cde-4638-91e5-70b8af7b8c4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a723c04-a3c3-4f18-a545-92a86f2a89e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebda1dd5-e9d4-4182-9a7a-502389802dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba6eec16-49fb-445e-921a-0a551df589af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e345b93-356f-4a1e-ac76-66b608f0994d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc60d658-d12f-4107-8b67-edacee4d2882"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3948a280-e7db-41f9-a79a-1d3e4543177b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7ae0b1e-3ec3-45d4-985b-c59031410a8a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "788e7cc5-d192-44a3-a223-d7a4597e71bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "07bd43a2-7228-45d1-b38e-ede42b11bdea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "792f1596-ef2d-4afd-bcec-c3f27feb8084",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc0ee668-c887-4aab-b124-d6ea8070c8f7"
            }
          }
        ]
      },
      {
        "id": "d1f63012-af83-4ae9-9ca5-2b56cf9c8a3a",
        "name": "Presentations Available",
        "item": [],
        "event": []
      },
      {
        "id": "84164446-e662-40b5-9619-a9616d591cad",
        "name": "Presentations Submissions",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 416,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 61,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 106,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 209,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 207,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 96.7049180327869,
      "responseMin": 33,
      "responseMax": 678,
      "responseSd": 112.47387226830087,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1659919255884,
      "completed": 1659919264799
    },
    "executions": [
      {
        "id": "6b4d58bc-2b84-4862-908b-ca591f0a6126",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 53,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "be992bc4-97a5-44f5-b4ff-8780166eaaa7",
          "httpRequestId": "1cd5bad0-8861-4b04-9138-4a89c7084e00"
        },
        "item": {
          "id": "6b4d58bc-2b84-4862-908b-ca591f0a6126",
          "name": "did_json"
        },
        "response": {
          "id": "4c8824e1-8191-4079-b09a-c0394b0a6b04",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2404fd89-84e3-46c1-8869-d582cf275991",
        "cursor": {
          "ref": "3f0fff60-555b-4b22-b5fb-c7c4d2429d40",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8ca29833-62e6-4631-a092-c91da3c58dff"
        },
        "item": {
          "id": "2404fd89-84e3-46c1-8869-d582cf275991",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a6f9307b-6a69-484f-8cdb-c4ad5eda804a",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "2404fd89-84e3-46c1-8869-d582cf275991",
        "cursor": {
          "ref": "3f0fff60-555b-4b22-b5fb-c7c4d2429d40",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8ca29833-62e6-4631-a092-c91da3c58dff"
        },
        "item": {
          "id": "2404fd89-84e3-46c1-8869-d582cf275991",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a6f9307b-6a69-484f-8cdb-c4ad5eda804a",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "02abc88c-3380-42af-aa59-083fcef5a8d6",
        "cursor": {
          "ref": "1757122a-0269-4bd0-9aba-58a0e93a63d1",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "26cdc3d2-bbe4-4f77-8335-a3a5651b35d8"
        },
        "item": {
          "id": "02abc88c-3380-42af-aa59-083fcef5a8d6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "672ca861-9d4b-42d5-bd11-e43491c19401",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "02abc88c-3380-42af-aa59-083fcef5a8d6",
        "cursor": {
          "ref": "1757122a-0269-4bd0-9aba-58a0e93a63d1",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "26cdc3d2-bbe4-4f77-8335-a3a5651b35d8"
        },
        "item": {
          "id": "02abc88c-3380-42af-aa59-083fcef5a8d6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "672ca861-9d4b-42d5-bd11-e43491c19401",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "c1a646ce-0b83-4ed6-a5ca-af476fb4dd95",
        "cursor": {
          "ref": "58a203fe-bc12-4657-a8ea-0d4bb3b8183b",
          "length": 53,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2613f12a-695d-424c-a1ab-48f24cf4bc80"
        },
        "item": {
          "id": "c1a646ce-0b83-4ed6-a5ca-af476fb4dd95",
          "name": "identifiers"
        },
        "response": {
          "id": "f6743a2b-cef7-42ae-a7de-07a03d557e04",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d2dc8c-886e-4029-b675-d2d09d09c92b",
        "cursor": {
          "ref": "d30b19cd-d7ba-4524-a312-2cb3865ddfb2",
          "length": 53,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a8491908-1801-423c-9c72-4e2e427d76c1"
        },
        "item": {
          "id": "10d2dc8c-886e-4029-b675-d2d09d09c92b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f2c6e5f1-c52c-4d78-8722-4432fa537569",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 678,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "0f12c6d0-54cb-4c6b-bca3-f24c194f7fab",
        "cursor": {
          "ref": "26f62e15-d638-4a14-b609-4b56af773817",
          "length": 53,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d17366e5-5cbc-46ae-a096-db2db0c9fd86"
        },
        "item": {
          "id": "0f12c6d0-54cb-4c6b-bca3-f24c194f7fab",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f68ad01c-f4e4-48dc-a7ce-7371e1439d16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "8a6fad2e-e8cb-4ed2-ad25-24b26853824e",
        "cursor": {
          "ref": "968f8ca7-f25e-47a4-9f8f-a207df0520c5",
          "length": 53,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ca3ffebc-af88-4a89-a2b3-4a8c1bf991df"
        },
        "item": {
          "id": "8a6fad2e-e8cb-4ed2-ad25-24b26853824e",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "ebf97249-b859-499b-b69b-fc1236dc4579",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "71bf127a-51ed-4ec3-9b5a-cc956fe236fd",
        "cursor": {
          "ref": "5002a3b4-5716-496f-9fde-ce52cc7b4b94",
          "length": 53,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "39fa6414-2fa9-4222-89ba-2ebfc7f16953"
        },
        "item": {
          "id": "71bf127a-51ed-4ec3-9b5a-cc956fe236fd",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "3dd1f3d4-697c-41bb-acd1-937ea9293bcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1200dd10-d512-400e-8669-735cd7edeaa1",
        "cursor": {
          "ref": "3b5e6ce6-a94a-4946-bc7c-960f1cf9c8d5",
          "length": 53,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "39579786-02e4-4997-b909-75b2812c6231"
        },
        "item": {
          "id": "1200dd10-d512-400e-8669-735cd7edeaa1",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "c0753c5f-8439-4446-81f2-a81e4fe53a43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "d7d01052-e12e-4688-894d-a07656c3a1a8",
        "cursor": {
          "ref": "e0aba944-accc-4416-b725-ea1594827b72",
          "length": 53,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c8a7f389-44f7-4261-97bf-f354de053348"
        },
        "item": {
          "id": "d7d01052-e12e-4688-894d-a07656c3a1a8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3702656d-e398-4335-8ffa-7f87f06d7784",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "758c8e54-bb8f-4ee3-8169-f96d5e190147",
        "cursor": {
          "ref": "1dd2d369-3b60-4de5-aed6-18fc415a9ebc",
          "length": 53,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2bb99169-f38e-4186-8f86-39cf5a19484a"
        },
        "item": {
          "id": "758c8e54-bb8f-4ee3-8169-f96d5e190147",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "480e6dfb-195c-4be3-870e-cba30e48d8ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e3437fda-aa7a-4057-94ca-0b0e7f970f16",
        "cursor": {
          "ref": "a217e47f-698e-43b9-a771-852b0144744d",
          "length": 53,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "99f7f836-ad6d-42db-87ce-ab7a98a88e36"
        },
        "item": {
          "id": "e3437fda-aa7a-4057-94ca-0b0e7f970f16",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "45db0197-2caf-4cd0-b3b9-3ffad2f837c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "5f07e2a3-aedd-42ea-821d-148bcf1a1268",
        "cursor": {
          "ref": "8677d458-0cad-4bc5-98d2-d612c8b3d307",
          "length": 53,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d1b5c2da-fde2-488d-809b-255acfa8372e"
        },
        "item": {
          "id": "5f07e2a3-aedd-42ea-821d-148bcf1a1268",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7c999c80-e86c-497a-b4ac-74b68cd5c53f",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "c90e17c4-0199-4e30-819c-2a4e18d5e7c0",
        "cursor": {
          "ref": "59a191f0-6497-4545-af0e-f072503dd450",
          "length": 53,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b0aa675c-561b-4f4f-b61e-112ae64ff7ff"
        },
        "item": {
          "id": "c90e17c4-0199-4e30-819c-2a4e18d5e7c0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "759ceefc-3312-4591-8296-4e96066f9309",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "5915cecf-4f14-4a16-a3b6-b97f56cd6044",
        "cursor": {
          "ref": "96e9f229-ceac-4d5f-a55e-c89e3cb891dd",
          "length": 53,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a9547b3a-52b6-4806-b4fa-5b642476488a"
        },
        "item": {
          "id": "5915cecf-4f14-4a16-a3b6-b97f56cd6044",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "214c69d0-b24d-4f23-b86c-6c572640eac6",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "87b2f003-ad3f-4227-8a5d-be8bbd17d54a",
        "cursor": {
          "ref": "b535cc17-a829-40b6-b645-8ad29e3185d3",
          "length": 53,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6f4a6fdd-d613-4743-a8a4-6fdbf65174ac"
        },
        "item": {
          "id": "87b2f003-ad3f-4227-8a5d-be8bbd17d54a",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "7769bf54-9d60-4664-8053-39567b8cf73d",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "8b2da39a-fe28-49fb-b933-f9b46203f836",
        "cursor": {
          "ref": "d2e12c4d-e0bd-49e7-bb56-cff4be7ac8e1",
          "length": 53,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a6d76afe-cb4b-4cde-98a0-4c2fddf6d355"
        },
        "item": {
          "id": "8b2da39a-fe28-49fb-b933-f9b46203f836",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "bc42b45d-629e-47b8-b334-1e37c729e42a",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "3c686ee1-7b4e-43cd-a304-edba9298bca6",
        "cursor": {
          "ref": "87c75083-c96d-45c2-bbd8-8c4d110e0d07",
          "length": 53,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b7d826e7-2ae3-4514-98cc-5e260e6caa69"
        },
        "item": {
          "id": "3c686ee1-7b4e-43cd-a304-edba9298bca6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ee357d1b-337f-4bb0-b371-8c2450ccd293",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "5cc74c0a-c5b4-47d8-810a-2fe72e2d6d20",
        "cursor": {
          "ref": "c163fea7-b8db-4b43-ad79-09f5a4e8ec1a",
          "length": 53,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "62ca7a65-0330-459f-9363-401fe53430cc"
        },
        "item": {
          "id": "5cc74c0a-c5b4-47d8-810a-2fe72e2d6d20",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "81e29bc0-bc6f-460a-bfb2-9bd7f75b0524",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "64277247-85f1-4da1-9f80-d2ae351dbaef",
        "cursor": {
          "ref": "1b91f1d8-2335-43ce-9a2e-8329a0b424fd",
          "length": 53,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8814028d-be4f-4ba4-a3ca-c5dce0930688"
        },
        "item": {
          "id": "64277247-85f1-4da1-9f80-d2ae351dbaef",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7ed22ea1-c5e6-4a07-afe9-047d5648b7c6",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "164cef00-50b3-4ae8-a43f-90b65b4f06f0",
        "cursor": {
          "ref": "03f12b2e-721c-47f7-935d-2874bdf5cb80",
          "length": 53,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "671395ef-fb4b-42a1-9519-7668953c03e9"
        },
        "item": {
          "id": "164cef00-50b3-4ae8-a43f-90b65b4f06f0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "46bcf12f-2673-4278-a2d6-1e4c02d76abe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f3ffe1c8-d84e-416e-95cb-5b8bbcde58b6",
        "cursor": {
          "ref": "2bcf6270-76c7-4162-bf7b-fd6a6d31edbf",
          "length": 53,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "525e9ea7-4ce3-41bf-b279-ac0bdcb02960"
        },
        "item": {
          "id": "f3ffe1c8-d84e-416e-95cb-5b8bbcde58b6",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "6b213215-7ef5-4ad5-9cb7-8faab5ff568a",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7c555daf-6e56-4ad7-9ea8-b9444bf0f132",
        "cursor": {
          "ref": "2dcd4aa6-7979-4d41-a322-0c34e45d4860",
          "length": 53,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "25cbf77f-967d-409f-a253-58c8001f3b53"
        },
        "item": {
          "id": "7c555daf-6e56-4ad7-9ea8-b9444bf0f132",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "5d65af1b-38a4-4cc9-97bb-51d8e22d2948",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0b53ef17-bfc3-43cb-9b23-8dad8de9b13b",
        "cursor": {
          "ref": "6c890c47-bffa-47d7-a550-17a2549fc7fc",
          "length": 53,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4148c599-e371-481a-8a88-b56b09e201a7"
        },
        "item": {
          "id": "0b53ef17-bfc3-43cb-9b23-8dad8de9b13b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a223c04f-5032-4060-9642-8b0cb5c5a403",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e7e8d909-a255-4d25-9874-61ba05d81a38",
        "cursor": {
          "ref": "0d0b6e6f-ee13-4e80-a4a2-f14687dab385",
          "length": 53,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7a57e2c2-8389-4892-9359-fcb71d81f934"
        },
        "item": {
          "id": "e7e8d909-a255-4d25-9874-61ba05d81a38",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "d1e382b4-bddc-4458-bc6c-aa7f46e6f580",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e5475f6d-d59a-4025-b140-8ac6e5ebb2ee",
        "cursor": {
          "ref": "dfce3778-6908-4faf-ac36-32badd879e00",
          "length": 53,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "13dffade-d6d2-4804-b994-87e540208c04"
        },
        "item": {
          "id": "e5475f6d-d59a-4025-b140-8ac6e5ebb2ee",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "256de1a3-c22a-4ba2-8f6e-ad6d7de44ef4",
          "status": "Created",
          "code": 201,
          "responseTime": 99,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c842344d-737d-4cfd-b1b2-6cc7a617d42e",
        "cursor": {
          "ref": "648c573c-1f2e-4597-9a4b-2cc9a2265cfd",
          "length": 53,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "75cad2ca-9ae8-4875-abae-475b2eb6cc79"
        },
        "item": {
          "id": "c842344d-737d-4cfd-b1b2-6cc7a617d42e",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "d6d63b0d-1ddf-419c-845c-eacdf44ac1b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "bd4b4992-41ef-45f7-9198-a8bc1d0d299a",
        "cursor": {
          "ref": "c41c7c78-e969-4486-b2d9-27eb2cc7e298",
          "length": 53,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2fe72166-815f-41fe-87e2-4204364a4870"
        },
        "item": {
          "id": "bd4b4992-41ef-45f7-9198-a8bc1d0d299a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cebdd886-c013-44d0-bc29-455ed7c92df8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "c8210866-1375-42ee-a82e-a923aaf23e45",
        "cursor": {
          "ref": "28a94d59-b3a5-40b9-92b0-146d2cdbe730",
          "length": 53,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "60c656b5-6611-4172-ba79-e1514d8c7373"
        },
        "item": {
          "id": "c8210866-1375-42ee-a82e-a923aaf23e45",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "8f8d1015-7b78-46c5-adbb-b9e357bb09a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "da2cb2d0-d670-4f8f-95ad-112460ab7af7",
        "cursor": {
          "ref": "9f65b19b-f166-4bb3-8209-6da021180248",
          "length": 53,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "59a5b1f1-d661-4d94-8237-6ed21f5fa92c"
        },
        "item": {
          "id": "da2cb2d0-d670-4f8f-95ad-112460ab7af7",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "e79391a0-b725-4953-8069-eec2aa9a6bb7",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "97818a5a-725b-425c-a69f-6b6a9df51918",
        "cursor": {
          "ref": "ab6cc00a-5094-45b8-a965-2d0803a8086f",
          "length": 53,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f189a787-8b82-41ff-bca8-8437f04cb46c"
        },
        "item": {
          "id": "97818a5a-725b-425c-a69f-6b6a9df51918",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "96e5cac3-2f08-4e38-94c6-f79c1058e191",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "6962d205-0734-4527-b82e-af6b866650db",
        "cursor": {
          "ref": "017b5d4d-afa4-4c61-9885-9845df22e221",
          "length": 53,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e3065850-ca7e-4d09-b543-a6a6590594eb"
        },
        "item": {
          "id": "6962d205-0734-4527-b82e-af6b866650db",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "52035be4-36bc-4c4b-80a1-853adf67fce3",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "4ac4287b-8873-438a-9a47-c550249962f7",
        "cursor": {
          "ref": "802d4506-76af-4875-8352-2f3d5b3f1275",
          "length": 53,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ad493265-617f-48ac-841e-c7352777dd22"
        },
        "item": {
          "id": "4ac4287b-8873-438a-9a47-c550249962f7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bbb0d68c-d898-47df-bb3b-c9d39bcebb7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "98fe8136-fc7b-4655-a6fa-9471783ce844",
        "cursor": {
          "ref": "63623de0-065e-4b98-9a3a-affb1b70cd32",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6bc70853-f1e6-4b3e-8e34-b8be05a5899c"
        },
        "item": {
          "id": "98fe8136-fc7b-4655-a6fa-9471783ce844",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "000ea938-41c4-44c3-a6f6-498254b42ca2",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "98fe8136-fc7b-4655-a6fa-9471783ce844",
        "cursor": {
          "ref": "63623de0-065e-4b98-9a3a-affb1b70cd32",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6bc70853-f1e6-4b3e-8e34-b8be05a5899c"
        },
        "item": {
          "id": "98fe8136-fc7b-4655-a6fa-9471783ce844",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "000ea938-41c4-44c3-a6f6-498254b42ca2",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "ef0a8602-6369-404a-8b50-5cdbe4bc3f10",
        "cursor": {
          "ref": "9e87634a-ad7b-4d4e-bd7f-0a6f87ca883d",
          "length": 53,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0d2b1652-030c-495a-bcca-96e2b412e4ee"
        },
        "item": {
          "id": "ef0a8602-6369-404a-8b50-5cdbe4bc3f10",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0cd426a3-b772-4d8e-92bf-4801c5bcac5e",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c08b9f3a-0193-4278-96d2-3ed60658f412",
        "cursor": {
          "ref": "68a8dbc4-d87b-4050-9bf6-b2269b663321",
          "length": 53,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0c07747e-8d00-4aca-9d61-e83135202a49"
        },
        "item": {
          "id": "c08b9f3a-0193-4278-96d2-3ed60658f412",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "85ee377b-882f-4f96-ab7e-6275e4430074",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "4d30b0a3-dd05-4c06-9d56-6b7312f914f4",
        "cursor": {
          "ref": "bd704676-2be2-474f-9797-8d65e68cfb42",
          "length": 53,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "18fade22-85f2-4829-a258-bae22595f97e"
        },
        "item": {
          "id": "4d30b0a3-dd05-4c06-9d56-6b7312f914f4",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {
          "id": "254b7dec-9faf-4caf-9e68-8a51da1b1dab",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "71c89147-85b2-4bbd-bb05-03f62258d99e",
        "cursor": {
          "ref": "e864fabe-78d2-4779-9868-e5eabfb5cbaf",
          "length": 53,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "825d1e6b-5744-4c59-8b6b-8c075943d9fc"
        },
        "item": {
          "id": "71c89147-85b2-4bbd-bb05-03f62258d99e",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {
          "id": "474ed341-2021-45b7-9a52-d7153bfbeaa5",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "49a8fb9d-5580-4cbf-b891-6f6751c3877e",
        "cursor": {
          "ref": "242f685d-a7ea-4b34-a5f2-03c482cedfe5",
          "length": 53,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "96fdad5f-713b-4e78-a733-374d04579617"
        },
        "item": {
          "id": "49a8fb9d-5580-4cbf-b891-6f6751c3877e",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "1a93b92d-73e4-4890-83c9-cb398ec2e322",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ce389555-15fc-4c61-a1c0-9ce982f5cf2f",
        "cursor": {
          "ref": "87638a15-dfb5-4ef4-b758-754023f2a107",
          "length": 53,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cc0aaaf6-b336-410c-b3a0-02ddb6e23547"
        },
        "item": {
          "id": "ce389555-15fc-4c61-a1c0-9ce982f5cf2f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a2b94226-82a3-4774-9c3b-1288849c2152",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "422ada6a-0509-40d8-ab06-e3764d030e95",
        "cursor": {
          "ref": "d3044327-73e3-42c2-8074-5217744877a5",
          "length": 53,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "787a79d0-2fef-4a38-a3cd-1fd40871a2ca"
        },
        "item": {
          "id": "422ada6a-0509-40d8-ab06-e3764d030e95",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e47049dd-dc9a-4ea2-bb54-9903ba7b7772",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "64296a2a-8fea-4190-b17b-c11bc3ce9cde",
        "cursor": {
          "ref": "248f2ab2-daa4-41b3-a4f2-0e86127d43ae",
          "length": 53,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "083d81b5-5078-43b7-8207-474ada78fdfd"
        },
        "item": {
          "id": "64296a2a-8fea-4190-b17b-c11bc3ce9cde",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bb5a7f25-cecf-48d9-a3c6-175d72eac977",
          "status": "Created",
          "code": 201,
          "responseTime": 101,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "d144372b-12a5-44be-b884-4560a58f0f7b",
        "cursor": {
          "ref": "5714e826-cf6f-474a-90ac-640f1703f5f2",
          "length": 53,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "550a5d3c-7bbb-4200-8282-944a50099987"
        },
        "item": {
          "id": "d144372b-12a5-44be-b884-4560a58f0f7b",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "e5951584-e39e-429a-ac60-a245aaa92602",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "76be462a-b446-4edf-9176-df6046f27abe",
        "cursor": {
          "ref": "2e4f651a-b488-4374-8a05-61f24b14aed5",
          "length": 53,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "19f3a0fc-b7f9-41f2-b515-b54eb345fca2"
        },
        "item": {
          "id": "76be462a-b446-4edf-9176-df6046f27abe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "41354e03-cd99-4d81-863d-9b9a1b335f77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "516e7618-d0b1-4e49-9d39-dd65f9a76b2f",
        "cursor": {
          "ref": "939a8c7a-421c-43d0-ac33-b5f630de551e",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "10f3ec7d-4296-416b-8e0c-3ee03f1838a9"
        },
        "item": {
          "id": "516e7618-d0b1-4e49-9d39-dd65f9a76b2f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d422624a-dfc9-4ad3-b209-55a62e4a2d66",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 35,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "516e7618-d0b1-4e49-9d39-dd65f9a76b2f",
        "cursor": {
          "ref": "939a8c7a-421c-43d0-ac33-b5f630de551e",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "10f3ec7d-4296-416b-8e0c-3ee03f1838a9"
        },
        "item": {
          "id": "516e7618-d0b1-4e49-9d39-dd65f9a76b2f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d422624a-dfc9-4ad3-b209-55a62e4a2d66",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 35,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4c0d52af-d528-491c-a473-c0e9879ea399",
        "cursor": {
          "ref": "691989e8-17c8-48a5-a2be-67cd89d5aef1",
          "length": 53,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "32c18080-728f-43ff-b002-e1d69d3ab552"
        },
        "item": {
          "id": "4c0d52af-d528-491c-a473-c0e9879ea399",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0d6c222b-c7c7-48be-961c-598ffe3e3842",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "25ac178d-e074-439e-ae69-5163326413d3",
        "cursor": {
          "ref": "5743cd5a-edc5-4196-88a2-6f1887d7837e",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "989f1d74-dba8-4dff-9d55-b10020cf37ce"
        },
        "item": {
          "id": "25ac178d-e074-439e-ae69-5163326413d3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8e1cee00-ec5f-4483-897a-27ac7882f805",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "25ac178d-e074-439e-ae69-5163326413d3",
        "cursor": {
          "ref": "5743cd5a-edc5-4196-88a2-6f1887d7837e",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "989f1d74-dba8-4dff-9d55-b10020cf37ce"
        },
        "item": {
          "id": "25ac178d-e074-439e-ae69-5163326413d3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8e1cee00-ec5f-4483-897a-27ac7882f805",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "95651a6d-8538-4126-8f49-23e5c28d64cb",
        "cursor": {
          "ref": "402db799-95e2-403f-9e8b-ee80e0e98417",
          "length": 53,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4b2469d9-ea86-4566-8608-8a8b7d6b2d16"
        },
        "item": {
          "id": "95651a6d-8538-4126-8f49-23e5c28d64cb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bd97f660-3e91-42f8-9172-73499c91890d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "514d9516-a095-4730-bf02-ed0e05f4b3d4",
        "cursor": {
          "ref": "bf37965b-ca97-4f9d-b196-daaf92de6b6a",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ef159239-e29d-410a-9541-a3399ff1222c"
        },
        "item": {
          "id": "514d9516-a095-4730-bf02-ed0e05f4b3d4",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "af999993-8df5-47f6-9fbf-5547b6557529",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "514d9516-a095-4730-bf02-ed0e05f4b3d4",
        "cursor": {
          "ref": "bf37965b-ca97-4f9d-b196-daaf92de6b6a",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ef159239-e29d-410a-9541-a3399ff1222c"
        },
        "item": {
          "id": "514d9516-a095-4730-bf02-ed0e05f4b3d4",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "af999993-8df5-47f6-9fbf-5547b6557529",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "46b0a436-5e03-4231-9b0b-8acaf86996e2",
        "cursor": {
          "ref": "4bbe2b2c-8670-4e44-958c-7f94ff9196eb",
          "length": 53,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "47fad0d1-ec9e-4adf-89b3-009917a52c29"
        },
        "item": {
          "id": "46b0a436-5e03-4231-9b0b-8acaf86996e2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "07c8601d-ffd7-46dd-a546-52c0906d4428",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1a54a919-a6cc-41bc-a0ab-2f6c050de824",
        "cursor": {
          "ref": "a14edbcb-06b6-42c9-acf3-21a9bcfbaa94",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dd60caa7-47b5-43b3-b5b5-db48683eaba5"
        },
        "item": {
          "id": "1a54a919-a6cc-41bc-a0ab-2f6c050de824",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f90a4e7c-b269-461d-a538-5d28934ec0fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1a54a919-a6cc-41bc-a0ab-2f6c050de824",
        "cursor": {
          "ref": "a14edbcb-06b6-42c9-acf3-21a9bcfbaa94",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dd60caa7-47b5-43b3-b5b5-db48683eaba5"
        },
        "item": {
          "id": "1a54a919-a6cc-41bc-a0ab-2f6c050de824",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f90a4e7c-b269-461d-a538-5d28934ec0fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b96dadb9-3347-400a-844d-ea4598723c73",
        "cursor": {
          "ref": "08460fde-e857-4ebe-8f53-ed034dcfd5a0",
          "length": 53,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e926284b-ac62-4088-932f-8cbf7ce71c35"
        },
        "item": {
          "id": "b96dadb9-3347-400a-844d-ea4598723c73",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9555b01e-2230-46dc-b91b-f3841ce46619",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ecd52673-9122-45d7-b1e8-012e68fd2d55",
        "cursor": {
          "ref": "338b68a1-d163-4243-ad8b-49fdfd39c5ef",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "82c22d61-39c6-4f8b-958f-0d88c85d1e75"
        },
        "item": {
          "id": "ecd52673-9122-45d7-b1e8-012e68fd2d55",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f2867d81-3084-4602-90ab-11449ba9ed56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "ecd52673-9122-45d7-b1e8-012e68fd2d55",
        "cursor": {
          "ref": "338b68a1-d163-4243-ad8b-49fdfd39c5ef",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "82c22d61-39c6-4f8b-958f-0d88c85d1e75"
        },
        "item": {
          "id": "ecd52673-9122-45d7-b1e8-012e68fd2d55",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f2867d81-3084-4602-90ab-11449ba9ed56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      }
    ]
  }
}