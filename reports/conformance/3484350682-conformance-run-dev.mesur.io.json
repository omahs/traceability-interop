{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2f77317a-b406-4100-8b41-06b7f09f81d4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "09ff2337-4dbf-4c08-9364-823a38958189",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3e2a53d7-51ca-4a72-94cc-43353729f0b9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2b469b63-7ef5-45f6-85dc-adceb5807d73"
                }
              }
            ]
          },
          {
            "id": "3c4b805e-d501-46bc-9cc2-d746f19a7b1c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "717e2dc5-e572-4e58-b706-9d42883f60da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6a784821-7b21-42c5-bf87-5d5db377fab5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0b6e2a8c-a20a-4d3d-b3eb-e548252acb84",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "70b91c54-7e96-49e0-89e5-f0abaca5ebc5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1277331a-58c2-4418-8861-12aac6e4f4c0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "778c4682-2129-439b-b4e8-e4db3e30f339",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7583bed-88c6-4bea-bec2-6fded1a58e97"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fd81def-0ee8-4c6f-8790-6ee68f71e0b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd938856-8a68-46a6-a703-f7c0bc704428"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "85c90b78-f8fa-4299-89c6-2c31268de5db",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c810e9d3-a40a-472c-be8a-f64fced1f24f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d562a0d-e9ab-4614-ada4-a118db470d80",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5038a93f-f31f-46f2-b702-219e26b16ac7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17a8dfda-5160-4cd7-a002-920601e6901e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e162a233-1fc7-47e5-8055-54370e8864be"
            }
          }
        ]
      },
      {
        "id": "de3afbae-1cd5-4fb5-9000-c3a211e50eb2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a6302206-4e12-4602-8972-8a15cc9635d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87b8f191-480e-4c36-af8a-c5f442c3261a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e9d1af21-c0f3-41da-b969-4dc2b8bc129c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce52587b-8661-4d94-ad8b-ed18b17f38fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a10ca760-1c33-4393-b80c-62356e20dd09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb390e58-c915-4b0f-8554-a718911b927b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b88189-5567-4526-a157-967208b54b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a287c7ef-ede3-4137-a543-f315e7adcbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d479737-5c67-4370-93c8-160b5937f14b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33d14f8-16e1-4a98-97e8-a7b89eec11d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfa862ee-80f9-45e4-b45a-916f43f19994"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "03e5a386-ec2b-4209-8da5-be2ebdc72ed6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78b4697d-ae2c-4672-8ecd-49861638739b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439e1fce-a2f6-4635-80a6-2075b7dd7056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da782859-338b-484b-8e8d-f0f940bab6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c794bc0-299b-427d-bff1-4983f71a8742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b763921-71f4-4248-be93-286200b599b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3489a287-ef4a-4349-b242-905565ac4e95",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce916d42-86e1-49ee-8b0c-078b6334a461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "840b9b77-35ed-4a6b-852e-90bd4633a72c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba86827-9a28-4331-a146-19ff2059e2b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c95e4ad7-c1ec-4e8c-9f87-5fcbef00b821"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a41f2e2e-d835-4cb8-b0c4-4078d59c3a9e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "630a95b9-1c10-4f9e-a0f7-7ac992ef0a92",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dca192e0-0a01-4b1b-a470-a50fa247a60e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2b689e48-56db-4b3e-b9de-3f619703a33f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "498369a3-f0a5-4612-a386-9e0770f5aa78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "3bece862-ef3e-4011-8f85-ebdcfc1676ca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8fb16de-b0da-4e1c-8fd0-4d8ee5c7fd5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53eb7736-b606-4eb7-b05e-28864a42a0e9"
            }
          }
        ]
      },
      {
        "id": "f622880e-b278-41bf-ac7a-88df7991c3c8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ae94fa7d-2e1c-408f-a746-7359d081db8c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "913ab6f6-5284-4baf-9a89-75a6a212758b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "167060d3-7ed5-4d0a-8554-d8243ecc66b9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fecf76a-7f05-4775-864d-42d0dbd3c756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ea0194-ffd0-47c9-aeb4-91627bd8bde7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d4346e-902d-46c5-9812-a12e8cf71519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff0b8b0a-fde6-44be-b412-b39b4129fc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952fc3d0-9092-4434-9e38-5aa51f92a72b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3992baf-5f66-41c3-8399-8b727add7c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85b1c41-204c-4f2c-841a-1b19e09a8629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d40e072-01f8-44a1-9cac-303b31a7fb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "870b56de-5e5a-42fe-8ded-cadc27f847e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcf1097-22ef-4f8f-97a0-de480f7e0c52",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d93482-3959-4419-95ae-e75766c54c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e61f96-96d0-4cc2-af19-7795a676c592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f252ccb-c3e9-4286-b7ee-f7a4d5eb5a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5356401-542a-4c41-a34b-8f2d6a3c1713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d34500a-910b-4184-b0c1-4c2238bc8394",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99e9fab-aef3-4124-acd8-8135b120cabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c895ad-30ea-4353-abfe-856bfc213ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be653de3-1854-41e0-9a4c-c3ed4f61ab2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "902f1080-88c1-449e-ae6a-cfe2c8547049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc52ba3-fac2-441a-ae72-8d2ef675ef51",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b992a002-22e9-49a0-8a47-c0bf0b7adb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827fedab-6887-4f2f-9791-f30a74f31b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427da544-8fea-4ac9-97ce-38a1f10a9c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99244f61-cce8-4a95-b213-1e16c670e8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6011ea-d371-4ed6-ac99-03740e016b46",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c5d57e-d44d-45db-aa7b-f99dd65549f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0aee658-62dd-4cab-b731-dd29c341ccc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9c77e6-16b8-4803-808f-3810ff0968b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2310986-f18c-4a7a-8318-6304f1cad239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60f0f79-cbaa-4d00-858c-77704d883431",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8dfcb78-9298-477e-9342-3669ae354d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c3046f-5dcb-4130-96ef-23ddf488f807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c76db9-b5d4-4890-bc89-83d3d9236327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "283ca139-2eba-4b01-8bb2-a9c78a0d5775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a349580d-84fb-4fb2-899b-88119e82ff13",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbd83f2-d58b-4f46-95d3-3b3738621cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26b7da5-b66f-40c9-b293-ee9a2cdd5982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0e1c6c-b959-4052-a7e2-54100e992f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f073710-7e05-4688-a109-6ea80b6281ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06655eb1-0ba4-49eb-91b1-8f0857e40e81",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09c6a93-a78a-4450-8dcc-d158e8d3343f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd8c1fb-a79e-45fd-b6df-38aa5ca1fb17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8e8bbd-5828-4cae-998b-deb7f840c41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d91814fc-5da5-413c-9574-dda29fbd46a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3255ddf-e53d-48ed-9b4e-a8aecc99b3b5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bb4bbd-0d6c-444c-8f44-cdd2728c3cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ac5fd8-be0b-459e-b362-a7219b6452d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c2cd33-8f1c-479f-9616-7a50872d7d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a21aa547-8cd1-40ad-a404-b358da9d581d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6c0a93-f603-4462-99ec-21da063086ea",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a928fe-3f86-4a21-83ab-22e5891b77a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baceb099-2e8a-4265-8fd2-76d49cbaa2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f13b4e-c2bf-4b26-89c9-7585e5608c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01a436c1-8bdd-4d5a-97fc-7e82f1443934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c8df90-1876-496a-84a7-7c1c5d92e46d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733141a2-901d-4a14-ae58-2df968578fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c4803d-d2af-4aee-b14e-6fe55b234796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce62ab9b-4038-4213-b170-ccf1d9edc62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "688aeff6-c45d-4104-91ef-9f3b08aa747b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16175022-3746-470b-8fad-14942cf1f579",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff531e5a-2937-4506-ad03-af38691f2475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7bd9c7-2b93-4d31-9bc4-be8e22288d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8d3f1a-4148-4137-ac0d-33451554bae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d70010c-f94b-44d7-ae57-c12845ca076f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5f5b9b-8a84-4f39-817e-e708c95431b2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "936fb879-3fc7-435e-9893-8022d1f1c797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4359f4-6200-4eba-bc8c-177f1db101cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a812c565-43c7-4c27-bd64-40589486a206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7d85f03-3f10-4e70-a4d4-f218c64cbdff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad01ad5a-745a-4057-8d66-aa696163f296",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63748a3a-9fb3-4b50-8b00-4d64526795ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfb497f-acac-4815-b05e-e4f3e45c9f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f23721-25e8-4599-a859-5ae412c2fe98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dd1820e-82e5-4726-b7f4-6abcf57f18b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1bb634-c7c6-491f-91d5-584a94c8814e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a0b977-f735-49da-bdbb-122f1c205bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67455d8-50ac-4e8c-8805-5907ce832ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a657e4d2-1ba5-4336-a7b2-b3b587f63742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95e99ef6-3e75-4f1e-8208-27e012b5202a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df8ce3a-d0fb-4307-a689-8afa9860b418",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf16b73-54ff-4856-9098-7206bc6068bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff3bd23-7b5f-4c25-8a93-400f3636a9a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a218560c-c249-4fa9-89c2-9194d0af18e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47df716a-163d-4c0d-81e3-8f6496d046d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3149eb7c-539d-4a9c-9759-9fbf64ea666e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b3c21c-41ea-49ff-a23a-b6ff4f05da39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60f1d14-5f76-4a4e-9570-b29acfd2d31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2c46fb-7cd1-4d40-9fba-b2b99ff69757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c601fb-39b9-4af3-9472-e9001a15966b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b76e6a-6ad9-4cdc-ba2a-dc9890bf2194",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a88bdd4-78db-4095-acf3-93e2d9cb5a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f79290c-28da-45a0-a230-1469db9d5cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c4f892-15e9-45fb-a561-febb9bdd1638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3adbd1b8-03bb-40be-8685-148a54dd397a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bce14b-5f24-44d8-8a80-b109f7af2799",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26564094-7716-4e26-a585-bdffba459c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f948dc-594d-42ff-b921-75067b2b30fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a6b0da-3a7c-43c2-93c1-c6b831f23426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9bff241-2177-455e-a2b0-59dd0c352040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffa73c7-3083-4876-b679-a6792ebb186e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febf8a3a-d8cb-4223-9c59-efa696dbf6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd1268a-256a-44e2-bc06-bc7bbeb99e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e690fc2f-80fb-45b1-bbf5-0462c0caf2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11bb29db-ca42-444f-8359-3f979628f006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8853d41f-8261-45c2-a9a3-89a49afe2965",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58980122-34f4-4cb8-9823-116445fd1681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047cf2b6-e945-41be-962d-8f985df059ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2b2fbb-131d-4c5f-ba61-12a7f6f52e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3562e737-48d7-4896-8122-94abcb139310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988bfe70-a421-4777-8a06-c156c21d7b8e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee2e928-5cea-4b5c-ad58-0eafd50fbe5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20025472-eb18-4b06-a494-3a5e4e590d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f140819-6a84-4641-94db-dbe1dc4cb7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c05b55dc-6f9d-4cfb-8ed5-0c24657c9afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e405cacd-0324-4063-9b53-d4924f7675b6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019cd484-9ae5-40b9-89e9-2539c32be4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a229df95-20ee-43db-a66e-d581a8c37251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2d3810-c3b5-4746-8f24-907f80313d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "71e5b1e7-15c6-432c-9361-b8a1bf77890d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ff91d7-afad-499f-826e-719130fa33bb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1fbc40-bcd8-4a58-af90-d38eedafe9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6e1d41-e5d8-4283-bda6-b57d4d54130c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d40d063-ad02-4903-a47f-7a8b1886feb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e8bbe6-15ce-4070-9364-0570518ebc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b5b9d2-ecac-4dd2-adc7-86b3e5546657",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cedf68a-c108-4e0f-9681-cd402e058f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3686bd0-eeab-4561-9ec2-5f21780fda70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1f4007-7eb3-4d20-a172-2a2ae9f3e7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c29fecb8-0984-4fe2-a199-9c9d9cb888a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455954c1-9fe1-468c-a59b-dd60cbb84094",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4eddaf-d66f-43cc-9326-2eb5834298b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9f2575-12ae-4dbf-adef-54a4762a155d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aadaad4-b876-4ac2-b48c-e544dede43f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f356a6-e132-419c-8cfa-aa0d3a3f9c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5a1cc8-640f-4c40-a211-e1aabd32a737",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56288d2-6f8a-4a91-81e8-adecba1834bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b596c70a-1b65-42e2-92c1-3190b3385e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df3784a-7682-4fe2-a982-8f03861be52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8aadf9c-627c-4820-93bc-397022a07dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43579cf1-3bf8-4223-97df-16d36a763ad8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd501fa-95fb-4742-9934-c7812e1c3ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67910cb6-f561-478f-9704-08968d129f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56bd3c8-c81f-4b44-bc0a-82c01b1631f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf32694-db6b-45f7-ad22-5ec662b46e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43d38a0-7d49-4742-929e-fae967dbb904",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b82a32-1342-4eae-89da-3aead1d4233c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35782170-1daa-4611-9644-8d108ed186bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a0869c-e8f0-4fed-8e29-a7ad8275d64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "20f95ff4-e06b-4ff8-a47e-f2241a99ecad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc62470-e55d-4cbd-a448-1363c9d6b4ab",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c1bbe7-e1fe-4fae-8426-7f8340bbbeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b625ae9c-1261-45bd-988c-28482cec8cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ef3f76-5710-4c66-bce6-5148eb184066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8ce996-2f1f-4001-a317-3c8296abf606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b71eb7-5ff7-48a0-adc1-6c8ba97224de",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f057357-63b0-41bc-afde-fb0eb2067562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ae4517-4ae5-45db-9d02-95aeb6acc227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee77bafb-7ca0-41d5-a24f-6052fbd60b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb1ecda4-894b-4fb7-b46c-64b0c8925a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88226b29-1375-4857-a471-9437e5d0dde1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a5d4fb-7e36-4b5f-864b-9216bcecfac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cddffe6-cfd3-4712-9500-37bce35b8638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6719456-08b0-4add-8f1f-155105856d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db42d598-29b5-4f0d-830e-00101fe07544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c198abd8-1642-4f07-8231-6cdd1ea741ad",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05dea172-a3a8-4a33-85aa-0df6438efa33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ce244e-bd24-4ccb-ac36-25f384bfd1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dac13f-ad5a-404f-a2ab-37df873e0738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56df5755-bad5-4096-a209-4d79c4dd3eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74ecc18-7558-4b39-81ad-402e145ee9b4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123b0c4c-3102-497b-a69b-da5621e31ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbca9bad-f4be-4c8b-92ae-2c24580c6ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a0ef1b-539b-4250-9be5-0cd9ae5409f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "47aef5b8-bf56-4c7e-9866-1b15c64fcc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e96d475-de81-44b4-ab6b-18de19ca9abf",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36ef200-19e9-4eff-9adb-ab9208d4f576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e97fb41d-6f93-47f1-ae31-8218524a3b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6e9c4e-09c4-42c5-8e0c-6b0f4c718a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "693c419f-c624-40a3-8b8e-eceed0e2f292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b58a312-d450-4254-a096-05ef1c6820bb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15e44bf-1b40-4b9b-881e-9a0b3a85835e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4064c06b-76bb-4198-bc7e-356df633407d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a08d85a-0f76-4222-948b-98e67b9c399c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ef8b449-8a01-4e75-af52-8f96bcb28597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6875f711-866f-4614-9dc4-925bcf235f20",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a0e747-619a-43ae-8ca1-f92115a244d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f325600e-fc28-4a27-8412-00a737ccdf39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6f2082-ebf7-4cc2-948b-361a6ec12b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd6a627-f446-4650-9c81-d38cbcc96483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ef4ff7-de91-4344-bc42-9d3b2d077f24",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcb4ee0-4ab5-4f91-94ac-3cee34da6653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62a93d4-e72d-4164-b151-27ec67cc1078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c4b00b-d09e-457d-961c-186c29aeaa8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a392506b-e79c-4037-9cae-bcaad1832f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83189db3-6c9b-4747-9cf6-8107ba5b74b5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abf7803-6aa5-47d6-a5d4-f985d7487e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ffcfce-62fe-4ad8-9db3-e809a1daab12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd7a1ba-7200-4c10-8303-70655a961487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f41c3f80-ec38-4ae1-a3c1-e4244e323c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc180f16-d72b-43b9-95c4-a8f42c8d0109",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87709146-48ab-4936-b253-c354cd076799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2561310-40eb-48da-a6b1-b6bd621f58ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2851c1b-cd86-4d9c-95e6-3fccc2ea1040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a965a78-21fe-4653-a5bf-22bd80164d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a4ab3d-073b-422c-a553-1f418f8f3299",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c072bcd-4806-4444-be18-f58f25adc44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb801c98-3b35-4441-a86f-239c48636e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7dc1308-e54f-43f4-98a4-2c8d741bc4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "61b7efab-b242-4066-b9f7-8ae209d438c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97af6f50-26a6-4582-8ee4-4a7c2d5fee1a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3984c4d-8f3b-4c82-8ed8-5414e9785bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2490396e-5573-417d-afae-3083d3242310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799914d6-3c43-4b5d-828a-65ae22bce66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0da693e-cf08-4375-94e2-c0dc6604d6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d74a16-9cf9-4fb6-b7e7-f456eae331c1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f7bc6f-11d9-481e-9905-90ece02100d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13790e2-330d-4737-9c65-342f722dfd5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c9a6bc-9da7-4a47-9632-7bbe65493f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6dbe97b-7b9e-496a-921c-94ee345f8b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78017ba1-41ca-4b0c-a423-a027c16ddda9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe82520-f5c1-4c1a-a769-30ea3a4ac8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0731d5cd-0fee-4dd1-b466-30361f04edab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd45dd2f-1897-4fae-9a8a-f20d28ebc88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4105a664-7aee-4be7-95e9-77036dd49cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2255b399-0879-4155-9a7a-5c20a39e7452",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29940d2-f8f1-40a1-956c-52e0ed47388b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8cc8892-1574-4225-b243-7c8f4cc92cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9669e8e1-7374-449d-8f04-8029fe8ff637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6d9b91-0e48-4db1-ae32-7b13a01ed1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38af82e0-407d-4171-a13d-c453a4d7a82b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37898644-b455-4b5c-b3c1-2501019db936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2eb0585-f064-4b81-b21c-a0e3f9da12ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffdc897-cc18-49b3-8dfc-08338b0d6d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "267367e3-1f5c-4340-8d41-a5b8d7080d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b80457b-752d-4567-8329-4056ad3ad948",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527a2373-aa7c-4a8d-8f1d-b2db1ae48566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc6c0e4-eb0d-4110-bfb4-2b1126ec93ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a010cb-d4dc-4d84-af4d-6b7bee8ba67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0cb4cc-88fd-4922-9cae-9555e677a05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e301151-3cd0-4d0e-afd6-ad40038bf536",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198b074c-bbe5-4d10-a2f8-02cbe2b56793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced9a126-6adf-4c39-9d88-c24c133852a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f43c910-8264-46fe-8b03-0e252bf65ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7f982d-ca18-4a53-9844-3b2917f39dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c384ec2b-cd4c-46b5-bcda-632a8497f384",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3967603e-7acd-4d23-a969-8272de5892e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ea7f0f-1f44-4f96-8358-a43ef8d3ceb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3764bc2b-e630-4f68-b323-02e3e0a0b189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b53703c-225f-47b3-8467-8a3b88460613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daf0002-39d4-461f-b737-1f10c70480a6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a677fc1-f3a9-48f4-905a-9e61df070318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da46d463-92f8-47c4-ad67-a958b0054876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94f92a5-7558-4349-98de-4585b66210fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c516bd5a-2fe0-481d-b1ba-828228c2ecc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852f6d33-3fe7-4eb9-b362-af6f90883254",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc82a4ac-bc6c-42a1-9372-344a743e98c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cab303-3837-4b6d-a713-38c50b7ae06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1504c5a3-af9f-4f40-9a5a-b2ddd6951705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d01e0519-b1cb-42eb-a4a4-be64fe0fd0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb5fed2-f53f-45c3-ba0e-39ff4c8b02e2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d725ecf2-9a0b-4c0d-8a51-db2f628289a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba585ca-1d8d-4c53-b694-aab5691547db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9048550b-059a-4e74-a176-d5f1ba3e7271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aff6a444-c540-46ad-a6bf-fef609233681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c070f1-83bf-415d-bfcb-4d52b3aff57e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018899dc-9014-458b-afa6-be74c1c68c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddc0263-3a2c-4e2e-8ba9-0cf01d8f6db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71f5e9b-81ec-4dc0-ab58-13f1ef03c4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01a97610-ed85-4c9e-bd5b-381b0b04c5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4efc95-da61-4f38-9c61-096975e7df6c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9d0d3d-605c-4df3-970a-411e8d3c53f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c80cd2-6928-4329-8398-6db6d2f69e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cbfaa6-3e3d-4e9b-a1b9-450d646ec02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9928563e-0a5f-4d79-84b4-c3acbbe334b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c20528-5823-4dcb-8360-97a07a2bf71a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45298579-7282-4fda-983b-33bb22e64af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2647fffa-70a4-4470-8e67-b04f99bb6ad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5121c6e-bb4e-4785-9beb-0275e1e8211e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3130c8cd-8ee7-44af-a7dd-aff58fa421b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cccc2fd-1bdc-4c0c-9519-166b02dcea9f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d609a7-056b-41cc-a288-a43cda696d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1901a00a-f4f0-4837-9e2c-811ce09bc7c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436b11ad-d35f-41bd-8396-a3a94debce9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8571b8d5-5d4a-4165-8e56-1ddede4b3ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc828d2-15b1-41bb-9057-767f389d9ed5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7107d561-58c3-479e-ab19-60b29266a679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d6d118-222b-408d-beef-58385c53fc94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407538e8-18e5-4e37-8561-2dbcd3ecca9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "51511b1a-d03f-4132-aa23-cb03a8ce6ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3882affc-3b39-430f-8fa1-7f8e1d3b14e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35fabdb-462a-4dbf-82bf-d4cb200ad30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88dee4f-bc7b-4c4b-9812-38012d070878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97eb530a-6253-471a-808d-d0fe4e64de3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a596b21-5104-492a-8433-029011fc60e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee345d1-9f51-4ca7-b993-bf31585a0479",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f3631b-df68-42d3-8861-dd7d2f7f6364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5aa1c8-fa01-45bd-8804-0e2ff6e27ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9203d51b-4085-48c6-bef2-3b95c0fd4c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1097a808-a1de-492d-9d83-80b55f8f1d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4886ae-68d7-49a8-b82f-f6c05da42709",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3401364a-41cc-4e29-b72e-c2a1c126cfa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209e045a-3a33-40ef-a960-a2ec0b032a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4efe6e6-65b7-48dc-9289-90d385d0fe64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "38ebf2c9-8b49-4a9b-84ed-233b69ce379c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b511971-3f4d-42ef-a54b-49e22a8096b2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3597f8ec-eefd-4fe5-8537-6b19bd963a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71205763-ba7b-4cc7-a4ee-b3cd967e5367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cd4a69-4db3-42ce-b82e-71c167326f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "01b0db3e-7815-4d7b-b155-e0bc4d81e651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7888f31d-5290-4b87-8d54-4f14da1cd4d9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa790c6-1281-4d3b-94e8-63bfcef3b91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10a217c-8732-4d37-ac84-7ef20e96bac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe71cc1-d1ab-44d5-aad4-8b9c9e365138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9864fbf9-f0e1-467b-9504-b68aa41164fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d8da26-2829-49cf-b22c-046c9d9caebc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377b50eb-d746-4ac5-be73-7750b946c4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6d2e5e-78a1-419b-83b4-104dab55c48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c800afd-6502-4311-bbf2-c6547e7c90d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a65d7062-f589-4770-a0cc-2c11fe2bdb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a341566d-2871-4b7d-a896-fb19057f7ef9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246f008b-f26a-4199-85ad-5b7c7a30f3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c98abb3-23e8-4905-8644-77d464cc0c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2596eb-adec-4403-b1fb-3cbb9945362f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c02eb3a-5fcd-48de-ae34-ca7f190ae46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3393a676-ca25-4179-a206-967f9de304bd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f91fbb0-ec60-44eb-910f-8b93923c1b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc55dde-2c07-4aa2-9af2-a6918e885117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72dfbd5-8c70-4ae8-8309-b5c0f769a929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad40588-5eb2-4a7f-abf2-6088ac032320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e02a45-519b-4233-801b-fbfedc699915",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b576a66-eec9-4ed1-8cdc-a97600514cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e450db-3e6d-401a-b1a4-528e07d2f403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb90c06-a087-4754-b070-ff5b3300684e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9c0b6a-f001-41c6-afb0-b71945d20610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f679911-832f-4fa2-8340-372a6294a22d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5a0391-1de0-4aa6-ae90-c567f481f67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde70df2-f702-405c-96de-303d680c4f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fcab04-ec5f-4245-9983-a82dbd20adf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0190ea-fbf4-450c-8df7-2c790727d243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a375058b-08c9-4996-b3f1-41848e95c626",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828820de-739c-42f7-9787-242ee6ee27c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a52065e-25c9-46eb-857e-9fcb99ef7770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e344d0-51d7-40c7-90b4-1ad438fd784f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "11bb452e-5cca-4ce8-ac59-b8acf03cef37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3800e6-0132-4c20-aca7-a9c92ba140f2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f20ed2-8df9-48bf-8ace-243120f0df41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c0794b-cb89-4421-958a-a1bb7e389d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44fee31-a06f-4e8e-8a0b-a18a14d03b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "715ebf56-51d8-4aeb-bc04-67176add1323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feec0a60-3f9b-403e-958a-252aa60788fa",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78398c5-3bd0-4816-9e52-b3342dfc5f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b94d303-bdc0-46de-b172-646a5cf989d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff0427d-a0fa-4ee9-98ff-b1db1b05d6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66ae218b-17a3-43bb-b83f-847f4cd2d8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c503b324-59d4-480a-ad65-beea62964bf6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2dea9d-48d0-4bd8-b499-85c4481c43dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b8a435-f052-43e7-ae56-2e503780b439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584b988c-c9b9-4668-8f0a-81214fe87248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bec382f-3303-4de9-b703-7eda7375c3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85a2f6e-ee0f-49a0-bd5b-9806b79eb70b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b07b52b-7f51-4222-8e8d-eb0ec3af93de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6394c93b-f251-426b-98b3-163753bc8af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab393e4f-0495-43b0-a12f-b73b49da020e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78c1894b-b890-450f-ae7e-2f6f940bc09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e9cd41-943a-4071-9759-dce58d15cf0a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0542f878-414a-4e88-badf-062da999e93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022adbd7-5f0d-4bc7-96b0-7b67e9de44bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f581da4e-3879-40f7-bd54-48f538dc45ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af1e46b0-f80a-434b-bfce-c227f6244b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909d91ff-99d0-4fff-828e-8a870fb0c935",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f1d772-6147-4f05-9b1c-70f3baa5da10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2bb751b-3894-46b1-bca8-c14a7297b790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6384b809-a031-4675-b9d1-10a13c149126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3d9952-b1fd-4d71-830c-d8ce17bfc474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5820d400-ab07-4e17-9dc4-1f17504a57d4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e480b9c4-f48a-4a66-8c63-7f1c15cc792f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00553b0a-4e63-4559-b779-696b7b7af65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7b150a-192f-46c7-9b76-353c58843c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08f39626-8b01-4c40-96f3-f9bc0bd74006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe7043b-6224-4cb5-a831-d42c1f586c93",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1022800d-9fe6-4f5b-98f3-d27a9c8c1c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3020cbc4-9a39-456d-b42c-f44e2c27ea6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943c2b06-ac42-483b-84b1-6e20377ce56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "faf06167-220c-49be-a680-eb3e8c66646d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c038e382-703b-4f31-a602-a996927d9778",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aececee-61ce-4093-aaf6-15367b985ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfcbb68c-9065-4410-8de0-3295f5782a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbdc226-0632-42e4-b9e9-7477db652004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bacbdbb-0d8b-44a4-ab5a-705f2079a375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560f7e1e-c060-4783-ad73-3694b432545d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385c9d90-4b68-448c-9538-11d1bdaed8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42c48f4-5b57-4cc2-9f94-e58b0e16882a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccbe9e1-0e93-4d2d-89b5-04060745fd37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74454973-a2ab-4ec7-9076-2a62a3ee899f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69357402-05bb-4ed9-8032-478fc587f3f0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3066ec4-e9ca-4352-9b7b-f6fb6dfa0b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c839981-055c-4cf6-a7c3-298c6e3df177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f3a5d6-74d7-472e-9d40-e4527b84cebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04cbdd27-54e9-44c5-a558-c016e0512ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad2f7eb-9a25-4b11-8133-37534df8e007",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ef6f90-3330-460a-8f74-3e0075fde537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92759c1-4e0a-41ca-9119-ec7c6c4be9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a2694c-58e0-4900-a5bd-dfdfa34e5610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "43123fc4-f97b-4ffb-b71d-9a490c2078db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3315f7-a4e2-4c1f-aa7c-fa18b04c4e46",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8606f9-07d5-42ae-9f53-c69ce500e990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "988e2e04-7bba-4fa8-9b50-74cdb501e595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69de5b63-3c08-4458-966d-f8323556c843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ed67a6-7977-44d0-bb9a-93eb82aeae23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15065997-6a72-4e32-9a59-89104505b230",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136330b4-f94c-4d73-9dd9-181c4a9c009d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720480f0-9bc6-4345-aa70-267e4921b25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433965e6-d920-4a0e-8cac-cd9076446802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc493876-de62-46ce-88f9-f65ae70f4754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b209aae9-bc6f-4e6e-b890-8700f2b6ec33",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df05ec52-bed7-47e0-bd5b-efd7e53d24da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5530df3-1c4f-46b1-a687-b855f8316785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36e7f39-61f9-45d7-b864-cf77c52e0920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f79654b8-e718-4c88-bfac-e80f4effbbde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1725d762-0b74-4d2f-a114-b3550f32bee6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbf3888-952f-4576-9081-dd3d960dba24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c55024-746b-45bf-ae00-95d239255db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41575552-5045-4b23-bcd3-ed3eb564594d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b27065d-bdc5-406c-a127-62bcc41c31f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b62abe4-0f6b-43b6-aac2-c51561938df4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdd713c-d1d9-4675-9150-ca3f60b124cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db12b1f-09d3-462d-998d-ce64a8980fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f50d8ba-84b6-4ee5-a508-009dc40b94ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0602a74-3ce3-4177-b9c0-1fb03507c3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce29820-fd24-4def-a56c-16136b6595d7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c94890c-febb-4827-8630-d73fab63a133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6194c7-0e82-413c-8647-f33e214143a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49947798-a5c7-483d-a9a9-352dc71029ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "51a82c73-9724-4da1-b1af-67f3ad0568a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd79c9a9-a275-4252-b3a1-11d28b49ce11",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abacdf36-50fa-4eea-9289-3b4bcc850983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df067e5-24ed-454e-afe5-2408aa55253f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c83f77-d37c-4953-8b73-64800f2b3573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "48af9d86-d178-4fc2-b6dc-8f0f3591653d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5724ce-d67b-4407-990f-9286edcc6742",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a15722-1de3-43cf-851d-93fdb8e5544a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5314bebd-ca8c-4a97-9196-e38a642d26e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1f420a-2da4-48fc-9ee6-5846d61f2568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "23da4503-5f57-4f82-97d9-43c460352a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a9d5e0-a90a-4666-b0d6-ca47dfd01603",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417b46da-8364-4221-8cc2-b7b1f7e36eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d38678-36c1-4a08-a5c9-b9b7337ff8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a74eea-d008-4a35-9901-017ccda2e7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "889b6aa9-b684-4092-aa8d-fb52ce68af0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706e119b-1474-499b-9dbe-f3ba07f594f8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "effb56fa-e7b0-4294-840d-4ae810f5f1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0610bbd8-60bf-4d64-89b5-3f55d278ad85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f36fb2f-5494-4ce3-91e5-51951337d3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8275ded-7f48-4d24-a2d7-a66d17a8e69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190d0b8e-b016-47da-8c9b-c575c09f5b5c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb88a19-f40e-46f9-b636-24875f7d022c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "70198479-7993-4834-a6d7-5dc43e93cbb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73766a47-66a2-4984-96f7-be7aca0e9d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "53fb776f-03c1-4cc4-9edc-23c457c9dbce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "73d6fb5a-200f-402f-b94d-cc460307fba2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6fe90f5-6f0f-4fde-965b-da5c48a7aec7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b901c301-9bad-4697-ac4d-e461f190c765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c47c79b-30c8-4a6e-83d2-bf4d4e958fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbef952-1561-480c-9e04-7aa97879457e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b0c1445a-9c69-42d4-9f6c-9b0aaab15d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c32d03-ceec-4715-9a55-c6e165234be9",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8925fcc4-ddd9-4a64-9798-2ae5c770cd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14b5b774-733d-4de9-a655-51ef324f6148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f667ef-cff5-44a8-99d7-455d8e3d16dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c2fd536e-02c7-4cd9-a59a-53c323acb8b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de220ee8-0bfd-43b4-b77c-02e6f04e742c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dcfa18ac-6a74-4164-8b50-5cae3207cd5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fe4d188-ccb6-4f4e-a462-afdce214bbd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55bd307f-c4d9-4077-87b0-6223de0e2040"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b0d3f00-f235-4e4f-8e2d-6ee149687b27",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11e404e8-7285-4bbc-a6b7-2b10f68c6128"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1c9444f-401e-497c-bf4a-8353ab670e73",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f91d6e9f-9cf7-4605-9598-57e448adeabe"
                }
              }
            ]
          },
          {
            "id": "5727f251-1ca8-454f-b706-4aaecb18eb49",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dcac677f-d82f-4ad3-a44e-f4cd7d6263e7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70f763b2-5a7d-48a6-ac68-442b523bf1f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a424da3c-6321-4550-90ad-952f89dcfd97"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c601cd2-7db7-4c30-92b2-375d7c68ac76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c7436f2-c2a0-46b9-8f68-05ea70255f03"
                    }
                  }
                ]
              },
              {
                "id": "82bd277a-25f9-4d1f-b776-89a555c6907e",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1962ca86-c928-49f1-860b-6a777d8c5c22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2137914-6cd9-48ad-993b-0d661620d7a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd22ff86-21ca-4b76-9200-6e0e78d04c18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7f243b98-1b8b-4abc-ad6c-2fc651bd9d71"
                    }
                  }
                ]
              },
              {
                "id": "5a64bc5c-94e0-4381-a485-2ef09abe7cff",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe04ec59-5060-4abd-963e-807303d61ba9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "353a8465-e67c-4cc0-877a-43453e97cd46"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca464fe5-e34a-436d-aba4-9c65a0309dce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "62925102-f8f8-46e4-85fa-5d9b09055f7a"
                    }
                  }
                ]
              },
              {
                "id": "13811039-d686-4854-8a2e-c3bb7f475dba",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "683158ea-b059-4a17-b4d4-32646d4af2f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3401f65-7754-461b-aa04-9fd7c2aa8f93"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcab13e4-b8fd-49e1-b179-1f98a92d1be5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0bcea062-526b-4dfa-9ac8-9535b939476d"
                    }
                  }
                ]
              },
              {
                "id": "d53c7bde-3656-49dd-b4df-b419bcb925f0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84f63ca3-eede-421d-9cf1-2afa9ba90050",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db948f72-c296-4f95-9eb4-59ec279856f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9199f9fa-161a-4e8d-89b6-e7104ffda74d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "658c188e-d7a4-4473-85da-c83693f36a35"
                    }
                  }
                ]
              },
              {
                "id": "6917252e-f616-4705-b8b7-ffd79fcf0afe",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bf32b3b-0e76-4829-9a39-ec483a0737c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d356f1c-9764-417d-8b3f-1c76396058e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cea32589-523e-4358-a4c6-311b3113edb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b85bcc75-9d50-4b8a-bfbb-b9018ec5710d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "facd4d0d-7109-4913-9327-1452d4997923",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c966cbf0-ecb8-4545-ab63-bd990d28a9c9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "63f77c5c-faf2-4ff9-a766-43497cb653a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "084d5389-c80e-4b31-b235-6b88c620dcac"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6c44f40-d0d1-4cc8-84b7-595290fb7261",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6b7f4360-5aa9-4340-b5b6-0cda2b1ce916"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b792961-83bb-4d32-a92f-053565f2c27d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "399022be-5761-499a-8a84-73bb25561ce1"
            }
          }
        ]
      },
      {
        "id": "18735658-3ddc-461a-8dcf-c087cd1bc9b0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b5fe966f-c0ba-4b7b-af5b-d1a332c44de8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81b06ab8-488e-4a34-befb-9174e0c92433",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ca3eff93-96cf-4ed0-ac4b-ba307b06f134",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab6916e-d831-422d-8718-ad825fb6847a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd9d093-69e5-43a1-801b-4971c12bf4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806dbbe4-a889-42bd-8713-b76cab03c747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e769d7e-075a-4453-a872-f59c59385315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c19e92f-e41b-46ad-8895-3d1f91aaceb1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d805b73e-c541-4589-9e76-14ae473acf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4883e29b-8687-4664-ba18-2771918f44bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f89180-32e3-4117-b3e4-c8f37abe9894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db4b0125-2dba-41c5-8114-900c3ff71918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714c7ed1-8a6e-4376-8322-7a0965a6d274",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f269ef43-30fd-4612-9f4f-f408fc8d4bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e3359a-975f-4bdb-87c7-791e42eaa87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cc8689-3d4a-4b54-9d6d-9a3600eab6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09ad7696-dab7-4714-a1c8-884c4cece221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f3930e-7f1b-43ce-8da8-50d6ab0a05bd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f2c678-66fd-4249-9313-93afcee0019c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcff0780-8b00-47ac-80ce-695bad908c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7322e721-1738-4229-b38e-1be634ff968e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe12cc7-2b75-48bf-9bac-a972f7d0d6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03d0e90-4742-4247-9251-b6467e8f46bd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed44d1e-fbed-4c22-843a-efa1a7373196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee4ab22-2d05-4ca5-970b-1fd94ef8679c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d75e20c-2faf-4e76-a3f9-855454baf8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f013b26a-ff3b-4344-ba90-f31d6e034514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e86f94-2f06-46a1-8580-6ea6af6696b1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7330b9-c146-45c0-b732-9b7629ad63e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91be2cc9-91ba-4b37-9833-b2681897f0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb146c6-facd-453e-8f3f-48f9767d20aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "96a0b7c0-4fb9-448a-8fb9-079daf922ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74845ea6-0fc5-4803-9016-d2d87cdc1c62",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d4ba36-0f9e-48cf-bf7c-425fa115241a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb83f94-5356-4018-b04d-80f53ca6d238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286e47ed-ed08-45d3-9676-147c867a0b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0246e00-4c1a-46f8-8e04-c30ad726f56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc47121d-0a0b-4085-9148-1fc23a3e20f8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76bcca7-89ca-49cf-a7f7-a05fefac4ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda6a979-69ab-4a7d-abda-d287b50015ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2b7460-9157-4fd4-bbc0-71b074c5e972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a07bc9-abba-40db-ab8d-dfa64d4f9804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32250776-2ae8-40b7-9598-d53ee4217de3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d828e321-1315-4cf5-a335-ebb2b468ac57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f96bf06f-abde-44ca-b2f5-b948b9092551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aaeb0d8-f07e-4171-98e1-1b2bca181f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9481723e-e51e-4087-8c34-ba73776dab3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b51c78d-5e2b-404e-9395-db2d5c7b8b34",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05495add-2b6d-45b6-99db-67833ab4944c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e6fea5-30f5-497d-849d-bd33b99e3031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722e3739-4f09-434d-bc78-3d8ca88687f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e02511ec-f6d8-4259-82b8-17488f300ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fd1dbf-ae72-4bf9-a20a-c81a12a7bc41",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ae402a-33d8-4604-9af4-2aff55cf6782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a034e3e0-5533-4c61-ae54-80b8e2919fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4062d2b7-da9f-4584-b6f6-d3b1f42be67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d9665a17-0d0f-49a6-b405-84dd544f1173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f167511c-17b7-47a4-994a-5755573ca1f5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2678b2a3-c313-4505-a4e0-3f3cad47fef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242e8d0c-e96c-417a-8be8-3b2513632fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ae2875-db5b-46d4-b822-85628eed5a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d99379a-7854-4bb5-a959-3cc18d8d2725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22ca8ec-73c0-4c6f-9667-67f2fd2cf5a4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e27c8f-ab5a-49c9-92de-a43f11cea2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a2f0a6b-43db-40b5-a677-4ef2c0a19c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1fe4b2-92a3-43d9-9e4a-47b988bd5090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9adc14-4d90-4aff-acf8-de6c3d2e65d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4698e8d-f397-41ef-933c-b5226bb8b274",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3042f2e-70c0-4f7f-9d01-94dee307fcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14fd792d-b58a-4160-8e1c-61c8c6cdf06d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e4a6a2-46c1-4095-93c5-3767f3b4cadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3320723-b580-496f-b76a-803211a6394d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77e5e1c-b50d-4891-b31a-f074d9327540",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5c62d1-1749-435e-9db2-5457f606ec44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5b079e-cb9e-450a-a71d-c4c6f4c31ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32a114f-84bf-40ba-8b33-92c59ad31567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6efac9e-2bdb-412d-84da-16755132cc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ffe3e6-cce1-42bc-aff3-6ef7e070a26e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b52dcc9-8c8f-4596-ba30-4cfa61f7d6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b928db8-e232-4933-8028-b2b6cd49f6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e80757-374e-4438-b57e-45453dcdc773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e5bc71-0142-46d3-ac5d-a0c0fe713345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28abef33-1648-4e82-b1e1-fd7b41b41c11",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a508d1e7-3ce4-4550-8143-9e124b180947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7aaa047-2348-4b1b-a36c-cdae699bc8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8713093-d8fb-4c65-a4a2-05899009864e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5608ea1-fc04-4e70-b130-e2faa145a329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d1a520-1762-445e-8120-c7cc3b2557d1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4951f60c-f66c-4320-bf39-69eb0d1e3298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0978e4-e9d1-4882-b92e-b37e11cfcd33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abad9a8-5917-48a9-b113-b495486a73ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "250e875d-738c-49fb-b2ee-defe05d77c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f964432-0e35-43f5-8994-eee8cf428baa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6539ab66-f5ef-4d0f-9f68-f9e43520fd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c53d9c-15f0-4608-876f-c301cdc20310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978f6088-9e6e-4f47-b38d-d2652ad44a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "600a31be-efba-4990-88f1-8b91681875b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27382eb7-67dd-469b-b36b-8dc9b64f5be1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b6919a-70d7-4f91-99e2-fdee54475837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba5a5f7-1936-4991-ac54-80ca93d996bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6dc97f0-90b2-4440-83b5-69e7486d47db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e34777a-81f7-4486-b4af-60ec20768b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464840da-9882-490e-bc90-1932da99e772",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b0822f-95b2-47ff-b244-5e6df70f043d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd528e68-fe9e-4af5-98f2-fb07ce456434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02cd47d-8e63-4860-b630-8be7eae0211d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd367628-4bed-4ee7-915b-5e8bbdcb62f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8051ad0-5740-4b41-b012-ed1c5021903d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e72387-463b-40c0-9daf-68c56859b9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378dbf45-f9d5-45e0-b68b-641bd451aea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9dd24b-f5ee-4e10-b3ae-1543b4ce682e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17a52b91-4d8e-4f2a-bad2-51967c0bd526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ea4946-e162-43ff-9f1e-d9de5e95bbe7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d8d3d4-7630-4965-96a1-4e91743449f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e077e8d5-fc99-48fc-a8f8-ba53f1346d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9522df53-b60d-48de-af69-8b65eea61d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74723ef1-b9be-465c-b023-a9aa38a85d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca8c127-f4ea-4866-8c61-d97cb554348a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3f625f-a32c-4763-870b-6ae3e7836b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbf7d54-72b7-4989-9e05-4a8a94b482b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1c8c12-c6d1-477c-b9b5-654e395c2586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4199a2bf-a0b3-49c4-ba00-fe587f215f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9c70d6-c883-49c7-a94b-c7fd49beb5a3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a29a928-6e83-41ae-a865-2f3ecdc2ea9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095a4d5a-6203-443d-bf0b-f89c569dac9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcc1591-1656-49e3-ac64-ff4be050fd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6667e617-2d03-4577-8a80-98ed554666f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c0b338-1c2e-4bcb-b5d2-6d97ee778f33",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8f22eb-6114-4ac4-8305-b2616d8579cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ebdfc6-4d50-42de-858d-5f07bba089c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac064ddb-b9a9-4459-b63d-2d854b92588c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3df75b-76e7-4d3f-937b-5e1d4dd80e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6caced8-f8d8-4eec-8692-1c5af6102668",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc28d924-5529-416a-9f65-315851b32a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6670d3a5-6715-4131-9d7c-a7c537ab681e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46397ac3-1343-465e-bf23-acac422008cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f99a1a4a-ca95-4dd8-aeb7-aba302502892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1030d407-a39e-4693-b1dd-e2379c2a110c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc085e0-4ddf-40c3-aa9d-66daad268bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0037e0-7c90-4436-a78c-12d52a3e01c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c5cc99-a2ee-4294-8cae-a77521a4866b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6822d24d-7e5c-4ff6-b75d-619d02b98ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5e44b0-4dde-4adf-9ca7-17524e55a887",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff074a2-1a3d-419d-8630-694efccaa754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be794fe0-02e6-492e-ba3b-d41696abaf7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ec9888-782b-4d6c-ae0d-b5ed5e8ca28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6214ba-5b28-46d7-9c82-f174c643e045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4da81e-ddcd-4c11-b2dd-a8d6fd2b134a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976ddc32-ceb6-4178-9340-0dda862e16fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d77e8923-af58-4b1f-a128-653fde335ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf69166-ae1c-487f-8ff3-2249435af5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c12ba3-838b-46b2-9ff9-5d642706a419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d50dd69-e1a5-4440-8cfc-4b4d51fd8cb6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf066f28-a133-4bfe-8f3a-01af026978b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2576d3ee-59c8-4ad3-8123-233f0d40e526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e58022f-d037-401a-b1e6-87897f35ecaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3df024-2d0d-4c79-8093-f50d3034813b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4301c1-68ab-462b-a265-c7ae88579d0c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67e5a6d-3ea6-46d9-98c9-477eb3f0c79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24e7d8a-765b-43e5-bef8-46082874f401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04108177-729b-4d5f-82d7-b5fa55ba4e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae927d04-968b-46e1-b7f9-577c37d5185b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ac8642bc-74aa-4330-ac56-931d9e990b34",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "726fb7cd-5f3d-4647-b51e-a61e6d87653f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8254c6c4-ba6f-4e75-85aa-2162d25f9b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59beecc6-f3b2-4c93-86d4-e015e1c05a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f2b2fc-4190-422c-9502-14b8f0f7c82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "884b8984-0cae-499b-834e-1e63f50b6acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ce05fd-69b2-4f1d-a666-719538179457",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c34eebf-c703-4924-8e81-dc8ad629b074",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b050ef86-b89d-45d0-bdc5-53a4c7d9fea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9ae23c-de52-43b3-abfe-3ea3607dd936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7431847-0fd2-4c8e-844b-32c42fa9fb39"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d342a176-5c39-4bb7-994e-f93471511e3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2af8e967-1896-47ef-8b8f-3d1a671bc2f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4040ffa9-b4a1-4846-8236-d6565122560f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "295baa26-5bbf-4495-a12f-cb7ae821d3f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6604dc24-5699-43dd-9096-e9d4fffb18c3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c45c0ef-981c-4e40-a0ff-f6d932a575ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a828e59b-1d4f-43b7-90cb-f24e35652504",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dafdb731-4c58-423f-acb1-addebbc467cc"
            }
          }
        ]
      },
      {
        "id": "4a01c67a-3708-4a1b-8cd1-957a98904a9f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "de8b55f1-053f-4273-86c7-ba87e46409f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d37347d8-66af-4194-8bf6-3b22368071cc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d14a30b-d6ea-4f1d-a086-963d2bbb0660",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13437f24-3807-4174-9d06-209e9cdb5963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b69eb8-6e91-4189-8d0a-60b090b91073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aeb17d7-2e44-4744-998a-009ed5f8d72f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac01ceb-3cc0-45ef-875b-f4cb6dd74b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c8d078-8f43-4c24-b60c-d2d23f28e560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17afc03b-cf99-4acd-adb5-5cd3034be6d5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166a6349-3ae4-4730-93ee-225768505fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ca110f-7056-4e87-a846-cf841f775305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4771a92-e15d-4758-8dfd-79eb2bfff3be",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdb4138-ca6e-4926-b632-af034fc084f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1638ae5d-fe51-4592-9fbf-21d800ae2291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9bdfe2-1f06-4e3c-b470-e4d03e4cc723",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84726253-4e89-4c4f-bde2-0ec93bba971b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa33900-6043-45a4-b906-deda8a9b27b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323cd2d5-b54c-4bfc-a2e7-0c8e1f2682dd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846cb803-0abf-41bb-9856-4da25befe9b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2971e3-f0d5-4224-ac60-d826bb7d3dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d86d790-885a-4c4b-96dd-0908ec8b10df",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db44830-c737-45dd-a586-6bbf9a419d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef71cb6-18e4-46e1-9f5b-fa9817d45652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eda188b-b2f6-4008-abf5-363da0373da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563d3670-75b7-4939-9790-1a99d7265be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e763d1-272c-4a94-9113-e496d8698a7a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0932ac2e-972f-4708-8f47-5f7190550f98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5608adfb-0107-4115-bf9c-ee59dfde3798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c54830-5f69-4257-b8f8-e970857b119e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a7d1af-8558-4ca0-9b3c-e7895ce44b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9c91cc-bf26-4349-9083-a8bcccb247eb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19799d2-d1b2-403a-9000-d8dba5239354",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aeb5035-3ed9-4f2a-9fd9-1c32221edb19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc3b9f8-fa62-461d-8ca7-30a300973bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be67ff9c-cb77-49f2-a83a-e1640ecf99d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5104ec8e-84c9-49e9-9da3-446c4bca4a29",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045d2575-ddc0-4cf8-97be-5cd70613d615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa2ca0f-e7ad-4ea4-8413-60d1498c7c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709c353f-2571-483f-8f46-a0c07dbdbee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ef2fd2-78f0-418c-89cd-5432c62d1bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4bac42-4bbb-4154-bc39-6760e9b6b980",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b27696-ec26-4c77-acdb-06d4a0e227eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ff0115-0902-44b2-9fc2-44f7dbdfb548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af889758-1fe4-4bc6-9449-8d7fac9fa804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a678e376-25bb-42bb-bec8-42d003178aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05934e38-d0b3-4d7a-b8d4-d31c036ba075",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178d303b-4797-4dcb-b1ea-4771dfc77e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6551ec-e5d1-460d-aced-aaf02d9986f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe45090-80c6-4de2-9fd4-d7bc8575da20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0fc417-dd9b-409d-8530-96441c563e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45a370f-3e8d-48c8-bdb8-e653b47e5279",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a49ee3a-f42a-45dc-83e0-4374f577809e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f123ea4-f771-401f-a5b1-c88a7c12f5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7ce13b-cc67-4c3d-8ed6-773c174d3a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a22be1-a7e8-4d9c-ac88-97a9bbee94fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82290509-0214-4d62-a0df-90d1d5f433fa",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f670ef-de41-479c-a7b0-8613abedb398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b67a0cb-a03d-4e7b-a4af-0e75b535db83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e70b084-5b6b-4de4-9224-ad34e6f98927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e014e814-9624-4774-be61-6174fec7242e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6754dffe-fa07-4b20-b430-6223ecafe551",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d839df88-6609-4d61-adca-6182f82aeae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd4f1d88-e86f-4cba-a9d8-0a488f29af3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e520ed-d57d-4770-9f0a-cc2d52ab9fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56fc95ba-3a7e-4d79-95a1-e016024140ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3be2676-609a-429b-97e7-647490758085",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5a301e-c674-4853-b64e-7f48f0ccedee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4480a4b2-2e55-4fb8-b541-375502874a0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806742e0-3f58-4f10-808c-fde00fd4ee48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8776e9b5-238e-4aaf-b49e-b5ab75835454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7049d13-d147-4e39-8d60-4096b43f0135",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a2c481-8b5b-4d99-a7e4-fa791b30bf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ab4f96-611e-44e9-a3bd-be97c7d6286b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce02b405-8f2f-4a95-b5be-99a6e038237c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2dc063-fb37-4a32-9c99-6ac237363349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ece14d-efaa-4d79-bfc1-c3516e611608",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a9cdc5-f2c6-4178-803f-c971dd116da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bf1df0-b9df-4d79-a9fd-e20670337953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f90f44-172c-4de2-9891-75e4a8785f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fa5038-04ef-4883-81a9-f6d981c43571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464a43f2-2f61-4113-8525-bcd76c2535ee",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5262a56b-811e-4a46-93a5-0da057ac2e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08155348-b21e-4306-a93e-0aee636b5636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b6669f-6953-45c5-9188-e3b400e85e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638202d7-648d-4fc7-b603-4de597b22e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e367d8a4-fd59-40e0-b5eb-e88d82c2713d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f66311-916e-4cf7-a0cb-bc1ac6a980e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d6d468-731a-479c-ae68-1456fabdf702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12002bf-04a8-410e-b441-b15909d0851f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ded4e1c-b0d3-4898-b5a5-9e41d9ef65ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04e31c0-1716-4124-8259-44008f86ec8b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a2aec3-36b2-406f-8633-ef1bb5c37564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f8849a-85eb-4449-9f54-e8e9edebaffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df188465-e383-45d1-9e2e-327169bc19ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46653d5d-20c5-4c23-bbbd-9f11926c6934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a6f0b0-befa-4484-b6e4-1a9badfa9518",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79915616-6b61-4a11-89b9-7e8289076e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142670a1-2d86-4114-8240-a06c3558ef62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8d00e7-24e2-492d-9a9e-22b48ea647e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f86a27b-6abe-4bef-ab86-b870b2af1d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1296cd0-eb2f-4017-8ff4-d5cbe0821782",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc378e2-d82f-4739-b472-c25a5d56425a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd306bb8-95e0-4979-9ea5-0483840b64af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9684cc1-a796-4163-931a-147f050ab1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b547f7f7-6cfb-4226-ae6e-3f7b736574bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e657ae42-4cbf-4ad6-91f4-0ede29e4a3bb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bf29bb-6064-4703-a3fc-e44401098218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cee52e1-11ef-4918-a288-199868c9f39a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef90f2e-1810-444b-9788-8de4006ca110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7965f74-e6e3-4d52-a6aa-f32af512c89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346598db-0165-46fc-88be-71b4a270b348",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f88bb67-ac33-4d71-8cb4-b7dfec42f581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cb0598b-d28f-4642-82dc-39e4adbf59c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cf50c8-2439-4979-8e4f-5ac73fd0315b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799055d6-961c-41fe-ba7a-0088961bcbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a382b5-e349-4a94-8fc9-5096e0dc5c89",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e10ed0-d837-4533-9dc6-5646e9621a97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "368d5c6d-f437-4c52-b14a-8f38d9c6828f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af07339-a53d-4455-b3c8-a59782dca77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11136902-c428-4eeb-8a25-3d7ac3adf730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171d9b80-e1d2-4b60-a8cd-4262953d231e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bae8b8-19e3-4b94-b374-479b28c56fb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6909f044-0974-474f-9d83-def1b1428b9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bc01bf-e3d2-4cbd-b10a-497023cde348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a5eaf9-fb4e-4d1f-9626-919d7ae64a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341d5294-0626-4119-8977-8b9185fec5c0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ed45f8-b584-4732-85e6-827d095a618c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9386664c-7282-426d-b798-13564bfead6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abef2ca-dfb7-42ec-ba61-b491f2282866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6184946f-d109-4c78-a63e-3573072c620e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e800eee3-7050-4c3f-87a0-ca0fcb906bbd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65624d3d-7489-40b5-b31b-6257ede7c1df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8b96cd0-cae5-48d7-9621-dfd4ac74425d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee72f580-3228-48b3-93ba-3cfa62cb2b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e069a2-0d32-49e6-be08-4c7d4a1ec715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9d2e36-544c-45fd-a19f-b3d3ff0f56c1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26ccd98-27e4-4edf-8673-ec4792512492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16b9b585-99d6-4b7a-bbc0-b46ef078df96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0898bef-102b-4045-a9d7-4c4441887d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959b347d-a38c-4b39-95db-e790a0621cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16d08fc-32dd-4504-af16-982dd954df5f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e62cd8-9783-46d8-87bb-c1c22f598ac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e175e076-7de2-4a59-9697-d0c4b1214291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23904e1c-0de3-44d7-934f-13bc51d6fcf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8120f1df-a277-40ef-9212-a471336b7fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177dcb3c-ee15-4b22-8037-780fe97288ee",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3359af-3c93-4caa-b714-23a0aefce555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ceefeb1-52bb-47a6-b9e0-02284f918aa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1616d6-bbe4-4069-8500-987ed2bbaf55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ac36db-5cb7-44cb-9c58-6f160a564dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaf7cbb-610c-4a76-80ea-8323c1d876f8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd186a5-5716-4996-932b-1285f4538f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93d5da5e-d015-49a6-bab6-dfbb2497f8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9db44f-c7ff-4d82-ad6c-a96f7c2098f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50349c07-2d29-4be8-b6ec-57fad42ece45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1940cb-deff-48d1-8c98-9bdeee8dc7c0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631c346a-ccbe-4125-8b6b-6fda84d5d100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31a7a05b-17c6-4f2c-9a55-8d946ff3b938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a266ac-bb5b-4a33-84b0-a6b4a64d605e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "073d1f2e-619f-43be-b947-145159c2622d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94682a04-237e-492a-997d-758ed97eb1a5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912cd2ac-4d3e-4914-90d8-a16b6105e944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6abc5a38-f9bf-482a-9edf-cd1308161123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7138954-b490-4d34-8630-d9d2dac1c317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8da6d0-baec-4e03-8f6e-3df897ede844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ab6d4f-64ed-4f05-bda3-5151efd7d4c1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473bf7c1-0972-4fae-823d-317f12e31d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a62100-d853-42bf-b111-b3f06e1c9ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8053d488-6db2-4272-b606-661bc1c6fa0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c370bf64-36af-4d60-b246-97bd595a8f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dac74d-3dd2-412b-866e-26c174b290e8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ef8a86-7f21-4199-a9a8-d5a9cb76ec81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483985ef-e399-4e92-ad1c-b696b4b696f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb6161d-b3f3-4918-8eae-ef8dffcbef86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b12cde5-b6d0-472e-9cca-3d8e94fca5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af3c02b-3383-46dc-8581-d3b7ebb8e509",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb9dc7e-ff19-4a7b-8272-f02866212240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b89c6e40-16d5-4644-9d96-237be828fd71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcd5fda-def8-44a8-890d-8f90ce01d2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b935bed-2c4b-4fbf-9450-94aa12f9aacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01138dc-e19a-4c3f-9062-cb9cb3868018",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a4ab93-18f2-4a26-97d7-725111844332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252e189a-8fbe-4e56-ad5b-a7fd9cc91943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9629cebb-86cd-48ca-b6b3-e23b2592e85f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0983f25b-d261-4caf-86d9-e5bfc103e85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2f7efb-79af-43c2-8c8c-73dafe21ac91",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9de675b-804d-46f8-91de-dd412efbe499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf68131-1586-41ae-8166-338787fdbc38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62172253-1914-4a82-9d63-23516bfc421b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04df1df9-40e0-45c4-8c35-83b6bf9fa332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d440a3-4549-4b45-aa1e-2d9026f9b769",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a1bd18-fd4e-42a0-a92b-251f68953525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff048b31-aca6-4efd-8602-e3e0608ffc83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a60a05-ff78-4c55-80c0-dc19c459bb83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbede66f-41b7-437f-bf85-905b9ef75598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3a11c3-7739-4ca6-a1a4-ba24bfe9a09c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2973d043-1ec4-4ad3-be1d-43e8bd2e1538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677e863a-b22f-4271-a4db-9477aa4875a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d96c16-4fae-4b8f-9279-e09adb43e3c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fe6fbc-309b-415a-9af0-7692e40f3e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41dc9ac-7c6e-41ee-b17f-183638af2b5d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7af6ee8-299b-401a-934a-a82d65a3f5fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2eacf3-7e98-43ee-b71b-a7b169fa1be0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c1484f-0df6-4356-86ea-fede32576e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e330b0d-68a4-40b9-82a3-9e1a85cf530d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd70800-ef79-4ebb-ae82-a828fce08e19",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7193ce3a-457d-4670-9f6b-01ccd8f8c91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219cdfdd-4ac7-448c-a52a-c019c5d5fce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c485fee2-9f0b-45ba-9575-d8f8f1323e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6712323-0847-41c8-b2bd-c4ab634bc7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee3602f-ce48-4691-9aaa-fd9cdec6a144",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8555bb-21ca-43de-a818-e365ddecbd8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a27d4b9-e8f2-441c-a473-752981239d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea53c98-248f-42bd-a56d-f80eae0f0b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74c6c1a-b872-4865-816a-7576d827ca69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b492e7-b9ff-499b-b98c-16f09a53fd3a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d5d5d7-834e-496f-8fe3-0b4e07f14ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c064024b-00ce-4094-9dee-6bf23139c996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eee5a6b-45cb-4a68-9fff-7a16d627bb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a50fcf-f343-462b-b56b-36623a31ecb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90830cd-9f81-4943-97d7-64fe40ac3689",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b848c46-5c4d-4454-a512-acf266a92af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b36b18-3c16-41cc-96ee-41d57962c181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f991d2d-de86-4998-903b-61a2547bca35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17b04b0-9d37-4705-a925-b5e1eb5ae6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37f638b-13bb-4cf3-a5ab-6a161c06d5ea",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ffdd20-e454-4c3d-bf3d-9cdc890071e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bfc65e-7fed-461b-bc16-37464447cedd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4724c6a9-4a9b-4c97-89c0-536c9017a7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c2f3df-fd7c-4810-8863-88b05bf5a4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9b06c9-bf0a-4154-a191-fcec36efb9a2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95674954-2f42-4668-b29a-0f29179009c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6407ff-0c16-4af6-bbde-675ae361c961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91a1b6f-c681-4956-b018-1da9ef35dd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c821530-9d63-4b0c-b18e-10b122865760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e8d0c6-996b-4e82-b541-ec6f48f7805e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c4bdf3-bcd5-469d-b066-e16dd712965d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab627ea7-c1c3-4b77-a653-82e72c70f56b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08ee445-cecd-4177-b58f-dd011c2a4d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eba79b4-1aff-4cb3-90df-97de0196dcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783cb6af-00f1-4fab-9c51-931658cd7fa0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e247aa-0c40-4f10-9200-bb06d3be678a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ded2f4-271c-4d18-b095-ff23eccb9441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf93ec7-ba35-42bd-8144-ff4e059c86ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9cb39ee-bb3d-4a8e-b61d-29e9c42d1fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e7ac74-f2ff-46e4-96f5-e6e34414725a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca7de86-45f8-4b19-a666-c1a9121ddf15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039f4bc3-4b1f-42ed-ad71-7260d3c07a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a13001-255f-477d-a16d-090679c709ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb7efd0d-83cc-4f13-8a43-eace41b4798e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72be977e-9fc7-48d1-ba13-181584c4781e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca49be2-4965-4d73-b6ec-2ec027627d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa50f4cc-3fc7-4024-9429-1edb58466adb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4afbb4-cd82-4ef5-a2f6-f959edbaaeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d0c1d5-cedd-4121-88e9-6a8e75de8f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9514cb39-1e12-4359-9d93-55c0a56e378f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96b8926-3054-4913-8085-c682ff8d4286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec84cd1-98c3-4527-8357-a717e9defb96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb7b9d6-8b5d-4ac9-821f-0e7b0d9c3866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2afe391-c2ab-49ff-bc43-4dbe01d4bd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b668d08d-8fc1-4ab6-9bf1-5ddcf8336be5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f030662-ffa8-44e0-91df-a5b42caab678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7a8dba-7f50-4b91-8655-dc27f52384fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53be4676-b8a4-4f0b-928b-9f3b72ce4883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4419faf-f1aa-48b0-a9b3-3f0bacee34b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfc30ca-814d-4f84-9b8a-fcfb536a6fd5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05b0507-35b1-427e-af57-84c92c5d6adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389325fc-3d2f-42ca-9024-e4651c5a2775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0459841-e135-4954-a1bd-02e797af2095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c0e3374-337c-4ea5-ac70-bfd3e815e8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc09f76-017a-4569-b80e-201d966b58c0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a360cfd-b29d-4b2b-b253-d5758777082c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd599292-1246-43c5-a5ad-5350d13f348c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c4b5eb-da23-423b-96df-ea5f7bcefea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ed48d5-ee2b-4156-becb-c7301a084460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90337a1-38a0-450f-86f3-4e968f667919",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4220dd85-ec6a-4e8d-ad04-03f74b264148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c00efb2-0632-4803-a9c6-19e55bfda8a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1c1a98-7e2d-499c-99b0-f55a85b2c549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18add125-eb6b-4f99-9aaf-f030ba805e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e499b621-d8ee-48ca-8a2c-fffc3a46f844",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e31d42-ca14-4242-b996-ad4af357baa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94dffc14-309d-486d-bc88-cb2a65693065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673867b1-6330-4d7e-8221-2780a596822e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35080d2d-7673-4b1f-be0e-ece9b0334542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922f6de8-6e96-4baa-b6e6-f339e3b14bee",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d324ee85-c919-4b59-a616-1ce463ee6089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25af6dcf-b38b-4c84-ac9a-776415d05fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f244477f-c1ff-4ca8-93c8-9e48b7ca8b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11886e3d-4a09-41a5-a63c-0bf774dc85db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1beea5a-1736-4632-98d2-ca9500d04129",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8feb2c3d-7372-46a9-94cd-7e42ce900938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3e2b6a-b569-4fd1-a3a7-d663c0525b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739abb00-2be5-4938-bded-b4439d25013d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff26902f-19d6-4bf4-836e-2513aa351eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41634767-f13d-4de4-97e4-e4419b030f72",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34674021-985c-47c9-8aab-3db8ffb1bcbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c83646d-e7fa-4c93-9696-ad44766115d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c437636c-9448-4a41-9508-339dd7468367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4b4360-0d0a-4c79-9987-f8f4e0e9781c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22469486-1605-4a00-b9d1-2203b12a461d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15fe514-415c-4296-852a-6749bba8ae72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804787f0-c635-40b3-922e-e1419fb6562a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac868df-144e-427a-9dff-ab62c86304df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e6d66c-ccd7-43f1-b49d-0061382e6dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e174a729-fbb8-452a-8852-6bd218f536f3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfff1d1b-5960-4d98-ae98-58bc84232489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cdbc91a-f1eb-4a64-9d7e-ec0763946415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8df626-2a64-4ccd-8363-86c496452d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc3734ac-d52a-44d8-a41b-7d2ac1aa07bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7fb2a8-cef7-4238-8e06-8216629b0d2d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec738a7-924b-407a-b51b-a06ee521b7bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4757243-cfc1-4cd8-b478-943a9c7dc7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc0ef6c-3f92-42ab-a530-e942ab06810f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2cbc23-af52-456e-9d59-600442ec8222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acb7cf8-0573-4dea-b2a8-50449028e993",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51793d3-ccde-468d-bcb3-5701522c74c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a65983f-4a81-4c89-b9fa-56cdde500cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af12b83-dadf-47e6-800d-eca3f15f227a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a83659c-16fa-4835-97a5-58314ec88895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c8ddee-7f2d-4c3a-8498-054ff795d72b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775363e0-84b7-4d9e-84f6-919a3a993a8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd3ab517-9533-4733-99b1-5cce5d41382e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e26cdc-52b5-4c92-920e-90317347f21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb9753b-3550-4aea-8175-18825070e3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d6c098-f24b-40c9-a199-523a0493e8fd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f7973d-f23b-4250-bd2b-1b5b70c28e0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3704d2c-0417-4797-b2e7-a11907b1f755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d3dec5-8c6b-4c7d-b309-6bcd5da8d42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0debc422-e020-4fd4-8dee-df44d5317d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0ffc59-68be-4f36-96e0-22465ee6d63a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116f7c3d-9d33-454a-8f5b-aa887d630cc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db2fcc2b-b7cc-4bbb-8406-c19a8099596b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bdd5d8-bad3-4dbc-9cc4-a4c4784e5d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3adeb6-9861-4be8-9178-d14130cb3881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340b3e91-e3a5-47cc-bcb7-6ef6a3a1527e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec29e992-3c06-4efa-9fd1-54975d71c89e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e43e1ba6-91e7-4d99-8dd5-8b9265403181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b600d9-9762-4c80-85c2-8053d8646f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11310c07-bdfe-4013-9722-f4ee63658303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1feb8167-e8d7-4b4f-b141-652af82ad9ce",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6252c071-92c0-498a-ab25-cd48d63abf41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a37ff663-6bcb-4d1b-9a73-206b20650bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "623c208c-987b-4434-be1a-ab040d747dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e241a6c7-0d7e-42cb-b58d-b789c29f0626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb1f233-b0bf-4b32-b4d7-79d720ae92d5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a2a9e1-93d4-49b6-8480-b9387b96ae48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "031fbed2-6a36-4698-88d1-bb59cd2dadac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ddf825-a7af-4da1-b16b-8450bacb4fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d91fb5a-7114-46a7-bcf6-347efe61b018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4963b200-3109-4e75-b1fb-7bc579318d42",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a849c3-9118-427f-ac05-0d8b1aafbb45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e6cd692-3e25-4cde-b899-2107f75e6b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3ece3f-25e5-4090-a4e2-5f05b29a27ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f414ddc1-a3a8-4d41-849b-8722668c40c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e08db05-8da7-4c76-9dcb-0c5674e508c8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef8feaf-dfb7-4759-b62a-05a227425bab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebd62432-1cc2-43d3-8177-6e6361210b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ac8c30-d19c-4ac9-a64e-46d0f5b90b68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12e4709-7d28-4b6e-983b-1aeb6d017b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681e84db-2225-425c-8b4a-728b9212a84f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bac8af5-037a-4fa9-9612-bb44e5a95b51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eac7945-cc8f-486a-be3d-1579bd357c90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1e7564-c427-41a6-887b-01ea9f38f587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9376964-3883-4259-bf27-8a73a50968af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a407634c-b0cf-4789-bcf9-ea9cb6aebd39",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b750b495-c2ae-41ee-824b-cd98675b111d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a69ded3-5798-4af1-8612-82367e1d4f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b12272a-18d1-407e-a88e-22312e73cfe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b39296e5-2d7c-4de7-9445-6d7a37257852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efa2d52-73a9-4763-a496-45c1e48b96c9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74eca84-beae-4c1a-be7f-8f4d883cd000",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ceec23f-2b1d-4876-8877-17939fd66f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17ea872-7e55-4acc-9dec-f54cfad8ee8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ef119e-fc4d-421b-904e-561b98e02155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d619b7-10e7-46e9-be34-5c5a259ca5fe",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9ef05a-2fd8-4657-b62b-616b4611357a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9b27b7e-fa8c-401b-a924-75988acf0583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f812639-8fd3-4b76-ab51-ca8ce816197f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a243f7-6a05-4f06-90b5-1f080708dfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc826913-404f-41fc-81cc-95ebeaaa0181",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494936a2-dd11-4520-9049-5e5f7667011b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb350f7a-d45e-407d-82ab-bf060ee57b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b36521-b1f7-4171-a4c0-e87a7f941435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2bd336-2dbf-4b80-b4ec-fcc6f3518873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2fe4a5-61cd-4fd7-bea7-1675a94c6ef8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d006128-d189-41b8-90a1-fff7230a5ca9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96c4e30d-52ae-4bdc-a6df-c3f86da0a04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c2a0cd-25ec-4046-af92-2e0a2fb244a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b7d9fe-dc19-40d5-999e-4174596fa14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1284b38-2983-4dc2-aefa-107f12bb395a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8e1636-6d0c-4240-9046-1da7546fc143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2283c46-6e97-4240-a882-da11304332d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c43c895-facc-49ab-a88a-f64e1af64458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2cf1ad-14aa-4dc0-b6bc-8fdd7591eeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e09470-4daf-4324-933c-048221ca840d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cdbb8b-94a1-4e01-88a2-3e81bbf41e93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40f59126-5fcb-4460-b782-5e666c729588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "634fde2c-10d2-4799-9421-4880ac748b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5e6481-a3dd-42b7-bb42-756709fcdc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbe6f3e-3b99-4a75-93e7-b503598a65c1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9217b8a-2966-4e5c-848b-98022feae519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3424483b-5895-4ca3-a395-ecf200532b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cecd38b-b9c0-46af-9b2d-4fb137054243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef7b8ce-c223-4a35-a79c-6343924f88b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb60bae-14da-412c-abc1-b3dd1957bd25",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1e541d-6670-4c26-8387-29ddaeb2ec71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "932f5dc7-176a-4319-9663-4885ba0e2453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c1cc55-1dba-4f4e-a3f1-39622e3ae9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6b9143-894f-4f9f-90d5-56f56d591e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0027784a-b758-4f42-8b14-4b8516a68be0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122c79c4-5207-44fb-844b-34784d4502f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baae7870-f9c3-41e3-9b2b-f29050eac7a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b09dfd-e7db-4a91-ab91-0d2412173982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3287f9-3bd5-4b10-80ea-e4682b04bfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc15310-47c9-49de-ba29-9e45f7e328af",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39989eb9-1599-4b7a-99e4-d06efc4da9a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9205c77-4e62-4f07-ab6d-c40dc6347701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbed9e9-1d35-44d4-81b8-dd84ebad7993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6ed178-c702-4753-8d3e-c78a5a9f74d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feac956f-0aaa-4ea3-b970-fe7c14aedf5c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d05b9af-c9e2-4982-a377-181e3ef67923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d6aa889-4760-4134-8957-4aa0d0c1eb2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d8e6a1-ba05-4298-b6e6-8d9549c9fbef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a766ee-fd62-4e1c-8d04-cacce551e905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf07aa0a-a991-4132-98c3-43886e4abed7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393b618c-faac-43f5-a13e-9af480ac6b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e818bfa-b8d5-435a-9b87-14419740f580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f118d12a-832a-447f-b4df-ac3de6c3bc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34174fb-75a6-404f-8418-f662502b21b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff0c758-38e1-4507-82d9-82d6d72d2b0f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1c3485-1d89-4648-afb3-6b73b9aecad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e853e041-3fbb-4c14-a72d-e72f479dd476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ce2127-66e5-409d-a2ef-94dc95f6a512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e32ba89-d224-4622-b97e-315b166211aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfeab6d-7377-4cc2-8db4-93ac985e57a9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2167234e-cb9a-4729-8e67-0f40f616a0ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28125e9f-18f1-478d-9f99-f132f64f56df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e151718e-f03f-416a-b81e-9d428ea20f84",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb553f8-7edf-4599-abef-c77dcb1f4059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a50941-7e5a-41ec-bb5b-4279ccf1e494",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867a8063-f727-4191-9d71-d631d9d5323b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3261c3f-d5c2-4321-bb1d-9ad66d7016d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6322b6-d13d-4aeb-85b1-dceb0434ee8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb60a3e-869a-4327-8bdc-3beae3211bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb37c6f-d2bd-4dbf-90af-116602d67f9a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fc1935-4363-4307-9dd2-92a824fc5df7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82aa05ab-09d1-472f-bfea-fe92e9623c90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e995820-7fc0-417c-8259-304ea539ed73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247409db-fda5-4077-9e41-4b4f975b6497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc074da-f558-4346-a31c-5829566a6a9c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8815672-8ac3-4558-a81f-b31dada685bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32ae061b-b1ff-46e9-aced-016e3d1a8a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b068676-a4f2-4cf4-9458-78f80a90355e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359ffe3d-cb55-4aa4-9f42-45e5f1be885d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e39213-41c1-4f95-910a-4d56d26d8d23",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42711a7-bddd-4664-98cc-ec24285a0df3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03346f24-4669-4c9e-b038-4149bb5dea41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "338984be-b696-4fec-aac4-b2a833d10c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "126d31f2-0072-4d87-be12-e4a6167ab479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077bc70b-7e50-4187-96e9-f1d120f45342",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2731dde3-25d5-46a6-af96-2e19646ff070",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "724d288c-2823-4994-8430-6a360aaec2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7266ef45-6faa-4398-84f1-e623abc74823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af79c7c-3066-431f-9ae0-b98277aca25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7ce955-1543-45a6-87d7-83fefe47ccef",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ec113c-a31d-4a1c-a0f9-1c8066f57fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baf1c55f-c912-4201-a307-36474a8b4921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db71e38-cf45-4f18-8755-df5036d9666b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5bba661-9d17-4581-9e13-504154f170c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783f704e-2bba-4bcd-8726-e8f029d252a4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b35ebdf-b7aa-4aae-a2e2-22383db9abdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a04efd8-6315-4067-a48b-052b191adcee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af18a4f-4396-4411-b99e-c7f7e5e0cf4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492c2674-97e2-4fb5-94e7-0f4b068c2e63"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e19a136b-4277-4186-9365-ed874cd29d8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94aef454-ff9f-4db4-9cd9-bd89fb2812f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf8ea36c-32ac-4f8f-a73f-8eb3f4da1831",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88031c48-02ba-43cc-acf7-7849ad19c212"
                    }
                  }
                ]
              },
              {
                "id": "1d8cbc4d-fd30-4502-9140-5b718a80ad91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c1ef1cb-5451-4cd0-95a0-31820d54a498",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51afb275-b24f-47c8-bf26-6b414bbca493",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d2f9f102-8701-4f85-816b-a19139a3f408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd11539-85e8-4745-8980-5b94241b006a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d8f1708-2d77-4c78-b754-0cf6b33d7adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa513cb-f68f-4855-8089-864171e11047",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5373cc11-492c-4569-8e7b-5434ef4c1141",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5a3cefdb-5eaf-4734-be0b-10d1521130dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21899cd-c361-4fa0-a4ec-95633b4ab236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56c6ff2d-3055-4eab-8e9a-4617c2dd561a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "207e889c-9c75-425b-a153-4082a4c26f5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1758904-29e7-4863-8ea2-2a6420469c6d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70f53125-1ec8-4a36-b45d-fc4055d99f69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6891f0f5-bc17-4712-9bcb-145b39a7cf35"
                    }
                  }
                ]
              },
              {
                "id": "43dfc4c1-ddcd-4e42-9147-6f9ef600a61e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "71436f60-3119-4f93-9f5a-ea5ab5d823da",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a92a2a7-5b50-4e5b-aa6e-e4e320129ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9e3e4919-daca-4681-92fd-01339ac0e4db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e6d869-ee03-4edf-b64d-23af79a3ed6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef4fe8f-7840-4d71-bcfa-710ed857e05e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1f8dc1d6-792c-4e86-8016-66cc9f342063",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5f31210f-ffd3-4387-b606-20bf8f405eae",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "524d6954-be25-46d1-b3ae-b0046321db8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cf606124-3940-4ca8-a90e-84fe584d533e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fae5299-6b1d-4966-a966-77e5489de257",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7822cb5-b3f2-4fc3-a488-8696c95e9fd0"
                    }
                  }
                ]
              },
              {
                "id": "6893d017-8555-4011-89f6-7e557a7e6f6c",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eabdaac3-427f-49b0-a4ed-8eef95e0bdef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4e243d7f-16c6-4e4c-b78c-ee6f130f8532"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dad456f9-a835-4080-91d4-917cb293c0a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f44b8c4-461f-4028-897c-98b10c31794a"
                    }
                  }
                ]
              },
              {
                "id": "cd733ee3-6122-47a8-8baa-3ac0717ef9b4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09936b54-ce10-4cd0-9da6-a834ec791729",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ff1d1bd1-cad1-479f-b3dd-aea19c8b3e96"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "981fd587-855d-4b9c-9c6a-58c21eadd886",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcafc797-3a54-41de-8ad4-b00b2455f5fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f2290ed-3295-43b9-9851-50aad5dc64ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f6e929d7-0850-4c43-8e96-819620a09ee2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4daddab1-f126-4823-9b88-7564e3415861",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47f5e8a1-57dd-4298-8e06-09b1ae6fff93"
            }
          }
        ]
      },
      {
        "id": "87a4b369-6a8c-4bde-9648-9273b82deb88",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "352d2d5c-badf-4eb3-a3ea-4fb387cf4e4f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04c653e6-35a3-4b24-b47b-3c9c1909279c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba3f0218-0c17-4a2a-b91d-364fb1f79976",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8b0d17-9f5b-4ad2-a67b-3634d5ce8d00",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4733ea9a-6913-4f6f-99dd-96c93fe495b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10ccc96-4233-40bd-92d9-7f0b76795c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a552b23c-d3d1-4027-9200-42e44e244ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52c5285-5815-46cd-bd07-2c13ea92abfb",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78ab7b0-0487-409f-abd1-ff0239a5d8b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "37cccd4d-7b63-48e4-beef-71ec33bdddd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d7021f-364e-4b74-b6be-16b68625a020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "371a6962-8c40-4e32-b7e3-7d328def6440"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16355e8e-4f35-4769-bab4-8e0b31e2aca9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "076451b8-1fc3-4e12-baf5-d7572ef117a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b4156f6-4222-4105-ab54-121b16c0d556",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a5d855e-f60f-4bdb-8f70-4d42f550131d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24457805-fcb9-433c-8386-ef74c35f3f8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0a121f5b-363c-45c4-9e7e-3842f64424be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8165a660-9681-4041-98f4-67fe4f760675",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a979c7a0-ca93-4649-8592-00417b7c7426"
            }
          }
        ]
      },
      {
        "id": "0ef54dfb-33f3-4e4e-bdd6-a3b1750694a9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "89a687bd-6859-4090-a6b2-72d178695dd3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3cc3a606-854c-4a1a-a22d-b734e80ce6ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34adb308-70ef-4831-9c1f-64dda9787ee0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978beeff-cc36-41d1-b376-7dc4a1293d74",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b0980fbc-504b-42fd-8524-e6b7f1972f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f588ccb-4861-426a-96b9-1fe4b2637f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80eac9ec-dd90-44f7-a509-231652229586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fc60f6-882b-4c53-aa78-7dd746db1ab0",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8d0a8f-b317-4618-b6bf-f467d6c47110",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "91e282bf-7452-4acc-90ad-de025005d21a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7736c7d-234e-4d60-b39f-ad512485cfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c004675-f174-4175-8e3f-34966e1b3758"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "998ba8f6-27dc-4b78-b52f-6af90a58f5ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b29fd7b-977d-4368-95b4-a3838b3619c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f06b1724-7cbd-44ac-a33d-a7576824fd92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbe6b497-96f7-4820-84dd-5584a9defbff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45b57bf2-cdf1-41d1-b21c-41c643a8c04b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e4cadac1-addc-42a8-a9d8-2b0114da2856"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed55b64b-22f0-45d1-af0e-4b2c8c82b091",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a913877-2659-425e-88e6-41cc754630a5"
            }
          }
        ]
      },
      {
        "id": "648262ab-d0d1-4380-b58e-3aa1db126617",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6421d26a-bc65-49d4-bbaa-5f49042ac431",
            "name": "Negative Testing",
            "item": [
              {
                "id": "585d3fec-607e-4e0b-a204-46c38745d8e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c39df172-3888-4e6d-bb40-1facb36d52bc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2ac8b5-2536-4897-9cd4-dc3401aba5a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5f4c5c24-7a37-4c4e-ba68-9b716c01e2fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2e1e95-b6ad-4b7b-808b-0472007bd5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "736fd77c-779f-4946-82d2-e9a43f4dde1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03c4e64-51f9-46a2-9b8f-401a4d7eefa8",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b938f60f-f7df-4150-80d6-f7bee8841390",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8a99e92b-2bda-4128-bb3c-737337722845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37d01ea-91bc-43b1-bd07-842079ba5579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecfa9816-ce79-4ebb-bf4f-84f257709647"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7c8591a-50d7-4867-81ca-d4921d66c688",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2279914a-d587-4bb5-873c-38ea73d4a1fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eba02fb2-4415-4268-b0de-a69ae03292fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b27b6049-7f7b-4309-9b35-9eed3222f84c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b3624ee-ba85-4bf4-a4ff-34a2c0ab4b93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "be55d76d-997d-4291-a23a-6764bc3ca6c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd9eb802-549a-403d-8f15-9e5263b104a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f733fc98-0847-4883-9153-47bd51292432"
            }
          }
        ]
      },
      {
        "id": "09f6d9d0-1695-4a42-a0cc-e3dcad2cf52c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fd6d54c-a92b-4133-a4da-824ba66efa8d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0faddb0c-634f-4038-a2e8-8cd2e17436af",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7acd908e-9907-4c4f-b48e-a875965b0005",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "973d91c5-caf2-408c-93c2-988f598e2c57",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4e45222-1042-47fb-8802-3168a1150bbe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 125.75478927203065,
      "responseMin": 12,
      "responseMax": 798,
      "responseSd": 118.43319902088089,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668645832744,
      "completed": 1668645879792
    },
    "executions": [
      {
        "id": "09ff2337-4dbf-4c08-9364-823a38958189",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a1d290f4-9419-453e-8ebb-23e741b92154",
          "httpRequestId": "6af2f2c4-b74c-4530-9758-0be573f7800e"
        },
        "item": {
          "id": "09ff2337-4dbf-4c08-9364-823a38958189",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "53e7c60c-69a9-4ab9-94f3-59a41d81f545",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "3c4b805e-d501-46bc-9cc2-d746f19a7b1c",
        "cursor": {
          "ref": "cc3129e7-895a-43a3-985a-0a00e3371f1f",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c209fbaf-0e99-43b5-a802-b6ac569d45ac"
        },
        "item": {
          "id": "3c4b805e-d501-46bc-9cc2-d746f19a7b1c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "607b9927-4f0e-45fc-abb6-8391d1ba3786",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "1277331a-58c2-4418-8861-12aac6e4f4c0",
        "cursor": {
          "ref": "503105e1-9169-4897-9e43-87e9f6d4ff7d",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d30f3f93-a2e0-479c-9ada-d3ba0700b768"
        },
        "item": {
          "id": "1277331a-58c2-4418-8861-12aac6e4f4c0",
          "name": "did_json"
        },
        "response": {
          "id": "ab61f315-dd4a-4f50-8386-3b09a41e8c60",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d1af21-c0f3-41da-b969-4dc2b8bc129c",
        "cursor": {
          "ref": "e3bc82f4-3d7b-46f6-8864-e2b5d2331a37",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a76e341c-312d-4b04-83d7-c400919815dc"
        },
        "item": {
          "id": "e9d1af21-c0f3-41da-b969-4dc2b8bc129c",
          "name": "did:invalid"
        },
        "response": {
          "id": "13fc0386-98c5-4e1e-bc62-13d833f2a2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d1af21-c0f3-41da-b969-4dc2b8bc129c",
        "cursor": {
          "ref": "e3bc82f4-3d7b-46f6-8864-e2b5d2331a37",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a76e341c-312d-4b04-83d7-c400919815dc"
        },
        "item": {
          "id": "e9d1af21-c0f3-41da-b969-4dc2b8bc129c",
          "name": "did:invalid"
        },
        "response": {
          "id": "13fc0386-98c5-4e1e-bc62-13d833f2a2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb390e58-c915-4b0f-8554-a718911b927b",
        "cursor": {
          "ref": "19dc007e-15f3-417b-86aa-308a29ff592a",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3599ba8a-af6d-4bf0-b963-977405257eea"
        },
        "item": {
          "id": "fb390e58-c915-4b0f-8554-a718911b927b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1102dffc-a6ae-4dd0-bdae-d36d868c87ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 201,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d479737-5c67-4370-93c8-160b5937f14b",
        "cursor": {
          "ref": "2cc1e76a-3657-48d8-91a8-c1b76b880eaa",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0bb71383-3359-4221-96fe-f29cc9d612d0"
        },
        "item": {
          "id": "8d479737-5c67-4370-93c8-160b5937f14b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1ea3a199-abd3-446a-a9a9-d50190618e06",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b4697d-ae2c-4672-8ecd-49861638739b",
        "cursor": {
          "ref": "c06682cf-089e-4d3c-8c69-7c6731e7b11f",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cd681bc0-7c81-49b8-8efb-ae4663a603a6"
        },
        "item": {
          "id": "78b4697d-ae2c-4672-8ecd-49861638739b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6c857108-1f7f-4087-b9fe-d41307f0f8ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3489a287-ef4a-4349-b242-905565ac4e95",
        "cursor": {
          "ref": "153871df-1f3d-4d12-b736-5c4a41bad011",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9668885f-a771-402b-bd99-cf54070742f4"
        },
        "item": {
          "id": "3489a287-ef4a-4349-b242-905565ac4e95",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8de1e95e-f093-4d07-b67e-4e878e9b5ef2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3489a287-ef4a-4349-b242-905565ac4e95",
        "cursor": {
          "ref": "153871df-1f3d-4d12-b736-5c4a41bad011",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9668885f-a771-402b-bd99-cf54070742f4"
        },
        "item": {
          "id": "3489a287-ef4a-4349-b242-905565ac4e95",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8de1e95e-f093-4d07-b67e-4e878e9b5ef2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630a95b9-1c10-4f9e-a0f7-7ac992ef0a92",
        "cursor": {
          "ref": "4dd8d114-aba7-41df-aa50-a48d4f50a6f2",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "550f3ff8-5100-498f-897e-c6798c89e303"
        },
        "item": {
          "id": "630a95b9-1c10-4f9e-a0f7-7ac992ef0a92",
          "name": "identifiers"
        },
        "response": {
          "id": "76f67239-bb5d-4b2d-b10c-29785c05bd0c",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167060d3-7ed5-4d0a-8554-d8243ecc66b9",
        "cursor": {
          "ref": "eddd359b-9572-4a8e-8db4-e5efdfec9def",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8da93313-5e6c-4b61-b429-ba22b0fec801"
        },
        "item": {
          "id": "167060d3-7ed5-4d0a-8554-d8243ecc66b9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "521e4524-8bd7-49ef-9fe5-445e961696cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167060d3-7ed5-4d0a-8554-d8243ecc66b9",
        "cursor": {
          "ref": "eddd359b-9572-4a8e-8db4-e5efdfec9def",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8da93313-5e6c-4b61-b429-ba22b0fec801"
        },
        "item": {
          "id": "167060d3-7ed5-4d0a-8554-d8243ecc66b9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "521e4524-8bd7-49ef-9fe5-445e961696cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952fc3d0-9092-4434-9e38-5aa51f92a72b",
        "cursor": {
          "ref": "d0590020-76b9-40d9-9958-b9dd06c4e549",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cd959526-8a87-401a-ad4b-4ecd5b24b767"
        },
        "item": {
          "id": "952fc3d0-9092-4434-9e38-5aa51f92a72b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e8177e27-20b9-453b-beeb-09d91d9f9318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbcf1097-22ef-4f8f-97a0-de480f7e0c52",
        "cursor": {
          "ref": "ae303674-265d-4763-97cd-59401c6aed50",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d27c78ab-a380-401b-8990-a0bbe8cf69de"
        },
        "item": {
          "id": "fbcf1097-22ef-4f8f-97a0-de480f7e0c52",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e830232d-df0c-4eff-9fe3-1d7376d27b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d34500a-910b-4184-b0c1-4c2238bc8394",
        "cursor": {
          "ref": "677f2ac3-5460-4a8c-b2dd-864eb27726e1",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "92ad24f5-648a-46f5-aa96-1d425fa4b769"
        },
        "item": {
          "id": "8d34500a-910b-4184-b0c1-4c2238bc8394",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6d978015-fdab-4617-9860-84f59695e731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc52ba3-fac2-441a-ae72-8d2ef675ef51",
        "cursor": {
          "ref": "7ed360f0-2d76-4455-9ae2-eb3d42fcaefc",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ad0f0a6e-3f07-4676-bce0-4d1e35847a44"
        },
        "item": {
          "id": "9bc52ba3-fac2-441a-ae72-8d2ef675ef51",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1027022a-fb91-4738-afe1-361423eb4a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6011ea-d371-4ed6-ac99-03740e016b46",
        "cursor": {
          "ref": "e2adf532-9812-4b2b-af2c-bd26bbe235b1",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "022f4a6a-946a-4fdf-afbe-e7787b497166"
        },
        "item": {
          "id": "af6011ea-d371-4ed6-ac99-03740e016b46",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "885accbf-574b-438c-9372-4c7634d3615d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60f0f79-cbaa-4d00-858c-77704d883431",
        "cursor": {
          "ref": "181ed80f-b6a8-4c80-a4d7-71c6f0a9bab9",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f62104e8-9bdb-48c7-84cc-cefeece1a08b"
        },
        "item": {
          "id": "e60f0f79-cbaa-4d00-858c-77704d883431",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3cfabc2e-fc4b-44c1-9d95-646d15e9a817",
          "status": "Created",
          "code": 201,
          "responseTime": 523,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a349580d-84fb-4fb2-899b-88119e82ff13",
        "cursor": {
          "ref": "bea708ab-b213-4015-a860-268a13bb183d",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "da88d689-33a7-4d79-8de5-4301539cd792"
        },
        "item": {
          "id": "a349580d-84fb-4fb2-899b-88119e82ff13",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "37e69d89-26de-438c-a365-509c089a1b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06655eb1-0ba4-49eb-91b1-8f0857e40e81",
        "cursor": {
          "ref": "8d3177ad-0bad-4106-b8d9-4e1b4e5f2c96",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c6de037a-de38-411d-9d8a-94f6dd9f9c44"
        },
        "item": {
          "id": "06655eb1-0ba4-49eb-91b1-8f0857e40e81",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c3fa515f-5010-4416-a454-d0fd6e80fd5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3255ddf-e53d-48ed-9b4e-a8aecc99b3b5",
        "cursor": {
          "ref": "7e1d8224-2012-42b1-821b-a3058463ff4d",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b4aaf4a2-d2ce-40d0-9773-ff5d0b054e7d"
        },
        "item": {
          "id": "d3255ddf-e53d-48ed-9b4e-a8aecc99b3b5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7614f92d-1975-4746-8a6e-6049634ac0a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6c0a93-f603-4462-99ec-21da063086ea",
        "cursor": {
          "ref": "b60ceac8-e7d2-4076-9b58-064adc108139",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e47a3b7f-613b-4473-b2b2-060fd96a4ed0"
        },
        "item": {
          "id": "af6c0a93-f603-4462-99ec-21da063086ea",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4220649c-c66a-4ed8-8492-c78897b52643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c8df90-1876-496a-84a7-7c1c5d92e46d",
        "cursor": {
          "ref": "2bcd23e0-97da-4193-9203-c773eba6dfc1",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "233cbc89-d9c7-46da-aa39-d5f8ad9f1f27"
        },
        "item": {
          "id": "72c8df90-1876-496a-84a7-7c1c5d92e46d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "79a01c35-398c-4bd4-979f-f8ba87ec9dda",
          "status": "Created",
          "code": 201,
          "responseTime": 398,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "16175022-3746-470b-8fad-14942cf1f579",
        "cursor": {
          "ref": "6940959a-7acc-4b3e-b104-8a4f260971b6",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ee4654de-bc25-49ed-9f9e-af1f8bc467d5"
        },
        "item": {
          "id": "16175022-3746-470b-8fad-14942cf1f579",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "eb412658-9c84-4789-9a38-af73112fd75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5f5b9b-8a84-4f39-817e-e708c95431b2",
        "cursor": {
          "ref": "7fcdbd76-77f4-4f2b-bcf3-1686b0dc7215",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a69d167a-d7c5-4fb6-a50a-d2baecc3c874"
        },
        "item": {
          "id": "ce5f5b9b-8a84-4f39-817e-e708c95431b2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3a60237e-dc1c-4b8d-b023-6ae23ed22d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad01ad5a-745a-4057-8d66-aa696163f296",
        "cursor": {
          "ref": "2aeb2237-f3df-4bf5-ba1b-bc85ff30dc29",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4daaf1a0-164f-4ae2-94f8-229efd62d131"
        },
        "item": {
          "id": "ad01ad5a-745a-4057-8d66-aa696163f296",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7f9be10c-717e-4874-92eb-6c2b5304dd58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1bb634-c7c6-491f-91d5-584a94c8814e",
        "cursor": {
          "ref": "91b0cd87-d672-48c4-971e-e724380da393",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8c1d9847-3ee0-4384-888b-d354ab950c34"
        },
        "item": {
          "id": "7a1bb634-c7c6-491f-91d5-584a94c8814e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "57aa94a3-4318-4c16-a39e-d5147043a634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df8ce3a-d0fb-4307-a689-8afa9860b418",
        "cursor": {
          "ref": "20e67d13-36bd-4bd8-81df-2a021c5debf6",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "72d3981a-feb1-4449-951b-67b964dfe20d"
        },
        "item": {
          "id": "0df8ce3a-d0fb-4307-a689-8afa9860b418",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2177705e-00af-4001-b9be-65a656b1f13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3149eb7c-539d-4a9c-9759-9fbf64ea666e",
        "cursor": {
          "ref": "7c4caefd-95d4-4070-8ab6-82cd665bc77f",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6839cf5f-d851-41f9-83bc-06f02f2e903b"
        },
        "item": {
          "id": "3149eb7c-539d-4a9c-9759-9fbf64ea666e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4fad41d5-b2e2-4a55-a491-90176e05f311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b76e6a-6ad9-4cdc-ba2a-dc9890bf2194",
        "cursor": {
          "ref": "c348a4ad-733c-4086-8104-9ab70c551034",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3fece40d-787f-4c7f-8056-2836b47dc289"
        },
        "item": {
          "id": "e5b76e6a-6ad9-4cdc-ba2a-dc9890bf2194",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c7622a54-5c31-4b82-9e36-6d963f0afd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2bce14b-5f24-44d8-8a80-b109f7af2799",
        "cursor": {
          "ref": "7e144662-40c3-4663-99bb-2e1cb86bf9eb",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "08ea79c0-c789-4442-9275-5958b57026ec"
        },
        "item": {
          "id": "b2bce14b-5f24-44d8-8a80-b109f7af2799",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bcd95a56-4f69-4b4e-a221-42eb30213994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffa73c7-3083-4876-b679-a6792ebb186e",
        "cursor": {
          "ref": "4dd31742-a9e5-43ec-90d8-c2a9b39140ff",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "463dac47-4278-48b8-a60f-f609f2fe7413"
        },
        "item": {
          "id": "8ffa73c7-3083-4876-b679-a6792ebb186e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e9f63cf5-4f4b-44d2-a589-cd0ab06127fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8853d41f-8261-45c2-a9a3-89a49afe2965",
        "cursor": {
          "ref": "896bf239-b670-4f95-bc87-3b3d016596a6",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "215d3ea5-46b9-45ec-afaa-fccd1c7929e2"
        },
        "item": {
          "id": "8853d41f-8261-45c2-a9a3-89a49afe2965",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e625bf8d-9373-4364-8216-29ef6640e7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988bfe70-a421-4777-8a06-c156c21d7b8e",
        "cursor": {
          "ref": "b5f2dd51-365a-4c0b-8b82-f5dda8ed59c9",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "057237ac-4633-456e-9f89-37bd260acef9"
        },
        "item": {
          "id": "988bfe70-a421-4777-8a06-c156c21d7b8e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4cfc7428-9e2f-44f6-a771-8498071906cc",
          "status": "Created",
          "code": 201,
          "responseTime": 596,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "e405cacd-0324-4063-9b53-d4924f7675b6",
        "cursor": {
          "ref": "f6d20672-362f-40cc-b685-87d388a6d414",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "05991fcc-37e7-4232-a5b4-6967a56c3f0f"
        },
        "item": {
          "id": "e405cacd-0324-4063-9b53-d4924f7675b6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "284153ed-c75f-4cae-9f34-74e000e70f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ff91d7-afad-499f-826e-719130fa33bb",
        "cursor": {
          "ref": "e7f7f866-dff6-4c95-8632-54432efa61af",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "24b8f7d8-557b-4d3f-a15e-a61ec827534d"
        },
        "item": {
          "id": "e3ff91d7-afad-499f-826e-719130fa33bb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f667caec-f389-4b9e-bdd7-c3ed3e3d9482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b5b9d2-ecac-4dd2-adc7-86b3e5546657",
        "cursor": {
          "ref": "57cf9676-fb20-4e41-aca6-6f99eb133ab6",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "19e8c9ce-8f3a-46d4-a356-21b95d49add4"
        },
        "item": {
          "id": "88b5b9d2-ecac-4dd2-adc7-86b3e5546657",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "81f9c7ca-0b1b-4d6f-9477-6de5f70dd133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455954c1-9fe1-468c-a59b-dd60cbb84094",
        "cursor": {
          "ref": "90481a65-6ea5-4665-a2ab-3ad5590d5c11",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6c0829d0-2204-4f8c-bd7a-4de6b93e289e"
        },
        "item": {
          "id": "455954c1-9fe1-468c-a59b-dd60cbb84094",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3718508e-e328-4b33-bc5a-003c0b2ffd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5a1cc8-640f-4c40-a211-e1aabd32a737",
        "cursor": {
          "ref": "ed9aa1b6-ef1f-4ab1-ba4b-f4430e7db09e",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4a8aa655-f074-4c18-b4df-d88d127d6d70"
        },
        "item": {
          "id": "af5a1cc8-640f-4c40-a211-e1aabd32a737",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "675adf85-98c4-4547-b34c-1d5a960b8336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43579cf1-3bf8-4223-97df-16d36a763ad8",
        "cursor": {
          "ref": "4b07ab4b-f277-4aa5-9744-091b649e2fb1",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2a754044-0faa-4190-addb-1cf0774c1f86"
        },
        "item": {
          "id": "43579cf1-3bf8-4223-97df-16d36a763ad8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "345a742c-24d4-4374-9753-690b05537629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43d38a0-7d49-4742-929e-fae967dbb904",
        "cursor": {
          "ref": "cade0761-cf85-4d63-9667-9e2e4a520774",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "beb7777e-e4be-4249-9f9c-ee70a70fa289"
        },
        "item": {
          "id": "f43d38a0-7d49-4742-929e-fae967dbb904",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7035f5d7-e4fb-435f-9a2b-e4ba9fb75c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc62470-e55d-4cbd-a448-1363c9d6b4ab",
        "cursor": {
          "ref": "cee88d0a-16c3-43fb-a406-29f0669fe4af",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c7f5e6f8-58ff-4220-a2fc-0302348279ef"
        },
        "item": {
          "id": "cfc62470-e55d-4cbd-a448-1363c9d6b4ab",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c6d35572-b18e-4c34-83d0-b4c1a06b0428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b71eb7-5ff7-48a0-adc1-6c8ba97224de",
        "cursor": {
          "ref": "a905af68-9759-476f-b3d1-f5926d144fa6",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "47b96b52-e973-4968-96e1-b6c59e330472"
        },
        "item": {
          "id": "c4b71eb7-5ff7-48a0-adc1-6c8ba97224de",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ef81492e-4bc4-44cc-8e94-64043775f396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88226b29-1375-4857-a471-9437e5d0dde1",
        "cursor": {
          "ref": "369a933d-c89e-4868-ac6a-558669c7a38f",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ac5e7ac-badf-4f38-b025-05dab174daec"
        },
        "item": {
          "id": "88226b29-1375-4857-a471-9437e5d0dde1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a739aca3-e53d-44d8-ab1d-de8961645894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c198abd8-1642-4f07-8231-6cdd1ea741ad",
        "cursor": {
          "ref": "3bd72f6d-bf54-4bea-ba61-53700dcdd928",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "254259a1-6f0e-4b9e-bbd1-9bd17e3fc7af"
        },
        "item": {
          "id": "c198abd8-1642-4f07-8231-6cdd1ea741ad",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f171c6ce-c93a-43b0-9458-fb95c55c80f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74ecc18-7558-4b39-81ad-402e145ee9b4",
        "cursor": {
          "ref": "5d01da65-b9ca-4b39-9aaa-5120ac8089c5",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6371738f-0796-49f1-856e-03de7b15e70a"
        },
        "item": {
          "id": "f74ecc18-7558-4b39-81ad-402e145ee9b4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bc4800fa-5f2d-4d2a-bbfc-09a2ff8177ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e96d475-de81-44b4-ab6b-18de19ca9abf",
        "cursor": {
          "ref": "9b579c78-0bbf-4a0d-b461-86283573fb0b",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bb0a5900-f61d-413a-b634-5c1e92288dcc"
        },
        "item": {
          "id": "3e96d475-de81-44b4-ab6b-18de19ca9abf",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b796992a-9c66-4cd3-b47e-5619fb211ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1b58a312-d450-4254-a096-05ef1c6820bb",
        "cursor": {
          "ref": "b422ccdf-6da1-407b-9c09-6da8dfe20095",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1ddd150f-fd8f-43e9-84ba-5f7a6cdf3a4d"
        },
        "item": {
          "id": "1b58a312-d450-4254-a096-05ef1c6820bb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "57063e47-1ae1-4a2d-8b63-016602ee48ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6875f711-866f-4614-9dc4-925bcf235f20",
        "cursor": {
          "ref": "8c2bc351-b626-468e-b058-00a72eaeec24",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f04828ef-b270-45d0-89de-5999bbb661e8"
        },
        "item": {
          "id": "6875f711-866f-4614-9dc4-925bcf235f20",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fdf49f29-b6e4-4a8c-859e-c99d72054f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ef4ff7-de91-4344-bc42-9d3b2d077f24",
        "cursor": {
          "ref": "2543abb3-b5d6-47f7-ab09-a075f844f1b9",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e107a970-d4fb-4e52-8c1f-d218871fcc16"
        },
        "item": {
          "id": "47ef4ff7-de91-4344-bc42-9d3b2d077f24",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6dc99203-4397-4824-a6de-6810d54035d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83189db3-6c9b-4747-9cf6-8107ba5b74b5",
        "cursor": {
          "ref": "0ac4ed42-cea1-4dfe-a245-365295486239",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e9a431fc-4119-45a8-b1d3-f310a0c69ecd"
        },
        "item": {
          "id": "83189db3-6c9b-4747-9cf6-8107ba5b74b5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f447a57b-1dcc-4c5e-911c-ebbd89459206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc180f16-d72b-43b9-95c4-a8f42c8d0109",
        "cursor": {
          "ref": "a85ca07e-c45b-42b1-a2c3-ac625e3fab0b",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b9a5a92d-6673-4feb-9458-7832add8dc3f"
        },
        "item": {
          "id": "cc180f16-d72b-43b9-95c4-a8f42c8d0109",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "78043be5-c970-45dc-9d29-493e8c1cfb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a4ab3d-073b-422c-a553-1f418f8f3299",
        "cursor": {
          "ref": "b98cc9e2-c136-4d70-9147-544192e7a9fe",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "01d41045-2a38-42fc-9a10-9eb5f97fa080"
        },
        "item": {
          "id": "04a4ab3d-073b-422c-a553-1f418f8f3299",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a957ed6e-2b19-4b05-a015-d2f46e70e84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97af6f50-26a6-4582-8ee4-4a7c2d5fee1a",
        "cursor": {
          "ref": "4fdacc10-2330-4601-8a69-714f9dccd4ca",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "95cc4221-2367-4fdd-a9f2-68136286143c"
        },
        "item": {
          "id": "97af6f50-26a6-4582-8ee4-4a7c2d5fee1a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dcc299c5-b2e6-4aa9-86be-e3b8f3c226d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "21d74a16-9cf9-4fb6-b7e7-f456eae331c1",
        "cursor": {
          "ref": "80bce1da-9cf1-4059-9031-728e24b8a649",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "27ff82e3-1a45-45aa-89a7-0ed940023a03"
        },
        "item": {
          "id": "21d74a16-9cf9-4fb6-b7e7-f456eae331c1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e578c02e-e844-40a2-9461-6432286b4b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78017ba1-41ca-4b0c-a423-a027c16ddda9",
        "cursor": {
          "ref": "8dacc1fd-318a-43de-95b9-9e28b64bab10",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9dc96e30-d767-4cd8-85f8-6e2d141052d4"
        },
        "item": {
          "id": "78017ba1-41ca-4b0c-a423-a027c16ddda9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "192ab217-7a6a-4bb9-8cbc-ad4f889f7c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2255b399-0879-4155-9a7a-5c20a39e7452",
        "cursor": {
          "ref": "3bfbba3b-719c-498b-8059-6cb2732ee91a",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4f8afabb-d295-42cb-8a9c-8b84712a7fb8"
        },
        "item": {
          "id": "2255b399-0879-4155-9a7a-5c20a39e7452",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9d71d95c-b5e5-4463-ba28-44d168d6d32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38af82e0-407d-4171-a13d-c453a4d7a82b",
        "cursor": {
          "ref": "ed5b4203-15d2-4592-bd9d-fbfcc099e9a5",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d73efec5-c93a-4a42-9536-f99dbf03bdd0"
        },
        "item": {
          "id": "38af82e0-407d-4171-a13d-c453a4d7a82b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bd5531a6-5feb-4e98-9206-29531cf6e1e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b80457b-752d-4567-8329-4056ad3ad948",
        "cursor": {
          "ref": "38fd9894-55bc-4bc7-a179-124580e6a86e",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "92dc476b-f2d0-4a76-8c4f-9a9abff433f8"
        },
        "item": {
          "id": "3b80457b-752d-4567-8329-4056ad3ad948",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b536be4a-3b7b-48f3-8399-528993899a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e301151-3cd0-4d0e-afd6-ad40038bf536",
        "cursor": {
          "ref": "dc3a0b8f-68f6-4db8-b398-1c4f35cb3e74",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "001805d1-0826-4e63-aa02-2c7b57cbbebb"
        },
        "item": {
          "id": "7e301151-3cd0-4d0e-afd6-ad40038bf536",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "933aea77-e19c-4888-bd49-584743581f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c384ec2b-cd4c-46b5-bcda-632a8497f384",
        "cursor": {
          "ref": "b12911ff-4034-4ac8-8171-ee3ce38211ff",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "13b01a3f-c8b5-427f-a9e0-3871f164ab48"
        },
        "item": {
          "id": "c384ec2b-cd4c-46b5-bcda-632a8497f384",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d0468f6a-daa9-4838-b907-b60176abaae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6daf0002-39d4-461f-b737-1f10c70480a6",
        "cursor": {
          "ref": "74aa6a87-1064-4775-9873-49174b94a002",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2d2bd2c8-912a-4395-86b6-e407ad4fd1bf"
        },
        "item": {
          "id": "6daf0002-39d4-461f-b737-1f10c70480a6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b4272032-a20f-48cf-83fa-a7fe614eda89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852f6d33-3fe7-4eb9-b362-af6f90883254",
        "cursor": {
          "ref": "38d73375-a842-433c-a29a-025a7ae0f28e",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3280eed6-2cfa-44eb-bd2d-7472a7c4df4b"
        },
        "item": {
          "id": "852f6d33-3fe7-4eb9-b362-af6f90883254",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "301a04f3-12f7-4546-84d2-8262250581b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb5fed2-f53f-45c3-ba0e-39ff4c8b02e2",
        "cursor": {
          "ref": "b197d55c-ffab-4812-a9d3-309eac3fc32c",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7aa6a1bd-509a-491a-8828-30f1fb95599f"
        },
        "item": {
          "id": "eeb5fed2-f53f-45c3-ba0e-39ff4c8b02e2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fa0fd1b7-fb80-4de2-aa13-c00b75fc4feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c070f1-83bf-415d-bfcb-4d52b3aff57e",
        "cursor": {
          "ref": "52cb84a7-2b0e-4d03-b274-259b5a6c9ff1",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "76b2323d-2314-4158-8db3-9d06fc57e20f"
        },
        "item": {
          "id": "36c070f1-83bf-415d-bfcb-4d52b3aff57e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "738072ea-714a-4266-856f-fb344fde96a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4efc95-da61-4f38-9c61-096975e7df6c",
        "cursor": {
          "ref": "1a213bdf-03dd-4a9b-b267-918153ffe7ec",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b5ff5a43-f986-42ec-9972-0a2cce47fc0c"
        },
        "item": {
          "id": "7e4efc95-da61-4f38-9c61-096975e7df6c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7fada754-20a7-48e3-8a5b-ada6e2c9f373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c20528-5823-4dcb-8360-97a07a2bf71a",
        "cursor": {
          "ref": "cb12b8a4-318c-41b2-aff5-ab25cf43620e",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "507b8f9b-e873-450c-ad98-cc98629ef358"
        },
        "item": {
          "id": "29c20528-5823-4dcb-8360-97a07a2bf71a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "054232be-a0e5-4625-8394-ff5a423f9404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cccc2fd-1bdc-4c0c-9519-166b02dcea9f",
        "cursor": {
          "ref": "f18655d9-94b2-4296-a7f1-f762c8723c28",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8749cd34-c09e-43fc-a489-8c4fca73b943"
        },
        "item": {
          "id": "7cccc2fd-1bdc-4c0c-9519-166b02dcea9f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6e890234-b92d-438f-9f07-cdb1f59eaae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc828d2-15b1-41bb-9057-767f389d9ed5",
        "cursor": {
          "ref": "b01e5783-3c4d-47af-b3e6-6971eb15583e",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "eaf70b92-a05d-45a3-8b76-e5dc660a6226"
        },
        "item": {
          "id": "4cc828d2-15b1-41bb-9057-767f389d9ed5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b542b1d4-613c-4e0e-b8c0-7cdf3f008d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3882affc-3b39-430f-8fa1-7f8e1d3b14e5",
        "cursor": {
          "ref": "ce4c71d7-9ce9-4bfe-badf-781614a09cbc",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2c55247c-0b1a-4b3c-b60c-6c65dcb94169"
        },
        "item": {
          "id": "3882affc-3b39-430f-8fa1-7f8e1d3b14e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cb7a11c1-d6ce-45ca-aa27-94318806c88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee345d1-9f51-4ca7-b993-bf31585a0479",
        "cursor": {
          "ref": "6cfe0dc4-9d8c-441c-a157-cda71f7e2241",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "34c3d040-117b-4d8e-aa7a-c53880ec38b8"
        },
        "item": {
          "id": "6ee345d1-9f51-4ca7-b993-bf31585a0479",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b991159c-d767-49a5-b1e1-5226775a68cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4886ae-68d7-49a8-b82f-f6c05da42709",
        "cursor": {
          "ref": "03193580-a966-48c5-8d16-44c2eea1c88c",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d4e8ffbc-cd72-4668-aa51-0cad2db6be18"
        },
        "item": {
          "id": "6b4886ae-68d7-49a8-b82f-f6c05da42709",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3ea948e9-2895-4ebf-baff-2751ffa4ad9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b511971-3f4d-42ef-a54b-49e22a8096b2",
        "cursor": {
          "ref": "ed789186-3a5c-4083-9763-e9467f84d471",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f5b4301c-876a-4b5a-aff2-75e5f9001cc5"
        },
        "item": {
          "id": "3b511971-3f4d-42ef-a54b-49e22a8096b2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1a0542bb-2267-43ac-9db4-9a1b7a5068fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7888f31d-5290-4b87-8d54-4f14da1cd4d9",
        "cursor": {
          "ref": "56cce4df-ca52-48aa-a2b8-bcf0e1c12fd0",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7b4bdd68-19ff-4afe-8ce6-ffaad3751133"
        },
        "item": {
          "id": "7888f31d-5290-4b87-8d54-4f14da1cd4d9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ce1b7036-e91c-4c5f-b11f-ef35b0047c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d8da26-2829-49cf-b22c-046c9d9caebc",
        "cursor": {
          "ref": "132f2002-1ddb-4563-b079-e010d6ded634",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e69d14f2-ca30-495e-8862-1ca58e3593b9"
        },
        "item": {
          "id": "96d8da26-2829-49cf-b22c-046c9d9caebc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "787af8bf-68ef-4f82-91bf-eb83cca63e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a341566d-2871-4b7d-a896-fb19057f7ef9",
        "cursor": {
          "ref": "3064bddd-8de2-411d-85bf-01e06dbda868",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6f97753a-7882-44c0-b5e8-2304d150383e"
        },
        "item": {
          "id": "a341566d-2871-4b7d-a896-fb19057f7ef9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a9225b33-8a45-4ef9-938d-8ce0e782c3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3393a676-ca25-4179-a206-967f9de304bd",
        "cursor": {
          "ref": "0e75e0d7-3679-4dcf-9d1c-6658c3be8163",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a904b5a4-8929-4c75-929c-c108e2de8c3c"
        },
        "item": {
          "id": "3393a676-ca25-4179-a206-967f9de304bd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e0c6f772-bd22-4aac-bd31-cf75f670e674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e02a45-519b-4233-801b-fbfedc699915",
        "cursor": {
          "ref": "a8b127ef-f7d9-458e-af54-d964c9affe02",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ef801ffa-cc25-4320-b0e0-000887f5f89f"
        },
        "item": {
          "id": "f2e02a45-519b-4233-801b-fbfedc699915",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "111ae652-27a5-4db3-a1af-853e1ff658bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f679911-832f-4fa2-8340-372a6294a22d",
        "cursor": {
          "ref": "93e6df2a-1e46-42af-bca3-81ec65bb619b",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8388fff2-db47-4354-9ac6-b1e4ea494824"
        },
        "item": {
          "id": "3f679911-832f-4fa2-8340-372a6294a22d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a14765bb-0727-4da9-bfdc-177e3b5894f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a375058b-08c9-4996-b3f1-41848e95c626",
        "cursor": {
          "ref": "b272fb58-f58a-488a-b380-07b7e6cf558c",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bc1fc6a6-c12d-4f6a-ab18-1d5bbc6d4816"
        },
        "item": {
          "id": "a375058b-08c9-4996-b3f1-41848e95c626",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "54451220-a893-4814-8617-9ff5e5160d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3800e6-0132-4c20-aca7-a9c92ba140f2",
        "cursor": {
          "ref": "80baf260-8c3b-4411-8c2a-a145e8e13602",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0d19c4bb-7119-42f9-b0f2-912a26ee8926"
        },
        "item": {
          "id": "8e3800e6-0132-4c20-aca7-a9c92ba140f2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a7ce2dbb-3a12-40ef-8660-691d2737e402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feec0a60-3f9b-403e-958a-252aa60788fa",
        "cursor": {
          "ref": "c7c84c15-9d8b-4618-82db-184366447615",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "73e38be0-ae63-4040-9a28-eac021a10cb3"
        },
        "item": {
          "id": "feec0a60-3f9b-403e-958a-252aa60788fa",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "443550a2-f3d9-4c82-b155-a8ce309f4d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c503b324-59d4-480a-ad65-beea62964bf6",
        "cursor": {
          "ref": "3d4329b8-aa6e-4514-8a44-378cbbe54b75",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "17fb93ba-ba55-49e6-a450-edb76dcd1a56"
        },
        "item": {
          "id": "c503b324-59d4-480a-ad65-beea62964bf6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "753153bd-ef84-4a86-8572-454985c9e86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85a2f6e-ee0f-49a0-bd5b-9806b79eb70b",
        "cursor": {
          "ref": "030046fc-16e0-4827-bb16-4d08065deb8d",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9fc91a11-56f2-45a4-a7c1-546be2966229"
        },
        "item": {
          "id": "c85a2f6e-ee0f-49a0-bd5b-9806b79eb70b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7122791a-7444-4309-992c-95d8e57eb342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e9cd41-943a-4071-9759-dce58d15cf0a",
        "cursor": {
          "ref": "37179957-853f-4b34-b9ad-6028bdbb86d6",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "055aff83-ca73-4d80-9a04-ed3dfc71dbd3"
        },
        "item": {
          "id": "d1e9cd41-943a-4071-9759-dce58d15cf0a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bdb3e729-f239-48b5-ab8f-7e84fa0c4f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909d91ff-99d0-4fff-828e-8a870fb0c935",
        "cursor": {
          "ref": "7ae3152b-de9e-4b2e-9253-ecbdbf9fb17b",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f2fa4e91-6e7f-4ecc-863a-63f5f5fd2ba9"
        },
        "item": {
          "id": "909d91ff-99d0-4fff-828e-8a870fb0c935",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "93ee79f2-c4ad-40b0-87a9-7915014987b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5820d400-ab07-4e17-9dc4-1f17504a57d4",
        "cursor": {
          "ref": "6578ebfe-132a-4caa-beab-25d4bca891e4",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fab27982-42df-4781-af50-4fc01750674f"
        },
        "item": {
          "id": "5820d400-ab07-4e17-9dc4-1f17504a57d4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b28872ee-c837-432d-92db-17fbec361c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe7043b-6224-4cb5-a831-d42c1f586c93",
        "cursor": {
          "ref": "44f48115-9084-4752-a9ed-a95e404e86f8",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1c269175-0873-464e-898e-e9ad90a3c026"
        },
        "item": {
          "id": "8fe7043b-6224-4cb5-a831-d42c1f586c93",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0320c7ce-e4f4-4b5a-bf2e-70e790978bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c038e382-703b-4f31-a602-a996927d9778",
        "cursor": {
          "ref": "525c0e2d-5896-4854-bf96-eac8f2287235",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e2aa2911-ee5d-4e28-a401-a25bd78dfa8f"
        },
        "item": {
          "id": "c038e382-703b-4f31-a602-a996927d9778",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b761205a-04c1-4e66-930b-7e8a5f999195",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "560f7e1e-c060-4783-ad73-3694b432545d",
        "cursor": {
          "ref": "97bd3a09-be35-43be-bfe1-f9c408efcd20",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "75838da4-57ce-4499-b59e-e10f18232cf6"
        },
        "item": {
          "id": "560f7e1e-c060-4783-ad73-3694b432545d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ecdf9f2b-b0d7-4a2f-a587-a3a9031ba19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69357402-05bb-4ed9-8032-478fc587f3f0",
        "cursor": {
          "ref": "5dfec330-b005-4436-b9d4-fcf68b18915c",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "529d9f1e-4766-4289-b7d1-bbffb07003a3"
        },
        "item": {
          "id": "69357402-05bb-4ed9-8032-478fc587f3f0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2005be7b-8eaf-44e3-9fd6-1ceec1ff24c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad2f7eb-9a25-4b11-8133-37534df8e007",
        "cursor": {
          "ref": "e5bd8939-37ad-4b03-bff8-5af01c01be92",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1cdbe211-8206-4398-9efa-6644bce82ee8"
        },
        "item": {
          "id": "bad2f7eb-9a25-4b11-8133-37534df8e007",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dfc2915d-2feb-4699-b900-523d92559e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3315f7-a4e2-4c1f-aa7c-fa18b04c4e46",
        "cursor": {
          "ref": "d7c0e984-1c5c-4b93-9667-642d1567469b",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9c5e65d1-b346-425d-ac82-56f5bc5e83e7"
        },
        "item": {
          "id": "ea3315f7-a4e2-4c1f-aa7c-fa18b04c4e46",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9fe72f99-50bb-4548-b21f-d6c5695f1e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15065997-6a72-4e32-9a59-89104505b230",
        "cursor": {
          "ref": "4c6d2c9a-88bf-48f6-ba5d-165a1dda069d",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7688a813-4f30-4248-bbd3-0cbb83064c6f"
        },
        "item": {
          "id": "15065997-6a72-4e32-9a59-89104505b230",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b5940872-fd89-4b48-8123-d3c89f153b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b209aae9-bc6f-4e6e-b890-8700f2b6ec33",
        "cursor": {
          "ref": "84c1b68f-b76a-4e85-9442-4f0ea63a8d0e",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7b974625-6ba2-4cdf-9ec7-03f8e2833e06"
        },
        "item": {
          "id": "b209aae9-bc6f-4e6e-b890-8700f2b6ec33",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "990f01f6-677d-4d24-8fb0-d6063044a326",
          "status": "Created",
          "code": 201,
          "responseTime": 434,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "1725d762-0b74-4d2f-a114-b3550f32bee6",
        "cursor": {
          "ref": "c8925fe1-dd91-4c33-94f3-3c5c2067a7b5",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8c08a785-f087-43d5-b0a7-6cb190f21546"
        },
        "item": {
          "id": "1725d762-0b74-4d2f-a114-b3550f32bee6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3d867844-c942-40a4-8860-f869899135a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b62abe4-0f6b-43b6-aac2-c51561938df4",
        "cursor": {
          "ref": "3a6e53b6-c34c-4530-b80e-8b05d06db4e5",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b4d442ff-2d6d-4ca9-8920-a92bcaa877fb"
        },
        "item": {
          "id": "0b62abe4-0f6b-43b6-aac2-c51561938df4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c629dbf4-4353-4031-93b9-8d6876a1aa40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce29820-fd24-4def-a56c-16136b6595d7",
        "cursor": {
          "ref": "961daf10-c45c-4049-9fce-412e277d6b1c",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5bae22ab-7473-434a-815f-9815a97b54b6"
        },
        "item": {
          "id": "cce29820-fd24-4def-a56c-16136b6595d7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0c261727-f16c-46a6-a03e-749d1d7b60ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd79c9a9-a275-4252-b3a1-11d28b49ce11",
        "cursor": {
          "ref": "b359a45d-6028-49c5-b596-86e6ebf8ae0f",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ba768907-d7b1-401f-b637-4834f722986a"
        },
        "item": {
          "id": "cd79c9a9-a275-4252-b3a1-11d28b49ce11",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a638aa61-374e-43cc-92af-04e61a1e6b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5724ce-d67b-4407-990f-9286edcc6742",
        "cursor": {
          "ref": "75e64268-1347-48fb-93ad-6dbcf1c25ae4",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c4cfb46c-445e-4ebe-b80f-30b625e48cef"
        },
        "item": {
          "id": "3d5724ce-d67b-4407-990f-9286edcc6742",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a0e75877-a80b-4044-ae88-355349a13fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a9d5e0-a90a-4666-b0d6-ca47dfd01603",
        "cursor": {
          "ref": "46b77a4e-91f6-47e9-bbea-16c03ed2bc87",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ef991783-c1a3-4f3d-b865-3de521c137f9"
        },
        "item": {
          "id": "62a9d5e0-a90a-4666-b0d6-ca47dfd01603",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d1a3f8f2-e01a-4822-a5bc-e89d476dd3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706e119b-1474-499b-9dbe-f3ba07f594f8",
        "cursor": {
          "ref": "de804028-febc-4701-a4b2-ae538e3d819a",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a1e910f6-11ea-44dd-9961-655325bc1354"
        },
        "item": {
          "id": "706e119b-1474-499b-9dbe-f3ba07f594f8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "39cbc6ed-e648-46bb-a79d-9e1b3a67ca49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190d0b8e-b016-47da-8c9b-c575c09f5b5c",
        "cursor": {
          "ref": "4f8c3502-72f9-4d6e-a646-670c1385b629",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "326cc140-21b8-468a-9f44-9cf5bcf90bd8"
        },
        "item": {
          "id": "190d0b8e-b016-47da-8c9b-c575c09f5b5c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3ef5ca7b-7afb-40fa-affb-aac7e8e79d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fe90f5-6f0f-4fde-965b-da5c48a7aec7",
        "cursor": {
          "ref": "4dea9bd7-3d39-4be5-a70b-d27cf81801c7",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "260518bc-4b9e-4574-95de-aacd8251f9a7"
        },
        "item": {
          "id": "d6fe90f5-6f0f-4fde-965b-da5c48a7aec7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1af6aa7a-3230-4ac3-bef3-1cf62977fbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f3c32d03-ceec-4715-9a55-c6e165234be9",
        "cursor": {
          "ref": "da963289-3845-4dfa-8034-d662ef39de93",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bec4fab7-a7fb-4c2a-8876-107daac8f1bf"
        },
        "item": {
          "id": "f3c32d03-ceec-4715-9a55-c6e165234be9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5a610bba-4bef-432d-a9d7-2d6ef5614342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "dcac677f-d82f-4ad3-a44e-f4cd7d6263e7",
        "cursor": {
          "ref": "fef3c158-65f9-4900-8e3f-bebf261d6816",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "143afbcf-1be0-4258-a4cf-751dc45e3776"
        },
        "item": {
          "id": "dcac677f-d82f-4ad3-a44e-f4cd7d6263e7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "28ca9b4c-604e-44e3-9c39-804df4b5bcb5",
          "status": "Created",
          "code": 201,
          "responseTime": 554,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bd277a-25f9-4d1f-b776-89a555c6907e",
        "cursor": {
          "ref": "09d936e0-7704-41b1-bcca-5d3746fc3bf4",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "59aa3a55-3796-4ec6-8427-47288c505e3f"
        },
        "item": {
          "id": "82bd277a-25f9-4d1f-b776-89a555c6907e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "aa6e1ab3-2b5d-49c8-9253-9fc0b16eec8f",
          "status": "Created",
          "code": 201,
          "responseTime": 409,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a64bc5c-94e0-4381-a485-2ef09abe7cff",
        "cursor": {
          "ref": "4d2b92a3-8fd9-461a-baca-33077c7e2111",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5c5dc0aa-2dbc-46f2-8f85-8a7e90b40733"
        },
        "item": {
          "id": "5a64bc5c-94e0-4381-a485-2ef09abe7cff",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d3fcf5d3-81c8-47f4-a93d-da961b3e9ec4",
          "status": "Created",
          "code": 201,
          "responseTime": 419,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "13811039-d686-4854-8a2e-c3bb7f475dba",
        "cursor": {
          "ref": "18790fe0-2de1-4bc0-a7be-932887be7f4d",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3342c6ea-42b1-4aa9-82d2-4a7cba7801e0"
        },
        "item": {
          "id": "13811039-d686-4854-8a2e-c3bb7f475dba",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "eb3eebfe-3872-4858-99b5-96258a38502f",
          "status": "Created",
          "code": 201,
          "responseTime": 530,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53c7bde-3656-49dd-b4df-b419bcb925f0",
        "cursor": {
          "ref": "e96a2efc-8a61-4336-bca9-14ca0b1ad427",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f1ffcf1e-660c-4841-8a60-b7e3ce369f38"
        },
        "item": {
          "id": "d53c7bde-3656-49dd-b4df-b419bcb925f0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9e26f00e-43b8-4cc9-9279-9e3d6710c57b",
          "status": "Created",
          "code": 201,
          "responseTime": 429,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6917252e-f616-4705-b8b7-ffd79fcf0afe",
        "cursor": {
          "ref": "fbed52de-266e-4af9-b319-cf2d0ca97cb2",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2b6300aa-0346-47aa-a535-dea6d5e0a109"
        },
        "item": {
          "id": "6917252e-f616-4705-b8b7-ffd79fcf0afe",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4a3f4817-c25c-4438-a3df-aae1fe7a0e31",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3eff93-96cf-4ed0-ac4b-ba307b06f134",
        "cursor": {
          "ref": "a2583a33-5265-4c11-83e8-dd8ce2278619",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b1381fe8-c4fe-4194-86fd-9e2fa8ecedab"
        },
        "item": {
          "id": "ca3eff93-96cf-4ed0-ac4b-ba307b06f134",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0a8ef9b9-4dc0-4ca2-88b2-65983ce37a0d",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "ca3eff93-96cf-4ed0-ac4b-ba307b06f134",
        "cursor": {
          "ref": "a2583a33-5265-4c11-83e8-dd8ce2278619",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b1381fe8-c4fe-4194-86fd-9e2fa8ecedab"
        },
        "item": {
          "id": "ca3eff93-96cf-4ed0-ac4b-ba307b06f134",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0a8ef9b9-4dc0-4ca2-88b2-65983ce37a0d",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "8c19e92f-e41b-46ad-8895-3d1f91aaceb1",
        "cursor": {
          "ref": "2727e10c-a268-4ede-90af-ecbe47d50867",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "00eedf19-7cf7-45e1-b151-88ea2d549542"
        },
        "item": {
          "id": "8c19e92f-e41b-46ad-8895-3d1f91aaceb1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "80e7eda6-8bb2-44c4-9593-6d4d106de077",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "714c7ed1-8a6e-4376-8322-7a0965a6d274",
        "cursor": {
          "ref": "a798c3dc-e55e-49c9-8000-995bdb3805aa",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "663f2291-76e3-4a8f-90d2-b408262e7bd1"
        },
        "item": {
          "id": "714c7ed1-8a6e-4376-8322-7a0965a6d274",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5ee045c1-381d-4e08-bf12-52a4332c60bc",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b3f3930e-7f1b-43ce-8da8-50d6ab0a05bd",
        "cursor": {
          "ref": "95cd240c-1826-4f33-989b-a357f6c66b22",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1ebaa626-a05e-4c06-a9ec-3858f9fd0c63"
        },
        "item": {
          "id": "b3f3930e-7f1b-43ce-8da8-50d6ab0a05bd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4238bec2-a98e-42db-a701-a3c916f13633",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c03d0e90-4742-4247-9251-b6467e8f46bd",
        "cursor": {
          "ref": "53f57479-be2a-47a7-90b8-3ae2aea9158e",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a4f5f34a-4e27-4739-995f-b25da477b78d"
        },
        "item": {
          "id": "c03d0e90-4742-4247-9251-b6467e8f46bd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6b633a5e-a6fc-4e39-9cf3-d0eb3946f1f6",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "c7e86f94-2f06-46a1-8580-6ea6af6696b1",
        "cursor": {
          "ref": "d289bf90-c3a7-4a18-bd71-18476ea93c0a",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "58944f65-78e1-4dcd-a5a5-e94e78ebde8c"
        },
        "item": {
          "id": "c7e86f94-2f06-46a1-8580-6ea6af6696b1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f387a9cb-c41e-4738-a558-6c5cd2611303",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "74845ea6-0fc5-4803-9016-d2d87cdc1c62",
        "cursor": {
          "ref": "63a4e74b-1512-4d10-ba84-dcdfc7e81f15",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "acdfa6c0-2c74-4a5a-899a-1749e16e735a"
        },
        "item": {
          "id": "74845ea6-0fc5-4803-9016-d2d87cdc1c62",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "191a0de2-4499-4327-801f-2596a59d904d",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "dc47121d-0a0b-4085-9148-1fc23a3e20f8",
        "cursor": {
          "ref": "f9b928fa-1f72-4988-ac7a-bea60b2a127a",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ae590e56-077a-4f91-99c3-59dc9606c42b"
        },
        "item": {
          "id": "dc47121d-0a0b-4085-9148-1fc23a3e20f8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "193a30e2-ab40-49aa-ac3f-bd9aef48cdee",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "32250776-2ae8-40b7-9598-d53ee4217de3",
        "cursor": {
          "ref": "e044771a-3749-46df-aff9-738095079cb1",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "247422e3-f379-4db7-8a40-5e3a657bc1d3"
        },
        "item": {
          "id": "32250776-2ae8-40b7-9598-d53ee4217de3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5cfef6cb-839c-4560-b57a-cadbf67329f2",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "3b51c78d-5e2b-404e-9395-db2d5c7b8b34",
        "cursor": {
          "ref": "f97625aa-6d0a-431e-bf04-f8b92d287468",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "15c7503a-a124-4f84-9ec6-b7b268a1f942"
        },
        "item": {
          "id": "3b51c78d-5e2b-404e-9395-db2d5c7b8b34",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "57980eb4-3d3c-4cf7-8b41-60a9343a0764",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e2fd1dbf-ae72-4bf9-a20a-c81a12a7bc41",
        "cursor": {
          "ref": "cac30914-5d4c-49cb-83e2-c3dab6cdd8d4",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6b27f081-fd91-43ad-94e7-36a770251dcc"
        },
        "item": {
          "id": "e2fd1dbf-ae72-4bf9-a20a-c81a12a7bc41",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "936844cb-6eb9-4d64-a241-1fd1f046bc46",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "f167511c-17b7-47a4-994a-5755573ca1f5",
        "cursor": {
          "ref": "532a3ab9-4afc-4762-b792-45366134648f",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "59867089-8d6b-4d83-a837-b27619778484"
        },
        "item": {
          "id": "f167511c-17b7-47a4-994a-5755573ca1f5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "01ac6a4f-987c-4762-927a-f31d0e08e9cf",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c22ca8ec-73c0-4c6f-9667-67f2fd2cf5a4",
        "cursor": {
          "ref": "24e5d664-9d62-4cf9-a20f-68c4bda0cdd6",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6535c4e8-3109-48ac-9686-825b1c3ee9f3"
        },
        "item": {
          "id": "c22ca8ec-73c0-4c6f-9667-67f2fd2cf5a4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fb0e4612-e8ea-4ce4-9680-d4d8d03b8f49",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d4698e8d-f397-41ef-933c-b5226bb8b274",
        "cursor": {
          "ref": "049c835f-31a0-4654-943b-f34f1b4797ec",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "718918a0-78fb-4560-bd37-b44e5305daa1"
        },
        "item": {
          "id": "d4698e8d-f397-41ef-933c-b5226bb8b274",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7a0259ce-c728-4d36-9db0-e377aad470c7",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a77e5e1c-b50d-4891-b31a-f074d9327540",
        "cursor": {
          "ref": "4030f079-2e4b-4b8f-8b67-954c76778289",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "eed5955c-a6cb-4bc3-9ef3-163256338b26"
        },
        "item": {
          "id": "a77e5e1c-b50d-4891-b31a-f074d9327540",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8802627e-ead8-45b1-aad5-0624f875a2b2",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "66ffe3e6-cce1-42bc-aff3-6ef7e070a26e",
        "cursor": {
          "ref": "0adb0368-517e-4e87-9e2c-f6e9284532f2",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0a71ff16-8123-434f-8a37-c80e73406c37"
        },
        "item": {
          "id": "66ffe3e6-cce1-42bc-aff3-6ef7e070a26e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d13b9bc4-4fa1-4e46-9a0d-f9f0b6425f8c",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "28abef33-1648-4e82-b1e1-fd7b41b41c11",
        "cursor": {
          "ref": "737bcc23-03e3-4432-91e0-5610e1c0ac5b",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "aa767b8d-fdc7-4da7-88f9-f0ba9baecee4"
        },
        "item": {
          "id": "28abef33-1648-4e82-b1e1-fd7b41b41c11",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ad1de45c-d309-4d01-877f-1a8376656f18",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c3d1a520-1762-445e-8120-c7cc3b2557d1",
        "cursor": {
          "ref": "711876db-4ed4-4506-b9b5-63313fde3081",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "68951359-f4d1-443d-b9f6-442702c892f2"
        },
        "item": {
          "id": "c3d1a520-1762-445e-8120-c7cc3b2557d1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "937727e0-040e-46a7-929f-c451bfbe8a90",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5f964432-0e35-43f5-8994-eee8cf428baa",
        "cursor": {
          "ref": "60265fad-9f48-4591-b9db-21fdaea44c5d",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4152e059-a51f-4254-a6e3-eabb7b9c9785"
        },
        "item": {
          "id": "5f964432-0e35-43f5-8994-eee8cf428baa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "541e4298-3cd7-4efa-8a4f-b631626ab944",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "27382eb7-67dd-469b-b36b-8dc9b64f5be1",
        "cursor": {
          "ref": "48f9cd87-90e1-445a-9507-2acf7e6bc689",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "668737b2-b7c2-4e6d-8001-055070fdfd1d"
        },
        "item": {
          "id": "27382eb7-67dd-469b-b36b-8dc9b64f5be1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7b648006-a417-4009-8729-a83d1d6f1307",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "464840da-9882-490e-bc90-1932da99e772",
        "cursor": {
          "ref": "a3312cd5-33c7-4015-9dd1-f7284015a616",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d3445ae2-8939-49c0-bdc1-a4cc365b697d"
        },
        "item": {
          "id": "464840da-9882-490e-bc90-1932da99e772",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b764e05b-5e8b-4bcd-ba3f-88ef52afefe1",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e8051ad0-5740-4b41-b012-ed1c5021903d",
        "cursor": {
          "ref": "1c67af55-9292-4fbc-9596-a06ca05e2700",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4d30b8f4-1ef1-4622-97a4-3508fb5ac7a4"
        },
        "item": {
          "id": "e8051ad0-5740-4b41-b012-ed1c5021903d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "21c103c7-36c0-4e7b-b41a-d0ce5d62f7aa",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d2ea4946-e162-43ff-9f1e-d9de5e95bbe7",
        "cursor": {
          "ref": "c21fe5fa-2af5-482c-857a-c6a6deef9b56",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "94e33c8c-4226-440a-befd-07499660160d"
        },
        "item": {
          "id": "d2ea4946-e162-43ff-9f1e-d9de5e95bbe7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "31908cb8-f2bb-4a47-a1e0-c92d1acc581d",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "7ca8c127-f4ea-4866-8c61-d97cb554348a",
        "cursor": {
          "ref": "05c15e85-a72d-4c9e-bac7-afbc32cb8f3f",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "43edab86-537c-499a-ba02-d308be07cf35"
        },
        "item": {
          "id": "7ca8c127-f4ea-4866-8c61-d97cb554348a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a3e90970-08d9-4c42-a3d1-cfd3b2ffa352",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "9f9c70d6-c883-49c7-a94b-c7fd49beb5a3",
        "cursor": {
          "ref": "902d091d-c196-41c8-afc3-30db97aa653c",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7d969ef7-e02e-475f-80f1-f94726c791f4"
        },
        "item": {
          "id": "9f9c70d6-c883-49c7-a94b-c7fd49beb5a3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2970d1ae-b1f2-4ae7-af31-d7cfa6a0a7df",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "48c0b338-1c2e-4bcb-b5d2-6d97ee778f33",
        "cursor": {
          "ref": "6ed564f8-1e6d-48d2-9322-2d6d9cad39e5",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cb7e2cdc-67d8-408e-beaf-edc332da4a94"
        },
        "item": {
          "id": "48c0b338-1c2e-4bcb-b5d2-6d97ee778f33",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "45995b2a-d5a1-4fe6-abf1-67b65487bc98",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b6caced8-f8d8-4eec-8692-1c5af6102668",
        "cursor": {
          "ref": "21ddd772-44ac-46e0-a322-222ebe7b27ca",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "834db733-b4f6-4264-8e39-6d22dcdd7343"
        },
        "item": {
          "id": "b6caced8-f8d8-4eec-8692-1c5af6102668",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e7f818bf-b56e-402d-bb59-1c3d4e9c3520",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1030d407-a39e-4693-b1dd-e2379c2a110c",
        "cursor": {
          "ref": "1dc03db5-5671-4e8d-926c-e05dda989d1e",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "eb380338-b9dd-4f3c-ad28-bb05b084f7bf"
        },
        "item": {
          "id": "1030d407-a39e-4693-b1dd-e2379c2a110c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "359e9b4a-b155-44cf-a0cf-e31f55a58292",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "5f5e44b0-4dde-4adf-9ca7-17524e55a887",
        "cursor": {
          "ref": "ac5309ec-8ae2-4502-a2f0-4ea1f75f0036",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "aebd5eda-3b21-4f66-b278-7ea22795bcf4"
        },
        "item": {
          "id": "5f5e44b0-4dde-4adf-9ca7-17524e55a887",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b2d5dad9-33f3-4c56-a4f1-bbd8390a45e2",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "bb4da81e-ddcd-4c11-b2dd-a8d6fd2b134a",
        "cursor": {
          "ref": "3798adf8-ae33-4758-9ee3-54c6d563b867",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "252f1095-b1af-445c-ab88-5d454bfa4d2c"
        },
        "item": {
          "id": "bb4da81e-ddcd-4c11-b2dd-a8d6fd2b134a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "54ab62d3-6d22-4d67-bc8e-9d10f229f88f",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "2d50dd69-e1a5-4440-8cfc-4b4d51fd8cb6",
        "cursor": {
          "ref": "3cc23a7d-9915-4771-a3b3-e6c0152ef64d",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "007570ee-a07c-41ec-a396-19379d955fd6"
        },
        "item": {
          "id": "2d50dd69-e1a5-4440-8cfc-4b4d51fd8cb6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fd00a3f0-2516-4180-add3-f8095948c759",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "fe4301c1-68ab-462b-a265-c7ae88579d0c",
        "cursor": {
          "ref": "e69ffddd-8239-4cd9-b8d7-5ce64a0222cc",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3d563b91-7b1a-4d1e-888c-ae972d303b50"
        },
        "item": {
          "id": "fe4301c1-68ab-462b-a265-c7ae88579d0c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "03c7c180-1dd6-4984-a797-cf0d8487de87",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "726fb7cd-5f3d-4647-b51e-a61e6d87653f",
        "cursor": {
          "ref": "d161e4ae-0d5e-45aa-9461-c72c2833a085",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d3298aae-27f4-468a-968c-2e5b990ef7ee"
        },
        "item": {
          "id": "726fb7cd-5f3d-4647-b51e-a61e6d87653f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c6f88e4d-b211-4feb-b0a9-72d121193bcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ce05fd-69b2-4f1d-a666-719538179457",
        "cursor": {
          "ref": "e1138f96-2bec-4cd4-92fc-f4b4a7208e8b",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3054539e-814b-4d54-82ac-fd20af41fb4b"
        },
        "item": {
          "id": "e6ce05fd-69b2-4f1d-a666-719538179457",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b0c2a788-8053-4929-a393-94f41f956f55",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 78,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d14a30b-d6ea-4f1d-a086-963d2bbb0660",
        "cursor": {
          "ref": "5b51b8aa-a385-448b-8541-f326e29adfde",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "645380c2-58b0-4cdf-85f4-dd7d06a43750"
        },
        "item": {
          "id": "6d14a30b-d6ea-4f1d-a086-963d2bbb0660",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6c3bec90-4084-40c1-b674-911138a3213c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d14a30b-d6ea-4f1d-a086-963d2bbb0660",
        "cursor": {
          "ref": "5b51b8aa-a385-448b-8541-f326e29adfde",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "645380c2-58b0-4cdf-85f4-dd7d06a43750"
        },
        "item": {
          "id": "6d14a30b-d6ea-4f1d-a086-963d2bbb0660",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6c3bec90-4084-40c1-b674-911138a3213c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aeb17d7-2e44-4744-998a-009ed5f8d72f",
        "cursor": {
          "ref": "f25c11ee-76ff-4c8d-a0a6-4a68b480579d",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d1d0560f-a953-4582-8a18-ef599c993926"
        },
        "item": {
          "id": "8aeb17d7-2e44-4744-998a-009ed5f8d72f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a42a596c-6c8c-4423-8c2f-b2b924d6699c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17afc03b-cf99-4acd-adb5-5cd3034be6d5",
        "cursor": {
          "ref": "75c1b598-aa3c-4d03-9151-d03de24318f4",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f8d6cb09-7e29-4d10-ad4e-c92a4341809f"
        },
        "item": {
          "id": "17afc03b-cf99-4acd-adb5-5cd3034be6d5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5e1bc9a6-caaf-485e-b504-68cd9038930e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4771a92-e15d-4758-8dfd-79eb2bfff3be",
        "cursor": {
          "ref": "a0237ae8-e29c-43ff-a54d-2339db872c92",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6f1350ed-4f7b-49ed-bbae-8156b7cc1d37"
        },
        "item": {
          "id": "d4771a92-e15d-4758-8dfd-79eb2bfff3be",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "64ed1d2e-dd2a-4327-b0fe-b361845622c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9bdfe2-1f06-4e3c-b470-e4d03e4cc723",
        "cursor": {
          "ref": "f600c062-4418-4422-8316-387d765d3193",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b9866b19-17fd-4f40-ab50-2e5bd3c6fd88"
        },
        "item": {
          "id": "6e9bdfe2-1f06-4e3c-b470-e4d03e4cc723",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d107ab3e-fd49-4adf-ba57-b3d4c57dd899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323cd2d5-b54c-4bfc-a2e7-0c8e1f2682dd",
        "cursor": {
          "ref": "da64bdfc-b09a-4e65-abe2-4087880e4fd2",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9c42cdad-493a-419a-88f1-6dff92e1bcba"
        },
        "item": {
          "id": "323cd2d5-b54c-4bfc-a2e7-0c8e1f2682dd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a63e5a59-c3fe-415a-bf69-ca7abbfef587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d86d790-885a-4c4b-96dd-0908ec8b10df",
        "cursor": {
          "ref": "b2d91100-5138-4ce6-84ed-fded39963237",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f96833bb-c193-400c-90aa-5681574198ac"
        },
        "item": {
          "id": "9d86d790-885a-4c4b-96dd-0908ec8b10df",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c311f238-bc33-4f24-a7d7-955e0cb9fd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 798,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e763d1-272c-4a94-9113-e496d8698a7a",
        "cursor": {
          "ref": "ef6fae54-480b-44b3-accb-ed4ad6ae3d7b",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d6af7812-3b1d-4ed2-89fc-8ca9b0f68e4d"
        },
        "item": {
          "id": "f7e763d1-272c-4a94-9113-e496d8698a7a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "af421a61-143c-4431-b421-c77bf5046deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9c91cc-bf26-4349-9083-a8bcccb247eb",
        "cursor": {
          "ref": "70b7d2a5-bf5e-42b7-8c7c-0df34f05c571",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "da5d8f16-a716-4d90-b7e3-f4bef0d8747b"
        },
        "item": {
          "id": "0a9c91cc-bf26-4349-9083-a8bcccb247eb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1bec6804-9b3a-4e7d-a010-9569161b0788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5104ec8e-84c9-49e9-9da3-446c4bca4a29",
        "cursor": {
          "ref": "987a7c8c-974c-41d9-a6d3-0a19dc98ec60",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4a36ad57-6b16-4526-87fc-1949ebb94084"
        },
        "item": {
          "id": "5104ec8e-84c9-49e9-9da3-446c4bca4a29",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "888c1720-851d-48a8-b925-1f543a04ec39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4bac42-4bbb-4154-bc39-6760e9b6b980",
        "cursor": {
          "ref": "ff8fec62-2712-4f53-b277-ad68deba1f68",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e05ed5e1-53f3-4df6-bcdb-9b5e63a30e20"
        },
        "item": {
          "id": "8d4bac42-4bbb-4154-bc39-6760e9b6b980",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7826bd6b-6574-4eef-b459-899588a4a122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05934e38-d0b3-4d7a-b8d4-d31c036ba075",
        "cursor": {
          "ref": "0bc99526-9c8d-458b-9b85-7a5afb03aaeb",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "53ab5cb6-a1ac-4880-8785-e600b4288014"
        },
        "item": {
          "id": "05934e38-d0b3-4d7a-b8d4-d31c036ba075",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cf61a4cb-9d96-4e91-b24e-0745b1a8cd3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45a370f-3e8d-48c8-bdb8-e653b47e5279",
        "cursor": {
          "ref": "f97fd47c-f096-4095-a6a3-3c6f048c234c",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "17d19642-fea9-4662-b0a4-ec2b41c6348d"
        },
        "item": {
          "id": "b45a370f-3e8d-48c8-bdb8-e653b47e5279",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "71bd6319-b305-4bd6-a6ec-92ddcc3ed95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82290509-0214-4d62-a0df-90d1d5f433fa",
        "cursor": {
          "ref": "b3d2e07a-a9ea-48c1-b0a4-f2f2adb4c8d9",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "28b167b2-c3c7-482c-8c38-7280dc33d270"
        },
        "item": {
          "id": "82290509-0214-4d62-a0df-90d1d5f433fa",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "56305cc1-7ade-4e43-9d08-dac33de32246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6754dffe-fa07-4b20-b430-6223ecafe551",
        "cursor": {
          "ref": "0606619e-6652-4289-8a89-d580619b49b6",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "afd53c07-b3e0-4a1f-b88e-05b3b9fc891f"
        },
        "item": {
          "id": "6754dffe-fa07-4b20-b430-6223ecafe551",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6cc51633-e7a4-43a3-b93d-e9dd529027fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3be2676-609a-429b-97e7-647490758085",
        "cursor": {
          "ref": "a28db377-8215-4182-8890-1bac87c91067",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "427b587e-a1f7-4bec-94e6-22e0db9b7a5d"
        },
        "item": {
          "id": "d3be2676-609a-429b-97e7-647490758085",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7b310929-6c3e-4e43-a731-5198d5e37759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7049d13-d147-4e39-8d60-4096b43f0135",
        "cursor": {
          "ref": "3c0558e6-ba6d-49f6-998a-5db21c09d0b0",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d0e5fcf6-50d5-4d3c-8da0-b23ef494ec8e"
        },
        "item": {
          "id": "b7049d13-d147-4e39-8d60-4096b43f0135",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ee9e7d64-6de4-4270-9672-fc5da63134db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ece14d-efaa-4d79-bfc1-c3516e611608",
        "cursor": {
          "ref": "7cc5dab7-2cbb-4845-980b-e00d40b2c036",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8ed322bf-9fbe-4ffd-8b12-49647fc0e759"
        },
        "item": {
          "id": "d8ece14d-efaa-4d79-bfc1-c3516e611608",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "995e81c8-2bce-4563-9b39-8be6ede08f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464a43f2-2f61-4113-8525-bcd76c2535ee",
        "cursor": {
          "ref": "8770545f-82cd-4325-889e-c8dbd14dd96e",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b2832466-7438-42df-af56-c3cb00ea2fa0"
        },
        "item": {
          "id": "464a43f2-2f61-4113-8525-bcd76c2535ee",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5bfaf0e1-ef40-4c4f-8c06-de9cffbe9a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e367d8a4-fd59-40e0-b5eb-e88d82c2713d",
        "cursor": {
          "ref": "cb225dbc-ea46-4d7f-81c5-43a8af9d49e1",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6a8398c6-2670-4e07-b298-8458485b6781"
        },
        "item": {
          "id": "e367d8a4-fd59-40e0-b5eb-e88d82c2713d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f9d0043a-3418-4eca-bd5f-487ebbc8a2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04e31c0-1716-4124-8259-44008f86ec8b",
        "cursor": {
          "ref": "885d9741-c729-4dbf-88de-66b7c8ab0a28",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "acef608f-28af-4470-9440-30912800a477"
        },
        "item": {
          "id": "b04e31c0-1716-4124-8259-44008f86ec8b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "61fc929e-cba3-40e7-a650-016a33513c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a6f0b0-befa-4484-b6e4-1a9badfa9518",
        "cursor": {
          "ref": "e65d9a04-84f7-4c47-8db6-852f7cc5af10",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7bd63c6f-5d96-4416-b599-adf151e8f036"
        },
        "item": {
          "id": "b5a6f0b0-befa-4484-b6e4-1a9badfa9518",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "10d69bd1-fe35-4db4-bad0-e6bda43efe95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1296cd0-eb2f-4017-8ff4-d5cbe0821782",
        "cursor": {
          "ref": "15ffb7b1-8e0a-467a-983a-173f14cd3b15",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cfa1d00e-2b0b-4ce4-9a71-4fdb9816ed29"
        },
        "item": {
          "id": "b1296cd0-eb2f-4017-8ff4-d5cbe0821782",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5c846f05-083a-4dbf-a81f-4310a319f639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 344,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e657ae42-4cbf-4ad6-91f4-0ede29e4a3bb",
        "cursor": {
          "ref": "d12121e7-84ac-49f5-9ca8-60c689ed2483",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "16b65259-ed9c-40c7-a742-7cc1598ee723"
        },
        "item": {
          "id": "e657ae42-4cbf-4ad6-91f4-0ede29e4a3bb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e9377444-b034-4644-aded-e6dfcfaccd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346598db-0165-46fc-88be-71b4a270b348",
        "cursor": {
          "ref": "5cf35cf6-4be0-40c7-bbab-98aa4f547e8e",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e32afcf5-2108-492c-894c-02ffd2db65b1"
        },
        "item": {
          "id": "346598db-0165-46fc-88be-71b4a270b348",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "05c7b7e2-6a40-4e98-8cc1-f8c120cfa080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a382b5-e349-4a94-8fc9-5096e0dc5c89",
        "cursor": {
          "ref": "baf9b278-200c-4195-83e6-775845b8309f",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0cfe3c3f-1cd5-41ac-9fda-f3607a3ad157"
        },
        "item": {
          "id": "36a382b5-e349-4a94-8fc9-5096e0dc5c89",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "886988fc-9ed0-4103-b553-13972a675396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171d9b80-e1d2-4b60-a8cd-4262953d231e",
        "cursor": {
          "ref": "79a0210a-51fe-4b17-a093-654563587dfe",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "34f15914-84db-480c-a790-c6dfdc293bb7"
        },
        "item": {
          "id": "171d9b80-e1d2-4b60-a8cd-4262953d231e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3b6edd07-2fdf-4d91-b0b4-6e2211d68144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341d5294-0626-4119-8977-8b9185fec5c0",
        "cursor": {
          "ref": "bedb90d2-6146-4189-b08b-d0c2065d8204",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0a376dc7-098b-46fe-b3ec-7f85a91f52b3"
        },
        "item": {
          "id": "341d5294-0626-4119-8977-8b9185fec5c0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "821f351e-15f2-4e97-9ab9-c6c6f4f5d17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e800eee3-7050-4c3f-87a0-ca0fcb906bbd",
        "cursor": {
          "ref": "59a92b45-83cd-4a9c-9fb6-0224d05896ad",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e49edc83-c16c-48f1-80c5-d5d2da200510"
        },
        "item": {
          "id": "e800eee3-7050-4c3f-87a0-ca0fcb906bbd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8e97f27a-125e-40cb-8b68-b58bf4624b6f",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "bf9d2e36-544c-45fd-a19f-b3d3ff0f56c1",
        "cursor": {
          "ref": "c493a520-e4a8-42a1-90aa-4e15233cdb12",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7a686fcc-464f-4223-a6b9-747d1f7a33cd"
        },
        "item": {
          "id": "bf9d2e36-544c-45fd-a19f-b3d3ff0f56c1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c5b5b271-e05b-48a8-aa12-1ed0376f97e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16d08fc-32dd-4504-af16-982dd954df5f",
        "cursor": {
          "ref": "15093e59-c7a6-4419-bac0-63908bdfaac1",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5a693b36-f4d6-4484-b87c-ee0d77d61bf3"
        },
        "item": {
          "id": "f16d08fc-32dd-4504-af16-982dd954df5f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "638a53d2-7bd0-440d-bdf4-5fee6fb5995e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177dcb3c-ee15-4b22-8037-780fe97288ee",
        "cursor": {
          "ref": "550bde95-3b8b-4c65-8eb7-383a099f1586",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3a7c94dd-2ad3-4210-893b-7e9be5b72120"
        },
        "item": {
          "id": "177dcb3c-ee15-4b22-8037-780fe97288ee",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6309e0b0-2d7f-471e-802e-60b4ed2cd7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfaf7cbb-610c-4a76-80ea-8323c1d876f8",
        "cursor": {
          "ref": "45f68e26-bd2c-41b7-8392-6212bceb8bda",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8a0e93aa-936b-4506-8fb3-a830d21c7ba0"
        },
        "item": {
          "id": "cfaf7cbb-610c-4a76-80ea-8323c1d876f8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e6fa2a0d-0034-40aa-961b-95779fcbf015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1940cb-deff-48d1-8c98-9bdeee8dc7c0",
        "cursor": {
          "ref": "f77ed961-41fb-451d-a000-c4238cf99e18",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e74eed3f-5b88-45f7-8b76-efc3c812968c"
        },
        "item": {
          "id": "db1940cb-deff-48d1-8c98-9bdeee8dc7c0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "394c6afc-e4f0-42a4-b6fa-731f3cb64f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94682a04-237e-492a-997d-758ed97eb1a5",
        "cursor": {
          "ref": "94051d07-36f0-4d1e-a78f-f14b4c0524e8",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4880aa7f-c088-4919-9e22-f72afc5be1c9"
        },
        "item": {
          "id": "94682a04-237e-492a-997d-758ed97eb1a5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "04c5f8f6-3982-478d-8419-c213c97a7ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ab6d4f-64ed-4f05-bda3-5151efd7d4c1",
        "cursor": {
          "ref": "4743b9c5-db06-438c-a30b-ea8eeec3361c",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c9051a84-427c-4811-b14c-0626e835e7f3"
        },
        "item": {
          "id": "00ab6d4f-64ed-4f05-bda3-5151efd7d4c1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e75bc906-7795-4c67-a4ec-ef53b4f89dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dac74d-3dd2-412b-866e-26c174b290e8",
        "cursor": {
          "ref": "4d729573-fbba-47a9-ad47-41c8a5ec64ae",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "188428c9-b920-48e3-8ebf-000355507807"
        },
        "item": {
          "id": "a6dac74d-3dd2-412b-866e-26c174b290e8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "dc779fc4-2dd2-4a25-bdb7-4790e30e6e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af3c02b-3383-46dc-8581-d3b7ebb8e509",
        "cursor": {
          "ref": "26e62001-2777-4e83-ad9d-3cbfba3690d4",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "094dc32d-5cb5-4dea-8646-536f937b9e61"
        },
        "item": {
          "id": "7af3c02b-3383-46dc-8581-d3b7ebb8e509",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1b098b86-4bfa-4860-8171-8820d6a40733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01138dc-e19a-4c3f-9062-cb9cb3868018",
        "cursor": {
          "ref": "8fdd9325-49ee-41c8-9de3-9ec1bd00f708",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c2499275-9eb1-4fcd-b814-a617b2bab82c"
        },
        "item": {
          "id": "f01138dc-e19a-4c3f-9062-cb9cb3868018",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5c5dac8e-e149-42dc-b67e-c97ada52215b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2f7efb-79af-43c2-8c8c-73dafe21ac91",
        "cursor": {
          "ref": "aa852819-b9ab-4dbb-99c6-e0528871d644",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "db3fbe03-958f-4e62-a2ea-beebf154631f"
        },
        "item": {
          "id": "db2f7efb-79af-43c2-8c8c-73dafe21ac91",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bc9e27b7-4553-46c5-8662-5457a51836a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d440a3-4549-4b45-aa1e-2d9026f9b769",
        "cursor": {
          "ref": "ffecd5cc-b9a5-41ab-b8ba-3869f4794399",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bdfdd2e9-7da3-40e0-bd75-dbdf2de5e6c5"
        },
        "item": {
          "id": "c9d440a3-4549-4b45-aa1e-2d9026f9b769",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5315dba8-76d5-4632-bb71-26c22711fd6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3a11c3-7739-4ca6-a1a4-ba24bfe9a09c",
        "cursor": {
          "ref": "7c171fac-785f-4623-8e73-1bfde34a6810",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9f7866f9-8da8-4c83-9c3e-2d5257663bad"
        },
        "item": {
          "id": "1e3a11c3-7739-4ca6-a1a4-ba24bfe9a09c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a37e81df-2e03-432e-a493-9e98900dced1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41dc9ac-7c6e-41ee-b17f-183638af2b5d",
        "cursor": {
          "ref": "5d915f07-cb83-409b-82de-6dafdc813859",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "efce8d0d-1d37-4f3a-a22b-dcfb9b2c6ea9"
        },
        "item": {
          "id": "b41dc9ac-7c6e-41ee-b17f-183638af2b5d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ed02276d-6bcb-469d-9f5c-2c923fe06260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd70800-ef79-4ebb-ae82-a828fce08e19",
        "cursor": {
          "ref": "9148fecc-a493-4e2a-af01-c75dd845c329",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b1f9815a-242a-4fa2-ba29-faa3ac3fe025"
        },
        "item": {
          "id": "ecd70800-ef79-4ebb-ae82-a828fce08e19",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9c7e64f2-6963-47b8-a2fa-e0b270aacd68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee3602f-ce48-4691-9aaa-fd9cdec6a144",
        "cursor": {
          "ref": "82ca26ac-bcd4-4b00-9e5d-0ef4f7c7ea44",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5289b5f7-9e01-4109-8ea2-c02331280adb"
        },
        "item": {
          "id": "aee3602f-ce48-4691-9aaa-fd9cdec6a144",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ac29c025-862e-465c-85d0-21dff78ff142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b492e7-b9ff-499b-b98c-16f09a53fd3a",
        "cursor": {
          "ref": "2e8317d2-bcb4-433e-8224-a02a0874af60",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2cd8cb3a-84c0-4ff8-a032-bf2c025dd1b1"
        },
        "item": {
          "id": "d6b492e7-b9ff-499b-b98c-16f09a53fd3a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bf3c1212-e769-4e45-a197-2fd4a9a85f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90830cd-9f81-4943-97d7-64fe40ac3689",
        "cursor": {
          "ref": "2bea550a-e7ba-4730-b549-b511003466bf",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "436de9ff-bcd2-45c6-800d-b826fdede7f4"
        },
        "item": {
          "id": "f90830cd-9f81-4943-97d7-64fe40ac3689",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4b439629-3801-4233-86a9-26155f0fc3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37f638b-13bb-4cf3-a5ab-6a161c06d5ea",
        "cursor": {
          "ref": "4d459478-1073-41fc-98da-7f07a45a2a75",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c40c229b-0c60-4509-9496-54f8e4d6acb2"
        },
        "item": {
          "id": "a37f638b-13bb-4cf3-a5ab-6a161c06d5ea",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c10ec269-093e-42a8-90da-896f8b28c48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9b06c9-bf0a-4154-a191-fcec36efb9a2",
        "cursor": {
          "ref": "33ae9ca7-6497-4dfb-89ec-a33c1ef25124",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5ac5cd35-79d0-49d6-a79d-c4be256559aa"
        },
        "item": {
          "id": "5b9b06c9-bf0a-4154-a191-fcec36efb9a2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c208d5e8-4c70-41e3-9f79-f68e87337f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e8d0c6-996b-4e82-b541-ec6f48f7805e",
        "cursor": {
          "ref": "c67f0b90-0af2-48b8-9d9f-5871b5b9b3ae",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1f1d5c31-f285-408e-a787-a9a709774e79"
        },
        "item": {
          "id": "e2e8d0c6-996b-4e82-b541-ec6f48f7805e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "12fae0cb-f134-42b9-a48a-e641b7e959fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783cb6af-00f1-4fab-9c51-931658cd7fa0",
        "cursor": {
          "ref": "4ed6f2f0-6cc7-4e88-a4c0-139bf70cb8ae",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c5298cad-1427-463b-80c7-8bc56e1893c9"
        },
        "item": {
          "id": "783cb6af-00f1-4fab-9c51-931658cd7fa0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "581e861c-db2b-4234-8fa9-0cad08fbe47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e7ac74-f2ff-46e4-96f5-e6e34414725a",
        "cursor": {
          "ref": "997c3691-74b6-4681-aa3b-9d09a8be311c",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7699cbf9-23a6-4a36-9094-95e0d4a8cc08"
        },
        "item": {
          "id": "b4e7ac74-f2ff-46e4-96f5-e6e34414725a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1559b4c3-8af2-4544-8fd8-ce0427ba4efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72be977e-9fc7-48d1-ba13-181584c4781e",
        "cursor": {
          "ref": "d5bbe7cc-ecb8-46f2-92e1-590260a8328c",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2f014b9e-a395-4fb0-b6d8-61c6500644fb"
        },
        "item": {
          "id": "72be977e-9fc7-48d1-ba13-181584c4781e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4edf9924-ce59-45e8-a818-bcc62cd77fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9514cb39-1e12-4359-9d93-55c0a56e378f",
        "cursor": {
          "ref": "5cef7454-78f9-4bbc-a143-5e66919d43ff",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f4b3897c-e602-4fe0-a432-d70061c52bdc"
        },
        "item": {
          "id": "9514cb39-1e12-4359-9d93-55c0a56e378f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "873d1cba-1813-41cf-849c-55bc22534c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b668d08d-8fc1-4ab6-9bf1-5ddcf8336be5",
        "cursor": {
          "ref": "3f0adbb3-4f47-431d-8354-96b2e7b6764e",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9579681a-5585-45a2-b0c6-cba03a7e0299"
        },
        "item": {
          "id": "b668d08d-8fc1-4ab6-9bf1-5ddcf8336be5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "95baed39-dd3b-460b-87cf-a3f30b239911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfc30ca-814d-4f84-9b8a-fcfb536a6fd5",
        "cursor": {
          "ref": "deb10e24-cdac-4b46-8772-50c01fe58a83",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "751cc8fe-f581-45b7-b647-82b961c07a63"
        },
        "item": {
          "id": "6cfc30ca-814d-4f84-9b8a-fcfb536a6fd5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "73f996bc-4b9d-4399-8404-2785e1d3821e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc09f76-017a-4569-b80e-201d966b58c0",
        "cursor": {
          "ref": "6cfd5548-7508-4122-962e-62cde2de4d88",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6c38ea26-08ae-4acb-877f-c7535d1f020a"
        },
        "item": {
          "id": "7fc09f76-017a-4569-b80e-201d966b58c0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b980d1be-61ce-4c72-97bf-a3dc8f6dcf77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90337a1-38a0-450f-86f3-4e968f667919",
        "cursor": {
          "ref": "9cfa18d3-363b-40c4-a32c-d11f23594d6d",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "954a0cb7-ef60-4a63-874d-f5468777d875"
        },
        "item": {
          "id": "f90337a1-38a0-450f-86f3-4e968f667919",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "54573a94-1c3c-44e9-8dcb-c07ba72bf5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e499b621-d8ee-48ca-8a2c-fffc3a46f844",
        "cursor": {
          "ref": "8dba4d57-2756-4ded-960e-290fc7e3ecca",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6554d8bf-a16d-4581-8c23-aaf7f6b4b16a"
        },
        "item": {
          "id": "e499b621-d8ee-48ca-8a2c-fffc3a46f844",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e52a5831-7148-4af7-8343-25e190642ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922f6de8-6e96-4baa-b6e6-f339e3b14bee",
        "cursor": {
          "ref": "2a104429-45d1-4a71-9bb8-474b7a68e8e6",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2354dd6b-c10d-49ff-a6af-5cb0fc9ab6fb"
        },
        "item": {
          "id": "922f6de8-6e96-4baa-b6e6-f339e3b14bee",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9f2bacfe-19e2-4527-ada0-43e4dd6cb819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1beea5a-1736-4632-98d2-ca9500d04129",
        "cursor": {
          "ref": "baae722a-b4eb-4ad7-bc1b-ed6ccf351580",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3fb14d34-1a08-4833-9a05-81e14cb9d3a1"
        },
        "item": {
          "id": "f1beea5a-1736-4632-98d2-ca9500d04129",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0fa2a79e-a48c-4b5a-9fa3-4ae2ab48056a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41634767-f13d-4de4-97e4-e4419b030f72",
        "cursor": {
          "ref": "dc507def-6d7b-478b-a15b-fa7818ed712e",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "24da7730-03d8-4c42-a6bb-e052b274baad"
        },
        "item": {
          "id": "41634767-f13d-4de4-97e4-e4419b030f72",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d443e220-ee3a-4ce3-9ca1-777dc9a51bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22469486-1605-4a00-b9d1-2203b12a461d",
        "cursor": {
          "ref": "196f26ce-4ac4-4424-8229-e2440ad14d34",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c69f05e7-0849-477c-8ca2-00b787642041"
        },
        "item": {
          "id": "22469486-1605-4a00-b9d1-2203b12a461d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f68155e9-e46d-4f3b-8350-dc723cd30589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e174a729-fbb8-452a-8852-6bd218f536f3",
        "cursor": {
          "ref": "0269de0d-6620-461c-91ff-688c5288b0c9",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "73a504cc-c65a-4cff-86d2-c1b90f118116"
        },
        "item": {
          "id": "e174a729-fbb8-452a-8852-6bd218f536f3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "79530d43-a2c4-4318-bddd-edf242c744f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7fb2a8-cef7-4238-8e06-8216629b0d2d",
        "cursor": {
          "ref": "5610060e-2652-4da1-93f2-8c84ca0133c4",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cb40413c-02fe-4152-9ac2-f650d8c322e1"
        },
        "item": {
          "id": "3a7fb2a8-cef7-4238-8e06-8216629b0d2d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2819ccf8-a8ea-4448-a973-daede433dacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acb7cf8-0573-4dea-b2a8-50449028e993",
        "cursor": {
          "ref": "d33fc9f6-5a1d-458d-b409-f59a2ac8d811",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d44b71e0-47bf-49cd-b08d-5fdfb75909ec"
        },
        "item": {
          "id": "9acb7cf8-0573-4dea-b2a8-50449028e993",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f008ebab-ea39-4db5-bdcd-3c096c172db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c8ddee-7f2d-4c3a-8498-054ff795d72b",
        "cursor": {
          "ref": "619fadd4-54f1-4d92-bdbf-c97f574e2af3",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6db5aaf4-5f1b-4246-9011-4cb7029ededa"
        },
        "item": {
          "id": "c1c8ddee-7f2d-4c3a-8498-054ff795d72b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ed1a5547-5be3-48de-b08b-90a69778ad42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d6c098-f24b-40c9-a199-523a0493e8fd",
        "cursor": {
          "ref": "5e0387a3-eefb-4ed6-84f8-003ba3813f07",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "31925132-f3fc-479c-9c97-79b8230bd90a"
        },
        "item": {
          "id": "95d6c098-f24b-40c9-a199-523a0493e8fd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7cc02e97-b232-4bea-9984-ff89a1157919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0ffc59-68be-4f36-96e0-22465ee6d63a",
        "cursor": {
          "ref": "e5288189-add0-4554-9a28-a176ae716d1c",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "db80e103-f683-4840-9521-a7afbd707332"
        },
        "item": {
          "id": "ad0ffc59-68be-4f36-96e0-22465ee6d63a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "025b2af7-2bfb-492f-9197-27f64931581b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340b3e91-e3a5-47cc-bcb7-6ef6a3a1527e",
        "cursor": {
          "ref": "e061b80b-a57e-46ae-be64-70cd04dab0a9",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f92ac14f-3bcf-4428-a8a8-da57465032e2"
        },
        "item": {
          "id": "340b3e91-e3a5-47cc-bcb7-6ef6a3a1527e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2e67edd0-1876-4eec-b991-b9f7d0a37e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1feb8167-e8d7-4b4f-b141-652af82ad9ce",
        "cursor": {
          "ref": "b9ba6a96-707a-4158-bc0c-25bc9d8ec7bf",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "54c90d9b-a866-4417-b224-2c0c98ebd2f6"
        },
        "item": {
          "id": "1feb8167-e8d7-4b4f-b141-652af82ad9ce",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6e5434ee-4c63-4d14-bbc7-b7f6a03d5b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb1f233-b0bf-4b32-b4d7-79d720ae92d5",
        "cursor": {
          "ref": "ebbeffdf-983a-4d1c-83b9-2d0e55c74300",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "03009e9b-bee1-48bd-93d5-02d1b191944f"
        },
        "item": {
          "id": "dcb1f233-b0bf-4b32-b4d7-79d720ae92d5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "953d8cbb-627d-419c-b8a9-00a318ebfd8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4963b200-3109-4e75-b1fb-7bc579318d42",
        "cursor": {
          "ref": "95659341-ee5c-4bbd-b18c-4560dbbb75c9",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "be1d6b1b-96e6-405f-ae27-9895624ac307"
        },
        "item": {
          "id": "4963b200-3109-4e75-b1fb-7bc579318d42",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0c721156-af72-485c-8411-d688463d6894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e08db05-8da7-4c76-9dcb-0c5674e508c8",
        "cursor": {
          "ref": "7144a08a-eeec-4488-8411-d77352d093b6",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "49868527-daa2-4fea-a826-f99a9ed9c725"
        },
        "item": {
          "id": "9e08db05-8da7-4c76-9dcb-0c5674e508c8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "84a32439-2926-4531-9e19-031b04684c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681e84db-2225-425c-8b4a-728b9212a84f",
        "cursor": {
          "ref": "cb338f90-630e-456e-9686-4b0cb6f2affa",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cc1faf8c-20bd-4620-ba7b-10a6612b3a09"
        },
        "item": {
          "id": "681e84db-2225-425c-8b4a-728b9212a84f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "084ef528-f8f7-4b44-aa2d-04d231b23947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a407634c-b0cf-4789-bcf9-ea9cb6aebd39",
        "cursor": {
          "ref": "206f10a5-1b84-49ce-8a16-add6723067f7",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c0d914a4-aa39-46b3-9c12-25bfea42e30a"
        },
        "item": {
          "id": "a407634c-b0cf-4789-bcf9-ea9cb6aebd39",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bb570045-bd90-46b2-b9e9-af2004d279a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efa2d52-73a9-4763-a496-45c1e48b96c9",
        "cursor": {
          "ref": "9424f24e-0d1c-4870-a779-6c2d306e06dd",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1bbff754-ef1d-4b48-80cf-44c2b10d7b6e"
        },
        "item": {
          "id": "7efa2d52-73a9-4763-a496-45c1e48b96c9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dbacf5ee-4258-4d08-bd7a-4ba394949a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d619b7-10e7-46e9-be34-5c5a259ca5fe",
        "cursor": {
          "ref": "cacd8d20-6dc5-4bd2-93b1-bb49c1e3eec4",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f5f4535c-0463-47d4-b963-daae59c0d0ed"
        },
        "item": {
          "id": "92d619b7-10e7-46e9-be34-5c5a259ca5fe",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0c1da185-6920-4bfd-8d97-dd1ca83c1239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc826913-404f-41fc-81cc-95ebeaaa0181",
        "cursor": {
          "ref": "fbc4c5db-5382-4a4c-97c4-7f22b762d65b",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "39e14d76-bdbd-4cfc-8a53-8a1c451d05bf"
        },
        "item": {
          "id": "dc826913-404f-41fc-81cc-95ebeaaa0181",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ac15e48b-2a89-4918-b35d-473289de977a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2fe4a5-61cd-4fd7-bea7-1675a94c6ef8",
        "cursor": {
          "ref": "b8f315be-4783-4cb0-a829-23e6db181e63",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4d59cfd6-4616-4291-bfb3-2d795ecf3270"
        },
        "item": {
          "id": "3c2fe4a5-61cd-4fd7-bea7-1675a94c6ef8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "627affaa-ccbb-45e4-8899-81e2f5869941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1284b38-2983-4dc2-aefa-107f12bb395a",
        "cursor": {
          "ref": "9e1c1fb8-c85b-4cfd-99ad-7b6db2306a1f",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d3344e2b-6526-4c96-a7ec-784cc56d122f"
        },
        "item": {
          "id": "a1284b38-2983-4dc2-aefa-107f12bb395a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "847c076e-8770-46b3-bf29-c0e988a5235b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e09470-4daf-4324-933c-048221ca840d",
        "cursor": {
          "ref": "d1e45f7b-ee2d-46a2-896f-7d943f20b456",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b67bb015-dc4f-44af-95ce-42a342712f55"
        },
        "item": {
          "id": "b2e09470-4daf-4324-933c-048221ca840d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "524354c6-2059-4c45-9bf1-b10cd7ed4fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbe6f3e-3b99-4a75-93e7-b503598a65c1",
        "cursor": {
          "ref": "4e50836d-b94c-462f-a276-18001f7cf31d",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "faff3bcf-c038-469d-a000-253750a0c880"
        },
        "item": {
          "id": "edbe6f3e-3b99-4a75-93e7-b503598a65c1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d710882f-3d2b-4881-885f-2aaba4033715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb60bae-14da-412c-abc1-b3dd1957bd25",
        "cursor": {
          "ref": "8ff7906e-00a9-4146-9a49-f35fbb63ad0a",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d0a4bfe4-ec12-4237-9e43-c296797fa5ed"
        },
        "item": {
          "id": "fbb60bae-14da-412c-abc1-b3dd1957bd25",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "21a93120-c89e-4f87-a9e9-53830ba28c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0027784a-b758-4f42-8b14-4b8516a68be0",
        "cursor": {
          "ref": "19c5585e-f7dd-4249-83ee-3320ec8cc7ff",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "19b26cfd-7369-4143-9677-8efe504d8d12"
        },
        "item": {
          "id": "0027784a-b758-4f42-8b14-4b8516a68be0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "577f0ea8-a63e-4a9d-8007-6e7577e8821b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc15310-47c9-49de-ba29-9e45f7e328af",
        "cursor": {
          "ref": "9637336b-acbe-421e-8ac7-e874d9dff17c",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "33b83310-069e-4e75-abba-2c6e04c8caf5"
        },
        "item": {
          "id": "5cc15310-47c9-49de-ba29-9e45f7e328af",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "282f989c-fb20-4346-a801-d80c65eedeea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feac956f-0aaa-4ea3-b970-fe7c14aedf5c",
        "cursor": {
          "ref": "9d50f942-8765-429c-ae98-10b6ccd8eee9",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4f99fc2a-e9eb-4b71-8ffb-5f7ebd683ddb"
        },
        "item": {
          "id": "feac956f-0aaa-4ea3-b970-fe7c14aedf5c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9b133be6-8895-4472-ba84-c23ea0c4713c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf07aa0a-a991-4132-98c3-43886e4abed7",
        "cursor": {
          "ref": "81ab07fb-c2af-4de6-9fd3-d7c5c21e9fff",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "eb9269ab-dc50-4670-ba81-988c1f43b1ff"
        },
        "item": {
          "id": "cf07aa0a-a991-4132-98c3-43886e4abed7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "831a5dda-94dd-482e-8d8b-26076d2532ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff0c758-38e1-4507-82d9-82d6d72d2b0f",
        "cursor": {
          "ref": "cecfc4dd-dd1e-46c0-a1b0-d7819b61f949",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1fc0810b-80c7-4efb-93f0-a1d7c29fdae5"
        },
        "item": {
          "id": "cff0c758-38e1-4507-82d9-82d6d72d2b0f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cd655995-9214-4c5a-b96f-6ac396779a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfeab6d-7377-4cc2-8db4-93ac985e57a9",
        "cursor": {
          "ref": "f0d2918a-acfa-4304-9fce-b5a481bc4c3e",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "90329237-47d7-4393-b520-49ca9874e75d"
        },
        "item": {
          "id": "4bfeab6d-7377-4cc2-8db4-93ac985e57a9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f7f95600-8961-4f9f-b0dc-5669209bad2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a50941-7e5a-41ec-bb5b-4279ccf1e494",
        "cursor": {
          "ref": "813386f1-6dd6-4dec-af42-1c2aa8534a96",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "41f78e1a-e3b7-4f24-9db5-ff2b23033397"
        },
        "item": {
          "id": "19a50941-7e5a-41ec-bb5b-4279ccf1e494",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9bbfae5a-06b1-4df5-968c-c2a366b82770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb37c6f-d2bd-4dbf-90af-116602d67f9a",
        "cursor": {
          "ref": "dd5e0a37-3794-43cf-a194-6d389dd67836",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7519615c-c89f-42ee-8ceb-8bdb7845c5ed"
        },
        "item": {
          "id": "0eb37c6f-d2bd-4dbf-90af-116602d67f9a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c8391dc1-e420-426b-958f-5617b267b0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc074da-f558-4346-a31c-5829566a6a9c",
        "cursor": {
          "ref": "a436d89f-b44f-49c6-8594-bcdbf5fd46c9",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "73c27bb7-1e20-4f15-b3d2-8fc58b5110b0"
        },
        "item": {
          "id": "9fc074da-f558-4346-a31c-5829566a6a9c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6cecd434-6582-473e-a679-67f2a37c53b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e39213-41c1-4f95-910a-4d56d26d8d23",
        "cursor": {
          "ref": "951f8f11-ed7e-4805-9a80-37ba3e6149d3",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7abd3286-7d13-40be-84c7-e6d087f3f04c"
        },
        "item": {
          "id": "74e39213-41c1-4f95-910a-4d56d26d8d23",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d3168fef-1005-496a-a394-16cede84f5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077bc70b-7e50-4187-96e9-f1d120f45342",
        "cursor": {
          "ref": "927a5063-49ab-4a9f-9be0-3c4616fdb7b9",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "14a8beb8-2fd3-4178-bdd5-88319d32826f"
        },
        "item": {
          "id": "077bc70b-7e50-4187-96e9-f1d120f45342",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "024ca33f-f9b8-45c6-9c9c-bf0031c3fb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7ce955-1543-45a6-87d7-83fefe47ccef",
        "cursor": {
          "ref": "23187a7d-49d7-4f15-8955-71c5a420aff7",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cb9d06fe-eaf1-4a62-9d09-e00938467b5f"
        },
        "item": {
          "id": "ac7ce955-1543-45a6-87d7-83fefe47ccef",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c64fc24c-ef5c-4044-8de4-a3bf061c4960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783f704e-2bba-4bcd-8726-e8f029d252a4",
        "cursor": {
          "ref": "42be8215-f9dd-4540-abd8-19e79bb90bdd",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1efc98ca-4c2e-487e-904d-e39da096ab19"
        },
        "item": {
          "id": "783f704e-2bba-4bcd-8726-e8f029d252a4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c8c83836-8946-47a1-9ee9-f3cf58299ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1ef1cb-5451-4cd0-95a0-31820d54a498",
        "cursor": {
          "ref": "750c7c8c-a22f-43f0-a9ce-af9161db697a",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6291264b-ebf2-40ed-ac6e-3e02ba3f345f"
        },
        "item": {
          "id": "7c1ef1cb-5451-4cd0-95a0-31820d54a498",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bba4c8bd-3ca3-4dcb-ab37-b3ca1825f9fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa513cb-f68f-4855-8089-864171e11047",
        "cursor": {
          "ref": "d3ae4d94-93a2-4c59-b8ee-4c8d66f35787",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a74eaf2d-468a-4ed4-9303-7c6512a5d215"
        },
        "item": {
          "id": "2fa513cb-f68f-4855-8089-864171e11047",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "37efd855-3a44-47b8-9b97-58e8cb0c8c87",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71436f60-3119-4f93-9f5a-ea5ab5d823da",
        "cursor": {
          "ref": "7c375792-df6f-45a8-8787-2898980762d9",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fcce571d-24c6-4787-a2bf-1f2fc413ac9f"
        },
        "item": {
          "id": "71436f60-3119-4f93-9f5a-ea5ab5d823da",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7f8dad00-114f-42fc-911d-08d8871981aa",
          "status": "OK",
          "code": 200,
          "responseTime": 403,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f31210f-ffd3-4387-b606-20bf8f405eae",
        "cursor": {
          "ref": "926725f7-ccec-4303-b772-49e9e67188ce",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f4e4a737-8e57-46c4-80a1-2eec3182344c"
        },
        "item": {
          "id": "5f31210f-ffd3-4387-b606-20bf8f405eae",
          "name": "credentials_verify"
        },
        "response": {
          "id": "03167215-e06b-4884-824e-76c40a6932fa",
          "status": "OK",
          "code": 200,
          "responseTime": 433,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6893d017-8555-4011-89f6-7e557a7e6f6c",
        "cursor": {
          "ref": "05191ba9-da4a-4ee9-8bda-1dbf22e3d90f",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2e454977-74d8-4729-a02b-a402e8def8d4"
        },
        "item": {
          "id": "6893d017-8555-4011-89f6-7e557a7e6f6c",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "a006a96e-544e-4f63-9bba-88c9f3bbc7f7",
          "status": "OK",
          "code": 200,
          "responseTime": 551,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd733ee3-6122-47a8-8baa-3ac0717ef9b4",
        "cursor": {
          "ref": "cb7b0890-46ef-4564-a782-9313ef51021b",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2fe3445c-e5ca-4456-b5b3-c96f0f4c2c4a"
        },
        "item": {
          "id": "cd733ee3-6122-47a8-8baa-3ac0717ef9b4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "18c5ab38-2dd4-4116-9d28-faae65498d1c",
          "status": "OK",
          "code": 200,
          "responseTime": 363,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3f0218-0c17-4a2a-b91d-364fb1f79976",
        "cursor": {
          "ref": "1164dc2d-aafe-42b4-9b37-1d98ecf00600",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "df4c4eb3-0a06-4b0f-9d1d-1e6fb23ee6c5"
        },
        "item": {
          "id": "ba3f0218-0c17-4a2a-b91d-364fb1f79976",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3b93389e-8f00-4cf9-8956-f8e7991eb12d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3f0218-0c17-4a2a-b91d-364fb1f79976",
        "cursor": {
          "ref": "1164dc2d-aafe-42b4-9b37-1d98ecf00600",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "df4c4eb3-0a06-4b0f-9d1d-1e6fb23ee6c5"
        },
        "item": {
          "id": "ba3f0218-0c17-4a2a-b91d-364fb1f79976",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3b93389e-8f00-4cf9-8956-f8e7991eb12d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3f0218-0c17-4a2a-b91d-364fb1f79976",
        "cursor": {
          "ref": "1164dc2d-aafe-42b4-9b37-1d98ecf00600",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "df4c4eb3-0a06-4b0f-9d1d-1e6fb23ee6c5"
        },
        "item": {
          "id": "ba3f0218-0c17-4a2a-b91d-364fb1f79976",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3b93389e-8f00-4cf9-8956-f8e7991eb12d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52c5285-5815-46cd-bd07-2c13ea92abfb",
        "cursor": {
          "ref": "e304a949-aa5c-4473-b511-c8cb8d19b897",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b732752f-3e69-4d0b-aa4a-a09a76b0b914"
        },
        "item": {
          "id": "f52c5285-5815-46cd-bd07-2c13ea92abfb",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "bc3c2b62-68a8-4214-a8a8-c4774c8640cd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34adb308-70ef-4831-9c1f-64dda9787ee0",
        "cursor": {
          "ref": "38718ae4-31c5-491d-a090-1c079c981f32",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bed1835f-fc52-44c5-bfe5-cf80fdccd52a"
        },
        "item": {
          "id": "34adb308-70ef-4831-9c1f-64dda9787ee0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ea75c5a3-37c2-4585-a393-7bbce5e3e2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "34adb308-70ef-4831-9c1f-64dda9787ee0",
        "cursor": {
          "ref": "38718ae4-31c5-491d-a090-1c079c981f32",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bed1835f-fc52-44c5-bfe5-cf80fdccd52a"
        },
        "item": {
          "id": "34adb308-70ef-4831-9c1f-64dda9787ee0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ea75c5a3-37c2-4585-a393-7bbce5e3e2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "22fc60f6-882b-4c53-aa78-7dd746db1ab0",
        "cursor": {
          "ref": "f076e8de-1720-421f-94b1-167ababedae2",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ce792667-66a8-4d22-8c71-7369c40c622d"
        },
        "item": {
          "id": "22fc60f6-882b-4c53-aa78-7dd746db1ab0",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "77a3d7b2-ab08-4a4c-b553-cf7fad1f430a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c39df172-3888-4e6d-bb40-1facb36d52bc",
        "cursor": {
          "ref": "4dbd981d-2d3a-4936-bc22-43b7fddbdec8",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2f9fa8ce-451d-4f10-af1b-858b068d2559"
        },
        "item": {
          "id": "c39df172-3888-4e6d-bb40-1facb36d52bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4adee8f3-9a6e-4b0d-b027-c572d9577d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "c39df172-3888-4e6d-bb40-1facb36d52bc",
        "cursor": {
          "ref": "4dbd981d-2d3a-4936-bc22-43b7fddbdec8",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2f9fa8ce-451d-4f10-af1b-858b068d2559"
        },
        "item": {
          "id": "c39df172-3888-4e6d-bb40-1facb36d52bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4adee8f3-9a6e-4b0d-b027-c572d9577d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b03c4e64-51f9-46a2-9b8f-401a4d7eefa8",
        "cursor": {
          "ref": "1afe7968-056c-4ade-90bb-f41e420a52fd",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "eb6c49d3-d4e4-449d-a75f-0b6bec2a357e"
        },
        "item": {
          "id": "b03c4e64-51f9-46a2-9b8f-401a4d7eefa8",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f6a96892-b005-449f-8901-b5981d095037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}