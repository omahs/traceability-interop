{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "557e54c1-b6ca-4816-a088-1706066e547d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "224e7e06-75a6-4646-9d9a-f6ed4d24e80c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aed97a6f-9a4e-470e-a0b4-d370ddd9a181",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c07c177-bd19-4928-a0c3-e8356ba345ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93748b7f-c653-4161-bcf3-0f104f8f268c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "62840a19-23f7-41c0-9cff-711a884b309d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4233b22c-393f-47e4-a45d-4f4afbd569e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8527be95-4494-4500-90ad-8aef8b7d6406",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "28e1cde8-4587-4865-b03f-8c2c745bbe92",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7414fd-9d9e-4353-9efb-16737ab04f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56895fa2-9d1e-45ec-9399-d273070fd208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506a5cfe-93d3-452e-ac99-071786bb369b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff98736-4b86-4571-be93-c158b62bec73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16ccc673-a7c3-4ce2-9819-b9cd4a3ec728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbbb0ae-8a12-40ec-b2d0-d0e08579769c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958b5e09-3264-4240-9ddd-a3eb522046d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2bee324-2a99-4240-aaaa-5862aa016e6a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c58f7cf4-b72f-4100-9943-4afaf2f13e68",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "107a7768-cb4f-4775-bdb9-0cc83a181b26",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2e4585-632b-42f0-914c-2d18d089ac8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d9e4531-ccb7-47b4-9dd1-95022c946db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c024487b-113b-47f8-89aa-40f408a47ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "906bfe3e-059c-4eff-952d-295a156299eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5a6f34-abe6-4937-9d14-90502680ac21",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5db74b-521a-4590-afa9-27e0f2010b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66c721b8-e130-45aa-a478-a69d6ad44b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832151fb-6df9-4e9a-abf3-3353d337b199",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0cb3b0ad-a246-4c6d-8129-5613c20974fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2a6bdc27-b58d-427c-a407-0b500dcb548c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0fcba7b8-d5fb-440f-a8e7-6b7d0ff14d52",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c31d5f90-5bbd-40f0-9cc5-596995b2296b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d0443cf6-3d1d-48c3-9dfe-9bbbbea7beac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6cd5d175-90bd-418f-9a20-050984f6a34b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8c1b1b08-803d-4d51-9aa2-3e116a09445a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cadaac55-7b8b-44fd-a621-2a0948e8d62f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77273993-a0e1-4068-a515-0b50c8b651c6"
            }
          }
        ]
      },
      {
        "id": "e684538f-26b9-47a7-aded-7022eb064a77",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "94f7222f-4da7-4266-af43-c67224df4e7b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "501f1c08-1029-45aa-89ac-7071229ff710",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "020da26f-644c-45a5-a9c9-81672e9f3285",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254d4fdf-d9cd-4d0d-9688-3a75f5023ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a4450b-8c47-4cbc-8467-f656161ecd46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dfd31c-8d8c-4226-a251-06431e2cb342",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a540995-0eda-45ce-b56d-858d61c1e201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66273d47-3195-41fb-a092-db77294f6faf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a684719a-99ba-4cb9-bf4e-e2a9df56da41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ce4dd6-991a-4154-beaa-59af44f63718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d68677-b371-412d-9fd7-3ab81db76818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0c9b751-ae18-4c8f-8f21-beebd2661ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cec7b5-8823-4ac3-8334-a10d2adf47f0",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cf9606-0a81-4033-924e-cefc8503fbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb400697-21ba-4316-8bd1-e581d01d1189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d82d938-fb7c-4e86-bd9a-cc925fe0c085",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd097aed-fcd1-4cf1-9972-169d886b0b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9019948b-e0c8-45fd-9fd0-718303c178d3",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63cbf5a-e45e-4c6e-852c-3e55cdc95cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cebeb96-f80f-497e-8487-bc0c1ea8afdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e848ba-85d5-4d44-899f-10b3b6615385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ae3b351-ba85-4b8c-adcc-9f00065d46a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff3efb0-a706-4b90-bbca-2cf7bda2a635",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feaa1c40-3c80-4d19-90bd-770e3f02fd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca136424-1f1d-4501-aee8-28ba324b64bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce467ab1-797d-424a-a440-1bc052581628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d2609de-f76d-43ea-80c6-d7e2c3f1aba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4d3873-bc33-4ddd-ac03-4930308ff7f7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a1f353-0601-4bb1-baab-424b7c25ab20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66afb629-3ec7-4b64-a423-de9e19c9ec39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a190f956-bbf0-4d28-8898-6644ea91ec6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc129fe5-1c2a-4e53-aa2c-a211eb4ae417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5308f60b-b615-40c2-8ea7-50b34aac1d04",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a612ff3-b6ea-4c95-bb8e-71612f3ffe1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e399a716-6351-4453-8bc8-5e95719560c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b23979-16a7-40b5-a560-b0832657cf9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04344cc9-fc93-4ccf-8245-ac69463a9546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93c8388-a4e2-4c1a-90da-142e75eedad7",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1547a65b-3962-48cb-9842-39b62bda0b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52526f8-e47c-476b-ad3d-3dd67ccac739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b396d4f4-9600-423b-9dae-1af08241d7a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0650b195-0f7e-40c0-b322-d4816eb9e0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ca9eed-3727-4433-8a96-d5d46dd53a2b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccbeab3-f755-41a1-8631-4d907583cab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ada98a-bba1-4bda-82fb-095acfe32356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8b9cb9-548a-45d9-ba16-68ffa2705baa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec856aa8-6424-40b0-97f2-2079323e7fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e71f2c-9b30-48d5-8456-e766f23d4775",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b872837c-582d-4804-bcab-095f2a6f2e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f083b84d-e527-41b1-9556-56ed360adf09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d781884f-69f3-4946-a1e6-939be3f1a35a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89b6535b-387b-4ee4-a509-406adb89a13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d1d376-1a8f-4cdc-b4f1-08783ed9f87d",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a50758-766b-4dc3-9120-e82ea6d6a952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b359cf0-adb6-4910-80a6-8180234d3c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a327cd-42fd-4795-8b5e-3f7ee6031062",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "9b9ef070-4a11-4d37-ba1b-bea556de4991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ff8e02-ca67-43e0-8049-6d21fc61d5bb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8077eb55-1d81-4635-bdce-dcfad5d64f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3715377-45f3-4d9c-abc7-867cb2af9a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9df43a-bc7d-4ca9-9d22-37ef08612398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "dc094bac-7c98-4c04-86ab-1b622e1e124d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c74ea3-9c01-4e98-9dc9-559a58e63671",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54236be2-438e-4412-898a-8c7ca15972d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7930181a-4326-4050-9149-f2264e1ded20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663f882b-a829-478e-b270-63eb781b91e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34a594b9-95cf-44be-95d8-dd830f860929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b511b01-faba-4afa-b0fe-9761e33cdd84",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86069805-f18c-45eb-9af8-a7ac3aa51fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8c6507-219d-4fa6-9f42-8d074faffb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224dd346-5e78-4c7d-8cd3-5b6957befe1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "517d4551-2f1f-4f3c-8168-5be6fdcda781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eba8c3a-fb27-453e-8363-ac7c729b5cf6",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c4897b-0626-49f6-9cb7-ea4a68350887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43404ac-b8bc-4f60-9caa-1eaa25f0bf5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61e142c-569b-484c-92f7-266a22884cbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "62ef96be-ceec-497f-8b9d-8e0333a7ba13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904a627f-15fe-4044-8bc0-bded5ff6bb4c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39bc232f-c65b-45dc-9cb0-2a779aee3287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19aee3e1-1d20-44bc-a058-2281fe49c069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68535ed-830a-4bcd-8627-31c1de3857b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8048637a-fe83-49eb-b767-a9a9e8761830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5a38ac-9d03-4c39-8744-1a8fa25c2373",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819f7c10-f7dd-4f3e-af32-63a901a6afe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd73a448-f3e2-4a46-829e-68be9d362236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93412241-a8e5-4b7e-b32a-5eab13144b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5872e895-935f-4937-a2ee-06381d824e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7fa300-6a2d-4c25-8056-9ee3890958e4",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7b7c6e-d91f-4540-9ac2-a62c060ae371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab20f9b4-ee00-414f-95ec-83a3d75b0160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed36509a-44f6-40f6-a5fa-fcf7a6d00922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10027115-5dcd-4260-9e4a-db3f6f9d723c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2a6b92-a38c-4147-8f4c-43336a0dbd0c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498dc48e-2600-4bd9-a2f6-f0c663ad1eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e5ce29-9688-4df9-883b-5182d307fcc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49474f4-e30d-4f64-b016-0e22c4a9ecec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136ae13e-7103-4c9c-abc2-2065ffd9586c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a479ab6-e166-40a5-bae0-1963409d821e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6823ee32-344a-4820-be72-1d243599aa9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ba492c-c46e-406b-aa40-fdf6add82b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20ea82a-34e3-492b-9479-9afbebc0c4e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcc6026f-82d2-49a2-a541-bd936ef23d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7a8cdf-d873-48a2-9a5c-6bcc9e568383",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ea27ca-2a3d-40a2-88aa-34ec510490ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aab3667-6a22-4bea-941f-da8a4bca2541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2312017f-044f-42d9-9d42-96c8e8f66501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da74e749-25d8-49b4-b47b-9b5d3f71f3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6f5d83-ff6d-4bc7-a619-9407cf060ee9",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4630e24-5354-4623-87ec-0c396de0e9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2dafd42-04a6-4c3e-8ab8-760d74df93ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db42935b-6489-4042-8991-9cfeaca3ba9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54a2d804-8af3-4d22-a118-fbb3286304bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f0ede1-0976-4cb4-8b81-84d0736b0224",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f3df00-c785-4862-9cb1-d7b292a07abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00106b1c-5fcc-4dc9-ba35-0c7572f7ea6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60595d2d-7437-4355-8c1b-99d04fb0f9a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d2dd175-b283-46e2-8020-357a18dcc034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41dadacf-2c1d-49c3-9929-d800f8739ab0",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234680db-5993-4207-888e-ee9622140acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29f6708-b038-42d4-aebb-a3912422cbb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54166a8c-2fc5-4cae-9ff4-197b2242d190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f87dc7f2-18b5-4dd6-b1b2-5d3838f19764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1076dfc2-51b6-4f2b-b8c8-c8dc2da0c8e2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca08807e-aaa8-433c-b746-52e99a5d5c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77f5577-747d-4a5f-ba31-c5cf459ed235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537ff363-4c5b-4765-8e8e-ddc8dceaea3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "928eb1e2-d5a2-4058-86b3-fc00dfca693e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23621408-dcd9-4435-a877-85ed89eaf19c",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf5a391-1fbe-4eb2-b53b-2feb0645b3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "456ebb0c-5086-4966-b847-14e57b3a95a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d4210a-06d0-494a-b0bd-b7d7b3ebd183",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53f11595-085d-4285-b63a-a8f020889281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22299893-5763-4201-b224-f83f95e582e4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7448fa9-57d0-4d3a-b692-9b31a5a45e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed94493-70d4-4c37-bcc2-933db748fc98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a7bd86-332d-4859-b4e4-d0a1cdbdc58a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f071f1a3-1c33-4838-a3bf-842bff8a783e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f13cc82-cf51-40ac-bf96-f81e113ab1d6",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0069e185-a0bd-494d-8e9c-b6719c5f7bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c4cac7-4152-4249-a699-ca8b756e494f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af575ec-f171-4956-84c7-5a5c5d2c865f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c654fea6-5bd9-41a2-87a9-96d903ed95f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24c2153-7c65-418b-9b48-bd529013a098",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17064f4-5b69-4577-87c7-19bb4ecf7b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f9285a-6949-43fa-b0f1-d0d630536a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2fc3b7-0433-4a53-adb3-8194c1529f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2d7dd8-3d63-4a96-9982-0cae63bf8fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f964fc3-4179-46d0-ac73-5fcb36dc6372",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb1890e-d3ab-4dfb-9d57-8ddfb6fc3ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea3e943-0432-494f-90df-9e4df7531045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e735d3-2c08-4c2c-a7ea-7d1c79896095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d3561b4-e460-4efa-afcf-f0bc00b97ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5b2ff6-a1a5-4bb4-b6f8-1f5166584c8b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512f2500-0faa-48ac-9e2b-b8eb72c85b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "56f98275-1bbb-4ccd-af01-610e75e09090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd0e97c-57e3-408d-9578-cdbb394a451c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "098d71a4-4993-46ca-8787-23a041fa55ee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2ee3813e-9de7-426f-8816-8110d961c373",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4010ca8-13ea-4e31-b3a5-2ad7047372ab",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf461cf-0501-436b-8088-425e06e212e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b835e3e-e566-4fbc-bcf0-5a474e3c2642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8189d9-ba74-4572-bd7f-b7f00c268ca2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "556a428d-f427-44ae-b3d5-0002d8d6143e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a0328d-419d-444f-8717-7bd2216e9585",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4a9cd9-16ea-4d54-b82d-3edf448524e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fba3931-6e2f-48d3-b1eb-cbdbbfa9d978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db57e2e0-667e-4816-bf6b-b4356737730b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "21d2a663-55a7-4418-9cf6-d3093d9e38e9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c943051-52cb-4e58-8068-bff08cb37010",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7294b42d-714c-42ab-a45e-2fea1798a0a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c31ff8a4-1ccb-4d07-b898-418695785bf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26c56802-08c3-49d7-9208-ca0aaf1f8888"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89314400-5869-4dd4-b7e4-74bbebc3a73a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5dbdd9e5-43bc-4ee0-ba5e-1ed004d8523f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bd991eca-8c74-4cde-8eed-a0a30ca91783",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8dc975a8-1962-4825-a4d5-84af3e7447b2"
                }
              }
            ]
          },
          {
            "id": "f37d0f9c-cee0-4355-b6b5-e50c87180960",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1453dd4e-cf20-43f1-aaf7-b041a99737c0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15934b2e-937c-4a19-911c-95d3c9e76185",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31b24094-91d0-4a49-bf12-a2f24e4ae250"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f2f1afc-d9a3-4b6e-9031-3cb41d0186d5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "dfc3dc6a-1024-4404-ac4a-b13d3c37aba6"
                    }
                  }
                ]
              },
              {
                "id": "161848ac-0f9d-4406-8f5d-f23546dcbad7",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f54d48e1-8a8f-4e85-be97-8293ebea0bc9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "721c1c0b-2c6f-47f1-a485-8b0db341be67"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fa6d60c-b5fe-47ee-9871-8a8f6e850d22",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c85be2ef-7264-4eac-ad30-5b899e8eb492"
                    }
                  }
                ]
              },
              {
                "id": "02b42622-e5f1-4277-8b3d-0a3a796290b9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "180d403b-9458-47bc-bab8-217e60bd27ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62e57942-7cf2-416f-86d0-b6b82c08f7d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dda4f6a7-f9c6-4efe-8e48-9955a446f9d2",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6ce13db6-b3ec-4a4b-a199-bfc070b663d2"
                    }
                  }
                ]
              },
              {
                "id": "7317a634-20e5-4f29-a8c0-76b064824c06",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8decc318-1391-4a5a-a44c-00014e57bf95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a45b386-2982-4f38-8c30-d11b260593de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8d19d3d-766e-4e96-8262-29a9323fc9ae",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "fbf70d5f-7119-4fea-911f-4fd4419195d1"
                    }
                  }
                ]
              },
              {
                "id": "84adb207-05c8-48ef-b262-d3b4da1ff0bc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6d99c15-aa9f-4cd9-a612-7cb8f01971a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "30aaf49c-2447-4bfc-a4ad-1ebfd41e04c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "552e0c98-b8de-4d47-bade-15867ae6225f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "510b6dda-c47f-463f-b3ed-1ef795e536b3"
                    }
                  }
                ]
              },
              {
                "id": "8af5c6aa-3ab1-43c4-9dea-2831e987cb7b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e85d1e4c-b215-4a26-97d5-7404e9550100",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a7f295d-cad7-4eb3-b3e0-743108f79302"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b97ffa7f-f7bd-4eea-89bc-43f45709ff33",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "daccabd9-6b9f-4df8-a2e8-a6bc9f7aa638"
                    }
                  }
                ]
              },
              {
                "id": "5b1292c6-984b-4bd3-992e-322d3c336b2a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6475e0e5-3ef3-4941-8b2a-abb670180fae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "552c674e-fbf3-4dc8-9c1c-2d454e0e6993"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3be12370-ddea-4889-936e-a43241b8b74c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "49318d65-21a3-42c8-beec-84129051aea3"
                    }
                  }
                ]
              },
              {
                "id": "14e3382e-038b-4ac9-a88e-d1314ecaa73b",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92d6ed20-1b73-41f5-b8ac-4f623ee9f184",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9db96af5-18bc-4e9e-a6de-5e996a92e965"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0972c669-23a9-4a9c-95e0-2ff3d0817aa4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "677b8d33-2a34-47d0-88c1-dd2b3b189dbf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e32ea52c-0f77-422c-afc2-2c9e6cbe1308",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6865133b-e7d7-41c5-a90a-d0d702129ab5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d4749fdc-9499-41ef-83ff-cda79ff7a4bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a460285b-c31a-4f3f-bf1b-e35555ae6fe5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00e83e0c-3d44-41b2-8c57-a91d34df2c54",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "47a8da66-34dc-4688-9af2-da5994bb74af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10676e0c-6dce-4dac-b9d0-429443e19fa3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b81159e-22b2-4cc6-be28-fdb1141d7b96"
            }
          }
        ]
      },
      {
        "id": "7989f310-1b31-44f4-8266-b5f64cb6a72d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3f61556b-098a-471a-9036-ddf131a31be2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "170c8672-2bb9-4660-9ea9-1806642535aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3db9def-22f5-409a-b609-1f6fbe287eb2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1682b8e4-b5b3-44d9-a9e0-988f87ee77dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774c7a73-d90a-42e5-8044-1897d275e509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "024998cd-70cd-4a07-a774-c3bf33b23588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ff797a6-8200-424d-bb23-4664da96a9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb31429f-9d19-413c-9988-a72808fe6874",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8d7f64-1d32-47a0-8c10-55425521869f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2a218c77-6aff-4058-98e2-f595f2f1b22c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3663084-5b1f-41a4-a785-96106786a12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4693085c-e713-4dfc-a829-2b45c0df5fbe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c46ec797-f11c-428a-80a5-1e331b9527e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "740ba09f-1c16-4f7b-aa54-2a547c15a392"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b441d65-01d6-4c24-bd79-02a8b929133d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5433d16f-99de-40a7-8730-edf85d66d58b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f469b1f-513c-4c3a-a91e-a09606a7f8b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "ff721714-363e-4c8c-8274-31ab2ab2c0d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "149bb02b-855f-4c5f-bac4-d73f66ebd620",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e02d0b7-3042-4b1b-8959-a2f08bfd68f8"
            }
          }
        ]
      },
      {
        "id": "9016d5b9-2d92-4a65-aa95-cb68c8b8ef4c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d08098e8-f5ff-4960-b793-47f03caeab5f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29f1bc68-5a96-42f6-acac-52e7135eee66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95eada94-fa0a-4990-ad11-8f6ea7039c7a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a84d01c-5d78-4c2c-b70a-c300c8a32064",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "544b5178-fccf-4b91-ad77-05e2c5ea4652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a18e0c6-80d1-4122-b7c3-6d0c0db3a869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1cd2151-bd66-4d7e-bdb2-19ccfbe69857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e73cc18-e62b-4e9b-9bb3-231d94a1fce2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80641a84-7f19-448f-9911-e5331391e2ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "b944f73d-3670-4558-8dd4-951d1efffad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c288192-b77a-4746-872e-05365e84d62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e64bbe3a-1574-4f62-a4be-15a480ed9737"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dce9c717-3b78-421d-b536-3cf473a681f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "caa76ed2-46de-4d9b-b7a4-1b9c6b966552"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef2b3229-afb9-4808-9734-4612291f7d7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f11bd9c-63db-4da0-8011-c02f83ab469f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9466ba4-4449-46f3-b4c2-e1342479ac97",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fb02f543-6aa2-492b-8041-ce2aaeb4b89a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3205f7ca-89bc-46c0-bac5-7ea9292d645d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b114bd54-ee41-4f7d-87b4-154ca73d5dc7"
            }
          }
        ]
      },
      {
        "id": "0ec612ce-1cc3-49b3-85ca-6300fb0c0318",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d7aec658-2d52-424f-a663-9580b1140828",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ce2c986-9fc2-4b0f-85a0-90b5fd50635d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f0f70cc-a4bd-4bd9-bb7f-f7b4d5a63e89",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7ca3cc-6be0-413a-9bcc-1120c9a94f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1fb426-b489-48c0-8ae8-431a45cecaf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a8e7a5-54bc-4a50-88eb-96c6f52afaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "855b7a82-eb5c-4d16-9028-73fe4172f1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321be4cd-5eb2-4078-b163-694e11ec3918",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c993b9-07be-4d86-9320-953c3ab5ea28",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c1585057-d734-47ea-bd47-b923e850a0f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c749c7-e354-4246-a901-2be50a75b7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57eced37-14c8-4e94-825f-21396d9a3c03"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a6537d5-c455-4063-afb0-1e99dd89a1d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1a9234c-4856-47fe-b06d-5b32e4a9ad67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66a3e867-dd87-45a3-98aa-fd06519be13c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ffb3fc1-5507-4a26-90d3-273cda3ba1b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2ed88cc-fe90-43ed-a881-a49788efeb1b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "2fd2356a-09ed-4428-b200-7bf33bf14302"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c22357af-a00e-43d2-ac20-d1429a4c3aa3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "601d756c-b787-4262-8fba-b316f9c6c97d"
            }
          }
        ]
      },
      {
        "id": "1980f719-07c8-4b64-a0ff-8521746ba081",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1f73a51f-75d9-4246-a01b-945c19178f1f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc13821f-d75c-45c9-9746-d5a951688413",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2bff1bd2-c24e-4393-9749-62bd4c8a2a59",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731829a8-9ea7-4770-b0e9-dfdb94a997ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31db04f-94d4-4c26-bea6-de88085c033e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43db1f53-531f-467e-bf12-63edc9177346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "560f32ed-8ca5-46bd-b2eb-f6c62ffa209b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c47ba02-39a2-4073-af33-ea03b8973e90",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ba4621-7597-4d14-b905-947b70b77a97",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6e766c97-7c81-4b43-86f3-1b4d8cff1b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9605e159-e23a-459b-9391-ca23fc67c893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75f64db0-7d15-4714-9cd5-0bcbf8dae703"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d98b100-6bc8-4758-bdfc-6c2a5e2cab75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84bcbb17-08e7-46f9-aa7d-f7d81327b5f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b0c14c7-c255-4390-9260-a9870e145c57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c85e3a5b-5c77-4b15-9dcc-d958a2b63f87"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0944f5ca-6bef-4440-9758-02f3f775d106",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "2a9b5cb4-d710-4b22-ab9e-1b26f6d01f5b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ca02cff-664f-4205-a42a-ca8a25597997",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ccc6023-8cb1-4acb-a822-6e3424379eaf"
            }
          }
        ]
      },
      {
        "id": "e55bbcd6-9d95-472e-8938-a14aec576d62",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f1617909-62b2-478b-8a29-e4cb8cd0be9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "108f5aae-4d73-47e4-aaad-3dc69d9a4814",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00c87832-865b-4043-b34b-4cfc596421e4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e403e91f-bae5-4456-9e3e-3c8f50b3b7ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2635e0-251a-4be0-95c9-30baa8cbd6aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ba4eea-7f98-471b-929d-dac7d830d5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f9705cd-63eb-4a63-b7df-e78c5e7af374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb3e642-f2ea-4f7c-bba1-22760965eac6",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb700f17-a5e9-4bda-9a7f-89cc9d03b4d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0dbcdc18-4a6b-4cf1-b5c8-860fa14f7ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ac439e-b816-4868-b094-e450250e1b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecc7faf5-6e9c-4ac2-ba10-a9a8218b5e43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "467f5f44-4e40-4030-93f4-201f7afb87ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f0b4b56-3d83-4765-acca-ff2ec75d0494"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2045e8d7-2cc1-47af-99c3-f022f48f280e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6b98d6b-6417-4411-9e90-d807278cde65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1728acea-68bd-4029-bc82-881c82c9a0dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "6a48ef70-4e35-4f13-8c69-9729addf4dfa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "608f74e5-80d8-4e9a-8e4b-1a0fdab478d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09364b0d-82a1-4093-bd47-b895c0d8e02a"
            }
          }
        ]
      },
      {
        "id": "96c5d91b-dabc-410f-bc65-c8fc13e28d5e",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "88e6ee64-787c-4a47-b069-5cc1304a0144",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 134.34579439252335,
      "responseMin": 68,
      "responseMax": 752,
      "responseSd": 143.0222584339462,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661993045736,
      "completed": 1661993064190
    },
    "executions": [
      {
        "id": "aed97a6f-9a4e-470e-a0b4-d370ddd9a181",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "80478f51-1959-44cd-a703-35b1cf616ddc",
          "httpRequestId": "60ef878f-252a-4ea3-b389-e96847739660"
        },
        "item": {
          "id": "aed97a6f-9a4e-470e-a0b4-d370ddd9a181",
          "name": "did_json"
        },
        "response": {
          "id": "4dbadaf3-bdfb-4c54-9f2a-de70bfa5fbd9",
          "status": "OK",
          "code": 200,
          "responseTime": 341,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e1cde8-4587-4865-b03f-8c2c745bbe92",
        "cursor": {
          "ref": "5c36d9a2-0c58-4a32-bb67-1c97f4892b34",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "112ed6be-361d-4d9a-b198-552e7023705b"
        },
        "item": {
          "id": "28e1cde8-4587-4865-b03f-8c2c745bbe92",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea1d264a-fa6b-4965-ac75-d895d8df6291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e1cde8-4587-4865-b03f-8c2c745bbe92",
        "cursor": {
          "ref": "5c36d9a2-0c58-4a32-bb67-1c97f4892b34",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "112ed6be-361d-4d9a-b198-552e7023705b"
        },
        "item": {
          "id": "28e1cde8-4587-4865-b03f-8c2c745bbe92",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea1d264a-fa6b-4965-ac75-d895d8df6291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506a5cfe-93d3-452e-ac99-071786bb369b",
        "cursor": {
          "ref": "3e4479a5-92fe-47d2-89f6-b27ca9507bdf",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6467a9d1-1de9-42b3-84b8-71ba7b00707a"
        },
        "item": {
          "id": "506a5cfe-93d3-452e-ac99-071786bb369b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1c555f10-3277-401d-8859-4a11472d29a7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 124,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbbb0ae-8a12-40ec-b2d0-d0e08579769c",
        "cursor": {
          "ref": "46b039e7-ae1c-4eed-9ce9-17e7483baa06",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3eec00c3-ab4e-4523-9040-1b4ccb95ad2a"
        },
        "item": {
          "id": "bdbbb0ae-8a12-40ec-b2d0-d0e08579769c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "29421347-c007-4902-bd5d-5bea8bf36eaf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 69,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107a7768-cb4f-4775-bdb9-0cc83a181b26",
        "cursor": {
          "ref": "09841d6b-ddf6-4e5b-b907-dcb8acd61ce6",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cadf4bc0-7030-4846-8b3f-93ddef877eac"
        },
        "item": {
          "id": "107a7768-cb4f-4775-bdb9-0cc83a181b26",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e5131485-3dbb-4d3b-936c-a011e7e4606a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5a6f34-abe6-4937-9d14-90502680ac21",
        "cursor": {
          "ref": "ca8a2580-c524-4822-982f-6a55a76256fd",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "df5508a5-14b6-492d-b01b-93cef49fc9e7"
        },
        "item": {
          "id": "bc5a6f34-abe6-4937-9d14-90502680ac21",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c030e274-7b1a-444b-ba38-79ad5d47c4cb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 71,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5a6f34-abe6-4937-9d14-90502680ac21",
        "cursor": {
          "ref": "ca8a2580-c524-4822-982f-6a55a76256fd",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "df5508a5-14b6-492d-b01b-93cef49fc9e7"
        },
        "item": {
          "id": "bc5a6f34-abe6-4937-9d14-90502680ac21",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c030e274-7b1a-444b-ba38-79ad5d47c4cb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 71,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcba7b8-d5fb-440f-a8e7-6b7d0ff14d52",
        "cursor": {
          "ref": "5949bd01-e998-475d-a8a0-79f95d83afcb",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b38db3f8-7075-4caf-a853-d423559f6a01"
        },
        "item": {
          "id": "0fcba7b8-d5fb-440f-a8e7-6b7d0ff14d52",
          "name": "identifiers"
        },
        "response": {
          "id": "08c34bfb-5fa2-4aec-ba5a-cca98bdb030a",
          "status": "OK",
          "code": 200,
          "responseTime": 310,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020da26f-644c-45a5-a9c9-81672e9f3285",
        "cursor": {
          "ref": "7bc2acdb-429f-49b8-ae7d-b1117bf81495",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "50bb9117-e6d4-4106-8c3e-ea01cca17e89"
        },
        "item": {
          "id": "020da26f-644c-45a5-a9c9-81672e9f3285",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "00ad0f3c-507f-4851-a022-11c7d53c8ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020da26f-644c-45a5-a9c9-81672e9f3285",
        "cursor": {
          "ref": "7bc2acdb-429f-49b8-ae7d-b1117bf81495",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "50bb9117-e6d4-4106-8c3e-ea01cca17e89"
        },
        "item": {
          "id": "020da26f-644c-45a5-a9c9-81672e9f3285",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "00ad0f3c-507f-4851-a022-11c7d53c8ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020da26f-644c-45a5-a9c9-81672e9f3285",
        "cursor": {
          "ref": "7bc2acdb-429f-49b8-ae7d-b1117bf81495",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "50bb9117-e6d4-4106-8c3e-ea01cca17e89"
        },
        "item": {
          "id": "020da26f-644c-45a5-a9c9-81672e9f3285",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "00ad0f3c-507f-4851-a022-11c7d53c8ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66273d47-3195-41fb-a092-db77294f6faf",
        "cursor": {
          "ref": "72f45972-89df-44f4-96e3-2047ffec2cab",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9507bf10-280a-42bb-845c-9a02a2553aa1"
        },
        "item": {
          "id": "66273d47-3195-41fb-a092-db77294f6faf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f8a11af5-dcbc-4045-ac69-5f96760b1829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66273d47-3195-41fb-a092-db77294f6faf",
        "cursor": {
          "ref": "72f45972-89df-44f4-96e3-2047ffec2cab",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9507bf10-280a-42bb-845c-9a02a2553aa1"
        },
        "item": {
          "id": "66273d47-3195-41fb-a092-db77294f6faf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f8a11af5-dcbc-4045-ac69-5f96760b1829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cec7b5-8823-4ac3-8334-a10d2adf47f0",
        "cursor": {
          "ref": "627642e8-3027-4ba5-9d56-d6544e1a6e4d",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3f44fa4a-c47c-4b4d-b9b1-c14c244c7632"
        },
        "item": {
          "id": "d0cec7b5-8823-4ac3-8334-a10d2adf47f0",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "b7a3e964-2295-429d-8c69-ae2339c44a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cec7b5-8823-4ac3-8334-a10d2adf47f0",
        "cursor": {
          "ref": "627642e8-3027-4ba5-9d56-d6544e1a6e4d",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3f44fa4a-c47c-4b4d-b9b1-c14c244c7632"
        },
        "item": {
          "id": "d0cec7b5-8823-4ac3-8334-a10d2adf47f0",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "b7a3e964-2295-429d-8c69-ae2339c44a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9019948b-e0c8-45fd-9fd0-718303c178d3",
        "cursor": {
          "ref": "e58db378-0bfa-48b0-902b-d748419a8210",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1ca45bd4-fafb-4b2e-95da-67b06119fd78"
        },
        "item": {
          "id": "9019948b-e0c8-45fd-9fd0-718303c178d3",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "9368db93-3e2f-458d-9df6-f0a36c20d467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9019948b-e0c8-45fd-9fd0-718303c178d3",
        "cursor": {
          "ref": "e58db378-0bfa-48b0-902b-d748419a8210",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1ca45bd4-fafb-4b2e-95da-67b06119fd78"
        },
        "item": {
          "id": "9019948b-e0c8-45fd-9fd0-718303c178d3",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "9368db93-3e2f-458d-9df6-f0a36c20d467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff3efb0-a706-4b90-bbca-2cf7bda2a635",
        "cursor": {
          "ref": "4a21bba8-36ea-4cfe-8d34-0013ae1aee03",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ca6fd759-9480-42cd-8e0a-715a6cd827e3"
        },
        "item": {
          "id": "cff3efb0-a706-4b90-bbca-2cf7bda2a635",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "826c251d-ef26-4d1d-bf33-0ea08f157afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff3efb0-a706-4b90-bbca-2cf7bda2a635",
        "cursor": {
          "ref": "4a21bba8-36ea-4cfe-8d34-0013ae1aee03",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ca6fd759-9480-42cd-8e0a-715a6cd827e3"
        },
        "item": {
          "id": "cff3efb0-a706-4b90-bbca-2cf7bda2a635",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "826c251d-ef26-4d1d-bf33-0ea08f157afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4d3873-bc33-4ddd-ac03-4930308ff7f7",
        "cursor": {
          "ref": "fb84ddf0-14bc-4aaa-8d7f-f8ca73f4c6d6",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "65ae679f-5509-4991-9ebd-85e854443f97"
        },
        "item": {
          "id": "3d4d3873-bc33-4ddd-ac03-4930308ff7f7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b7825a6e-daf3-4071-853d-c55088ceecfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4d3873-bc33-4ddd-ac03-4930308ff7f7",
        "cursor": {
          "ref": "fb84ddf0-14bc-4aaa-8d7f-f8ca73f4c6d6",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "65ae679f-5509-4991-9ebd-85e854443f97"
        },
        "item": {
          "id": "3d4d3873-bc33-4ddd-ac03-4930308ff7f7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b7825a6e-daf3-4071-853d-c55088ceecfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5308f60b-b615-40c2-8ea7-50b34aac1d04",
        "cursor": {
          "ref": "6e368750-572f-41da-aca6-d4e3f3adedfa",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9bd1a2ba-ab64-45a3-ba38-410779af503c"
        },
        "item": {
          "id": "5308f60b-b615-40c2-8ea7-50b34aac1d04",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "d272f482-d433-4300-8944-10b2223b701c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5308f60b-b615-40c2-8ea7-50b34aac1d04",
        "cursor": {
          "ref": "6e368750-572f-41da-aca6-d4e3f3adedfa",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9bd1a2ba-ab64-45a3-ba38-410779af503c"
        },
        "item": {
          "id": "5308f60b-b615-40c2-8ea7-50b34aac1d04",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "d272f482-d433-4300-8944-10b2223b701c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93c8388-a4e2-4c1a-90da-142e75eedad7",
        "cursor": {
          "ref": "0e7a52c4-2230-429b-9bf5-a7739243fdd0",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1ed58d14-62b1-4e9c-ba1c-c44b481103a4"
        },
        "item": {
          "id": "a93c8388-a4e2-4c1a-90da-142e75eedad7",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "6f0703a1-3c81-47c5-924f-1c82705f4620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93c8388-a4e2-4c1a-90da-142e75eedad7",
        "cursor": {
          "ref": "0e7a52c4-2230-429b-9bf5-a7739243fdd0",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1ed58d14-62b1-4e9c-ba1c-c44b481103a4"
        },
        "item": {
          "id": "a93c8388-a4e2-4c1a-90da-142e75eedad7",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "6f0703a1-3c81-47c5-924f-1c82705f4620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ca9eed-3727-4433-8a96-d5d46dd53a2b",
        "cursor": {
          "ref": "1cdbe433-49f5-4d7b-b3f3-9aacb1f16a0f",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0f09bcb2-f05c-4bfa-92bc-97151687b9a0"
        },
        "item": {
          "id": "55ca9eed-3727-4433-8a96-d5d46dd53a2b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ac36cbda-6c52-44e7-8f0a-6db66faf27f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ca9eed-3727-4433-8a96-d5d46dd53a2b",
        "cursor": {
          "ref": "1cdbe433-49f5-4d7b-b3f3-9aacb1f16a0f",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0f09bcb2-f05c-4bfa-92bc-97151687b9a0"
        },
        "item": {
          "id": "55ca9eed-3727-4433-8a96-d5d46dd53a2b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ac36cbda-6c52-44e7-8f0a-6db66faf27f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e71f2c-9b30-48d5-8456-e766f23d4775",
        "cursor": {
          "ref": "43e562a2-bb68-418d-9ecb-6043dd3077f2",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "06fbba40-70ca-4263-8178-dd22a8782986"
        },
        "item": {
          "id": "58e71f2c-9b30-48d5-8456-e766f23d4775",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "a28b0c63-77c9-497c-92bf-9e8d6bbb4fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e71f2c-9b30-48d5-8456-e766f23d4775",
        "cursor": {
          "ref": "43e562a2-bb68-418d-9ecb-6043dd3077f2",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "06fbba40-70ca-4263-8178-dd22a8782986"
        },
        "item": {
          "id": "58e71f2c-9b30-48d5-8456-e766f23d4775",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "a28b0c63-77c9-497c-92bf-9e8d6bbb4fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d1d376-1a8f-4cdc-b4f1-08783ed9f87d",
        "cursor": {
          "ref": "539761d0-46bc-4b2b-be06-99020776c7e2",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7eee781b-cce9-4fef-99d1-22571e691087"
        },
        "item": {
          "id": "44d1d376-1a8f-4cdc-b4f1-08783ed9f87d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "3a91729b-03e7-479f-8e90-9e092087f88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d1d376-1a8f-4cdc-b4f1-08783ed9f87d",
        "cursor": {
          "ref": "539761d0-46bc-4b2b-be06-99020776c7e2",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7eee781b-cce9-4fef-99d1-22571e691087"
        },
        "item": {
          "id": "44d1d376-1a8f-4cdc-b4f1-08783ed9f87d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "3a91729b-03e7-479f-8e90-9e092087f88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ff8e02-ca67-43e0-8049-6d21fc61d5bb",
        "cursor": {
          "ref": "c3629029-74ab-4694-92b0-c11a1a6126ed",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "89d596f3-f7c4-4965-bc6e-26ea7e9e9298"
        },
        "item": {
          "id": "48ff8e02-ca67-43e0-8049-6d21fc61d5bb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "83811b23-37d0-4615-84be-85209b9d60a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ff8e02-ca67-43e0-8049-6d21fc61d5bb",
        "cursor": {
          "ref": "c3629029-74ab-4694-92b0-c11a1a6126ed",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "89d596f3-f7c4-4965-bc6e-26ea7e9e9298"
        },
        "item": {
          "id": "48ff8e02-ca67-43e0-8049-6d21fc61d5bb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "83811b23-37d0-4615-84be-85209b9d60a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c74ea3-9c01-4e98-9dc9-559a58e63671",
        "cursor": {
          "ref": "e4b0454e-c9b2-4433-9f17-8e301ecf7296",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9f5c76dd-d5a7-496e-b42d-edf43a61da8a"
        },
        "item": {
          "id": "39c74ea3-9c01-4e98-9dc9-559a58e63671",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8f6a24c4-7fd1-40bc-a3db-4964086d18dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c74ea3-9c01-4e98-9dc9-559a58e63671",
        "cursor": {
          "ref": "e4b0454e-c9b2-4433-9f17-8e301ecf7296",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9f5c76dd-d5a7-496e-b42d-edf43a61da8a"
        },
        "item": {
          "id": "39c74ea3-9c01-4e98-9dc9-559a58e63671",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8f6a24c4-7fd1-40bc-a3db-4964086d18dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b511b01-faba-4afa-b0fe-9761e33cdd84",
        "cursor": {
          "ref": "106ae0c3-5658-4842-b2ae-bc4ee574a944",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8857cf89-0798-4efd-a304-e259bf54a795"
        },
        "item": {
          "id": "4b511b01-faba-4afa-b0fe-9761e33cdd84",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "1c3ffcbe-3a0b-462d-a6b6-054ebc0527f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b511b01-faba-4afa-b0fe-9761e33cdd84",
        "cursor": {
          "ref": "106ae0c3-5658-4842-b2ae-bc4ee574a944",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8857cf89-0798-4efd-a304-e259bf54a795"
        },
        "item": {
          "id": "4b511b01-faba-4afa-b0fe-9761e33cdd84",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "1c3ffcbe-3a0b-462d-a6b6-054ebc0527f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eba8c3a-fb27-453e-8363-ac7c729b5cf6",
        "cursor": {
          "ref": "dffe463b-8e20-4737-a5af-d01ce639b791",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dc705d3e-a2fc-4429-b38b-766072c7cec8"
        },
        "item": {
          "id": "3eba8c3a-fb27-453e-8363-ac7c729b5cf6",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "8818b7bb-59aa-4214-8849-766e3ad1e17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eba8c3a-fb27-453e-8363-ac7c729b5cf6",
        "cursor": {
          "ref": "dffe463b-8e20-4737-a5af-d01ce639b791",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dc705d3e-a2fc-4429-b38b-766072c7cec8"
        },
        "item": {
          "id": "3eba8c3a-fb27-453e-8363-ac7c729b5cf6",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "8818b7bb-59aa-4214-8849-766e3ad1e17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904a627f-15fe-4044-8bc0-bded5ff6bb4c",
        "cursor": {
          "ref": "59409bda-8589-4639-9ebb-49771f028ed5",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4fe2e57e-9df3-47d0-b949-51163963eeed"
        },
        "item": {
          "id": "904a627f-15fe-4044-8bc0-bded5ff6bb4c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9881b381-296e-4f5c-9bb5-c924b49582c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904a627f-15fe-4044-8bc0-bded5ff6bb4c",
        "cursor": {
          "ref": "59409bda-8589-4639-9ebb-49771f028ed5",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4fe2e57e-9df3-47d0-b949-51163963eeed"
        },
        "item": {
          "id": "904a627f-15fe-4044-8bc0-bded5ff6bb4c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9881b381-296e-4f5c-9bb5-c924b49582c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5a38ac-9d03-4c39-8744-1a8fa25c2373",
        "cursor": {
          "ref": "dcbc8e5b-d4ee-480c-9638-4abf019f23fe",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2e484cfe-68e7-4d8a-bbce-4974324be8be"
        },
        "item": {
          "id": "1f5a38ac-9d03-4c39-8744-1a8fa25c2373",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b893fdef-acc9-4244-b15e-ecfc1668d358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5a38ac-9d03-4c39-8744-1a8fa25c2373",
        "cursor": {
          "ref": "dcbc8e5b-d4ee-480c-9638-4abf019f23fe",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2e484cfe-68e7-4d8a-bbce-4974324be8be"
        },
        "item": {
          "id": "1f5a38ac-9d03-4c39-8744-1a8fa25c2373",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b893fdef-acc9-4244-b15e-ecfc1668d358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7fa300-6a2d-4c25-8056-9ee3890958e4",
        "cursor": {
          "ref": "c5488935-6e4e-4b87-b973-8c7f0f884448",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f1a86676-899e-4d62-97cf-dca87461bf4e"
        },
        "item": {
          "id": "8a7fa300-6a2d-4c25-8056-9ee3890958e4",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "c1a3808a-0caf-45d5-8b05-caa0e6023779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7fa300-6a2d-4c25-8056-9ee3890958e4",
        "cursor": {
          "ref": "c5488935-6e4e-4b87-b973-8c7f0f884448",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f1a86676-899e-4d62-97cf-dca87461bf4e"
        },
        "item": {
          "id": "8a7fa300-6a2d-4c25-8056-9ee3890958e4",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "c1a3808a-0caf-45d5-8b05-caa0e6023779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2a6b92-a38c-4147-8f4c-43336a0dbd0c",
        "cursor": {
          "ref": "a8662539-4364-4908-aabb-60991c930cff",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "148ed600-3ffd-400a-9481-cf224d0c4f0a"
        },
        "item": {
          "id": "ce2a6b92-a38c-4147-8f4c-43336a0dbd0c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2acf52c6-3b97-4298-b20b-11850a5a0125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2a6b92-a38c-4147-8f4c-43336a0dbd0c",
        "cursor": {
          "ref": "a8662539-4364-4908-aabb-60991c930cff",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "148ed600-3ffd-400a-9481-cf224d0c4f0a"
        },
        "item": {
          "id": "ce2a6b92-a38c-4147-8f4c-43336a0dbd0c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2acf52c6-3b97-4298-b20b-11850a5a0125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a479ab6-e166-40a5-bae0-1963409d821e",
        "cursor": {
          "ref": "a6da0881-f591-42df-b7fb-03d0ef96b85c",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "94364c13-bf44-4106-a458-0bb6aaafd64c"
        },
        "item": {
          "id": "9a479ab6-e166-40a5-bae0-1963409d821e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6fa40c1d-6ec9-4933-9b52-41ffd2cb5987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a479ab6-e166-40a5-bae0-1963409d821e",
        "cursor": {
          "ref": "a6da0881-f591-42df-b7fb-03d0ef96b85c",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "94364c13-bf44-4106-a458-0bb6aaafd64c"
        },
        "item": {
          "id": "9a479ab6-e166-40a5-bae0-1963409d821e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6fa40c1d-6ec9-4933-9b52-41ffd2cb5987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7a8cdf-d873-48a2-9a5c-6bcc9e568383",
        "cursor": {
          "ref": "7d438da6-f063-40f8-b6c8-00d959c5fdc2",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a35df8bc-5904-42d1-9f57-050927cac745"
        },
        "item": {
          "id": "2a7a8cdf-d873-48a2-9a5c-6bcc9e568383",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "b218895f-9f41-492b-9d1f-3a00a4651dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7a8cdf-d873-48a2-9a5c-6bcc9e568383",
        "cursor": {
          "ref": "7d438da6-f063-40f8-b6c8-00d959c5fdc2",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a35df8bc-5904-42d1-9f57-050927cac745"
        },
        "item": {
          "id": "2a7a8cdf-d873-48a2-9a5c-6bcc9e568383",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "b218895f-9f41-492b-9d1f-3a00a4651dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6f5d83-ff6d-4bc7-a619-9407cf060ee9",
        "cursor": {
          "ref": "87906eea-635e-4683-b8e0-072207c2bdac",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d40f1012-8118-41d6-9737-7bcebb1fbb51"
        },
        "item": {
          "id": "2b6f5d83-ff6d-4bc7-a619-9407cf060ee9",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "14b4e9a3-fe1a-4815-a6cb-85e8db81a32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6f5d83-ff6d-4bc7-a619-9407cf060ee9",
        "cursor": {
          "ref": "87906eea-635e-4683-b8e0-072207c2bdac",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d40f1012-8118-41d6-9737-7bcebb1fbb51"
        },
        "item": {
          "id": "2b6f5d83-ff6d-4bc7-a619-9407cf060ee9",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "14b4e9a3-fe1a-4815-a6cb-85e8db81a32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f0ede1-0976-4cb4-8b81-84d0736b0224",
        "cursor": {
          "ref": "66851a94-6b53-466d-8808-b4eb233c66af",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "77fa5d29-ba95-4dd5-87ff-93e8e288a4b1"
        },
        "item": {
          "id": "08f0ede1-0976-4cb4-8b81-84d0736b0224",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9d7a68a7-d972-4e91-9bfb-75d4a51c1aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f0ede1-0976-4cb4-8b81-84d0736b0224",
        "cursor": {
          "ref": "66851a94-6b53-466d-8808-b4eb233c66af",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "77fa5d29-ba95-4dd5-87ff-93e8e288a4b1"
        },
        "item": {
          "id": "08f0ede1-0976-4cb4-8b81-84d0736b0224",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9d7a68a7-d972-4e91-9bfb-75d4a51c1aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41dadacf-2c1d-49c3-9929-d800f8739ab0",
        "cursor": {
          "ref": "1a425a09-a533-4528-87a4-a805f6cf0f8e",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f002cdfc-775a-4832-8a49-93c3dadc0079"
        },
        "item": {
          "id": "41dadacf-2c1d-49c3-9929-d800f8739ab0",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "ad3e167a-b657-40de-be87-8a6ca31097d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41dadacf-2c1d-49c3-9929-d800f8739ab0",
        "cursor": {
          "ref": "1a425a09-a533-4528-87a4-a805f6cf0f8e",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f002cdfc-775a-4832-8a49-93c3dadc0079"
        },
        "item": {
          "id": "41dadacf-2c1d-49c3-9929-d800f8739ab0",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "ad3e167a-b657-40de-be87-8a6ca31097d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1076dfc2-51b6-4f2b-b8c8-c8dc2da0c8e2",
        "cursor": {
          "ref": "bd6e5c43-713f-458a-ab78-d13d6a1f4712",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "34c579a1-c5c7-47de-8e44-41b0a2a7c435"
        },
        "item": {
          "id": "1076dfc2-51b6-4f2b-b8c8-c8dc2da0c8e2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e44f825d-1280-4bb1-8edf-27eada0295f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1076dfc2-51b6-4f2b-b8c8-c8dc2da0c8e2",
        "cursor": {
          "ref": "bd6e5c43-713f-458a-ab78-d13d6a1f4712",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "34c579a1-c5c7-47de-8e44-41b0a2a7c435"
        },
        "item": {
          "id": "1076dfc2-51b6-4f2b-b8c8-c8dc2da0c8e2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e44f825d-1280-4bb1-8edf-27eada0295f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23621408-dcd9-4435-a877-85ed89eaf19c",
        "cursor": {
          "ref": "b4c908ca-c35b-4e75-a52a-38245a6db644",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "708c742c-aced-47fd-a3c1-b9308cc5fb62"
        },
        "item": {
          "id": "23621408-dcd9-4435-a877-85ed89eaf19c",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "50e0622e-0e20-4037-992f-21dfeec7e9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23621408-dcd9-4435-a877-85ed89eaf19c",
        "cursor": {
          "ref": "b4c908ca-c35b-4e75-a52a-38245a6db644",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "708c742c-aced-47fd-a3c1-b9308cc5fb62"
        },
        "item": {
          "id": "23621408-dcd9-4435-a877-85ed89eaf19c",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "50e0622e-0e20-4037-992f-21dfeec7e9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22299893-5763-4201-b224-f83f95e582e4",
        "cursor": {
          "ref": "e23fa53b-8169-4800-b4b4-d044bc90110c",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "02cd1275-e307-485a-96ed-6f768e6897b1"
        },
        "item": {
          "id": "22299893-5763-4201-b224-f83f95e582e4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c22b3008-6414-4114-935b-f19abc161b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 752,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22299893-5763-4201-b224-f83f95e582e4",
        "cursor": {
          "ref": "e23fa53b-8169-4800-b4b4-d044bc90110c",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "02cd1275-e307-485a-96ed-6f768e6897b1"
        },
        "item": {
          "id": "22299893-5763-4201-b224-f83f95e582e4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c22b3008-6414-4114-935b-f19abc161b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 752,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f13cc82-cf51-40ac-bf96-f81e113ab1d6",
        "cursor": {
          "ref": "f1b41ff5-85b9-4dd8-8a92-bcee9ce9e8a5",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "09431729-aa05-4e09-ab9b-59360d0811ff"
        },
        "item": {
          "id": "9f13cc82-cf51-40ac-bf96-f81e113ab1d6",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "9faff1d9-27ef-411c-b12b-1a7ed33f6485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f13cc82-cf51-40ac-bf96-f81e113ab1d6",
        "cursor": {
          "ref": "f1b41ff5-85b9-4dd8-8a92-bcee9ce9e8a5",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "09431729-aa05-4e09-ab9b-59360d0811ff"
        },
        "item": {
          "id": "9f13cc82-cf51-40ac-bf96-f81e113ab1d6",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "9faff1d9-27ef-411c-b12b-1a7ed33f6485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24c2153-7c65-418b-9b48-bd529013a098",
        "cursor": {
          "ref": "d31def5d-ab4b-4117-9deb-4b4633322662",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "27272ee5-33cb-4df5-9fb2-331fc35ec8f0"
        },
        "item": {
          "id": "e24c2153-7c65-418b-9b48-bd529013a098",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "e29b2647-3ca8-4aba-a9da-6dd9522b8007",
          "status": "Created",
          "code": 201,
          "responseTime": 665,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e24c2153-7c65-418b-9b48-bd529013a098",
        "cursor": {
          "ref": "d31def5d-ab4b-4117-9deb-4b4633322662",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "27272ee5-33cb-4df5-9fb2-331fc35ec8f0"
        },
        "item": {
          "id": "e24c2153-7c65-418b-9b48-bd529013a098",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "e29b2647-3ca8-4aba-a9da-6dd9522b8007",
          "status": "Created",
          "code": 201,
          "responseTime": 665,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "4f964fc3-4179-46d0-ac73-5fcb36dc6372",
        "cursor": {
          "ref": "2f70101c-00e0-44e1-878a-f2675d5757c4",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "65957d72-7e32-48cc-b58d-9e56c3eaa6f4"
        },
        "item": {
          "id": "4f964fc3-4179-46d0-ac73-5fcb36dc6372",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "0dda5c91-91c0-4dbe-9ba9-85aec1a8fb43",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "4f964fc3-4179-46d0-ac73-5fcb36dc6372",
        "cursor": {
          "ref": "2f70101c-00e0-44e1-878a-f2675d5757c4",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "65957d72-7e32-48cc-b58d-9e56c3eaa6f4"
        },
        "item": {
          "id": "4f964fc3-4179-46d0-ac73-5fcb36dc6372",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "0dda5c91-91c0-4dbe-9ba9-85aec1a8fb43",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "df5b2ff6-a1a5-4bb4-b6f8-1f5166584c8b",
        "cursor": {
          "ref": "723d5a4e-56f8-4686-8a1a-57688abf7adc",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7bed834f-6ced-4221-8a23-c791cf8084e8"
        },
        "item": {
          "id": "df5b2ff6-a1a5-4bb4-b6f8-1f5166584c8b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "880ecad5-4cf8-4243-b8f0-5734992c85fd",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "df5b2ff6-a1a5-4bb4-b6f8-1f5166584c8b",
        "cursor": {
          "ref": "723d5a4e-56f8-4686-8a1a-57688abf7adc",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7bed834f-6ced-4221-8a23-c791cf8084e8"
        },
        "item": {
          "id": "df5b2ff6-a1a5-4bb4-b6f8-1f5166584c8b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "880ecad5-4cf8-4243-b8f0-5734992c85fd",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "d4010ca8-13ea-4e31-b3a5-2ad7047372ab",
        "cursor": {
          "ref": "c11292f5-da52-4fc8-88d1-6932a35e3e80",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "849e3910-6b73-47f3-b457-86c73fc3c0be"
        },
        "item": {
          "id": "d4010ca8-13ea-4e31-b3a5-2ad7047372ab",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "de5e3a9b-8051-4470-856f-257217c293ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4010ca8-13ea-4e31-b3a5-2ad7047372ab",
        "cursor": {
          "ref": "c11292f5-da52-4fc8-88d1-6932a35e3e80",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "849e3910-6b73-47f3-b457-86c73fc3c0be"
        },
        "item": {
          "id": "d4010ca8-13ea-4e31-b3a5-2ad7047372ab",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "de5e3a9b-8051-4470-856f-257217c293ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a0328d-419d-444f-8717-7bd2216e9585",
        "cursor": {
          "ref": "6d5890eb-13dd-453c-a9a1-69da7ca08c93",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "be66b725-b204-48f6-a270-e8cad87b54c9"
        },
        "item": {
          "id": "84a0328d-419d-444f-8717-7bd2216e9585",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4ef0700a-11d4-4209-8fa9-37736ae1b478",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 69,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a0328d-419d-444f-8717-7bd2216e9585",
        "cursor": {
          "ref": "6d5890eb-13dd-453c-a9a1-69da7ca08c93",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "be66b725-b204-48f6-a270-e8cad87b54c9"
        },
        "item": {
          "id": "84a0328d-419d-444f-8717-7bd2216e9585",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4ef0700a-11d4-4209-8fa9-37736ae1b478",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 69,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1453dd4e-cf20-43f1-aaf7-b041a99737c0",
        "cursor": {
          "ref": "a1d382de-5b23-4aa1-9ad7-5a9b7ddf5421",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6f4d066e-212d-4601-865c-eda8b5d6673d"
        },
        "item": {
          "id": "1453dd4e-cf20-43f1-aaf7-b041a99737c0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a8c07d35-f8ac-4ab0-8272-54eff9520552",
          "status": "Created",
          "code": 201,
          "responseTime": 697,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "1453dd4e-cf20-43f1-aaf7-b041a99737c0",
        "cursor": {
          "ref": "a1d382de-5b23-4aa1-9ad7-5a9b7ddf5421",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6f4d066e-212d-4601-865c-eda8b5d6673d"
        },
        "item": {
          "id": "1453dd4e-cf20-43f1-aaf7-b041a99737c0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a8c07d35-f8ac-4ab0-8272-54eff9520552",
          "status": "Created",
          "code": 201,
          "responseTime": 697,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "161848ac-0f9d-4406-8f5d-f23546dcbad7",
        "cursor": {
          "ref": "b5cd1070-1400-4fb4-9b1b-ac289ae3fb75",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0f050f94-9506-413d-ab53-283ff11e3bc9"
        },
        "item": {
          "id": "161848ac-0f9d-4406-8f5d-f23546dcbad7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "8be34f61-ce1c-4ec4-ba2e-11dab60e93e2",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "161848ac-0f9d-4406-8f5d-f23546dcbad7",
        "cursor": {
          "ref": "b5cd1070-1400-4fb4-9b1b-ac289ae3fb75",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0f050f94-9506-413d-ab53-283ff11e3bc9"
        },
        "item": {
          "id": "161848ac-0f9d-4406-8f5d-f23546dcbad7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "8be34f61-ce1c-4ec4-ba2e-11dab60e93e2",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "02b42622-e5f1-4277-8b3d-0a3a796290b9",
        "cursor": {
          "ref": "1194a274-e885-4a0a-9c95-21b82ce11282",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c135c6ed-82c3-4e10-ac20-0ddd15560e5a"
        },
        "item": {
          "id": "02b42622-e5f1-4277-8b3d-0a3a796290b9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a0889ee2-10f4-4ebe-a8da-4c68f04a697d",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b42622-e5f1-4277-8b3d-0a3a796290b9",
        "cursor": {
          "ref": "1194a274-e885-4a0a-9c95-21b82ce11282",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c135c6ed-82c3-4e10-ac20-0ddd15560e5a"
        },
        "item": {
          "id": "02b42622-e5f1-4277-8b3d-0a3a796290b9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a0889ee2-10f4-4ebe-a8da-4c68f04a697d",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7317a634-20e5-4f29-a8c0-76b064824c06",
        "cursor": {
          "ref": "56e49c32-f907-4364-88d2-03ddeb3a67bf",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e55cc58f-315a-4ed0-a8d5-cb9ffeb3e188"
        },
        "item": {
          "id": "7317a634-20e5-4f29-a8c0-76b064824c06",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "ed43bb2d-7684-41c7-89a8-d84724ff711c",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7317a634-20e5-4f29-a8c0-76b064824c06",
        "cursor": {
          "ref": "56e49c32-f907-4364-88d2-03ddeb3a67bf",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e55cc58f-315a-4ed0-a8d5-cb9ffeb3e188"
        },
        "item": {
          "id": "7317a634-20e5-4f29-a8c0-76b064824c06",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "ed43bb2d-7684-41c7-89a8-d84724ff711c",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "84adb207-05c8-48ef-b262-d3b4da1ff0bc",
        "cursor": {
          "ref": "e68b130c-f6b7-401a-a89c-456268c7a513",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "be1f0426-8c4c-438b-b710-f96c13bc3de1"
        },
        "item": {
          "id": "84adb207-05c8-48ef-b262-d3b4da1ff0bc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6e298fb6-f024-4d6a-9c72-934f020a0291",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "84adb207-05c8-48ef-b262-d3b4da1ff0bc",
        "cursor": {
          "ref": "e68b130c-f6b7-401a-a89c-456268c7a513",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "be1f0426-8c4c-438b-b710-f96c13bc3de1"
        },
        "item": {
          "id": "84adb207-05c8-48ef-b262-d3b4da1ff0bc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6e298fb6-f024-4d6a-9c72-934f020a0291",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af5c6aa-3ab1-43c4-9dea-2831e987cb7b",
        "cursor": {
          "ref": "965e3482-032c-4b0c-bc21-8abecb45778e",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "82562e34-186a-4b8a-a773-4958aa6a2da8"
        },
        "item": {
          "id": "8af5c6aa-3ab1-43c4-9dea-2831e987cb7b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6afc77ad-7adb-4f5b-b1db-3bc815953dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8af5c6aa-3ab1-43c4-9dea-2831e987cb7b",
        "cursor": {
          "ref": "965e3482-032c-4b0c-bc21-8abecb45778e",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "82562e34-186a-4b8a-a773-4958aa6a2da8"
        },
        "item": {
          "id": "8af5c6aa-3ab1-43c4-9dea-2831e987cb7b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6afc77ad-7adb-4f5b-b1db-3bc815953dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5b1292c6-984b-4bd3-992e-322d3c336b2a",
        "cursor": {
          "ref": "f22f938e-68f5-4315-bdfc-980287e77e4a",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1f15277f-717c-4c68-bcca-e7fef5ac0fbc"
        },
        "item": {
          "id": "5b1292c6-984b-4bd3-992e-322d3c336b2a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2a4204eb-0c95-44ac-9053-8debc87553e7",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5b1292c6-984b-4bd3-992e-322d3c336b2a",
        "cursor": {
          "ref": "f22f938e-68f5-4315-bdfc-980287e77e4a",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1f15277f-717c-4c68-bcca-e7fef5ac0fbc"
        },
        "item": {
          "id": "5b1292c6-984b-4bd3-992e-322d3c336b2a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2a4204eb-0c95-44ac-9053-8debc87553e7",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "14e3382e-038b-4ac9-a88e-d1314ecaa73b",
        "cursor": {
          "ref": "69e83de4-79de-4915-b601-75e5d23ca641",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "15692906-e894-4566-8f67-6d12b9708f1b"
        },
        "item": {
          "id": "14e3382e-038b-4ac9-a88e-d1314ecaa73b",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "2791593a-0814-44ac-ab55-c1d71ac91deb",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "14e3382e-038b-4ac9-a88e-d1314ecaa73b",
        "cursor": {
          "ref": "69e83de4-79de-4915-b601-75e5d23ca641",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "15692906-e894-4566-8f67-6d12b9708f1b"
        },
        "item": {
          "id": "14e3382e-038b-4ac9-a88e-d1314ecaa73b",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "2791593a-0814-44ac-ab55-c1d71ac91deb",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a3db9def-22f5-409a-b609-1f6fbe287eb2",
        "cursor": {
          "ref": "0a87ec58-46df-4d64-a856-8b7d29d776e7",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "82aae84c-d0d8-419a-9747-986039bf2226"
        },
        "item": {
          "id": "a3db9def-22f5-409a-b609-1f6fbe287eb2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8a7ae6fa-4226-4865-b827-6b550209ceef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3db9def-22f5-409a-b609-1f6fbe287eb2",
        "cursor": {
          "ref": "0a87ec58-46df-4d64-a856-8b7d29d776e7",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "82aae84c-d0d8-419a-9747-986039bf2226"
        },
        "item": {
          "id": "a3db9def-22f5-409a-b609-1f6fbe287eb2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8a7ae6fa-4226-4865-b827-6b550209ceef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb31429f-9d19-413c-9988-a72808fe6874",
        "cursor": {
          "ref": "be766e6f-ced1-4d7e-9a8c-f3311fa6517d",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1bc0e711-f523-418c-8b53-38a9f9e17287"
        },
        "item": {
          "id": "fb31429f-9d19-413c-9988-a72808fe6874",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5ca336be-1ddc-41e3-9b2a-8615948db759",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95eada94-fa0a-4990-ad11-8f6ea7039c7a",
        "cursor": {
          "ref": "a40c8416-c9e9-4388-bb5e-5116be7cae58",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "33680523-495a-4caa-b4cb-f0488d9a77d7"
        },
        "item": {
          "id": "95eada94-fa0a-4990-ad11-8f6ea7039c7a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7d8a832d-7d7a-415e-82fd-e4486d43f07b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95eada94-fa0a-4990-ad11-8f6ea7039c7a",
        "cursor": {
          "ref": "a40c8416-c9e9-4388-bb5e-5116be7cae58",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "33680523-495a-4caa-b4cb-f0488d9a77d7"
        },
        "item": {
          "id": "95eada94-fa0a-4990-ad11-8f6ea7039c7a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7d8a832d-7d7a-415e-82fd-e4486d43f07b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e73cc18-e62b-4e9b-9bb3-231d94a1fce2",
        "cursor": {
          "ref": "073d5982-f09e-4f6b-9b01-2aee8ce44992",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "322e61e7-fcb6-4940-b523-d1bb7ae143b8"
        },
        "item": {
          "id": "6e73cc18-e62b-4e9b-9bb3-231d94a1fce2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "45597c7b-0215-4076-8de9-0e3fc3d6b05c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 69,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0f70cc-a4bd-4bd9-bb7f-f7b4d5a63e89",
        "cursor": {
          "ref": "ab094f2e-863e-4dab-a0ce-6ababe9f0b8e",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8f3ecf4d-bf2d-4fab-b0e5-94898fa5ccec"
        },
        "item": {
          "id": "4f0f70cc-a4bd-4bd9-bb7f-f7b4d5a63e89",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1df027f4-2da7-4dc6-9502-a7a1da496f4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0f70cc-a4bd-4bd9-bb7f-f7b4d5a63e89",
        "cursor": {
          "ref": "ab094f2e-863e-4dab-a0ce-6ababe9f0b8e",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8f3ecf4d-bf2d-4fab-b0e5-94898fa5ccec"
        },
        "item": {
          "id": "4f0f70cc-a4bd-4bd9-bb7f-f7b4d5a63e89",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1df027f4-2da7-4dc6-9502-a7a1da496f4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321be4cd-5eb2-4078-b163-694e11ec3918",
        "cursor": {
          "ref": "0e5d53df-a5ec-4a94-9613-7f0c9f195771",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5e034157-13b1-464b-afb2-0485d3fe29e4"
        },
        "item": {
          "id": "321be4cd-5eb2-4078-b163-694e11ec3918",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8058a465-34f6-4326-9786-57b0b8ddb243",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 72,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bff1bd2-c24e-4393-9749-62bd4c8a2a59",
        "cursor": {
          "ref": "a8cc9f87-100e-4d77-9b66-9a0e47f9335c",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3ded6aa9-3a1c-48b6-a2e0-e9835a79b25c"
        },
        "item": {
          "id": "2bff1bd2-c24e-4393-9749-62bd4c8a2a59",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "61a74b48-7fb9-42f0-ac7e-bf013c7e4e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "2bff1bd2-c24e-4393-9749-62bd4c8a2a59",
        "cursor": {
          "ref": "a8cc9f87-100e-4d77-9b66-9a0e47f9335c",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3ded6aa9-3a1c-48b6-a2e0-e9835a79b25c"
        },
        "item": {
          "id": "2bff1bd2-c24e-4393-9749-62bd4c8a2a59",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "61a74b48-7fb9-42f0-ac7e-bf013c7e4e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "1c47ba02-39a2-4073-af33-ea03b8973e90",
        "cursor": {
          "ref": "ce1fecf5-3f09-4b32-9e28-46db849d4170",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "72a82c82-fee3-4915-a6cb-b8ff6f17173c"
        },
        "item": {
          "id": "1c47ba02-39a2-4073-af33-ea03b8973e90",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c72ae3f1-04a8-432c-9cb1-f75d6ec87f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "00c87832-865b-4043-b34b-4cfc596421e4",
        "cursor": {
          "ref": "2acb8066-11a1-4275-9759-85c513f4c07a",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0f5e70ba-0020-463a-bae0-6b460d6148be"
        },
        "item": {
          "id": "00c87832-865b-4043-b34b-4cfc596421e4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "53b728f2-d3b6-4dd1-b8ff-15500fb16b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c87832-865b-4043-b34b-4cfc596421e4",
        "cursor": {
          "ref": "2acb8066-11a1-4275-9759-85c513f4c07a",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0f5e70ba-0020-463a-bae0-6b460d6148be"
        },
        "item": {
          "id": "00c87832-865b-4043-b34b-4cfc596421e4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "53b728f2-d3b6-4dd1-b8ff-15500fb16b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb3e642-f2ea-4f7c-bba1-22760965eac6",
        "cursor": {
          "ref": "c216079f-4af2-43b8-ae0b-c6b623a5ed5c",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6db31352-740a-493b-b776-bad654c7d8e2"
        },
        "item": {
          "id": "8eb3e642-f2ea-4f7c-bba1-22760965eac6",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "b0746c42-7555-47c4-b98d-e5758a948cd0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}