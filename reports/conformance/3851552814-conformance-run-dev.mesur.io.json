{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a4b57fc3-2e04-4b4b-8472-f2e4c6680eb0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "87a983e3-6d27-4e86-a457-d2e47b8b205f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4125833-9686-4bd8-9477-adda43ed4a7c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "edba9c79-1b78-447b-9096-eb61910e9b72"
                }
              }
            ]
          },
          {
            "id": "361280f1-5f27-419f-8c0f-366ed475ba07",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2b4cc064-8f09-4905-83b1-ec39c6dac84f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4382c05d-8db5-45b5-8fd9-3f841d70a7af"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "51e68ac1-126b-4c0d-9723-28eb541b9f63",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1395326a-be85-452b-95e9-c24ace57b841",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62f03da5-3f66-4556-99b0-1774c9d4b690",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f797da86-5e2b-490b-8d1e-ae4a06c028d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f55b9b1d-e1c7-4bf8-baf6-3e9f52c85560"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "03b85036-15a9-4c17-9c48-04f9a7ac38f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fcb9524b-1487-4898-b846-65bdb3506974"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1844debb-ed51-437f-ade3-653a2152436c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a5b3c4cf-41bd-4950-ba02-d69102c2d7a1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8bbb4892-487f-40c9-8b4c-bda2b132ea68",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fbc88df3-762a-4964-887f-fa9125cf0e2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d8d622c-2311-46d5-80ae-66a3f30f8ce1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd891142-a27a-4c7d-8eb3-fa335c78ba3c"
            }
          }
        ]
      },
      {
        "id": "dadfaab1-8db0-4cde-928b-402afc85e3ae",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4fe0d7c8-5aa0-4b05-b581-02b80ed2848b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e021b8a-0858-4d7d-ac44-63844c0f5685",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84c6bd65-5ab8-48df-95c4-1116dc5c37a5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8536fc-71c9-4dd4-9fe7-4856aba309f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9d050c8-a5ff-42c3-8c24-e833847041c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5659738e-3892-4cf9-a705-77684fd9c7ab",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66863c9-50af-4810-879a-0d5465b8cc56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd5a224c-7740-462f-a253-f6f59e135247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35236c8-f5d4-4392-9f8c-f3456720bc61",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613907a5-386b-4a39-aeeb-fe27b9683775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c53cd8fd-9bf6-4c9a-b37f-8f1558ff63cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b1c4d99d-dc66-428c-9820-61f5977a4a71",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "107be129-ec6b-4952-83fb-bbd869e8a90e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52567d9-0c2c-451a-9b19-557728c22cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6eaa7ef6-02a7-404c-a8c5-f009ba53f2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c6be38-ddbb-42b8-8ba4-e6ea3cbdeb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32aa0b4-a936-4da6-b493-dcd19702ed5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4233be-1170-491a-ab05-f8f2b3b13ba9",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fa5c83-af3a-4d45-90fe-5cf61bd29909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ddc04d1-c8ab-4d27-958f-a3685d21dc60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a30f41-b451-4205-a0e7-5623659fe810",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "593c4593-14cd-43d1-ad46-4aa07a5d052f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "252f3ac5-28cc-47f8-90b8-0dcda605ab37",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f4c5ce56-a7f6-4527-9839-42f78f17a90c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70a27fd8-572d-4e3c-bd57-b99dd9e45001",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c796231d-18d7-4951-81b8-63bd66fcb455"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d571664-71fe-4775-b0a1-269b2da497f7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5c736cfb-abf0-4f9c-bfb8-f6499d8c1641"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd7ed7a5-e459-4d0a-9b01-7e31f2188a20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff8c0d68-29ac-4e93-a44c-5385136cf616"
            }
          }
        ]
      },
      {
        "id": "7235b33b-4c61-46f4-930d-32060c0a39d3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4bd5c792-8e21-4c20-82d0-f04453b53b6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e2adef5-1640-403b-8947-87e5f7e76b94",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0bd29927-e41e-4351-8c44-3528d686f67d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1335f9c-da4d-4e7f-9f20-8fb6114e43a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29acda0e-5446-441a-9c7d-cb7520890928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603152da-7945-4383-864b-8cfe779be56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f28d22a3-b23d-4685-8dda-580c80d38e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8aa1585-c88f-4909-9742-c67735093221",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46f39d7-a297-480b-973a-baf70617afe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1da1b7-6fbf-47db-9fec-4d5b4f90e3e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05ba4ca-0d85-4515-80d7-df1043e63b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e8e98fd-fb6b-4991-8bbe-be56de5da8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2bb883-d0e1-49e2-8497-06af09088f12",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcf1470-45b9-4a67-af76-6f5b977bc4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f654d9-b721-48a9-b8dc-92be3dd450e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9bcc6e-90b6-4564-9eca-791c92e39c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3302793-07ab-4c06-acf4-50e8f16cd240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f121152-ee78-4111-8323-84e291c1e93b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9770d9-f14b-4d57-98fa-121f7cd2796b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba29e9f-de4c-4b3e-a59a-75dab0fe5b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c047c772-2d8f-43b4-bd56-73675ea935dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "208d3d8b-5106-41de-a886-1e651c75ada0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fe6ad4-9b94-4a24-a1cd-59917b062055",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68050e9b-cd65-4d82-9863-773296c1344c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fd2902-60b4-4bb5-aa17-c3cb88570a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6711013d-ff37-4dde-a5cb-31a597476ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1925cdcb-d7f9-47c9-95ab-8b176221025e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2340c310-3658-4d42-a21d-f9cacc43549d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363c0011-5414-4a6b-a5fd-682b3dd3de6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9fd19c-baa2-422f-bdc4-d7bc1f3c70f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ecb0c7-1159-45b5-a2eb-ca1877ddcbe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3242aaa0-62f8-4c8b-9218-d7453fb47d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31851cb-25d7-4870-8eb0-6ac5fab1836c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bcaf7e-2eb5-4d1f-a955-b0cbb448ec0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022712e9-cc53-40be-b235-fdef0d413220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2d0812-b725-41e0-8342-90b5c5884205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82dc7644-47ad-46a6-b553-1e914276dadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f01a181-988e-4c92-be26-19315e86c636",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6ebeff-9407-4a40-9920-c2a313bfcda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e5c6b0b-aaed-42d1-acc7-d10dda3a3ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82553511-6650-4fb9-8646-b6aee67c31a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa568cf0-432a-4686-b865-85b32ca2f3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a65a1d-feaf-4d5f-8fb1-43c0e730d536",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b810dc85-6f34-4bc5-9a46-ed4353d9d006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67db6490-36c3-44a2-b436-16d54cf08c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6716a10-4061-4683-af67-472052acf444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56b3a8e5-013a-4a49-ad9a-3e864374e08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0fdbcd-f4b9-47a1-a2c8-77103176f1ad",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09dc81e6-f2cd-47d2-b2f7-e661345a578d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc23ade-99a9-4a5f-a8e8-5ecb23c04f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aff91df-978b-425c-8392-9334dbd3850b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e977e3c0-2e0f-4d34-b4b3-7facc70e9fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5393f346-efd5-4043-a9c6-766244e00b33",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6024d0d7-347e-4c20-91dc-bfa48604e3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3b5c8f-d624-4208-b69b-d635d8394406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e6a63d-043b-4a0d-badf-81b79c28b523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da6a1fbc-d36a-4146-872f-9754513895d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdd2e9d-7bdd-4d25-a3d9-c45f0dbc0834",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9644b9-54dd-47ba-a272-78961dbb7d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa4c2bf-12b1-447a-8692-5235d3ddf731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79920fcc-45fd-4eb1-a15d-b0dd3d62b835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff799d47-f510-428d-a8e8-907c0fd7dcfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e7b295-b246-41a1-9bfc-9c5ab468f451",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160bc255-d9e3-469e-8fd4-681880de83c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40291cad-e8b3-4b4f-a16d-6d7184d792d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fe2a90-6836-4611-b807-9b174a582a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6530ec1f-bab6-4600-8188-011142019603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94649f54-c86b-4429-94ea-65d412ce2480",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e92924-f7b4-4ad0-9b63-2311d6c0af76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6dd5012-5f87-4737-94a9-a9480b6889fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689d4984-6343-4fb6-bf01-e21e71ca4159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "b957b369-8330-44f0-a68f-cebaf654d701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b0eca7-872c-4706-820f-c857f7f71e84",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f81289-454b-4d86-861f-30496c5c34a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f81e96c-2f78-48e9-94a3-b510e003e0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f7cfcd-d794-4c3a-9668-5e6ef1eb8867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7e8f4d6-96c1-43f1-92fe-77d300fad31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0002f8-5d26-4b15-b826-5cd84d3c718e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf52b20e-922c-4c26-8466-1ff91c0c254f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c711c5f-9bd6-46bf-9863-088b4e470396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e437df72-f11b-4aa7-baf1-70004ef4532e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3b4460b-296d-4bdc-9bc8-3768733a9ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782bfd48-fa62-4d3b-9324-97c48dc98a01",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae67873-b7da-4acc-a492-9aeda4bddf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11eab8f6-d742-484a-86e0-dc5987f85e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad5b01f-8cfa-4eaa-ac7e-f9972f195973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93f3020d-675d-406c-ae26-fb4a94a71bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fcb20f-7fb7-4b8d-9a8f-afe713ce3ce8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b522d81-83cb-4d43-b6d7-f07d87aa3dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f702662-94b4-4a00-a2c1-ef60973a3546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8568fa2-3126-4876-aa43-13d85f1a8a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8711dd2-fdfd-41ff-bf09-031153b5f9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07cff24-2b85-4f1a-98a3-dadde6f1daca",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30bcee2-4c85-4dd8-88fe-6b6f40cdc04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcd39ef-02cc-40d2-ae65-fae4f6cb1c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbb4970-19c4-49b4-9f86-3698b928ecff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77f3bf6a-1bcd-4092-a6ee-8cd13ff3d4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4316d108-95c3-4e0d-8b03-dac4fa665521",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c5e57a-0d60-460e-bceb-e001b0971bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49e1a15-5e23-47a4-b0cd-6a7f9e9489a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e875e57b-1eed-47fc-8b93-5e135bf78cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6427ea80-e7da-433c-80ea-58cc3e7bcac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d65dcc-8a9b-480a-81bf-bdb12d028f5a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "541e90c4-bee0-4ceb-b46e-2b4681ff02d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf854f0-f993-492a-8c99-6416ad7d4dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ab9d75-05df-429f-a75a-48737e0ec078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40a5d4ec-343b-4479-8b65-e67372b796c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57ff412-f3f3-4cc9-a3c0-13364791674d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b697be4-d764-4993-a219-195b6e9f2c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfcf4b85-2b62-41ec-9335-47f93cf20f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1058ab0a-80ba-49ab-b4e0-72a06b918f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eec0d053-b250-4e50-9ebc-fe37c2137937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fafb71f-b8da-4770-9ab5-d3286b26f097",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0da32b-e259-4d80-bf76-f3e93821c25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6880c1b6-91aa-407f-9adf-1395beaccf3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c23dafe-60f1-41e9-a28b-c2cbb2f1269f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb1211b-3091-4bec-adc7-02374e0e4db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82cb2edf-81ab-489a-b7c3-289fff08eead",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f68ece-8323-40e6-afb1-cdf837aa430d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a1f760-e12c-4f38-9ef8-ded61a0e4998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a567be-7f9c-4907-b0eb-2df6a9db5921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f81502f4-345c-4e53-b7d8-59e219039be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf2cc84-a326-4ebf-a230-0e8c43cfefe3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06aa6f5e-7c03-4d10-bf89-2b4046369ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef74562-2c62-4df2-9c40-7ca404939c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025a5813-d8c0-4064-b047-c746b982779a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "995d55de-1911-453c-bcc2-6d1c101a6af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcb0aab-e7bb-42c2-8a5e-89cb58f6862f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8a5c62-6ed0-4644-81e1-3c736959fefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c98d85-31b6-40d6-825c-fe0bcd44399d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbf36b8-8e70-428b-ac6b-a7806da90208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "729e51ef-e981-4abe-b654-db96ece5e420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f27c8e-12ca-4d4d-a443-7920b4b06d17",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e01e9b-305e-4a30-9f35-43084951a01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430a8738-d128-4de8-ac32-6a2b066cd877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd3b3aa-d762-41df-be2e-95ff42a81dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b74dd69-597a-403a-a552-93f718444ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54deb1dc-4c0f-4192-a43e-6997b24af1ab",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386599e8-10f2-4130-b8ba-ea7316517e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c22247-0520-482d-b668-1d7a47f60304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788eb1f7-10dd-4c2d-bbda-8fa82ffd368a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe08671-3b3d-4cf7-a88f-4e9a9ba63a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd57957b-b8b3-46b6-a507-e946d1b9f27b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a84633-4741-43b1-9c9b-6722ba7b206a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63daa902-71e0-45cd-9cb3-935a81d51b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1961e0b8-ec62-425f-ae6c-b2d7ebec5689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef122e72-072b-421e-8e0c-b0bc3f795252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f70ff4c-27bc-4ddc-a78b-fadfeb1877cf",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e6bca6-810c-415f-bc8a-9f5aefd23f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7984df89-c41c-4a61-99ab-a979376076fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7e8c85-2334-4b29-8c4c-1e4a668bcf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f46777c-d81b-4032-b00f-ea388ae6632c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bf15b8-e08f-421b-a423-d9d29cb57830",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb3f7fd-5b98-42b1-a2ab-7664a7c49185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185fd98a-89bb-4dc5-a2b3-20568da36cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e89b34f-4e10-4a37-9b05-bdd537baa685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfaed0bd-49ae-4148-bf6c-d48f2ddb4270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c07543-94a5-45be-ae42-ce7b86f40452",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df58a55-f018-4419-9fc6-7cca2543e637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a95989-4b2f-4464-934f-ed12ce0d47d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e25e39-eecb-4709-aa3f-81b26434e76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "22d525cb-e32a-4efd-b8e2-ac9009e3a96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab86c8b-9b6d-4b0e-be47-729082b6e87e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea19c5a-151b-46d0-bd43-723be83ce459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2e8d21-7c4a-4e08-9f7f-d438859464bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d0b495-af64-43db-9d8e-0004ecbc415d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb53113-ea26-47a2-8da2-1e2e08bd54b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84694354-b22d-4363-824b-1a2fa5e53343",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bab5ae-1fb9-4796-b1c9-591207f70ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d5ad62-51e1-4df8-8bc4-93cea8ce671e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32dd2c6f-135a-48a8-937f-43074bbe5f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "687805f4-a80f-4666-9e53-b76bf361ddb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8293c32d-111f-403e-94cf-a9bb15c92cac",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e902a4-cc50-49d9-b97c-a5cd9037cd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108a7f28-7f59-449d-8da3-b63434fa4e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e90d99-293e-46da-bf00-02fb4cf3d8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb681c6d-461d-4f9d-b1e3-d353d8a9db98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c1eb19-1907-4b93-9997-1a6c76c87f44",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493e486c-05e0-4a83-9fa0-64405285930c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c00e78-c669-4aaa-94ef-8f5df6428544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5f54da-2baa-4bba-90fe-bb4d34b87385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80f38b1b-6d88-4424-b383-6b4d91b9e0f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d3b64f-a5ef-49d9-83cc-6a7be4263a47",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2561e6ad-f9b3-40e9-b302-0d1e0d4fdfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c58cbb4-4d80-4cee-8725-8985569a0e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cbdc351-6db5-4c45-9dea-a60109a7b46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f90a9a99-bae1-4991-bd9b-e2646c265bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c0b937-b662-45d9-a56e-53579f696859",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e1e812-2ea8-469f-bfc7-27e041fe89a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5c9a4f4-03fb-4d1d-a877-553fb83440a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aefc41e-6f49-4a21-a134-12e80e1442b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d9c39d9-b69b-4bfe-82e7-012a1767740a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac37521-554c-44aa-a8ec-d71a21db9086",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3133e8f8-c9b1-4dc0-bbba-6bbc617629a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87f6142-a978-4094-8e43-f5b4cbf836f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83367715-752c-40da-bbd7-90c4dd1e7d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36bf0647-b147-45fd-924a-bb2f73d578ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbfb076-f5ce-4773-915f-3b73622b418a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df868a57-bcfb-4ff8-9990-98be8b577f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb6a6c9-ca88-41d7-86ba-14bdc22eaa1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7024f6-f7c4-4eef-8020-cb969aee78c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c13dd826-80bf-4216-a9b6-ed6338bd58ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104c7471-58a1-4f75-bfad-82595922ee29",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc44fd26-87f0-428e-8e0f-c91f2e36072b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1ead35-b81b-4322-9ff3-737ceb73f890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16790b0a-dae8-49fa-a255-ce1917276620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "780ce965-62f7-4de6-a63c-8a3eca267160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358131e8-e84d-4f43-ac19-609f2c36dce9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fc1764-a45c-4f3d-937f-3080bc330bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42a95d1-0d0c-485e-a8dc-e40d3a5a7d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8c8217-c5a4-4dc1-b850-1999478b01ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "69f573be-f973-4e08-96d2-d839cb568167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9184ae47-742f-4639-9eed-22ad0a2bb765",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bf8edf-9198-4c34-88e5-50018d58854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4293a4d-6750-4c24-b625-25a5e866bada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6aa95bc-317a-4943-bba9-6885d32a6dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6aa817-cc7d-4fbc-85de-6f49db491bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3c235a-d25d-4fb9-a3a2-e96b15bd7dce",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06d5fec-b1af-49d8-b426-99f65834c8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8e53f2-7b54-4edc-a879-0622b6758f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9391ce63-60aa-4ff1-9057-1f6b1d6e8396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a16d9b1a-e7d2-4010-88fb-17cc646f94ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f28434-2fc7-43a5-b6d9-41817d14ab59",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1673b379-0c65-4cb9-920c-b21ea58969fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f739ad-8a6e-4a9f-9387-ffe3a2bfc5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282e19b8-33b7-4d2d-b474-548249111bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3fc00c-7918-42b1-b32c-ac1e06cdbbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2860ab00-4448-42fd-8fed-121879d00f2f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5ee064-2c9d-4c72-8e78-d8885b0a7134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a070315-7b19-4b5e-a8d4-432441398975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d726c3f5-73e3-4d82-a4c6-e062a9582b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "154a3bb1-c284-4d2f-9a68-314c69ba8978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53e6dfe-8cae-42e3-a22b-0e56f40fc5cf",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1396b56f-271c-4015-a306-6f83d1f8ec93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3446e579-12b5-4a39-a587-28d3900b46f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ec8362-c4ae-4c1d-9081-526e5054ba8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dee7ee75-27c7-428b-8487-06713918ccd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a34c927-7539-4d6c-ab3e-3352abea42fd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3be70d-9c5e-44c2-a768-af17230d3fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8dc9ae-897d-45da-a360-c43e7f960f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01689beb-64bb-4aab-a84b-e1873b9235c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8351fbbd-3352-4486-9d78-46e97a864066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc74d96-a1b9-44d2-8c26-e1a5d98a0417",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6629946-dc5a-4d95-b49b-48d9b77ed2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d3cb57-5113-453a-8efb-24ae532ec0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73010c4-1444-4ca1-9881-de179313a131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71a0bf3e-6822-4eaf-9a0a-f9a5f67bf76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6d4f9f-c691-4524-bb4f-b6b9b588324d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1584a1-54b0-43fd-bd56-72b3777ad2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28060755-90e6-4ee2-becc-328011bffac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9171c4be-f141-45e5-8703-7618851274a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d7b6af1-1a6a-4638-807f-288d45f281d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d46c48-51e3-4df9-b891-59475edaeb3a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19f479c-667d-4d4f-97c7-dace5f585f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f04dc4-5cb2-44f4-ae75-215f690d076f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d3ce4d-01e0-43be-842e-c61e72e5bb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b1f68b-f6ed-4ba1-b19c-bdddb312d290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db7d892-6760-41b2-aee0-6c69c4380873",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef650b9-21f8-43cd-b167-be9f49e9b1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4814866-38cf-4532-bbf4-5cd1f12e5de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce74176-eaf7-4bb7-9b25-00d5c9bdaa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b81773-9c71-4e49-ad95-ca77f0a19c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8790ccd-fe3f-45fa-81a0-c1e3cec4affc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff29e64-0a92-4e6c-9ca5-db7cd59df3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171c53b8-94d7-429d-b27e-8abdf7950cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749561f7-c311-4c8d-97ec-901bfdebe6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d74eed-2728-40dd-b342-b82a5b7e5021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91dba2e2-2a84-407b-aaaa-8f0e93c8f622",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3c66c0-38f6-4b2a-83eb-56f34521405b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80529201-43f4-4fff-b255-6b1e5e09e5fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c650c8-3a92-4fae-a128-eb0efcf205c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee52d298-2896-437b-b854-bce01dda30d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb06c289-a9e4-4797-a78c-f0ea7ee043f3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eeff87e-0447-4713-b060-8680971bf02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1110bf1-c3b1-4e71-b765-0c8e788f1ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5d93cd-e99b-425e-a885-c9978635dd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "376da832-5c05-4c61-84bc-72843f3697f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d1f298-cf75-4093-9e00-1c1403e78c50",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d1d949-7eec-407e-9fc9-737071175d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64eca9bf-0582-4758-9fc6-ca82f055b939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0863d33e-c4f3-4c88-9573-580596303e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf79045-ed4e-413f-9983-541b355fd34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c91e5a-697f-4253-9935-974a72936449",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3fe878-cb5e-401d-8f13-27253c616680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2147cf19-626b-40d8-8bb6-ddbe043056a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5696f872-fc32-4b8d-9e86-464d42a939c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ef6ced-2a54-4b5d-9c3d-6ce756ef9b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b831d2b4-abb2-449a-942e-ec2c4e619822",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af20dd5e-1766-4601-99b6-32e9923be03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1513c6b-fc81-4096-a2da-06f2d9183091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9754a012-0e5f-4d72-b2b4-4d80e3143ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6e1365-c4f5-4f3f-8bbb-7abe16b9de6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37186305-f396-4398-88f0-26cbdf406e18",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908e5884-1673-4ad0-ba0b-a254bcc52802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a45f47-10d5-41f3-8ecb-045f697c33d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ea57fd-ad9d-4de6-b26d-4a11b9bff6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc3657c8-c5b0-47d5-b5e7-d9401aed919c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c539a7a1-3c1e-4e3d-ba8c-7a2175e570f6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f657f10-b2fd-454a-ad51-ba286e5685c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e456f644-a145-48f8-99a3-873cd1172de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8b8bcd-6d22-4287-8358-c2d7ac6602bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "16b73190-364a-4316-b62d-7e1c25ca46d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c35f343-4862-4cf0-8102-0385e7ee13c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e3bb3b-68be-486b-b517-04053bb5b079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4c456e-fe30-4548-808f-5d26cca815d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca4d4cb-61b5-4cb6-ae1a-acbf3bcc2599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca380ced-8778-43bb-803d-a962747f1e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7250b659-d3b5-4268-911d-ef16b9aa6c0f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edd0eca-3b6a-4da5-88b4-f763e2ab571d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "092fb5a1-d39f-4caf-ad2d-58075e1a80b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3c4956-f51c-4bb1-baba-2e6ebd5df86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a664a70-1af3-4a71-bec8-3c7b6c85bbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027e5ca8-a54d-470c-b25e-33bb15e4327d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0346ad2e-e89d-408e-9c0a-9bb0a8fcb379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb52de6e-d4c1-4fa9-8f6b-37f5bc57f019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95845315-ca4f-4c62-8538-e7bb90d355ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0855d6-5676-4102-8a37-2f069722e322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53869ce-b02f-4f87-b89d-29ba6cb94394",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9ecb2a-1f7b-4619-bcf7-43278c9f9773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b724b107-f283-451c-9485-4f03b42b6068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e94456-823a-4bf9-b3bb-6519fe15db74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d884df2-d4e8-4b9e-9935-c4d0f6de95df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a444007-6514-48b1-8118-11eb2c2e9cb7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29c1034-7320-452b-aa04-68b58c18313d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6b3c76-1aaa-4fac-a570-fc411423c64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27566ba1-7b0d-42b6-9ce7-d1167f0d6f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c678b5f3-145a-485e-9930-393e7fb45252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a9f4c1-3998-41b7-bfe2-a58b2dd230a9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e72133c-56ea-42d7-b7a6-5ca6be8327fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931126ed-975c-4acc-afe0-080757a1a167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fd2fe9-d9b8-4e92-ba2a-c49e82282046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44bba671-73c0-410a-b649-00291091dae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e755a42-0ef0-402a-943f-b09138596d98",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ef33ce-95ce-4755-95dc-14d56426679f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "035bfa16-12d6-41af-be51-71f731b12d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adf9780-0e0e-4937-b9f8-5545c84c0074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1952581-5ab2-485d-bef4-22ad172bc997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc411e71-19e4-4837-bd60-1fad58253ae1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7601c150-5914-4057-bab6-d4c51353444e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6e4959-6968-4539-8bac-b35845688e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296ffe10-bb67-4777-9054-2fc5ce023bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ba1a74-04dc-42c5-a888-85a7974afef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b35702-4415-4ddf-ba59-678d4a6896f7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69184308-98f9-43a8-8722-3089b6af7b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda5dd5c-6553-46bd-a3b8-505fc43d6899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868c8a13-9066-4f3a-ab11-53fd665a0777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49525ebd-3899-480f-a550-14765eb9c4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e278a4d-3511-4137-9e5b-8741cf6857bf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b885f2-51eb-4eef-b311-9e515ff1ffaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282152a9-86e1-4f4e-a64c-63a1c5ad35bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddeb3617-7a7f-498f-a6bb-9ae069fa85d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "40fcc8bc-85c0-403c-bc72-769777077879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fddd5f-e9c2-4876-a5d0-4cda98116ee3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fbeabf-a5da-48e5-b9d9-553fe306f537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "992b3349-5a7b-44d2-b260-af0e95fcf207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878b7e68-6bf7-4489-bac5-326f3f1a177b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "15e848c8-74ad-4b9f-a2df-5e1d86c55f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f975ec59-8b3c-4076-b8f8-a51e2870e8a6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e5d1e8-6a0e-42a5-97f0-61ae2069e684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d781da8-af9f-42b0-a80f-3b56a70bd0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a89ab33-6aa6-4791-988e-cf57b77eeb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1babadb-98ad-4dbe-9f3e-3ac6f98abedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da24ef94-9516-48a8-ab80-b1964cf65083",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54707992-5985-461f-bfaa-e35f18cb3aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebccddc2-57e0-4b5e-8e21-2fd19f671a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3bbc51-8fd3-49c0-8064-2899b69acff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ec72a4-d34f-48e0-a8ed-3ca9ccb608be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16804c6f-e51d-4969-9894-65d55a6ad1de",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caf4301-7852-43d7-98d6-3b9224f16b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397bb94e-ef69-4a2d-81f4-e3e098191deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e054d39-037e-44f0-83b8-f842e3b1b507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5de18d9b-24d4-4ad1-a210-72095f528f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3266c1-c004-4fd2-96d5-35de2b663c71",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e70543-3d95-4a2f-98ba-b4b55dcf61bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334c9915-2ced-46af-aa6d-8e4556784355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4ced64-8573-4026-a3b5-7b72d09ee76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d01e23-9f5d-4b32-a4a4-823a794424c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0570bf03-7059-49d4-a681-7ff23f3c809c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba2b6e7-39d9-4aa6-9e70-d8f4ffa80056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd13f6e3-26a2-498a-a174-4cc3f81dc8b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d8bca5-c158-4263-a98a-9c745a2031bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74ad6267-b011-4708-8ef8-2a281c7ab50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db61587d-c114-4910-aea2-c453c612db3b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b1e8b6-e9e7-426e-9e70-51886047397d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781b591a-66be-48d3-8801-11ead7aca84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c47f22-89ca-499a-a0e2-37c078378725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0acae7d-c4ba-47d1-b783-32b495b1f388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e5af1e-e055-4c7d-af99-e3c595e1fb52",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6df7c2-7426-4425-9fb1-82e491c46eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f1c5ae-eb3b-4433-8dc4-9ecc1cafc5c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4914105a-3dc7-4c68-a6be-0c8c9928398b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "644c3d96-52ec-46ce-8089-5ec22e16a944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ae1fb9-3ac9-4409-a7cb-c16cbcd0641e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cebeb6-c8a8-464c-8001-4d0722de5089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b78a89-5624-4175-b5ea-914acb6638df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423114ea-a5b4-4ae1-9eea-cd306adeebce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d115cc-3463-4881-b875-6d2acc460ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f816e27c-664c-4494-9805-f38e875fa456",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd05eac-8282-491a-8779-8ec51d42f112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde5b76f-9019-499e-b8cc-5b2eff976a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273cd3a7-7662-4551-933c-129873e2ea27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9ae591-d999-4956-9b86-043a058f24ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91ab198-a200-41c9-b3d9-ada27c1dc379",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38d64cd-3bc0-456e-b3a7-ce703cd1d449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305c8805-ce58-4eac-b60a-99275966e0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c07a5c2-f13e-478a-8288-d08961e14445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d78a39d-7755-493b-bd90-e5fdea38b68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e0a2c3-9866-4d64-a5e2-49f9def25ff4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3494c1a4-56f8-4162-87b0-16f04bba5005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e057c2c-2245-4a05-a0a8-49aec760822a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fbb82d-fe8b-42e5-9ec2-2fcb6a973ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb7dbe65-9ecb-4dc0-b183-b27894bd0eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5167c7-5e48-49c1-a3ef-4e528189b401",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d86577-dab8-4357-8b0b-ce6f672dceeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc48433-7282-4447-b012-5dc77055e71b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4231451d-66b5-4e3c-96ef-783926510144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "03f29bd7-9843-4cec-86d9-316e3a7eade8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d361f21b-1137-4e79-add4-c6a27bb27f32",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef34742-9bbb-4452-a5d6-afa7f430775f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff1f512-c9ad-4530-a73b-5e887b126934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab88d1c-1d84-4f91-ade4-1f6edbb5f4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df7f3456-9a32-4b1f-a7f4-22dc977391c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca40421-0f7a-48a0-96a6-0e7ad03eb7e3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda79527-8439-41d0-92b3-5ece4315dc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42be1f2c-3d23-4963-82f6-0ae5fb6690d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dec4bd-e1d6-4cb4-8a87-207555e9fe74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e94eb257-1dd6-426f-a2f7-b16240563186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6aabe87-7d44-47ef-92ea-c6915e9bfba6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a367d1-f894-4f13-a2fd-e147a3b92d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18407429-d870-4dec-8be9-327953de92b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78371ffa-6a60-4a33-9986-a6e2cab1b98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "114e145e-4c93-4900-9bd7-050128d5c1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c374a4a3-bd5c-44ff-b7e8-bf6bf34a36ee",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48f8015-545a-4e5c-96e2-27b6820e4a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e379c390-992f-486d-9d94-bcaba082df04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ee1323-5c62-4fa6-8aec-73a45b296711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d727ff-42d5-49cc-a98c-cb55a9b4e9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba68db45-3c26-4c5c-bfc4-389cb604d1b1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297c2928-3d73-419d-8ddd-86a0fb190259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b704be09-5f1b-4207-814f-110756b09bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d8e50e-b384-449f-80a6-fc741bc875b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c60007d-98ec-49fe-a4a8-4bd47a2d3322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbf8df6-5f50-4f61-840c-f4d227929f30",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f7a41e-95c9-4504-9a40-6d538bbe90c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "229b8df5-8df7-4a57-9b0d-96e0704a342e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11aee04-4b46-4d48-9e07-a5bcea1d86b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d379e0d9-9b43-4550-8bdb-f55ee629c560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64877e42-d2fb-453e-8658-55e1b7a28b61",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4512c31b-1aa3-4932-adb1-11e9699571e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c318b36-4d9a-4544-8ba4-2718e23d93c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7eaf29-e324-4b5c-b401-4ca5f6a4c5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "166247c0-76f0-4d39-8626-39aec1c288d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f136215f-621e-460f-8bfa-89c2211bd40e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84c30c4-fbd2-4f44-9a32-ee7359720d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52111904-8d0d-40a2-a0ed-177836356de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193591a9-49c3-4bda-b293-d47ce2a62e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "20bf2d21-00f5-4c07-9efc-0da2fa3b77a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a57f4f-21bc-48b5-8743-f9dd4165deeb",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9280db7e-fedb-455b-bbd9-10e50b2e6ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e825cc1-858c-45c3-bba9-a811996e720b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79eb3f2b-539d-4d19-9217-a5fa7135441d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "84504c11-fd00-4a0a-ad34-29b7134cbe33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578b2f2e-a116-440c-901d-548fe7df2832",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea581ec-ea9b-47de-9be9-8a41bd74d077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa75f46e-1cb2-4188-9112-9ee850be52a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa47a8f1-2197-4058-95f4-7421d2901ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc9857aa-0d34-459c-9ed7-a14b3f3bf0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a096b86-9c72-436f-889c-7717be3241bc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c9fc45-7bde-45bf-b7a7-b65797c9501c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3e1a0df2-214d-4c6e-bbfe-4cdaabc7a7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5f103d-c24e-4a1b-a594-f0c4177e348c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a890a52-cae1-4787-bf49-c3457e429853"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "57bec634-c1da-45f4-ac4e-763c49353544",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53cdb9d4-15d9-4a59-8d67-697d1d9f78e0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9206911-f18a-407d-8338-d5720a5f8861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97ea3ab7-5dd1-422e-ad20-188bd8594ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badc9449-1851-4f73-ad74-3b951acb7a24",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0318384e-0c7b-41b2-9316-c979eadbf137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bd8c1b-8b35-4019-90bf-fc9a8c7ea850",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f240bfe2-379e-486a-8ab7-878f42ba9145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91181ca8-8b87-425f-87bc-7b624bc654cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c294d69-3cf9-4a52-8280-79b346016338",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "32737963-ae32-4587-9f0d-3ece22ca299d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77230204-5074-4110-8c79-cf5a1cb2c899",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ca8ec7f-60a1-4966-95cf-1a4555e381ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2fd3f3c-73f2-433c-9d23-873c1be178e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6970be8-9eda-4b30-b312-6bd6326d143f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9512bee4-9d43-45f0-879e-90cdffe80c65",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42276fac-f80f-48fa-8db8-3bf7dbee1a77"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d98bea2-7427-4ee7-93e3-eb8d2822c040",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ef0880d-e22c-4d82-835e-171542210864"
                }
              }
            ]
          },
          {
            "id": "ecd8f58a-db20-4950-b94d-9abb3515162a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49954a83-0223-4992-86d7-5256f4959b56",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a04d8e6-3ef4-48b8-a71d-7605ec74b2dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e215f09d-4f36-49de-9f35-f8cd0ab1e4a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9531ec7-a164-4717-a8d8-06efa4143247",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "45e121bb-7fdb-4a03-bbca-349eba6e8b43"
                    }
                  }
                ]
              },
              {
                "id": "cd14dbec-594b-4dc9-bb9d-b95a621f9449",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e2cfee1-373c-4651-af15-857f8f23b5f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1117d1a0-5265-440e-93ef-a30d8ba2a87a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b12c4dd4-882f-4730-9748-760a809c2e7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b7b8574-c392-48bf-aaa5-7bffefdc4f13"
                    }
                  }
                ]
              },
              {
                "id": "8fca1a4d-df5a-4ef7-8e3e-00a856826e25",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a4f236d-762b-4a6b-8553-071645d098ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3b35738-2fcc-4df8-b51f-d0ca46b70cfe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1d95517-947d-4e19-9b20-19b58320251f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "22a3148e-dc35-460a-b1dd-d28c063f92e4"
                    }
                  }
                ]
              },
              {
                "id": "0c124309-44a6-4923-86c2-a3cd1f405d18",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e41b420f-88a2-4e50-a42f-2c54787b884d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0a552eb-3e68-43e5-8a69-92a119d646c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f6a710b-1933-4f89-b24f-d951ad6a12d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "067a95e1-e8c4-4f8c-8b2e-bd5916f6cac3"
                    }
                  }
                ]
              },
              {
                "id": "e1a518b9-dd02-481c-87eb-de43d409f539",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f54128bf-5e94-4a70-b440-a24998878b1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "978962d0-8458-4663-afad-4b4d1fcf1731"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f560ca2-74d4-4184-bff8-fe3cda8784da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f579aad2-1763-4ce4-9ed0-69fd2192a22e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b39aa246-93e6-4fd9-8683-f22d412c7fb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "00911cb9-e8bf-4f08-9db1-dfeafecfc47f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c429ea19-8923-4308-bf20-2ad00f54f62a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "00e2e9ff-9a7d-41f5-8f6c-35a921530338"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6648332e-6968-4ef4-960b-567aceebd7e7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "93eac8f5-f37a-49a5-85aa-70ea6a176de3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5ffcd7c-5a3a-4691-aa22-a7e249d8a12a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34be0b9a-391c-433b-9d09-4efa212530d9"
            }
          }
        ]
      },
      {
        "id": "72384d09-8b4e-43e5-bca8-1b809d0e906a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e9fad3c0-3ca2-40bb-adc1-60b00a8fa086",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3f251f5-9aa1-447d-ad3d-dbe48b52bd0c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b135104d-de01-4eea-8e0e-cfa5a81bfbb0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe04d5b6-08a1-4c83-910a-dcea8cd3232d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d075b5-acaa-4003-a2e3-543c7700302d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c617dc9f-c45d-4913-ad4f-4249c6091aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6ea12a-95d3-4329-9de0-261ef5d62bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84548e6e-7ac1-492b-a0b3-2ab23f6654b0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22221e80-a00a-4fab-bfc7-5855b97d76d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aae3d0c-1e7f-4729-997b-a0d97eb72ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629fa143-377b-4096-85d9-13289c093d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec11d9fd-2bd0-47d1-a2fa-af6318c6cfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9527a04-7340-40d8-87df-1d98f778cabe",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85160a54-07fa-488f-ba87-995ab52bea48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936bcf3a-6baf-4a85-aba5-95c8190b8890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0865a31b-7e03-4527-94c7-afe0e2be8668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bcfd1b8-9b37-418b-8fdb-4cf6cd235f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88e33dc-6727-475e-9635-81ca11557210",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00167061-50de-496d-9ca1-8e07e22131bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edaea264-8ce1-4d4b-8c32-0f90e36609e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8f8761-9557-473c-adcc-02b915d37e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc737fa6-9630-48b4-a944-7f8d672198fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57904687-0d0c-481d-9249-16d4192482e4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59b61ab-950e-4cb4-8a4d-9f28eea580c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7f8814-ad0b-4275-a520-82459917ac34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba87568-b153-46cf-8922-8306786d6704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "807651a9-bd43-4780-b781-70a1579c8a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36dad7b-367c-4d7a-8526-bd904a4e33f8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae7c41e-0a1c-41f8-8c89-d8e989bc5f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1e2cd9-0409-49b8-99ac-3793e0f4810d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb170aa8-4096-4f85-992b-e5cb3ebf720b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fdbfc68-67a8-40fc-bfb5-3d7beecf1a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c822066-ddb8-48e2-b38a-ed233efcbe6a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad60569-de4e-48f0-a703-1ee7360a91e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a24342-e338-4c5a-98ca-ab0437d40d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53734cb7-37b4-45b5-adfa-07fb294085d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac11ae43-47e3-4b34-91da-ae569f0d34e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade2d56d-3ba5-4a13-a2b0-106a3ba78a81",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c3e174-5c28-4823-9b67-73be8ccb8108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ddc038-a373-48d2-a986-60030d3fa61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca2cc21-739d-4d67-b663-1b7b150805eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86abc0f6-a187-4b73-8a38-852e4197a713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff34936-8f95-483f-b281-8996dfd0f933",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c53d19-ecbe-4918-8209-411ad12ca4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a30ae8-f218-46ba-ba91-0930b702d0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1958e99-f3cc-43cc-8326-bf37da05e948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74cc6246-2a81-4386-aec8-27f6c24aa81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e7d91d-2a45-4697-aecd-9636acdc2b82",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c5d015-3532-470a-97e0-a8af78cbebcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e60137-a4a4-4d70-aaf6-6bb271c9e643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcd7dfd-e4eb-408b-947f-099c4bcdafee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d583be3-84c7-4f25-a8f7-1371f3036385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9b274e-6e83-4c48-9ea5-8edc465721f3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7c325e-484a-4df7-96bd-0287bb4e01a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0251cd08-38c2-457e-86d8-92c5d6e1d7c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15daeebf-c2cd-4f19-a6ba-b430619c2014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "caea5611-3ce2-4b11-bf43-cb102e3e7f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ef332a-e842-41f7-b63b-78f76090884e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e519b500-2a5c-4a2a-ba65-934a2427ccb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7c02ff-720b-4117-a180-2af3ac64a941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7529e43f-4e37-477c-814c-56133b6c7f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72781a40-c4dd-49d5-9046-e38a368cd536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78feb757-ab5d-4d57-a3eb-32cedf6d0044",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a7a7a5-5c12-4b84-a1da-9a03e39d7849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb0d554-86aa-4374-8a74-2c7afc36eab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43f67f4-c9a3-4f61-b652-59d5edce106f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8deb3f5a-d0d6-45a1-aa28-51d9ceafd3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2cfacf-e56f-4058-a283-e0a0ee7a34a3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25dd4d81-fa08-4dfd-96dd-01df91c59dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86a221c-37df-4eb8-811a-f5f29cde5a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829d372c-c5dd-40c5-a4b7-cacaddc04170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2b780f-147f-4ff1-b00d-dfb7757efc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b94c63-1deb-4efd-9e63-654da09c7ad1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d545e3ea-f96a-4fec-831c-d35c336bc24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa1b98a-b72a-4cbd-a88e-92f84ce0bd42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7083f4a9-8487-4279-90b9-06f04b80d7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf99b9e-ec02-4e11-aacb-08fc6a4699fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b27058-2345-4b0c-a827-fe330ef3ca79",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b8aef2-dd18-4417-b3ad-52eafd672ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66748d7d-6b00-4439-ac2f-6cb7fd7f3e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a77213-fd6c-494d-ac46-2874ea491e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "49c6f606-6d5d-4d86-b58f-0a4b87406329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3929b8-8dd1-45fa-9959-77ee3af3ae5a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3610b21-4780-4a89-abc7-89a84f35cc4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810e4d3d-6bfe-4cc2-a090-201c72fdf942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32c5f84-f6df-473f-980a-c92f6c3933be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae265e76-3fa9-4b57-95ca-11303b82e984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed86cda-e0f6-4958-badc-0910ce4d2c23",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d441baef-fef0-4f7b-b98a-0c4598656b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40baf582-4365-42a1-bbcc-a6ba3d746498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f04d5a-8dd9-4858-9b66-8e5a3dc68bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c61b38-cb9b-495a-941a-6511c9c212fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8942ea-61a0-4690-a972-335c8ec53515",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b4f87d-aa17-42f5-b454-36ff56861c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc420a7-3592-4512-a947-b119b7fe5d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e268050f-34c3-4b43-83b8-8f81e425be7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4624e9a9-ede2-4a89-8c63-6ff333aa47a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c8a113-5f99-4ea7-a2d7-beb9bc9924a1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae05cf0c-d937-4ccb-a95d-99766b0efa98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44eb76ec-7785-496a-bede-4cf5fc99b8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415d57e9-7bfd-4ec0-86bc-40d225b5de30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "828fcc95-0006-42b6-b3b1-33ff132f5014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e445c9be-af5d-411e-9a25-446661ec1caf",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0808d01-f12a-4891-a013-64425cfe0f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d4e476-3771-45bf-96f1-5f6e6fcb4707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547e6802-ea8f-459f-a017-9e8d8a46709c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71ba688e-04a7-4274-8fcb-9edb9bcfe6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b850991-3069-4d8f-bad8-935b34e65d4b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21191e7d-31f0-4c5c-85d1-272420dd3055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce36c9ed-970c-436e-a386-5f5acc799757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359bcb2d-2bd6-47a1-a300-8b5e76be2ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6996ccb7-b815-4610-8be0-3c0c5e6eb282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff9fd77-151b-408d-b211-1a06b308c06e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f110f795-5105-4245-9961-243c241bc805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9774d141-c48e-44bc-8b06-c5b64b9ce390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f702ac29-c38f-444d-9875-7ed85c1245fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45b785b6-4dfa-4f2e-8946-fbfa744f1f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb2e405-a7d9-42bb-92a5-146dec3d414f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a589a4-94e8-48e3-9966-60cb55a296e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80699f78-bc4e-43ba-9538-fb94f798f627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd209ed0-9992-43e6-9799-e169e001c5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18bf9ec4-ae27-4e3f-98aa-e04142ddfb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07264679-19ec-491d-9fba-3c7340b833e6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f96fa2a-369d-4e37-8e74-c78b751a86a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e790bb1-a0dd-4780-b657-5e528652fac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c7aeed-c4f8-4040-bebc-f6ff7b2906dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "274cb829-0b00-44da-8c08-2fb2e2530755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b307c809-def3-4609-b190-ac134258ed2a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d4e3f7-d930-4b5e-b032-8fbfa0f80b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8ed516-e0db-4e17-81e2-88fc8dbdeb16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7373680-abd9-432c-aa68-765a27660228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06ec0f0d-251d-4ea5-9e79-3ba45b0fbfbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce0437d-005e-4d45-bd51-1c1eeed28d50",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b48965c-c3f2-41d7-9dd7-a96b85194f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6a234c-2478-4d80-af74-55ee12b54758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca4802e-3b99-4ae4-a046-04e1a57c2ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bafd31bc-f9a2-4a88-b7a7-9270415fc692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b765ba7-434f-41e8-a2fc-5d5908bbde9f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cd9c8e-10fe-42aa-8694-67b6f1260aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309791e7-6e23-4cd3-bcde-20d6dace3b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ad237a-6348-4d18-b02e-267d374a2743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13876815-15bd-45f1-810a-3f53ff9615ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e552e9c5-0dbd-424e-84fa-5317f499673f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42942e8e-a74b-4a02-93f4-054e96de0fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87383b84-2f48-4daa-b2a0-7d82ea643365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20abe249-9da9-4918-abb8-52427d5afc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc3bd58-6830-42f7-a3e2-dbf73c0c6ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7783bee0-3bd0-4484-8e6f-408259fed366",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928a70d5-53cd-4b4d-ad74-d39d2323b28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b1e123-6949-4490-8149-417240f199ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc3488d-67b6-435e-bf71-7fa0b348195b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2252fb7-f6d9-4d99-94ef-c11834a51dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919470a8-e225-438b-8e64-56700e50178b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e2a728-20ca-4517-947e-bf12f0a00a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f139fc1-0bc1-4ed9-83cf-2f29aea6f17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dca9516-620c-45bb-b706-9412aad662e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec747c27-1f97-4bd6-b8b0-083fe0864def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8298c0-09b3-4fde-8ba0-52bf890e14fd",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31e8c3d-b1d5-457f-bb2b-7948e86b804f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3230cf-92fd-4b23-941a-2bc279aab3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c22e645-0b42-4d4a-a15c-b85b1a3a2152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27964cea-364f-4bfa-8cfc-fe36a143227b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0475a781-6537-454b-b991-457e237bba26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3b5b141-0275-4e50-ab58-654fad5a2168",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e414ba-2e48-45af-be1d-2304bd2623e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8346ba76-260b-4846-892c-74db15848b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be91c015-9d38-4669-8664-846e17591361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cda5d99b-ebc1-4e9b-9ecd-011588f3821f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837ca46a-7955-496a-9f5a-2d603e692685",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd74e4e-b43e-4adf-b338-327fa50da8bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cb9d2248-a0b1-4778-9963-de28c226cc32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1172a700-fe38-46a9-93cc-b9ea1f72e875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88984e60-34dc-4eef-8bc0-006a420922e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65f19ed5-5424-40a5-894b-e5efd2a6d181",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b9f28d5-526e-444b-89ec-b60328fabbde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "437778e0-fe95-4552-8f46-f7c58106d1ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "951057c2-70e3-404e-a359-3b03784b731a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70271bf7-254c-41d4-b31e-4ce858e8b743",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "408619a0-4aaf-4aee-b5d9-c27929f17089"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5cbdec4-89db-4cf3-b069-25d974b6160d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62df94ca-f11d-47a9-8e54-2ba713b169ef"
            }
          }
        ]
      },
      {
        "id": "0d3b3b34-df86-4832-8c16-87b239c83cdb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4b2bd2b5-c4fd-43f4-810e-37f4e09aecda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48bd865e-c31f-454a-a9a2-fd2677fe3cd4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "397491e3-973f-4c22-ae15-26ca14a5f6d5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e2bfd5-70fe-4c32-b19c-03655155c2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777baa30-1cc4-4b21-b131-151666a36f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c431959c-31c0-4022-8b53-e9a98bb06731",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e8b875-83ec-4e49-9e43-b984a79d8ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ded4a0-f796-4924-bfed-00b80a86eee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b861cd1f-80f2-4e88-822e-803a81f1fe72",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c8a92e-a848-46f3-b48b-c08c38c9cb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a98c3d5-ab02-4ee8-8e34-b25eeb786d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ec39c3-cd5b-412e-b1e6-dbdce449d846",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507c3ac8-a9b5-4e40-a48f-2c0c2de0c135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705bbafe-0885-4e54-87d8-fcf9a3315124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea00f35-d192-46ef-9b37-30bb95b473b1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d25a263-06c2-4b13-9c8e-1f75315cd944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b47a4be-bc9d-4c1c-ad55-d9fbfbc2c96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c919f40-1a61-4a45-b816-6fc1ea5691b6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfd4258-10c5-4683-b21c-7e54fb76453e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894b5665-c252-486e-82fe-10c30d1840a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00d6bf7-4943-40fa-a551-c55e6183ba99",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531ffa21-7cfa-4dc4-acf4-987290638b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2aee98-b64a-405d-97af-26713c9b8b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e391e48-8834-4f46-9053-17c89e4c0831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de49ca87-b6d1-44d9-a1af-f50f7bf74144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132989af-a9e9-45c5-a6b8-344002abdb2f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cfb0de-5252-4f74-ae84-7b90ee5aead0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b1cbba9-c5ef-4c3e-8dd8-535d39a884ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1999cd2b-5145-4d35-8966-f3e1570a8ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c03070-95fd-44e4-b239-7733403d2024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee87e53-f1f2-409e-8d50-ae04491925d3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c15295-5b0d-4927-910c-76b3e780457e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "112b7232-f465-464d-9d43-c585b2a74cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d3383b-40e6-406f-81b8-4962dda8f3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51130c62-d3e8-4778-b746-dd7c9aaf33b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f05ff7-0b93-442c-9144-9757774d7f97",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9a3dca-17a2-4763-afdf-fe140cd40ccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cb10410-2d63-4652-8d35-231c128b67a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f38bd54-58b3-4e80-ba9c-7c0b17bd9989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba903a5-c856-4830-b2c9-ba1dc437f4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78443a63-eb10-4faf-8344-8fe077d06d7c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ca8717-8532-4b59-9c69-2ba00788afec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cdae2a1-bbd3-457f-9d55-9af9f01def9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd063a08-4786-4e0f-be22-e5342e62fb09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4f2904-0c99-4862-8625-67e1102ab7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc06ad0-4804-45a5-a217-91167f2a7ad9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050d9cd3-4bc1-45c0-a043-ddefa19146ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9057473d-fe7f-499d-8df7-c91ca9bf0d6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab69f4ad-b1d9-4d56-a516-a45fa6ecc205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e5dd0a-4053-483a-8bb8-3ef10bfea230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a542fd5-8a4e-4c25-b2d4-ad1d572136b8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b693f08f-e384-42f8-95dd-a5123dc7b7c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "857246f9-4a39-4039-b34b-9e899153fa3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781e070c-b77a-4d56-a3a4-06b65368c15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917bed64-2ac1-4f34-8efa-c431b4b89e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa1e804-84de-4ecb-9ee9-4d1848f28ce7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13131538-6a96-491a-9da8-b76049e4791c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b78167e-ab5c-4218-82e1-c8fe5ee682fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c88ebe-3a73-40a3-bcde-0846bc43f12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b38be7-2b73-4484-832c-60584e7c1eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac279a0-064b-43a3-b3fa-ac7c04255d59",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512bd41e-cbc1-45af-bf63-af5b39e8e3da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fcf301e-abca-484d-acc0-0e6154b3a86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24c0fe2-19ba-4ba0-8f04-376213c57e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9935b4-9137-4712-99f0-2757d0086525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec92832c-f80a-443d-a00a-f976326964b3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39097ead-9e8e-4190-9f4a-93ba6854df31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41fdeca9-7bb6-4f06-8718-4e2a02832006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b77a7b-18f7-42cc-9b94-4dc768127c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8892ca-7934-48c8-bbce-e85ab80758c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5719052c-c57f-4cb0-bc09-764a158cd6a7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4959f0b6-9361-4f57-913d-c2971d3b2e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67cca81-0658-4b57-b3fe-efacefef7c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba0431e-3541-4216-8bcf-63ce913caab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8dc441-46a9-4188-88e6-4fd7cb8f514d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f4cffb-591b-4f61-81b8-dbe2622bcf25",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c7546b-f085-4a57-99c9-9adc3dbdb635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6bc6b55-e2f1-42a2-b643-4554083500e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412f95ef-1bf9-47cb-be67-c47a0c61b975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5cc380-b2dd-402e-b6c8-11763591b825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb0c21a-9d9f-480d-a74f-e0a99a4f5a8f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221f0cb4-d3c8-439e-8d40-2fbb4f5bb011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a35f0c8-829a-4e42-9e95-3a6d3f9c008b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e327695b-f2c7-47af-9de4-3c567322731c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b2f9ea-62df-4ee2-bd0a-fdd37dd069ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822d785b-62fd-4957-ad06-a937e142dbe3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622c8c7b-b264-4372-83f9-bf9841c26e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277d5733-dc88-4ce1-8ccb-b9f6b28965c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a3e70e-a634-4676-827f-7c47486ca8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c95ef7-8e88-4bf7-acbd-844ee7216a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15bf9263-5711-47f2-927a-57c301b3c001",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151169d7-ef4d-484b-aaf8-209acea70a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102b0399-b395-4e3b-a203-61c773e1b8a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e891304a-0bc5-4063-a95c-ab89d7d8220b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a200005-18ec-48d0-933c-39677a8de629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29a4c1d-7c5b-4af6-acdc-8357971039e7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfee0c37-0b21-46fa-8d8b-bad64ccc9861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfd9aec-b258-4433-8fd0-fb5608b31666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da8f83c-eb11-44b9-b0be-fa389fdd7f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae78d381-1f63-4425-b849-59133d3c46a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8890fd-9ba5-4bee-b106-ac4c321519d2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2334220f-f61e-40b8-8d1c-c1a0f197a15f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82c7cc8-d7f9-4222-9a38-e7b832a0fb94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "244fc954-ae50-43d7-8681-688d84f3d4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e89594-3830-4cd3-9e1e-ea2e879ed516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63aac5f5-0c9a-4d57-8757-648f01480954",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b571c9-21cd-4ecc-9ea3-5939cf04ac27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e8d063-d38a-4124-be5c-c64ec0a7b46c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d37fcd3-a6f9-4ea4-b07f-8ab0010764d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fa1165-eb01-44cb-a740-fa582c51d69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69edfea3-3d00-4e0c-bb15-b0dfaab99218",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3090286-1da1-43af-9f45-c9534a71a01c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83c558ee-e915-452d-b3e3-b4a922257932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "961e2dce-7460-4a71-b4d2-d644249f4a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecfe14be-2d04-45aa-a100-9b491a3cdafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5029780-6cf5-4624-9435-086693d8750f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6222d966-7b2a-4a30-940c-e98b5bf8d329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d85b8afb-527e-4462-9c8a-42e8a4297f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c85404-dce5-4764-bd79-8f73a0c3f2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45adf2f6-4ae1-4c23-b1d0-235da32229f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae1d4a1-fd90-4c46-8260-afa547322d6b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199709cf-e3c1-44ab-8918-4e7628523e15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08942b89-d592-4f63-a253-41fb7cd914ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "788ddd22-c715-4688-8fe0-399566f37fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e839df4-efb4-4a73-ad80-5f8e5fc03cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fd8987-ed41-494a-aae4-9dd448db7f7a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ef3666-cb0c-4197-9cab-a96a207cd20f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2133a978-1b94-45ac-bb6d-097be0c796d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8c6319-f476-473f-a232-8875a23ca0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5dfa46a-b2c1-4190-be18-de5ad25ae279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b494a56b-e575-4042-93d9-3c2d7c717ec6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14277fd3-7948-40d1-a008-289e5bab0d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c1c855-6cde-477a-8bb2-568379454bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b62d9c-b438-42e4-9b81-6a2b06bcc57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a49a1cf-f57c-49ba-b178-6e2040ef14eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ffbed6-0d0a-44b4-b13d-fbb575a45764",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef0e8af-3896-4ab2-87eb-0a80ba436566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "942ad9d0-f5eb-4099-905d-95d9073bee2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a50229-85b4-4f9a-b0d2-df142ac64813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8e053f-efba-4871-8870-a11190fd47bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87f7960-dca6-480d-a15e-bb27d440f0d4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8809ba09-04a9-48b1-8e34-54e87b1f18de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "409de15e-bb4b-4e4e-9f3f-109b53d9d304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc587ba-0511-425a-916e-ef83281ae2c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5713dbe-4b9e-4ec7-a509-1a51600a8e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215dd1c4-a666-4b1c-9a0c-867d6019727b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc6e0c2-9402-4344-a001-dcd7034b2844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8730c64-3716-4717-a474-35c317a3a486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f08f8e-d8bf-4868-891f-0da99c87b1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43377ad5-0050-46d0-a6f8-be6c45284f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c64918f-97d7-47a5-9804-59db47a486cf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a1e53b-ae35-4a6e-b164-b0753f63104f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd7e88a8-9ff2-48f1-a849-f9ca7a48be14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3d2fd1-b516-4c58-9348-cb229d2c3b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b59d155-491c-49ac-a16d-d06a3e3f6269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def642f1-7d13-4152-a301-5cf21f46ef8d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb88fa5-0685-46f2-87e5-7c1626b3222b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82166339-0ad4-43d8-8bdd-ab75a5fa4036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef412e9-a33c-48dd-ba27-15820c272d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64353433-48a1-4cb2-b730-7f0891c6e1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741be412-f127-46f5-be1e-655cafef91ca",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be6fad0-c6b8-44e5-961a-1b7580e92ff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a43ece15-c515-4409-9962-026958d4b97e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134579aa-7629-4641-a1b8-f44d0ea1bfc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b34dc94-42fb-46cb-af31-91ce75666fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a8a80f-7544-4554-a8fd-28801b59d003",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d451cfc-ca73-4175-af5a-2b09254587a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078f397c-df58-41f9-b5f7-c00b0f8a598d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7b7632-d9b2-4910-affe-ee06d00e34dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "783f0e07-9002-41eb-8f0b-999eda8a8946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60e4319-a8dc-4c16-b099-93c34a5351b8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cd70ff-95e7-4279-9e93-f799c082e7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec91a17-ae03-4793-9edc-e59b17b3ef03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "badd31e6-8671-4cdd-9354-aded5789f3ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03730172-4584-471d-aec4-fb4e4af1b873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3032a1-6e6f-4259-b063-33a64b4d36ce",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65dadeb7-0ce1-4866-b44c-859d0495488c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc32f9b-aa53-4f0a-85e3-9164653262f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e847c708-a00c-4d6d-8d48-28b5ff192ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364fcdee-83cf-4693-873c-f99d57199168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6bfca1-d3d3-4b18-8b05-01c11440e010",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b980def-0b7b-4b33-a05e-4b40474ec14a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2301ae78-b316-4cd6-a498-26aac43d312c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7174561c-fd9e-446f-ad13-7f9ae66abae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c9e1fc-f55c-4b56-8be6-9a2f389c9f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5bfee6-a3ad-4f13-916e-f7887f391335",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c74602-e101-4353-947e-fe26491af94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8aa767-b7f6-4b02-bb79-121c1db2d8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89de546a-0606-46f2-8a41-9569c7c86853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1cdd81-b384-4adc-95cf-a5f0a270a11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd07854c-3472-4f02-b62c-59f7803b7210",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d570a7e-dcab-428d-b4de-90c433a72a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3149a879-2375-454f-a2cc-3b3b6d512b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb02e62-c377-4d69-b6cf-6eae8a7db25e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144f5c46-6b09-42c0-b16b-57d1c1c4edc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a12132a-e7c6-4efc-b013-c7374af4b08c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ffc0d2-7dbc-4fdc-9aef-a662276db2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e778bda-a6c6-4518-b6f9-ca7c1a44286f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d22681-4524-4c09-95cb-2e9769d4d594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10db04b9-3d46-4031-991d-f08bdca0188f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d92bbf-1daf-4242-be9e-7bc00c771ef5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e252a5d-c693-435b-9ac1-e1ffe986c8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6516275-5176-4889-bc31-a4d9d34c52df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5bdadb-1107-40ed-96b5-859a5593ef2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515866ef-6dae-412e-baf2-303670e50bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3998aa1-e5e4-4b90-bd5c-d527ea66abe8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0eb34d-3db5-4653-aaa5-7312186c4ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889694b3-26e1-4b78-9add-655ab591a035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebab47fa-555b-4d7b-8e6b-ecda21c19e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caac303f-314c-42da-8b61-9cfffe1ab376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd458728-5f8b-4906-84d2-ee62b53ca3cd",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed18efe-357d-4fad-862c-261b76a0f9a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5a7336-e8f7-464b-a3d4-eb85a095a7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d84ddf-529e-4750-ac50-c07838ad4b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "936e0634-8de8-4f92-85b0-d6ec0cb189a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10af345f-9bb4-4b5a-bd92-cdb8816654c8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a68725-16cb-4c6b-a6e1-97162aae3477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4cb7c6-8ae0-47dd-93aa-151560af2668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b742c59-3b6e-48e5-a1a1-71c6ac4ca741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430a0a43-e51f-41b9-bf1e-f5467d9fb005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8f3e3e-2e56-4ac6-8d80-08d39fa53045",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bfa0e6-7e76-4ae4-a8b9-eb2684fab6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c3aba2-d4a5-4f5d-a388-406ac12a49ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0183a1c3-c86b-4491-8b32-995474170255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "516ee474-37d6-4fa1-b12d-0750c18e5480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09643dc-bf8b-484b-9738-b2ba91e61f02",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8726709-0615-4a17-93b4-1041738172fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416c43d8-73ab-4182-8a7e-c4ccdb9d9414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10715222-68f1-48d6-9dca-c43f94dfba23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9945f4d-d83e-49b5-8a74-7a56962016fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43d69ee-9787-4744-854a-9d46839f3e82",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6416d0c-47cd-49f0-9869-acbf375cc9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77816b02-03be-4275-9d5d-afa7c40efa0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45cdca7-8476-48ef-80f0-df386205d1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809c517d-2071-4f87-8d90-dfee3fa25c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba708676-e600-4ed6-880b-ff7678e055c1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c564612b-40b1-47cf-89f3-c9c72b99ee64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414ba025-c3b5-4409-ab03-bcfafa2ba5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9990d150-6d24-4cf7-9caa-a96cb61fc250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3d406c-775c-488e-ad8b-14bb6304ab7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee022c9-eef8-4e9b-927f-d0c2ba8f5a49",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bf8c76-850a-44d3-a8e5-7eb90bcddee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6adbfb9c-ceff-4dcf-8454-144e3579ae30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b89dfc-715a-4232-bb89-0fe3e7da3d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb019c4-1661-411a-a24a-6a6365e3e855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237f0f31-9efd-4611-aafe-8d1aaa21a274",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0564ce1-b1ad-4243-ab95-96e83884fced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055efeee-aba5-4c64-a4d5-2e43e442b892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d81763-34d1-4adf-83ba-474df7cbbb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469d4597-b6e8-4eb0-8bc0-b67962e4b77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24af5b0e-007c-41f5-8f46-d93bde900aab",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8786cf6e-7691-441a-930c-661a1569a8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449daf91-6d39-483a-8954-d8b7d104de14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f41ce6-1942-44de-a20a-979d2950a43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9b39bf-bace-4ae8-92d8-56cc781d29bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013e77f5-a378-46c3-ac70-524a9d8ab42e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40de57d-544a-4265-9c1b-bc05d6c59c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1047785-b026-4f53-ab46-d1315bd04c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b57560-5c28-43e4-a574-e38b78be8709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32de431e-3220-4430-acd7-1697128c128e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42e93fb-d541-4220-887f-880aa2965546",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119d466a-421d-4ef5-9d42-38f8bb52aefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689f29d9-f510-4ede-97b8-6be8d7231797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb200e2-f870-4e60-86e9-d2dbf82bc09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99f44ac-f3bf-438a-ab65-c52ac93e1e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0000fa89-3b3c-4649-bc2c-1d639cd6c4cb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1450c8b4-0792-462e-bdf1-42d712bd4dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51497c8e-58da-4816-bc58-a74ecad35f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd2e6f3-8471-4ffa-89b5-baba71e0b13d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c5efe0-69e0-4b73-93a7-a0b9219fb14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5a436d-978e-4d27-a4b4-ec1ba36d671f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b501225-9c7f-476a-a2ef-3ee6caacc227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b9db4f-0723-44e0-a95a-1dfb4fe0a957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c64f239-e010-4ff6-a0c3-dc3e2601eba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bceb53b-be07-49be-b899-abfa2cad87dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb69803-18a5-45b0-a2eb-43c252b56644",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68bda35-dfac-4af9-835e-2c6afc003cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d1c3cc-f4ae-4919-b7d0-dfc63c49892b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5e61b9-6819-4278-ae7d-0dca2f6f231c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e5ddcd0-ba32-4d8c-a12a-9131ea9a379e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82b2a5b-ca1e-40d4-bf94-2a9c52416a26",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44378141-784f-40ff-9b76-c45b5ba30adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2043b0-b314-4dbe-9ed0-07c4553c1800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "300299ec-e12b-4162-bc09-c1e5983998c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d24d3b8-5a22-40c5-a149-74bf242c78a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a54a48b-ddd9-4443-91ee-8cd7eba4545c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56596ca-fe30-4b15-9364-c60f7a4d3785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b92bb5a-1fa9-46c3-a4eb-78d4e78684e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d18f2db-9836-4628-a644-ff94196d4181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8fd325-e450-444b-b351-246dfbfe6140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4c66c3-5158-4068-9e62-e282aa762600",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9053f1ce-634d-41de-983f-78c69d9af684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "126416cd-33d1-4e32-b86c-8db59ff821eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0623e793-1379-47a8-9f86-f9766654126a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf54cd14-e5ca-4b9d-8bba-da64fb875a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8775b8-af84-403e-ab47-5c9b926929c1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e074179c-ebe7-4673-b034-fa8bcd257b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a262816c-6aa9-4a88-ab49-daa2f4d8918a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7dbf0e2-3913-4da9-af3b-4cf00ae8f8b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef0938b-83db-4046-8909-77513f832544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a823e89-aae3-4107-96cb-cd432bea7ef7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1777817-f9ee-456b-a585-796273aa1916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48cf2c2-d291-41cc-a640-29815dadee8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ffbf4e-5757-4e67-bc96-7318d7d09f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756e9cdb-8688-44f6-a068-2008868d8094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e92e17-3c25-4cbf-8705-7ebde7ace176",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d6769b-6c65-4585-8d07-5686096aced7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff5d688-017d-4030-87e3-d94af60c2358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6da741-241a-4214-a3bb-41f5f80b9851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484cc103-cf1b-464a-95c7-0e8afe572e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c07cab-44ed-430f-8746-7d70a890fc22",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e71cdef-a411-4f62-ab3c-02f0614f947c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5622f1e-dfd9-4135-98a3-d960187f60bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e273a876-0a9d-4a9c-a104-ce7e4e239358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d5251d-6fc2-472f-8e90-c9c9c02af026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419f0214-a093-49cb-b4f1-bdd9c464cb6d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb0435a-f725-4d4f-8f74-703f4bfb704c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a66e30d2-1f7c-4f00-a349-189dbfc4823a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396e62b1-21ba-4f0f-90b1-aa5c396638fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "962afd1e-00c7-4434-ab77-83ae985c3848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0425162d-6a7e-453d-9bcd-a0d96113bae8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67beed03-2d11-46de-bc4a-3a11d993c88d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc5b9fe5-e31e-41e6-932d-8c909baa619f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba507c08-b234-40a6-91fe-82a8f7d1e05c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6411e843-7a34-4a36-a159-ff2244cb17e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999d84b4-601e-4f43-8143-c280d1b28115",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9ce8f9-0fe5-42cd-a33c-f3c052cc0f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f8525f3-d64c-4cbc-b6e8-598585955977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0640c8e9-821d-416f-8bfb-1a101b3db198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9f0d06-a740-41eb-9998-69d9d6523ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d56f905-f4ed-443d-aa43-e13973c46942",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c4ba97-73fd-44e1-b1f2-46bbbf9e1fe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14585aa3-c7b7-4ff8-8ad3-3ca2899a0bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0297fdf3-98a3-40bc-8a49-4d458c362c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8b439e-84c4-4e17-990c-5e0d7c398220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43ccc16-c619-454f-80a0-604447d5a11e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bde3943-6f31-4b36-8db5-7494f55a6c1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "465efc74-11d3-4ab8-970d-50d686ed951d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7108844a-3abe-42e9-85ad-291372d2f7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6e64e5-985d-43db-bf3c-ba2326e54b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f91287-e4e6-4c64-9024-941add953986",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a319f887-07c6-4cc4-8e52-b48ee807c93e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51469c1b-59ea-4a3b-a75d-17e9252fa827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bd944a-8a07-40ef-a594-b3848e17a5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd8dab9-5ca9-4c53-ac57-8945641d584b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f2ab2d-1b43-4240-a311-d0c172766176",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddcc0cd-643a-4f49-ac41-ccba6cdea44c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "281e8621-4202-4cf7-a30b-2ed55f78a07d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b438f418-60f1-4171-b665-f552ff910f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e7ecbe-01a7-4856-ac50-22a0837b8b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e2d251-82b0-4ed7-80fe-c610e763b260",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e29fa0-d5d8-4e34-9e9d-1dbe876b9a9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2809d705-c323-4c08-ab22-d95e84186aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989d8279-2002-400c-b1e3-19c1a235e556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a540fcb3-2c3e-4413-875f-7bcdc49f79c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4743b192-ec48-44fd-9a8f-009a6da98459",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3563355-a833-4552-9062-8023e248b8b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92ce1df4-39d2-4810-869a-f3e86b21f87c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69976606-d83f-44e2-b88c-5fe5fd7a993f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26368b58-c5ec-433e-b9be-0e9762fd1b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b14f99-6337-4cae-9aef-49fa028ad694",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0284ff0-3f0f-4b29-a857-233c0285882a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aff2e781-c985-43c7-ae22-67a878f0b4b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab928cb5-3f9e-49b9-b773-4d80e548837f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6301c168-80d9-44c0-8d8a-40bdff43a3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62138c98-244f-48c2-838f-fe920099a721",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95097bf-c4d0-48e9-a233-176c841b3df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db123ec-e888-4103-8a27-8329f27d0bdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd595e6-e5a0-4964-923e-50f2298c54c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de91dfa-244b-4295-8dfb-f7993e5ed50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8cd9f6-e1f1-41de-aae5-3e27be96244c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787f42c9-9368-403d-9ad7-3231888ac045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70056f7a-97f9-4a23-be75-99a795d79ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36300ee-d199-4922-8bc0-5e025d88a3ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c8b00c-9aff-490f-a230-6c6a8b85a6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b7674d-e956-42e1-b9af-3eef6e3c50b4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254a10c9-8395-47c2-863a-238530dcf575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b88bf51-c0ea-4229-a232-c14922f6bb6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "573d8766-e186-4c35-8e92-76f960a5b8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c08f74a-1669-45be-95d4-bc3c0719f4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07194b5b-7e71-4a70-9bc9-9425afb44243",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8367fed-8645-4ce8-98d7-f504149056cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c20cee8-180b-48ac-aa56-ab608e55dcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce57eaf5-5f86-4cba-b297-93e80d3a0d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7a83f3-45db-48ec-b3e0-01e0f67023e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739cc81c-3b41-4830-ba49-3da54d6cd69d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412c5f93-92bc-47df-ab20-203d619a0ab6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b240857-d324-44f4-a11a-c3b6bfb3796e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605acfe9-13f3-476c-a91d-7fca275fb581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281fe519-0ffd-4825-92aa-88965ec45e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b403b25-82e7-4b51-b09a-8f071fb3fa00",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecb595c-a419-479d-97ab-de3d123a1151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6cdb0fd-a7cc-44aa-99c5-fa443ce04b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1ba898-9ded-479d-bfa0-0d98f53ee021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51cedb1-6f52-4023-a20f-b1944cb2547a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1e7638-1bfe-4525-9404-e81cab6c037f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7610b59-5f98-46e7-af31-39efcb3c562d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be8b4232-caff-4ddb-aff4-4eca61fdb630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6791ac5-53da-41ef-9fa5-dfa16e240a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d2a343-d0a5-44ea-bbe9-9c3157e119b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39b622e-3657-4acc-87c0-4cf70de24e54",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d770880-064f-4d3f-a841-11cdfd4f1e85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a22d49f-7171-494a-9276-7d8d4a032e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9d3740-9d2b-4218-adc8-00bd3d8b6f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3895dc60-c0f6-4c9b-9eba-602de176f85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe337b8a-8398-4f2f-a42e-aaafa6fda476",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191cba15-4356-44a5-a470-52deae491991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d13f65-83a7-46ff-bd1b-b68a14135421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70ed8ac-1b92-48e5-90eb-74990ebbc712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054004b9-7f88-41e9-8e10-b20dc68bac8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b122a0d9-56de-4a95-8137-fc3a4df49f54",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccdfd6eb-6e12-49d9-b83b-842e0b236de7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03632dea-5fea-449b-a328-b6c1a3931e33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe4172d-3be6-4467-8b34-383b407de43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf34723d-2c5a-4bd2-93ed-ab22a58c5328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c14b7e-6cde-42e2-93a5-5a854c8576f3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ea2595-abda-4d2d-b986-85680865f067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36ec21c8-1f67-4e97-a078-23d0eb932fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b40839-0452-4a15-9af3-e1811405af18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1d3c9c-0cc0-4daf-8bfc-533c29ebb451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ff6ead-c9e4-4bb5-be3d-5a702367386f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ef8595-9dcc-4a5b-818d-a1c22522e968",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9cf2f85-6832-41d1-ae5e-1c84e3649070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad4d04c-ceb0-4e87-8296-024ef2e22fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f32bb1d-b0e3-4f7d-82a6-cca9b3c437ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7b1164-5de2-40ee-82ca-82e7ee58d523",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed888ef2-6879-4c1a-99aa-c9d24a9dc4dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdf7d053-e930-472c-901a-96f70e2a5006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b41cce-8707-46a3-9e0c-0206f43b52e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c0bbe7-6ee2-47a1-990a-8ffef397758f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d9d46d-0aa4-419a-9a0f-84d43c3e547e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2264964e-1069-4aff-b3e8-421f3ca76f74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44a98534-064b-481f-9d95-1ab9d5fe1f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "124b432e-d36f-4a54-ac0a-e58c53a991f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7de519-b9b8-4bd5-b5fe-dfd0e47c0e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c828718-0e85-43d3-af9a-0f503604631f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bd976d-f90c-4649-a4f7-a7be2817601d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53d3998d-ff3d-4639-b823-2c73550a3b65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7debe18-3ac9-4b2f-9cea-fd9b75e95694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aaae25f-f058-43dd-93be-5914f923baa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d62106-0651-4f41-9239-fb1f4bac4e2d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637fbbeb-722d-4e62-958b-e9f5d75cf1e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9876450b-b005-4c10-b037-d2558cfbf6e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82089de6-206c-4b7b-babb-a4ac75780c99",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eadb997e-817f-4107-9795-61ccf5627de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c93097-7794-49e5-8b6e-34f98647467f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9d1e63-be6e-4715-bfc3-609b70d10141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "258223b1-d523-439c-bf51-1cc93b8fbf55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdba0cd9-6488-4ab1-a40c-a319bb7109ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f695d6-7a82-4e3a-b68f-936f8c1d1ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355cf7a1-837d-42ce-befa-bcc4a195e117",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9e683f-672f-4d6a-8402-86100c32453b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2866e823-7469-4d9b-bac7-b6d09f8486f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "551420f7-1a7c-4bc8-acdd-587468db07bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdeb88bf-7dd4-459e-acfa-86919198d40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c13d470-a41e-404d-8439-cbffde8effb3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698842f8-01b4-4aba-a1f7-d7cece3169f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8bf2214-a0f6-40d6-aa57-fcb119edb394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f350664-e74c-4769-9b19-0be61831f72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e78dee-656b-4bf5-8a44-20263ad457a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84360457-265d-4146-a110-e9d446fa3272",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df68af61-acba-4fc1-8c5f-a83485ae3ec6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1250b4a5-b9ef-4734-8add-5a8f40007eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bd76b9-1971-4301-891a-7329690279a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89a5c90-1080-46fa-9456-54c816e00648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a4dded-43fd-41e6-9c0c-09ccdde085f2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c691fe7-502b-4723-8a16-7eb60e94292c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "825950ed-8356-4cab-aa56-07f73cfcea4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab65de2-d1c2-4fa5-a58f-5e1db09c7978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2e6b45-1403-4f13-a0bc-93ad2939d78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced9ac2a-3679-4bb0-9ba3-9dd44e241753",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ab1da9-e56c-455f-84eb-b2f6e377c5b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfd6e8a3-8b3d-4100-b981-6b90b9541f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9096c669-12e8-41cc-b23a-36e59672c48b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc3bc29-1ed9-4c7c-8585-9475ed5230f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2adabf-059a-43a1-8969-9c49cffd5c71",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b86a6c5-43fa-4643-a0a3-83833a0633f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e08ffe03-dded-463b-8918-8913186efbaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4666404d-348d-4715-af94-d59c7910dacc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dccf33b-7a24-4f28-a4d2-70495ca5dbdf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7a1f104-b45b-406f-861d-ac6483b424d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5c2f448-b1e0-48f2-b2d9-9989589cdddc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd5032a7-b9b0-412b-bdc7-beb9c24eac75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7da0c0fb-1e47-4de3-930d-28a75b99d183"
                    }
                  }
                ]
              },
              {
                "id": "74d51771-52c9-46ba-a266-2b1bb7ffd416",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df08dcd9-381c-44e8-a53c-36b547644970",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd52c54-4c76-468a-a067-83c6105abd89",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a340fb89-86df-47e0-83b5-4100dea42f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a97601a-e87b-40a5-8023-ae2f3dc1b962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c60fa86-4103-44ef-a225-5ae1e9de3556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b345e35e-1bae-420c-addd-0ca0b4746f87",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d82086-db41-4c39-bae6-37d256293ed1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4fb572e2-e7c7-40b3-9637-ed50e82a4417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc02316b-1d23-481f-933e-da1cccc4a58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb399c13-786c-4d0b-8812-d1ff5ae38969"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09b0ffca-2d0b-408c-afca-c6f285a968dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e40d718-f588-4b4b-b9d5-3d91ae14d1ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "94f9caea-e7bc-4931-acfa-163e9e341102",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "457ca512-3602-4ac1-96bc-62c6439edca6"
                    }
                  }
                ]
              },
              {
                "id": "fd016221-e5ec-4975-9fc8-c425ae0f4c24",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "29c870ae-fb59-478c-8679-10b04d0895f1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a97aff6-785d-4432-b81b-372013b3a46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b157b989-6d90-4835-8d51-fd5f6b7b67f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba82f2be-a260-4904-a6e3-e9a4c80e022a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42aa555b-c01c-46bd-9bda-7e6e150ba073"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6ab1f421-4ccc-4bb6-a609-6b39182eb99b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c9894da0-0f30-4f1e-b9fa-49470a6c5c9c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9e4625a-498f-4902-b9f6-9239526d68f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d0ede332-b1fd-40e0-ac2d-41e25202ec4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a244514-2b22-4819-8215-87ed8e6b6787",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62998a5a-95ba-41ae-84dc-81a717525ea9"
                    }
                  }
                ]
              },
              {
                "id": "1a2f4bd8-d2f2-4e1c-8aed-bd3da8854920",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddd98c47-b3f3-4c57-be5a-c20cfc49ebcb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6122d363-f527-422e-9228-5dd53c28ffba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9edc9d3-54f9-4920-b3a4-d7b16d3dead2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f94fb741-bc82-4a43-9e79-4aceda1db75a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b45462d0-a51b-4276-a8c5-44cb9370223c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7d1382f9-5770-4c6c-94cb-b6909abab7aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06cce283-4e72-4e18-a19a-7051c003745d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2e9d2d4-2cb4-49ff-a91c-9b73c6f3da12"
            }
          }
        ]
      },
      {
        "id": "a053eaa8-b33e-4c25-b369-32840cb840ee",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c873ae82-184b-4536-b2ad-ec1788d7445d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14c8047c-8010-45e7-8100-5c7c4056db88",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76c2babd-a5f8-464a-80df-cbf23d2b88a5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286108f6-9df2-4357-9d8c-cea44cf37f1c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0b358648-1b2a-4013-8a2b-c9fea6556f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94bb205-7637-46f1-85c9-8724874adebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "975b35f0-5e83-47af-8697-acff3dfffbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d42edd-ea0c-48b0-838a-14e37704e200",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628d2152-66ea-4a3c-85bc-a6207abf7068",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a818e672-a791-4a29-9e6d-a32e520a236e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acf3352-76a0-4ff7-9464-7f8825a1b2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cece5cc-6421-450a-8192-3941c5d4b4ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f292c6d-18e6-4455-973c-b7e5d8dbc97d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8d0fc4f-697c-4996-a738-6d1dcf78bc5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cf8053d-628d-41a8-92dc-97d9ee66d08d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd6bcf44-3bd1-4cc5-ad5b-157d4b071cec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4484c412-e73c-457e-8894-ee8c097d9aad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "71421bbf-2314-4adb-8696-a965b67879d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df7293d2-218d-49ad-9269-eb5da2d23aae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc01dcdf-aa4d-4b8d-81bb-c0ef8d9096eb"
            }
          }
        ]
      },
      {
        "id": "7464984f-41d2-4a05-aef0-928ca59bc20d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a20919a0-0f7a-4296-a879-dd201edc9777",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a964d641-1318-4c4b-b188-09b29ec33df6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb031f2c-a7d2-48ad-b972-3cf2eb5e2de1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31dd95c-51f9-46bd-96d0-3069913cc720",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "28ca4ebb-d93e-4a0d-95fb-223caecf3a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7e9fe5-ec26-4b88-8245-0f55f5dc9481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "144739c6-cc46-42fc-a97f-9d4511d30f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efc6173-2768-4a7b-bdd2-c7130d44ec24",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dc02fc-e10a-4866-bb3d-16cc5f6de3db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a631e368-4353-4157-b323-b4905cc518ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa30936b-a2f9-423d-9738-bfae92797ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "335b2999-52c4-4d23-91dc-9db58190a1cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ce93a30-0120-40f7-8b8b-36f99cf8f508",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5620dac-737d-4bfe-8f16-3c8fcdbab541"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "120c163c-ceb7-4f44-ac7f-7028744143b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d03e6a1e-fd7b-4c11-be37-641cf2918b7d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "814eb281-72ba-4e1f-8a1e-2573cd1c1eac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f15af094-b9de-47b4-8194-a77d7fe6c2ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d325b7b-f304-4fcc-85b2-6763950c69a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "404a1d6a-3fe0-4647-a23f-a6008fad73ca"
            }
          }
        ]
      },
      {
        "id": "4838a05e-10fa-4758-b1cd-0eff6c78d537",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1262c630-e3fb-4397-8c4c-341b39ff84e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1bcca13a-db34-4606-80a4-725c3d8f644c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3cd5d9cb-a591-4f25-a1ca-99fb9f7074f6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34314dfc-0000-4b6c-b287-95d469a43b1e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "80b2f874-80b9-464a-a761-87f2c2c81e13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "612a0928-32b0-4e11-9d79-5c0635e6d095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ce2e6e4-839e-432a-9c66-ddf5dc0a4578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95eab01b-b494-44b9-b840-270afef2ed27",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9e9c6b-2eed-4d85-a48a-c399f8e44203",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "20dee040-61f7-4169-82c9-5ca98f2ef6e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca03606-5f21-4f7c-89c6-520194a386e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b68d8bae-6619-4c3a-bc1d-0d722c21544b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a138ef14-31d8-486c-adc1-fae029ad58e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8be949d4-1e57-42b5-a729-7ec27268494e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e911c25d-ff43-4c5b-a0dd-0cd39abdf1bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f90a7640-eb3a-44d7-bbc4-57b8b9d0218d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "598cc3f3-6339-4376-b845-9a0d182595cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "08843d2a-b99d-4d7d-b90d-34800600fc0d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9be5112d-4249-48b3-b41d-bbdadf4d3326",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d466d418-95f4-4312-8a88-6603eeb99822"
            }
          }
        ]
      },
      {
        "id": "d6533fbb-251d-48e9-8cd6-82992316a527",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd2730c4-2119-4d71-a428-804161fe5163",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7713612-614e-49c0-8922-98a7210303c3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "24f4f30a-e827-48c9-b495-80288f8ffe7d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe206003-eea6-48b5-b7b2-6292bfcaa057",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "060dc917-05f9-4f2d-ae3b-4ce414fd5b54",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 85.17175572519083,
      "responseMin": 3,
      "responseMax": 1064,
      "responseSd": 176.61444261346662,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672965586768,
      "completed": 1672965620028
    },
    "executions": [
      {
        "id": "87a983e3-6d27-4e86-a457-d2e47b8b205f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ddf6d3e8-29cb-4207-b881-f8f0b6f9f25a",
          "httpRequestId": "63b632b0-0fab-4de5-b550-6d8f3732b640"
        },
        "item": {
          "id": "87a983e3-6d27-4e86-a457-d2e47b8b205f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "16d0d921-f59c-4fd5-a34f-5836361a14fc",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "361280f1-5f27-419f-8c0f-366ed475ba07",
        "cursor": {
          "ref": "4deec237-1719-4db2-9ae8-2f3bace7b6a1",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7267467b-18b6-4081-9f53-4caf3ffbecea"
        },
        "item": {
          "id": "361280f1-5f27-419f-8c0f-366ed475ba07",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "633ef2e1-d979-479f-809f-98a3fbe661bb",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "62f03da5-3f66-4556-99b0-1774c9d4b690",
        "cursor": {
          "ref": "718c103b-ebda-4b56-976d-636aabd25250",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3bdd6080-45f7-4e0c-8f73-2410a9d53ae2"
        },
        "item": {
          "id": "62f03da5-3f66-4556-99b0-1774c9d4b690",
          "name": "did_json"
        },
        "response": {
          "id": "0099b9cb-3a05-4f38-b788-fb2901209ae2",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c6bd65-5ab8-48df-95c4-1116dc5c37a5",
        "cursor": {
          "ref": "27e204c4-7369-4e0c-b14a-d2eccede98f6",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d0e303b3-7db0-4961-951c-f67ae50b085a"
        },
        "item": {
          "id": "84c6bd65-5ab8-48df-95c4-1116dc5c37a5",
          "name": "did:invalid"
        },
        "response": {
          "id": "eecddc72-618b-4764-bb7f-33d6cb78a9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c6bd65-5ab8-48df-95c4-1116dc5c37a5",
        "cursor": {
          "ref": "27e204c4-7369-4e0c-b14a-d2eccede98f6",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d0e303b3-7db0-4961-951c-f67ae50b085a"
        },
        "item": {
          "id": "84c6bd65-5ab8-48df-95c4-1116dc5c37a5",
          "name": "did:invalid"
        },
        "response": {
          "id": "eecddc72-618b-4764-bb7f-33d6cb78a9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5659738e-3892-4cf9-a705-77684fd9c7ab",
        "cursor": {
          "ref": "7733f044-aa47-4889-8f7f-e4d1a8617acd",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e4638219-ea5b-478c-b752-f9fab3e5c5dc"
        },
        "item": {
          "id": "5659738e-3892-4cf9-a705-77684fd9c7ab",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b01271b7-381b-4b05-a12a-7a1367e76cde",
          "status": "Not Found",
          "code": 404,
          "responseTime": 214,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35236c8-f5d4-4392-9f8c-f3456720bc61",
        "cursor": {
          "ref": "6413bb9c-4a09-43aa-94de-e53086bbffb8",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0d7c39ee-77e9-432f-a303-deba99e8bc4a"
        },
        "item": {
          "id": "b35236c8-f5d4-4392-9f8c-f3456720bc61",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "758a4b41-88d1-41ac-9641-be868e681acd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107be129-ec6b-4952-83fb-bbd869e8a90e",
        "cursor": {
          "ref": "8cdea747-cd97-4759-b14a-a6c49a6e1812",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "33337d01-82f0-4899-a914-b3ec679b7017"
        },
        "item": {
          "id": "107be129-ec6b-4952-83fb-bbd869e8a90e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1e1e4895-66e7-4bd8-9b77-00f36ee3d291",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4233be-1170-491a-ab05-f8f2b3b13ba9",
        "cursor": {
          "ref": "65dd56a4-fc0e-4551-9501-dd38c5743330",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c08f9f89-aacc-4fbc-91d2-091f2296d261"
        },
        "item": {
          "id": "3a4233be-1170-491a-ab05-f8f2b3b13ba9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d360cc51-85f4-4363-a3c3-75fd701a0351",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4233be-1170-491a-ab05-f8f2b3b13ba9",
        "cursor": {
          "ref": "65dd56a4-fc0e-4551-9501-dd38c5743330",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c08f9f89-aacc-4fbc-91d2-091f2296d261"
        },
        "item": {
          "id": "3a4233be-1170-491a-ab05-f8f2b3b13ba9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d360cc51-85f4-4363-a3c3-75fd701a0351",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c5ce56-a7f6-4527-9839-42f78f17a90c",
        "cursor": {
          "ref": "dac62b24-df20-40d1-a06c-6dc0539e52d5",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fab490d3-9a11-4408-b6d5-cd603fa1a86e"
        },
        "item": {
          "id": "f4c5ce56-a7f6-4527-9839-42f78f17a90c",
          "name": "identifiers"
        },
        "response": {
          "id": "6058a4a1-a6c0-457f-9aef-c899ca8ca0d3",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd29927-e41e-4351-8c44-3528d686f67d",
        "cursor": {
          "ref": "3744cdf6-f55f-4e01-b6ec-837bc26830f1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a7571e75-5b77-40e4-9d4f-15e5d3fd4ea3"
        },
        "item": {
          "id": "0bd29927-e41e-4351-8c44-3528d686f67d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5376e5d8-ba95-4662-be90-17622acd1052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd29927-e41e-4351-8c44-3528d686f67d",
        "cursor": {
          "ref": "3744cdf6-f55f-4e01-b6ec-837bc26830f1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a7571e75-5b77-40e4-9d4f-15e5d3fd4ea3"
        },
        "item": {
          "id": "0bd29927-e41e-4351-8c44-3528d686f67d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5376e5d8-ba95-4662-be90-17622acd1052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8aa1585-c88f-4909-9742-c67735093221",
        "cursor": {
          "ref": "74aa40b5-222d-4cb9-884d-6e66dd8820ef",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7baf3ea9-7af0-4b0c-8ea3-f450520c6428"
        },
        "item": {
          "id": "d8aa1585-c88f-4909-9742-c67735093221",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5089923e-8fe8-4e5e-a4f5-4cab1eb7c8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2bb883-d0e1-49e2-8497-06af09088f12",
        "cursor": {
          "ref": "50ce8cbd-d441-4aee-89eb-1317ca2f9cba",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0c2acb66-d63a-4c19-b02d-90c8b8f17cd5"
        },
        "item": {
          "id": "0c2bb883-d0e1-49e2-8497-06af09088f12",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "1ee395a6-630c-42c6-9b15-3d5a31711984",
          "status": "Created",
          "code": 201,
          "responseTime": 1064,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "1f121152-ee78-4111-8323-84e291c1e93b",
        "cursor": {
          "ref": "61355e82-d560-42d9-b68b-1de17c97cfb7",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4e40c2b0-bf77-4caa-a792-55f0c934bba2"
        },
        "item": {
          "id": "1f121152-ee78-4111-8323-84e291c1e93b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "be3772e3-c63a-42b2-ae5e-7398c2859dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fe6ad4-9b94-4a24-a1cd-59917b062055",
        "cursor": {
          "ref": "7bc0390e-2bd2-4f22-af88-41bd94b92095",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0cfcefc5-70cc-45f0-952e-b6d59a06b3e4"
        },
        "item": {
          "id": "b6fe6ad4-9b94-4a24-a1cd-59917b062055",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5a8a2672-2eab-4d8c-9e9e-52a06c6228a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2340c310-3658-4d42-a21d-f9cacc43549d",
        "cursor": {
          "ref": "62c3430c-a016-4a57-b99c-d7b6caa86f35",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "82f7e16b-23e9-4a60-b266-c21306ff88a4"
        },
        "item": {
          "id": "2340c310-3658-4d42-a21d-f9cacc43549d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1d5061da-4615-4828-9bf8-b30dcbf2cad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31851cb-25d7-4870-8eb0-6ac5fab1836c",
        "cursor": {
          "ref": "79b9171d-e895-4e89-a7b6-e4ba57e934f5",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ac724a26-7c1a-444f-b622-f69fad2c9627"
        },
        "item": {
          "id": "d31851cb-25d7-4870-8eb0-6ac5fab1836c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a7222cda-9d83-497f-99ec-977eaad35d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f01a181-988e-4c92-be26-19315e86c636",
        "cursor": {
          "ref": "5448e8f2-34c5-4a56-8350-8967247b80be",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c6a40813-f72a-4fed-9462-2051bd8f37f0"
        },
        "item": {
          "id": "6f01a181-988e-4c92-be26-19315e86c636",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d5be9388-eb83-4f53-bc8b-4bac9ddfcb1a",
          "status": "Created",
          "code": 201,
          "responseTime": 511,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "30a65a1d-feaf-4d5f-8fb1-43c0e730d536",
        "cursor": {
          "ref": "69a13af0-3af1-468d-8926-3abc8e90060e",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "83aad653-c76d-47b7-9699-587a7f4f74f2"
        },
        "item": {
          "id": "30a65a1d-feaf-4d5f-8fb1-43c0e730d536",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a3f47712-6400-49be-9100-9e4be486a1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0fdbcd-f4b9-47a1-a2c8-77103176f1ad",
        "cursor": {
          "ref": "2674986b-a5ff-459c-b996-4a862d10883c",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b105c6a2-89ab-4ff7-868b-f936a3705c29"
        },
        "item": {
          "id": "7a0fdbcd-f4b9-47a1-a2c8-77103176f1ad",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0407aec3-ed55-45af-9310-12b73e3521e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5393f346-efd5-4043-a9c6-766244e00b33",
        "cursor": {
          "ref": "d1f10157-cd17-4cfe-a0ad-705d8b906a29",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3f96e5ff-b821-4e8f-a485-23d8a757a556"
        },
        "item": {
          "id": "5393f346-efd5-4043-a9c6-766244e00b33",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "055ef1f4-4b89-4068-97ba-ca222d68ca55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdd2e9d-7bdd-4d25-a3d9-c45f0dbc0834",
        "cursor": {
          "ref": "9cae4393-21a4-491a-b0a1-c0c9ea0932f2",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c6c50881-7c47-4417-9132-2db80009f525"
        },
        "item": {
          "id": "dfdd2e9d-7bdd-4d25-a3d9-c45f0dbc0834",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "391a8e23-52d9-406c-a822-41407d0f9e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e7b295-b246-41a1-9bfc-9c5ab468f451",
        "cursor": {
          "ref": "098c669c-c4ca-4183-bedd-859b150ba246",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b39166d4-c3fa-418d-8b79-2e730ba5a65f"
        },
        "item": {
          "id": "33e7b295-b246-41a1-9bfc-9c5ab468f451",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ac366738-3023-4135-9df3-f666dbc682af",
          "status": "Created",
          "code": 201,
          "responseTime": 493,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "94649f54-c86b-4429-94ea-65d412ce2480",
        "cursor": {
          "ref": "8f1fd59c-7f58-4b45-b501-725b110260f5",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0a322dfd-87d9-4d13-bb92-99b9d05264fd"
        },
        "item": {
          "id": "94649f54-c86b-4429-94ea-65d412ce2480",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "83c5ae84-101d-425f-8027-8028d1c8b15b",
          "status": "Created",
          "code": 201,
          "responseTime": 928,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a5b0eca7-872c-4706-820f-c857f7f71e84",
        "cursor": {
          "ref": "f4f2417b-97f4-485b-9f0f-7af6597e306c",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2fdad491-4ab6-436a-8aa1-ecbaf2333792"
        },
        "item": {
          "id": "a5b0eca7-872c-4706-820f-c857f7f71e84",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8614dfd7-e546-472a-8740-d84cb68efcb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0002f8-5d26-4b15-b826-5cd84d3c718e",
        "cursor": {
          "ref": "45c5541e-5826-404c-9a36-d379cdf6097a",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e1ed3c82-8d17-4c67-abc7-074cf23f9320"
        },
        "item": {
          "id": "1c0002f8-5d26-4b15-b826-5cd84d3c718e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6c4694be-d917-4aac-8124-7ccafc080e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782bfd48-fa62-4d3b-9324-97c48dc98a01",
        "cursor": {
          "ref": "f26a46cc-4b04-4e15-b3ac-50ad07d36838",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1efc8b37-3c2e-459c-9d1c-5ba76c92058f"
        },
        "item": {
          "id": "782bfd48-fa62-4d3b-9324-97c48dc98a01",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dc022c60-2198-4b8f-9544-2fabf138d438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fcb20f-7fb7-4b8d-9a8f-afe713ce3ce8",
        "cursor": {
          "ref": "d2998564-2162-4218-b0c9-4405e7979b2e",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1b305832-d79d-4376-8ef8-7dda619350fa"
        },
        "item": {
          "id": "67fcb20f-7fb7-4b8d-9a8f-afe713ce3ce8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "63abcfb7-074e-4475-9e63-481890f399fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07cff24-2b85-4f1a-98a3-dadde6f1daca",
        "cursor": {
          "ref": "5a97019b-9c51-45cf-ac50-f5453da0c2a8",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7ea2c53f-7837-4121-969b-4d39f3dc87ca"
        },
        "item": {
          "id": "a07cff24-2b85-4f1a-98a3-dadde6f1daca",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ac21de0b-9ef3-45f7-94a9-8cf858500976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4316d108-95c3-4e0d-8b03-dac4fa665521",
        "cursor": {
          "ref": "6f01f0e8-94dc-47b2-8ec2-9ca9abc47110",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "392c36f4-515c-49c1-a7d9-d25e91f7e44f"
        },
        "item": {
          "id": "4316d108-95c3-4e0d-8b03-dac4fa665521",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "01bfa303-4dfc-4037-ac19-30a16873f056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d65dcc-8a9b-480a-81bf-bdb12d028f5a",
        "cursor": {
          "ref": "77dbce54-d9c9-4035-b136-e9060428d719",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "772e0d3e-8068-445b-828b-f3e3f867697b"
        },
        "item": {
          "id": "94d65dcc-8a9b-480a-81bf-bdb12d028f5a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4b43be87-e25c-4c32-9912-5b6c6b2b78d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57ff412-f3f3-4cc9-a3c0-13364791674d",
        "cursor": {
          "ref": "50814d0c-ef63-4410-b74e-5cef16f592eb",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3d58ed70-c6b3-47d1-802b-ec5b85de6950"
        },
        "item": {
          "id": "c57ff412-f3f3-4cc9-a3c0-13364791674d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "94e159e8-5e02-48d2-9bcb-f3510fa6572e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fafb71f-b8da-4770-9ab5-d3286b26f097",
        "cursor": {
          "ref": "5d1b1e42-a11c-42a1-a9db-dd75bd59c135",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "aca6217d-1f1a-43e2-b521-a31903832423"
        },
        "item": {
          "id": "8fafb71f-b8da-4770-9ab5-d3286b26f097",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c409ff69-78a4-4405-ac77-02fe84faf4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82cb2edf-81ab-489a-b7c3-289fff08eead",
        "cursor": {
          "ref": "cee80518-b70d-47f0-85cb-f536056f1646",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b9a8cc3b-bef8-45b5-95c1-5b3654756eaf"
        },
        "item": {
          "id": "82cb2edf-81ab-489a-b7c3-289fff08eead",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "556eae98-4d61-4f99-8e32-ed2cbb85d0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf2cc84-a326-4ebf-a230-0e8c43cfefe3",
        "cursor": {
          "ref": "cb4f76c9-981a-4cfb-a19e-89cb91037057",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6e9b6457-5db5-4929-bfe7-2273a26fd030"
        },
        "item": {
          "id": "edf2cc84-a326-4ebf-a230-0e8c43cfefe3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cc14c3c4-5066-4633-b087-669c4744eb6a",
          "status": "Created",
          "code": 201,
          "responseTime": 620,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "9bcb0aab-e7bb-42c2-8a5e-89cb58f6862f",
        "cursor": {
          "ref": "9ca5d5f9-bae0-45fd-a349-70597e8defd0",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a82c9a9b-4d3f-49fb-8806-c01168f881e8"
        },
        "item": {
          "id": "9bcb0aab-e7bb-42c2-8a5e-89cb58f6862f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "79ee6a59-57f5-411b-b0e6-2846450541b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f27c8e-12ca-4d4d-a443-7920b4b06d17",
        "cursor": {
          "ref": "8efc01f7-7e7a-4972-a431-ee7b6f2b4988",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b4aca4e2-ff6d-4e1e-9d1b-a6530f11d94d"
        },
        "item": {
          "id": "c4f27c8e-12ca-4d4d-a443-7920b4b06d17",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "08446206-e456-4f26-a811-b3fbfe486d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54deb1dc-4c0f-4192-a43e-6997b24af1ab",
        "cursor": {
          "ref": "c4b498a5-5976-4736-8b4e-936f2d046749",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6f5b1406-e439-4168-8335-a0c75d8eed6e"
        },
        "item": {
          "id": "54deb1dc-4c0f-4192-a43e-6997b24af1ab",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "218dca05-f3a7-4a7b-ab15-24aaf49b93b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd57957b-b8b3-46b6-a507-e946d1b9f27b",
        "cursor": {
          "ref": "af856510-bc0b-45fb-aac3-6a2603bf22ca",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bc45bd40-9bc2-4c03-9061-9c6e0a06743c"
        },
        "item": {
          "id": "bd57957b-b8b3-46b6-a507-e946d1b9f27b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1290291a-c873-401c-bd97-cd8674866cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f70ff4c-27bc-4ddc-a78b-fadfeb1877cf",
        "cursor": {
          "ref": "3ce84060-869e-456a-b8dd-1c71ba90431d",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "24c3d92c-a18b-47c5-b3e4-f62b6453c28c"
        },
        "item": {
          "id": "6f70ff4c-27bc-4ddc-a78b-fadfeb1877cf",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ce38bf97-f898-45fd-8afd-7b281ce06969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bf15b8-e08f-421b-a423-d9d29cb57830",
        "cursor": {
          "ref": "7da9533a-4a42-4830-9386-9695b99de2c2",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fb0c9818-0333-4ded-b019-bb238b6926b0"
        },
        "item": {
          "id": "48bf15b8-e08f-421b-a423-d9d29cb57830",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e43dc82f-e207-4a85-a11f-735cd7b15a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c07543-94a5-45be-ae42-ce7b86f40452",
        "cursor": {
          "ref": "75c7c282-fe16-4fbd-acfc-be6a0a3b28c5",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "14cfe5a2-e8be-435a-ba54-20e816c41edd"
        },
        "item": {
          "id": "b5c07543-94a5-45be-ae42-ce7b86f40452",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "216825ff-ae69-4e18-b969-44d9b50e39c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab86c8b-9b6d-4b0e-be47-729082b6e87e",
        "cursor": {
          "ref": "0c677c52-b182-49e1-8b48-e3661a9f58a4",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cdb53bbc-849b-429d-b1af-be55511d262a"
        },
        "item": {
          "id": "2ab86c8b-9b6d-4b0e-be47-729082b6e87e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "41a9d4b5-fc44-4fff-b6cd-9bd9f04587ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84694354-b22d-4363-824b-1a2fa5e53343",
        "cursor": {
          "ref": "c478ce4f-9e38-4767-839c-c59a2ae15cde",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "68428bc8-d82b-4070-b457-e0103c4aa8e9"
        },
        "item": {
          "id": "84694354-b22d-4363-824b-1a2fa5e53343",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "410c7ceb-8f54-4419-9eaa-b5d5cd10ff6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8293c32d-111f-403e-94cf-a9bb15c92cac",
        "cursor": {
          "ref": "06a6cc99-e06d-485b-a924-f942442f5628",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2905c3ac-52c0-4b2c-b25d-a1ed6c08c015"
        },
        "item": {
          "id": "8293c32d-111f-403e-94cf-a9bb15c92cac",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a00952ed-3d1a-41c6-8fe2-fee67276733e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c1eb19-1907-4b93-9997-1a6c76c87f44",
        "cursor": {
          "ref": "ae86ecb5-659f-4166-a9f1-7af6b83f9509",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9997288a-1830-4d69-985b-57e034a3ccde"
        },
        "item": {
          "id": "15c1eb19-1907-4b93-9997-1a6c76c87f44",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "99b6477c-f61f-49b1-aa78-ba71099606ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d3b64f-a5ef-49d9-83cc-6a7be4263a47",
        "cursor": {
          "ref": "6c8d21ce-f26d-464b-ab43-aa6ab4c6cc3b",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "74c0cfda-2307-4aa8-b9d3-3a144b18a4f0"
        },
        "item": {
          "id": "d7d3b64f-a5ef-49d9-83cc-6a7be4263a47",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e9f0055d-309b-4ec7-9636-2eed93684793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c0b937-b662-45d9-a56e-53579f696859",
        "cursor": {
          "ref": "cd0c2dba-ffbf-4d1e-bfea-32f82f1aadb7",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "01401cde-0190-4730-a3a5-4f1c094aa447"
        },
        "item": {
          "id": "a9c0b937-b662-45d9-a56e-53579f696859",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d038d825-10fc-4f2c-b0fb-2eddfdc6d521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5ac37521-554c-44aa-a8ec-d71a21db9086",
        "cursor": {
          "ref": "4d620c95-cdb8-487f-8869-9bf12fdeb214",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "193be730-19a8-4467-a536-8387833f4de2"
        },
        "item": {
          "id": "5ac37521-554c-44aa-a8ec-d71a21db9086",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "27eb3e7a-ab25-442c-be25-0903af628bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dbfb076-f5ce-4773-915f-3b73622b418a",
        "cursor": {
          "ref": "e00cc3d1-ca96-4fcb-92e3-b3639c8ed7f3",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "17dc2d71-478b-4a5e-9eef-421ca2cd748a"
        },
        "item": {
          "id": "2dbfb076-f5ce-4773-915f-3b73622b418a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4a642219-2d37-41d8-bc77-911c2e4496a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104c7471-58a1-4f75-bfad-82595922ee29",
        "cursor": {
          "ref": "a4728eeb-5501-4201-b8d6-a8ee46331b09",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b7416b65-3474-4c52-a01a-a4b158390d56"
        },
        "item": {
          "id": "104c7471-58a1-4f75-bfad-82595922ee29",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d01cc1a0-3c16-4594-9a5a-c431d211cb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358131e8-e84d-4f43-ac19-609f2c36dce9",
        "cursor": {
          "ref": "5c5f105b-05a6-41f4-8c85-9fb2ac64727c",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "29233cca-68eb-4792-a105-3fa5dae43e01"
        },
        "item": {
          "id": "358131e8-e84d-4f43-ac19-609f2c36dce9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "70b0c9ac-13f2-4a4f-bfda-a64137a5187f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9184ae47-742f-4639-9eed-22ad0a2bb765",
        "cursor": {
          "ref": "b1cc8f13-3235-42a8-8966-ba74b4b3fa63",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ffd9e042-9b57-407e-8b20-4d835b7f4bf3"
        },
        "item": {
          "id": "9184ae47-742f-4639-9eed-22ad0a2bb765",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3cfaa21e-13a6-4f7e-bca3-18d0c048575a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3c235a-d25d-4fb9-a3a2-e96b15bd7dce",
        "cursor": {
          "ref": "de83c2b1-312c-4a24-9f2b-bd685b309e01",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1f5b02e7-1242-4fb2-bbf9-300c0e70a52b"
        },
        "item": {
          "id": "1e3c235a-d25d-4fb9-a3a2-e96b15bd7dce",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9a4c775f-54f7-4483-a5e8-21b810213703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f28434-2fc7-43a5-b6d9-41817d14ab59",
        "cursor": {
          "ref": "688e11f0-fde8-45df-9d11-4e93010f970b",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d0014d8e-19fa-43c3-9dca-57a1bde8369a"
        },
        "item": {
          "id": "b6f28434-2fc7-43a5-b6d9-41817d14ab59",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6886ea31-7507-4017-8a9b-78cadecec274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 358,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "2860ab00-4448-42fd-8fed-121879d00f2f",
        "cursor": {
          "ref": "3bf3bd8b-e8d9-4ba5-94be-0ac923058dc9",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "40902380-d403-4c8c-9a13-17e5a7bd7207"
        },
        "item": {
          "id": "2860ab00-4448-42fd-8fed-121879d00f2f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ef47b4c7-633b-464c-96ec-d307b897300e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53e6dfe-8cae-42e3-a22b-0e56f40fc5cf",
        "cursor": {
          "ref": "db03153a-156c-45c8-a722-e613ffbff224",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f15f4ea7-9bfb-491e-9fe4-af4ed7455851"
        },
        "item": {
          "id": "b53e6dfe-8cae-42e3-a22b-0e56f40fc5cf",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a2875615-648c-43cc-9ada-025158ff0fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a34c927-7539-4d6c-ab3e-3352abea42fd",
        "cursor": {
          "ref": "c67e2414-8ebe-4f0e-ac2e-9e2ebc609d01",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8476f588-fd0b-4d96-afe0-af01e910ebf6"
        },
        "item": {
          "id": "0a34c927-7539-4d6c-ab3e-3352abea42fd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e5b25cc4-a9ac-49b1-9c7a-2863f6cb29b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc74d96-a1b9-44d2-8c26-e1a5d98a0417",
        "cursor": {
          "ref": "64d139cc-aab8-4404-b8b0-18f86a445ec2",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e8d39eff-c9bd-4c02-957d-d5df7804059f"
        },
        "item": {
          "id": "2cc74d96-a1b9-44d2-8c26-e1a5d98a0417",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e374c537-88cb-47ed-ba69-9a62fa56e1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6d4f9f-c691-4524-bb4f-b6b9b588324d",
        "cursor": {
          "ref": "878e5f2e-6e50-43ff-97f9-0a5d1b4bd41e",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "00d58c9b-989f-47a4-8640-5bb790e5967f"
        },
        "item": {
          "id": "7c6d4f9f-c691-4524-bb4f-b6b9b588324d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "14857920-9966-410e-a082-931fb82c411a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d46c48-51e3-4df9-b891-59475edaeb3a",
        "cursor": {
          "ref": "30eaa72c-135a-438b-9f5a-bfc0f92e232c",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f5bd7d4d-2230-4939-8e71-5bcc68eb8ef3"
        },
        "item": {
          "id": "70d46c48-51e3-4df9-b891-59475edaeb3a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "66972d9d-5e9c-4c0c-b5a6-93774e80afbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db7d892-6760-41b2-aee0-6c69c4380873",
        "cursor": {
          "ref": "7052042d-def5-49a4-854c-97ea6e7b2be5",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3e767bf1-c5e4-4541-9e07-3a6d10b54ce1"
        },
        "item": {
          "id": "9db7d892-6760-41b2-aee0-6c69c4380873",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dee2b2d7-3cfa-4ebc-b48c-56b06b61eb24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8790ccd-fe3f-45fa-81a0-c1e3cec4affc",
        "cursor": {
          "ref": "6f03a492-bfa0-46fd-a69a-8c4f5a62bb33",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "832bc1f1-0308-4710-b9a7-407644bbf1c1"
        },
        "item": {
          "id": "c8790ccd-fe3f-45fa-81a0-c1e3cec4affc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "af148506-37b3-46f5-adab-201a5fe77c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91dba2e2-2a84-407b-aaaa-8f0e93c8f622",
        "cursor": {
          "ref": "a03a1936-f52b-4554-98a4-a50acd1bd26e",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f1439355-5229-4fe9-86b6-dd21736db09c"
        },
        "item": {
          "id": "91dba2e2-2a84-407b-aaaa-8f0e93c8f622",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c9cbe57d-8b5d-4c24-9905-a1248db09333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb06c289-a9e4-4797-a78c-f0ea7ee043f3",
        "cursor": {
          "ref": "c68237fc-c17f-4bd2-a09a-79f4fe2bf810",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "805b6c95-7332-43b7-b3fe-3fe41be70896"
        },
        "item": {
          "id": "eb06c289-a9e4-4797-a78c-f0ea7ee043f3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e7f11ad0-7951-435a-814a-716e983d7fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d1f298-cf75-4093-9e00-1c1403e78c50",
        "cursor": {
          "ref": "32cae1ff-ed25-4602-84eb-e49a40084b26",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "02a70a84-fa33-4dda-bab9-dbc75edb0ac2"
        },
        "item": {
          "id": "68d1f298-cf75-4093-9e00-1c1403e78c50",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2856ce04-42eb-4420-9251-c1b674a4810a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c91e5a-697f-4253-9935-974a72936449",
        "cursor": {
          "ref": "8061ce11-d8ca-4db8-a211-dda8f344b413",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6bfec2ce-45d6-4f37-9cb4-9f2f27d2e5ff"
        },
        "item": {
          "id": "87c91e5a-697f-4253-9935-974a72936449",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6c13126c-0e87-4f2a-a7d8-8d94da9691d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b831d2b4-abb2-449a-942e-ec2c4e619822",
        "cursor": {
          "ref": "390606aa-322f-41ca-8df8-bdc2b808f3c5",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f34c9bd5-215e-4a9e-bc6b-de2bd4f1b68f"
        },
        "item": {
          "id": "b831d2b4-abb2-449a-942e-ec2c4e619822",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1797e7d3-e867-4fce-a007-3310bd479069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37186305-f396-4398-88f0-26cbdf406e18",
        "cursor": {
          "ref": "2a9e22db-0c25-4a85-88ea-da25d93caeea",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e9dbd3e7-ea76-4fd9-a073-49e6fe49d58f"
        },
        "item": {
          "id": "37186305-f396-4398-88f0-26cbdf406e18",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e86b8c5a-c6a9-46ef-98ac-7f683cc03d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c539a7a1-3c1e-4e3d-ba8c-7a2175e570f6",
        "cursor": {
          "ref": "12839572-242a-413f-a254-6e3d1b17ae05",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "67001200-2a04-4da0-b5d9-f4ad71ea846a"
        },
        "item": {
          "id": "c539a7a1-3c1e-4e3d-ba8c-7a2175e570f6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b7b82387-a6ab-454d-8543-c5e6fab5b5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c35f343-4862-4cf0-8102-0385e7ee13c4",
        "cursor": {
          "ref": "842f5e13-cc38-4dc4-bc20-bfdab7045542",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fe234717-6c65-4d18-ba73-ee56af91d61c"
        },
        "item": {
          "id": "0c35f343-4862-4cf0-8102-0385e7ee13c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "42556d41-c82b-409e-91b4-4684495a7ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7250b659-d3b5-4268-911d-ef16b9aa6c0f",
        "cursor": {
          "ref": "05e15acf-a9fd-43b5-9664-07a1d8a37f2e",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6fd41e15-08b7-4d01-ae11-ee16945d4206"
        },
        "item": {
          "id": "7250b659-d3b5-4268-911d-ef16b9aa6c0f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2b0d530f-1683-47dd-a1ee-f4fcfd723f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027e5ca8-a54d-470c-b25e-33bb15e4327d",
        "cursor": {
          "ref": "f0cba87d-2cac-4f8a-b4e7-883cb91fccbe",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2d1a88fd-b969-482a-a83c-6f66a4e136fd"
        },
        "item": {
          "id": "027e5ca8-a54d-470c-b25e-33bb15e4327d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "407fe751-a5f9-4172-820b-9ff6bb321c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53869ce-b02f-4f87-b89d-29ba6cb94394",
        "cursor": {
          "ref": "ff702c3d-fd23-4463-b132-4da69714bdac",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "694a0214-a603-4537-a487-eb7262cce502"
        },
        "item": {
          "id": "f53869ce-b02f-4f87-b89d-29ba6cb94394",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6daa5e00-4fd1-4f4c-9b65-de793c514e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a444007-6514-48b1-8118-11eb2c2e9cb7",
        "cursor": {
          "ref": "0fe0814e-3a27-434a-a90c-602f140a6b00",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a9173620-daf0-49ca-bae8-efa8e641008f"
        },
        "item": {
          "id": "4a444007-6514-48b1-8118-11eb2c2e9cb7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0dabe5c5-60e8-4b30-a7bd-2e4d497df818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a9f4c1-3998-41b7-bfe2-a58b2dd230a9",
        "cursor": {
          "ref": "e2f0a3b0-046a-4cfb-9957-7cb389d4f26d",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d226934c-6d87-426a-8621-99f426fd374c"
        },
        "item": {
          "id": "d6a9f4c1-3998-41b7-bfe2-a58b2dd230a9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9a7374bd-8a1f-4c6f-b8a9-549f12279084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e755a42-0ef0-402a-943f-b09138596d98",
        "cursor": {
          "ref": "250821bc-72ee-4216-b98f-19e44cf2fc7a",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5261678c-c435-4015-be86-779fe49ad45f"
        },
        "item": {
          "id": "7e755a42-0ef0-402a-943f-b09138596d98",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "954b88d8-7f4e-42af-84f4-e76d3164e1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc411e71-19e4-4837-bd60-1fad58253ae1",
        "cursor": {
          "ref": "f70965eb-7082-48cf-9793-aec833032c8f",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e587bde4-5eed-4f9c-b90f-a3d5ee0cb6c6"
        },
        "item": {
          "id": "dc411e71-19e4-4837-bd60-1fad58253ae1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1ee46adb-0d2e-4934-b725-78fb3bd5602c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b35702-4415-4ddf-ba59-678d4a6896f7",
        "cursor": {
          "ref": "8c0f7a00-7db1-40ee-8dff-7bb198b4c7fc",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "766d0cb2-e2d8-4199-85f7-19e28c9ca01d"
        },
        "item": {
          "id": "e8b35702-4415-4ddf-ba59-678d4a6896f7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "77826b6d-f538-453a-a679-3cca45b6b7d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e278a4d-3511-4137-9e5b-8741cf6857bf",
        "cursor": {
          "ref": "b4696631-ff0c-4744-b603-ad67b8d245f8",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "235dc8c1-6661-4fb7-959d-bc68e9c8944d"
        },
        "item": {
          "id": "7e278a4d-3511-4137-9e5b-8741cf6857bf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d621268b-7212-4f85-bccf-92ac039f8982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fddd5f-e9c2-4876-a5d0-4cda98116ee3",
        "cursor": {
          "ref": "09868510-0bb6-4b11-8a03-51e004b1b520",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9ac7303c-e631-40da-94c8-e17c2a34efb5"
        },
        "item": {
          "id": "03fddd5f-e9c2-4876-a5d0-4cda98116ee3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fecb8642-c8f9-4f52-a584-b30a60a61dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f975ec59-8b3c-4076-b8f8-a51e2870e8a6",
        "cursor": {
          "ref": "b88047ad-79be-4529-8e88-8bad5a77516b",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7119f0e4-1c9c-4ab5-afa6-5549a62db252"
        },
        "item": {
          "id": "f975ec59-8b3c-4076-b8f8-a51e2870e8a6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "923b7afa-c385-4211-ba46-c556cbca9e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da24ef94-9516-48a8-ab80-b1964cf65083",
        "cursor": {
          "ref": "2631e603-efab-441b-bed6-88c5c052049b",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "99c6ac9d-ba15-43e7-9b02-1ac4efeee972"
        },
        "item": {
          "id": "da24ef94-9516-48a8-ab80-b1964cf65083",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5a8948cb-7dc9-4651-875a-e769ed10958a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16804c6f-e51d-4969-9894-65d55a6ad1de",
        "cursor": {
          "ref": "28187b2f-e1a5-45d4-b17b-f95b4f8cdc5e",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a61d92de-17cb-41f3-b6a1-a63b0ed83e0b"
        },
        "item": {
          "id": "16804c6f-e51d-4969-9894-65d55a6ad1de",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0953f01c-c0ca-4925-a82c-b9f4ac5a0db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3266c1-c004-4fd2-96d5-35de2b663c71",
        "cursor": {
          "ref": "8c85e32f-b14e-481a-8135-3f617a5b78a6",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "90cdff76-338a-474c-bbdc-1c39534f232b"
        },
        "item": {
          "id": "4e3266c1-c004-4fd2-96d5-35de2b663c71",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2ac3fd5b-b4b5-41b1-91dc-b90db77aa499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0570bf03-7059-49d4-a681-7ff23f3c809c",
        "cursor": {
          "ref": "ba86bd0b-7e7b-4393-93d4-57d97e074e6a",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1448091f-713e-438f-9793-e7ea7ed17c7d"
        },
        "item": {
          "id": "0570bf03-7059-49d4-a681-7ff23f3c809c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "40920c27-d9ff-4f90-951e-17606f53e312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db61587d-c114-4910-aea2-c453c612db3b",
        "cursor": {
          "ref": "fd65c1b2-4a5a-4e8f-8e96-9c62eff4ada9",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "943d7d3d-19cf-4d2d-852d-337e13a19c32"
        },
        "item": {
          "id": "db61587d-c114-4910-aea2-c453c612db3b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e4803cfc-d03a-497e-94cf-721e5a92514c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e5af1e-e055-4c7d-af99-e3c595e1fb52",
        "cursor": {
          "ref": "bf5435d3-e74d-4688-84a6-c06d09c3e5b8",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b710c6b9-f1ee-4991-8860-f9c413e8b39d"
        },
        "item": {
          "id": "59e5af1e-e055-4c7d-af99-e3c595e1fb52",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "57a09350-38f5-4b6f-a6e1-b0df151be214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ae1fb9-3ac9-4409-a7cb-c16cbcd0641e",
        "cursor": {
          "ref": "ee8ea2e2-ef3d-429f-a84e-667a0c72e10f",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "57c96777-c856-4e40-a329-914a42f3126a"
        },
        "item": {
          "id": "38ae1fb9-3ac9-4409-a7cb-c16cbcd0641e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "460da8af-6d64-4406-b92a-919160d32626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f816e27c-664c-4494-9805-f38e875fa456",
        "cursor": {
          "ref": "7edf2be3-4432-40b1-9a88-8142e0cb1181",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "888f25a8-4a41-4849-9dbb-176134cfbc14"
        },
        "item": {
          "id": "f816e27c-664c-4494-9805-f38e875fa456",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "addf8aaa-8ce6-4660-a144-8dfd40c3d683",
          "status": "Created",
          "code": 201,
          "responseTime": 676,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "c91ab198-a200-41c9-b3d9-ada27c1dc379",
        "cursor": {
          "ref": "b636c4fa-3aa1-4669-9e58-3ed152b18e83",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9560d235-bf29-44cf-8982-2535680e9161"
        },
        "item": {
          "id": "c91ab198-a200-41c9-b3d9-ada27c1dc379",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "144f2210-23d2-4e31-b736-95c713639c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e0a2c3-9866-4d64-a5e2-49f9def25ff4",
        "cursor": {
          "ref": "1dde9661-3cdc-4de1-b20c-e64242a47c71",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "70b4d492-f616-43ba-ba8a-f532863d9943"
        },
        "item": {
          "id": "50e0a2c3-9866-4d64-a5e2-49f9def25ff4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cd46470b-bf51-41ca-ab3c-c34b07fb9feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5167c7-5e48-49c1-a3ef-4e528189b401",
        "cursor": {
          "ref": "6629c58c-5d1c-497e-b9fc-82bbe081274f",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9e537ee9-d030-4e1e-b88d-269516c09c10"
        },
        "item": {
          "id": "1b5167c7-5e48-49c1-a3ef-4e528189b401",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "590dd500-3a84-4792-a31f-e30eac892f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d361f21b-1137-4e79-add4-c6a27bb27f32",
        "cursor": {
          "ref": "c2bfa530-0ca2-4f12-a665-d165e81fb21d",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0368f6d3-54ee-4517-871a-451a28f0939c"
        },
        "item": {
          "id": "d361f21b-1137-4e79-add4-c6a27bb27f32",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "28b753fc-59f4-4b35-8e00-52ef31238569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca40421-0f7a-48a0-96a6-0e7ad03eb7e3",
        "cursor": {
          "ref": "f088bc8b-0370-4da1-8e22-d31f3f3c1d00",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "196572c4-8dd8-4c11-aeae-5ec977dd53b8"
        },
        "item": {
          "id": "7ca40421-0f7a-48a0-96a6-0e7ad03eb7e3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2e91c03e-225f-4788-aed7-ccbc89e55c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6aabe87-7d44-47ef-92ea-c6915e9bfba6",
        "cursor": {
          "ref": "c81736cf-cad4-42b7-910c-1781912636c2",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4ce5d245-fab5-4747-8446-bb761ade85c6"
        },
        "item": {
          "id": "b6aabe87-7d44-47ef-92ea-c6915e9bfba6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f4a3ab67-4aaa-43b8-a39f-bf6e1a0d0e9a",
          "status": "Created",
          "code": 201,
          "responseTime": 661,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "c374a4a3-bd5c-44ff-b7e8-bf6bf34a36ee",
        "cursor": {
          "ref": "77836a9e-25b3-4eb5-8721-0ed6479b4ba1",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5424f210-8b79-424f-875d-6dc41a87e41d"
        },
        "item": {
          "id": "c374a4a3-bd5c-44ff-b7e8-bf6bf34a36ee",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "087506a0-f49f-400c-976e-623ad1ed86e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba68db45-3c26-4c5c-bfc4-389cb604d1b1",
        "cursor": {
          "ref": "368bec6a-526c-40b7-b4fd-6b335800db75",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cebb930a-ad86-4e65-9697-1ccab523f9ef"
        },
        "item": {
          "id": "ba68db45-3c26-4c5c-bfc4-389cb604d1b1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "56f14d58-d0b3-47f6-8259-8b9c9b4f4d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbf8df6-5f50-4f61-840c-f4d227929f30",
        "cursor": {
          "ref": "c53fd368-daa0-4c7b-b510-c63791d152e4",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "68e91b48-69ae-4cd4-86c8-d7b0f40f91b3"
        },
        "item": {
          "id": "7bbf8df6-5f50-4f61-840c-f4d227929f30",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "17a6f85b-18bd-4e08-803f-f65d710dc016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64877e42-d2fb-453e-8658-55e1b7a28b61",
        "cursor": {
          "ref": "fde26509-536f-468b-8ddd-93c31ef17b28",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "82052188-d311-4f28-9e7e-c2e9c6c19f3a"
        },
        "item": {
          "id": "64877e42-d2fb-453e-8658-55e1b7a28b61",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "13911073-5046-47f8-ae83-72cf8212a88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f136215f-621e-460f-8bfa-89c2211bd40e",
        "cursor": {
          "ref": "a8865c0c-fcff-4e22-8314-8595bd9b8077",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5f089023-618a-439f-a231-f6fb5da3678f"
        },
        "item": {
          "id": "f136215f-621e-460f-8bfa-89c2211bd40e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4d06ce57-8640-40e5-8cd3-8670996665f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a57f4f-21bc-48b5-8743-f9dd4165deeb",
        "cursor": {
          "ref": "6efa1b4c-fc41-459a-9765-bf0cd27b24ea",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "33f3fbf5-e6a2-4cf9-9ed3-89e12bca815f"
        },
        "item": {
          "id": "c5a57f4f-21bc-48b5-8743-f9dd4165deeb",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fa29124e-23cd-4405-ae88-676daf7579b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578b2f2e-a116-440c-901d-548fe7df2832",
        "cursor": {
          "ref": "50408a03-c8b8-48bd-a973-2fd7fd1700cd",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "646368d5-1441-49a7-a9da-908b0d0390b9"
        },
        "item": {
          "id": "578b2f2e-a116-440c-901d-548fe7df2832",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f870dbe6-1f43-4e2f-bac7-2bbbfc9b22f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a096b86-9c72-436f-889c-7717be3241bc",
        "cursor": {
          "ref": "0b2d27cd-66fa-4fa5-a3e5-cc6da4fba8c1",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "52346100-e839-4700-a1f9-ccf244cadedc"
        },
        "item": {
          "id": "8a096b86-9c72-436f-889c-7717be3241bc",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "42d6d33c-f929-40d7-9c9f-a31e61681413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cdb9d4-15d9-4a59-8d67-697d1d9f78e0",
        "cursor": {
          "ref": "fd439db0-6428-4fc5-a7ef-279776e245c5",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3f705273-a864-4fcc-80b9-294b82bc66c7"
        },
        "item": {
          "id": "53cdb9d4-15d9-4a59-8d67-697d1d9f78e0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2ca4994c-0a69-4bec-9d80-a6ecc2bfbaf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "27bd8c1b-8b35-4019-90bf-fc9a8c7ea850",
        "cursor": {
          "ref": "2d9f07d9-e3bd-4802-93b5-1abe62bd8ae8",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4fbd154d-11bf-48a1-8de5-a4fac7c5a558"
        },
        "item": {
          "id": "27bd8c1b-8b35-4019-90bf-fc9a8c7ea850",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4abc89b5-a5bf-4fa3-9574-e38e6702934c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "49954a83-0223-4992-86d7-5256f4959b56",
        "cursor": {
          "ref": "5afcb2c9-dbe1-4732-a646-59e5acbe9ce6",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a7392e3a-9abb-48c5-a862-dd6d13dd612f"
        },
        "item": {
          "id": "49954a83-0223-4992-86d7-5256f4959b56",
          "name": "credentials_issue"
        },
        "response": {
          "id": "02d4929c-217d-46c6-b4f9-a0711931715e",
          "status": "Created",
          "code": 201,
          "responseTime": 701,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd14dbec-594b-4dc9-bb9d-b95a621f9449",
        "cursor": {
          "ref": "6074531c-41e0-43c4-afd6-94979cce3cac",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a9daecef-a79c-44e0-8cbe-e6746b66ace4"
        },
        "item": {
          "id": "cd14dbec-594b-4dc9-bb9d-b95a621f9449",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a68a3e84-8ff1-4caf-bb92-3dab42db6eac",
          "status": "Created",
          "code": 201,
          "responseTime": 659,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fca1a4d-df5a-4ef7-8e3e-00a856826e25",
        "cursor": {
          "ref": "06407cbe-9723-474b-9ac3-97f3939e49fc",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4c27f43a-d7b3-44f0-b08e-63f673284701"
        },
        "item": {
          "id": "8fca1a4d-df5a-4ef7-8e3e-00a856826e25",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a16a13b7-1b0f-4295-8e84-1cd9c4508125",
          "status": "Created",
          "code": 201,
          "responseTime": 657,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c124309-44a6-4923-86c2-a3cd1f405d18",
        "cursor": {
          "ref": "4ada6954-b834-43e4-8bf3-0f122c38401e",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b1e8f2ed-b24e-49de-a299-f42a72040f86"
        },
        "item": {
          "id": "0c124309-44a6-4923-86c2-a3cd1f405d18",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5dd0a452-652f-4058-9041-c0a45ca87656",
          "status": "Created",
          "code": 201,
          "responseTime": 642,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a518b9-dd02-481c-87eb-de43d409f539",
        "cursor": {
          "ref": "dcc197c3-4ff3-4e52-af24-078610503b24",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bd55b2e4-3b06-4cb9-aee1-824e91cabe03"
        },
        "item": {
          "id": "e1a518b9-dd02-481c-87eb-de43d409f539",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9570df4b-33e6-4ece-ae0f-3208705f4313",
          "status": "Created",
          "code": 201,
          "responseTime": 677,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "b135104d-de01-4eea-8e0e-cfa5a81bfbb0",
        "cursor": {
          "ref": "4a5cd6b1-717d-4af7-971c-6e8524d78049",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1358e656-6232-481d-ac87-d2e743ab97dd"
        },
        "item": {
          "id": "b135104d-de01-4eea-8e0e-cfa5a81bfbb0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fe489a28-173c-4f70-9772-4723760f109f",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b135104d-de01-4eea-8e0e-cfa5a81bfbb0",
        "cursor": {
          "ref": "4a5cd6b1-717d-4af7-971c-6e8524d78049",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1358e656-6232-481d-ac87-d2e743ab97dd"
        },
        "item": {
          "id": "b135104d-de01-4eea-8e0e-cfa5a81bfbb0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fe489a28-173c-4f70-9772-4723760f109f",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "84548e6e-7ac1-492b-a0b3-2ab23f6654b0",
        "cursor": {
          "ref": "a24f8dae-f418-4ba8-97a2-1600548eca0d",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "18591673-ace7-4bf1-a762-d8756010ae71"
        },
        "item": {
          "id": "84548e6e-7ac1-492b-a0b3-2ab23f6654b0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e90e7bd4-c38c-469b-a1f1-41436d186f5a",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c9527a04-7340-40d8-87df-1d98f778cabe",
        "cursor": {
          "ref": "6d4a0f89-b74e-4a83-8793-7ed6ba5db7d9",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a01f268f-9723-4fcc-b45d-40bf7a3acb6b"
        },
        "item": {
          "id": "c9527a04-7340-40d8-87df-1d98f778cabe",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9dc96d7d-18a9-4ed2-95f4-bbf390a52607",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e88e33dc-6727-475e-9635-81ca11557210",
        "cursor": {
          "ref": "59162966-0834-408f-b001-dfb4d2374522",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "bfb87320-6795-492a-8159-4096451fc158"
        },
        "item": {
          "id": "e88e33dc-6727-475e-9635-81ca11557210",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "06a471c2-506a-403c-aae1-5b23f062047c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "57904687-0d0c-481d-9249-16d4192482e4",
        "cursor": {
          "ref": "b5a4a7cf-ef4a-4479-a0d8-179307fd90e3",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "926823b3-bfde-4e18-8b02-a948bb640aab"
        },
        "item": {
          "id": "57904687-0d0c-481d-9249-16d4192482e4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9095f8a3-8160-4865-bf0a-7a1550464589",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b36dad7b-367c-4d7a-8526-bd904a4e33f8",
        "cursor": {
          "ref": "9e4e95d1-eb89-44f9-bc62-62df12c3fb87",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "13722d32-6d99-43da-b311-cfd5d21bfde4"
        },
        "item": {
          "id": "b36dad7b-367c-4d7a-8526-bd904a4e33f8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "44c6671e-5ea2-406e-b35a-0e4afa88ac47",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "3c822066-ddb8-48e2-b38a-ed233efcbe6a",
        "cursor": {
          "ref": "e7e65427-7bbe-4c1c-b940-d98a40a1cdf3",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4e645088-77fd-4460-b355-853fc7530851"
        },
        "item": {
          "id": "3c822066-ddb8-48e2-b38a-ed233efcbe6a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "76d5208f-e479-4a0c-a910-f1d44fce8941",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ade2d56d-3ba5-4a13-a2b0-106a3ba78a81",
        "cursor": {
          "ref": "407bc76a-834f-46fa-80e8-41332c56ac7d",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "554ada38-bf81-48a4-a833-0c58be55328c"
        },
        "item": {
          "id": "ade2d56d-3ba5-4a13-a2b0-106a3ba78a81",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9bac613d-f526-4f61-8aaa-445ae045014b",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7ff34936-8f95-483f-b281-8996dfd0f933",
        "cursor": {
          "ref": "6a0289cd-a9e9-4cbd-b54b-c873ed5c1e10",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f9c8b0ca-8e1e-44b9-939e-2b1f784382b3"
        },
        "item": {
          "id": "7ff34936-8f95-483f-b281-8996dfd0f933",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0a89efcc-2c2e-461a-9536-05bf117b8da5",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f6e7d91d-2a45-4697-aecd-9636acdc2b82",
        "cursor": {
          "ref": "59e5991f-9495-4c47-becc-455534c60805",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d1ff2c89-6a02-4261-80cb-8ec50cc1670d"
        },
        "item": {
          "id": "f6e7d91d-2a45-4697-aecd-9636acdc2b82",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6e6a107b-c507-430e-a34a-39c238efbe75",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7d9b274e-6e83-4c48-9ea5-8edc465721f3",
        "cursor": {
          "ref": "e1fb5d25-e466-47c1-b520-91cdb02c2026",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4bb0feb6-593a-49a6-9c1b-f71101a24da9"
        },
        "item": {
          "id": "7d9b274e-6e83-4c48-9ea5-8edc465721f3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7abadb48-ba03-4683-b0f9-cb11d8f1a1eb",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "31ef332a-e842-41f7-b63b-78f76090884e",
        "cursor": {
          "ref": "c4c225a7-3dfa-4c36-af90-53e1b149d3a2",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "de91202d-115a-4889-b9ba-db0a838a1510"
        },
        "item": {
          "id": "31ef332a-e842-41f7-b63b-78f76090884e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f5eea955-1abb-49b9-9500-9349f10eb9cf",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "78feb757-ab5d-4d57-a3eb-32cedf6d0044",
        "cursor": {
          "ref": "42c165ee-e85a-461d-96fc-00de584c3fd0",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3c383e4a-52fd-46a5-b8d7-f57f441e2045"
        },
        "item": {
          "id": "78feb757-ab5d-4d57-a3eb-32cedf6d0044",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "21c246bb-56d6-4fdb-90c5-e81b66f3244d",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ef2cfacf-e56f-4058-a283-e0a0ee7a34a3",
        "cursor": {
          "ref": "8a8cf7ef-d5f2-4475-8625-296a294ef731",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3915a2ad-fc23-4f45-abeb-7419295a431e"
        },
        "item": {
          "id": "ef2cfacf-e56f-4058-a283-e0a0ee7a34a3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d68b0d82-6fcf-4a4b-bdc4-ae8a95bfe4df",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "15b94c63-1deb-4efd-9e63-654da09c7ad1",
        "cursor": {
          "ref": "fa9bb0f5-1877-444d-9737-07c88bc69528",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5f5deb1c-cac3-49a9-b35c-bf171c581f40"
        },
        "item": {
          "id": "15b94c63-1deb-4efd-9e63-654da09c7ad1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "868dd2fe-e467-449c-a28f-f9b63ab11ce1",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "93b27058-2345-4b0c-a827-fe330ef3ca79",
        "cursor": {
          "ref": "1b8e7671-5222-4d55-bc7c-b1f12841e208",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9eea67f0-0e9c-436b-81a6-a0b1a9f76845"
        },
        "item": {
          "id": "93b27058-2345-4b0c-a827-fe330ef3ca79",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3b0f5b50-6f8c-44a3-a90c-1c768610e47e",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "ee3929b8-8dd1-45fa-9959-77ee3af3ae5a",
        "cursor": {
          "ref": "3f2d3179-b453-4d7d-922a-7cc76e3e5dd6",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "94b3f3b8-30c8-4186-97b3-8e2b7c6bd4e2"
        },
        "item": {
          "id": "ee3929b8-8dd1-45fa-9959-77ee3af3ae5a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0fb401b8-7084-46cf-9b6f-052e422f905b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4ed86cda-e0f6-4958-badc-0910ce4d2c23",
        "cursor": {
          "ref": "b95529b1-17ea-401e-8a6e-87595a19dcdd",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "832cc4b1-e772-4553-8dfd-b0984cc84f55"
        },
        "item": {
          "id": "4ed86cda-e0f6-4958-badc-0910ce4d2c23",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d01d43ee-b1bd-433b-b8a5-ab86ebaf9519",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "1f8942ea-61a0-4690-a972-335c8ec53515",
        "cursor": {
          "ref": "7e3ea41f-ca10-4a22-b9f7-c3d32c45bf54",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1f274fd8-cf76-4a25-84f6-223be865be37"
        },
        "item": {
          "id": "1f8942ea-61a0-4690-a972-335c8ec53515",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "eedecb0f-eba9-4182-93f4-e79f94499f33",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "15c8a113-5f99-4ea7-a2d7-beb9bc9924a1",
        "cursor": {
          "ref": "20e6c5d8-8dd8-4bad-ac0a-08de99c8e0d3",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "40a04914-7a89-40c7-a20b-511afe54c416"
        },
        "item": {
          "id": "15c8a113-5f99-4ea7-a2d7-beb9bc9924a1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c425e5a2-27e5-47ed-b96b-e901dad51032",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e445c9be-af5d-411e-9a25-446661ec1caf",
        "cursor": {
          "ref": "be5365f0-97ed-48a9-9407-c26d223b1f32",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c5405016-3df1-400b-8ad0-f6c2fd6707c6"
        },
        "item": {
          "id": "e445c9be-af5d-411e-9a25-446661ec1caf",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0264b67f-b192-4dcf-b6fd-9da957fb465a",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "5b850991-3069-4d8f-bad8-935b34e65d4b",
        "cursor": {
          "ref": "2c8c9c96-55d2-4bcd-b2ae-5ef2fe705889",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7a9df98f-fc84-430c-8f69-e93941ec78d6"
        },
        "item": {
          "id": "5b850991-3069-4d8f-bad8-935b34e65d4b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c1968395-025e-4e74-950c-a5c3cdb34fb6",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "5ff9fd77-151b-408d-b211-1a06b308c06e",
        "cursor": {
          "ref": "f6cd8438-ff32-4f8c-8153-114fee15d6b7",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8aa81327-79ac-435e-b7d1-067798c0f2bf"
        },
        "item": {
          "id": "5ff9fd77-151b-408d-b211-1a06b308c06e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "836cc9e0-fc87-4e17-a30d-e7f0d27042cd",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "cbb2e405-a7d9-42bb-92a5-146dec3d414f",
        "cursor": {
          "ref": "58ba04b8-736c-4993-8701-43d47403b40d",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9e3a3b74-baba-4e66-98cd-00d86de6f9e9"
        },
        "item": {
          "id": "cbb2e405-a7d9-42bb-92a5-146dec3d414f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2db62fc3-3d98-49cb-a98c-8977ceee382b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "07264679-19ec-491d-9fba-3c7340b833e6",
        "cursor": {
          "ref": "29564de9-0f6f-4bec-a709-fc7e7e323024",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bd82433d-9703-4729-9cd8-205d769e31c0"
        },
        "item": {
          "id": "07264679-19ec-491d-9fba-3c7340b833e6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "51134ef8-d96f-47d0-89ba-c57fafbdc724",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b307c809-def3-4609-b190-ac134258ed2a",
        "cursor": {
          "ref": "6bc24b78-6fef-49a4-81cd-13e9297f6300",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "982a0f3a-ead4-4792-ad76-1f4541d42e74"
        },
        "item": {
          "id": "b307c809-def3-4609-b190-ac134258ed2a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e3f3348a-746f-4bcf-867b-d7e5e74e5169",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7ce0437d-005e-4d45-bd51-1c1eeed28d50",
        "cursor": {
          "ref": "4069b9c7-21d3-4691-aafb-a39cf4bb254a",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d84b0a05-e460-4800-a8fb-c69002631399"
        },
        "item": {
          "id": "7ce0437d-005e-4d45-bd51-1c1eeed28d50",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5657fa8d-a0be-4f41-bd33-4ffd17da2091",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2b765ba7-434f-41e8-a2fc-5d5908bbde9f",
        "cursor": {
          "ref": "dc36766b-be2c-4973-8b51-75e8ff468355",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "eec7d096-4a39-4442-a95f-56409b20a476"
        },
        "item": {
          "id": "2b765ba7-434f-41e8-a2fc-5d5908bbde9f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fb2468be-c6eb-4bf6-b61b-86f431a6e35b",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "e552e9c5-0dbd-424e-84fa-5317f499673f",
        "cursor": {
          "ref": "f8c34df5-7c27-440f-9238-fbdfc4b48910",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d01a62cd-d2cb-4b5c-ae55-33ed6c932a09"
        },
        "item": {
          "id": "e552e9c5-0dbd-424e-84fa-5317f499673f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9a923508-af31-48cc-9b28-efdfc900cff1",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "7783bee0-3bd0-4484-8e6f-408259fed366",
        "cursor": {
          "ref": "b924be71-a9d7-4c76-b506-04bffc9004fe",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "136ab639-f9f2-4c4a-88b3-e9f379fdf126"
        },
        "item": {
          "id": "7783bee0-3bd0-4484-8e6f-408259fed366",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "55426afb-2895-43f8-957c-134f3fb17807",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "919470a8-e225-438b-8e64-56700e50178b",
        "cursor": {
          "ref": "3533ee6e-09ac-4e2f-adb6-8195b65a8020",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a21b9e33-328b-469e-8d94-aad8e415a962"
        },
        "item": {
          "id": "919470a8-e225-438b-8e64-56700e50178b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "617b752a-f539-43c8-80ac-826feaecab36",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "4f8298c0-09b3-4fde-8ba0-52bf890e14fd",
        "cursor": {
          "ref": "53f353b0-abaa-44b8-b69d-004f0607f10f",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fd326157-db48-45e2-9f39-cc87470acf9a"
        },
        "item": {
          "id": "4f8298c0-09b3-4fde-8ba0-52bf890e14fd",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1650b798-5775-40f4-afd8-1dc5bb61983f",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "a3b5b141-0275-4e50-ab58-654fad5a2168",
        "cursor": {
          "ref": "6064f9bc-856c-4515-9011-d2906e8a7b11",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "41192288-a769-4164-95c6-1d692bb881da"
        },
        "item": {
          "id": "a3b5b141-0275-4e50-ab58-654fad5a2168",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7d160605-8c95-4186-97e1-613cce4e7bb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837ca46a-7955-496a-9f5a-2d603e692685",
        "cursor": {
          "ref": "0303c7b6-b93d-41c1-822a-683d8fbbfe9e",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f7e8c7a3-12d6-4903-b65e-c717760977fb"
        },
        "item": {
          "id": "837ca46a-7955-496a-9f5a-2d603e692685",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "33866db8-fdea-461d-a3bf-617b1739534b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397491e3-973f-4c22-ae15-26ca14a5f6d5",
        "cursor": {
          "ref": "53a47acb-8a77-48bf-bf14-30d8607a4905",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a726f5fe-0222-423f-a264-0b79f61ad3bb"
        },
        "item": {
          "id": "397491e3-973f-4c22-ae15-26ca14a5f6d5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e5df8486-c0f8-4cc1-87d1-e80ad6d31ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397491e3-973f-4c22-ae15-26ca14a5f6d5",
        "cursor": {
          "ref": "53a47acb-8a77-48bf-bf14-30d8607a4905",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a726f5fe-0222-423f-a264-0b79f61ad3bb"
        },
        "item": {
          "id": "397491e3-973f-4c22-ae15-26ca14a5f6d5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e5df8486-c0f8-4cc1-87d1-e80ad6d31ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c431959c-31c0-4022-8b53-e9a98bb06731",
        "cursor": {
          "ref": "083328b7-d2bf-4a4e-aabe-01ddc63accd1",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a2bf09fa-6556-406d-b4ae-cc2d59e86531"
        },
        "item": {
          "id": "c431959c-31c0-4022-8b53-e9a98bb06731",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "319b247b-fc2c-4c32-ad18-f29921a888ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b861cd1f-80f2-4e88-822e-803a81f1fe72",
        "cursor": {
          "ref": "7b5a5f34-260d-4fa1-879c-27aad457db00",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8adb548f-a3ba-48af-9d81-0d8c490e92fa"
        },
        "item": {
          "id": "b861cd1f-80f2-4e88-822e-803a81f1fe72",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a536ede6-18cf-4765-b4f8-da251f96b88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ec39c3-cd5b-412e-b1e6-dbdce449d846",
        "cursor": {
          "ref": "b2cdedc2-d210-4060-8763-44b73811e6fc",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a747f540-385e-48c8-bc08-688da301b369"
        },
        "item": {
          "id": "42ec39c3-cd5b-412e-b1e6-dbdce449d846",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5bdb0c7e-fbe0-4c39-a574-1f65afcc1db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea00f35-d192-46ef-9b37-30bb95b473b1",
        "cursor": {
          "ref": "aee293e6-e092-4a75-85e2-be1db2e876e0",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e2af625b-8c7f-43af-8137-279eed664486"
        },
        "item": {
          "id": "aea00f35-d192-46ef-9b37-30bb95b473b1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fc4f6c1d-be86-42ff-a644-cb18cd80bafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c919f40-1a61-4a45-b816-6fc1ea5691b6",
        "cursor": {
          "ref": "d09b1aeb-97c2-4adb-a58b-fc24756d2fc9",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c5de9c06-e068-4405-aef7-fba3233d3c72"
        },
        "item": {
          "id": "8c919f40-1a61-4a45-b816-6fc1ea5691b6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "77bd83ea-324f-4c10-9788-63b9d8eb1c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00d6bf7-4943-40fa-a551-c55e6183ba99",
        "cursor": {
          "ref": "9104721b-9c2f-4311-b8f1-35ddfbe0b222",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "240d9ae2-12d6-4751-a943-861a48cf5185"
        },
        "item": {
          "id": "b00d6bf7-4943-40fa-a551-c55e6183ba99",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "388010ab-233d-40f0-b03e-97a0e36141b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132989af-a9e9-45c5-a6b8-344002abdb2f",
        "cursor": {
          "ref": "1e4cc2e7-bc9a-43dc-9d6b-ffeef99c32b4",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "77f0d638-e09c-4762-8b7d-d5b54d372470"
        },
        "item": {
          "id": "132989af-a9e9-45c5-a6b8-344002abdb2f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "57f15c96-5a5a-432e-93a0-b4c4171145db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee87e53-f1f2-409e-8d50-ae04491925d3",
        "cursor": {
          "ref": "d252730c-fc43-4c84-affa-27be48f656bb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "54317229-b534-4573-b59f-4ee4d3eac489"
        },
        "item": {
          "id": "bee87e53-f1f2-409e-8d50-ae04491925d3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1dee840a-8c0c-42a9-8f78-b8e4b01b33f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f05ff7-0b93-442c-9144-9757774d7f97",
        "cursor": {
          "ref": "cef33cf8-6536-4b54-b0a9-73b924f2664d",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3e22c528-08f7-4c5f-a53e-1807860a5f80"
        },
        "item": {
          "id": "54f05ff7-0b93-442c-9144-9757774d7f97",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "478b480c-497c-4629-9e81-4f0addac6f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78443a63-eb10-4faf-8344-8fe077d06d7c",
        "cursor": {
          "ref": "3667d150-96f2-4b05-8db1-951a99947cc0",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "cbd49c55-da0b-46d5-879f-836cff6f9d72"
        },
        "item": {
          "id": "78443a63-eb10-4faf-8344-8fe077d06d7c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0137489e-3771-434b-a235-8dcb3dd20043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc06ad0-4804-45a5-a217-91167f2a7ad9",
        "cursor": {
          "ref": "570ee8d0-e274-4b7e-ae18-4fb4b00049b0",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5f0c35f3-5b63-422a-b439-bfb8c11574da"
        },
        "item": {
          "id": "acc06ad0-4804-45a5-a217-91167f2a7ad9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "74682fb4-5da3-490b-89dc-5f633b9efb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a542fd5-8a4e-4c25-b2d4-ad1d572136b8",
        "cursor": {
          "ref": "b7d2f603-fc72-4eb5-a566-b04d17a8ed7d",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "44b8dacd-6ac8-46fa-bc91-9a15045c54b2"
        },
        "item": {
          "id": "1a542fd5-8a4e-4c25-b2d4-ad1d572136b8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8aef11d3-7f75-4fb2-bffe-b9c69e78ef08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa1e804-84de-4ecb-9ee9-4d1848f28ce7",
        "cursor": {
          "ref": "569b40d3-e2aa-4367-bac8-6c9ad7ff7173",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4b361ecb-ad6f-47f8-8625-d3da4acf62a5"
        },
        "item": {
          "id": "1fa1e804-84de-4ecb-9ee9-4d1848f28ce7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "358402a0-17d9-4e3c-adf5-87d01cba436d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac279a0-064b-43a3-b3fa-ac7c04255d59",
        "cursor": {
          "ref": "69107962-0392-4800-9b1b-dd098b3bd0e5",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "86d36aea-081e-4290-b31f-6c16975553a8"
        },
        "item": {
          "id": "0ac279a0-064b-43a3-b3fa-ac7c04255d59",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7844559e-8087-4e81-9a33-68a735a70ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec92832c-f80a-443d-a00a-f976326964b3",
        "cursor": {
          "ref": "a37515a1-413c-4f67-b406-1aaba56e54ec",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "84f03562-294c-4376-a674-e4b2261fc2a2"
        },
        "item": {
          "id": "ec92832c-f80a-443d-a00a-f976326964b3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a953ef4b-e169-4b03-854b-ec5b814e117e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5719052c-c57f-4cb0-bc09-764a158cd6a7",
        "cursor": {
          "ref": "2bee912f-dbdf-4594-bb2b-6add250364c0",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bb691927-6ad3-489a-bc86-522b0be5f9fb"
        },
        "item": {
          "id": "5719052c-c57f-4cb0-bc09-764a158cd6a7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "90196fbc-91c2-4861-b4dc-ce766fa9850d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f4cffb-591b-4f61-81b8-dbe2622bcf25",
        "cursor": {
          "ref": "d74202da-d6cc-4e3f-9573-326c7e88ffac",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "76bb8bff-78c0-432f-8e29-76848aad3baa"
        },
        "item": {
          "id": "e5f4cffb-591b-4f61-81b8-dbe2622bcf25",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "08766bc8-25e8-4296-9d61-a02ba36ec8f5",
          "status": "OK",
          "code": 200,
          "responseTime": 610,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "bcb0c21a-9d9f-480d-a74f-e0a99a4f5a8f",
        "cursor": {
          "ref": "8be3bbca-4c8b-41a6-aa85-002473138639",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bdd806f5-ef65-4df6-b01b-afec51129ad2"
        },
        "item": {
          "id": "bcb0c21a-9d9f-480d-a74f-e0a99a4f5a8f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3ca39894-69b9-4028-9ef6-6e6a4329297d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822d785b-62fd-4957-ad06-a937e142dbe3",
        "cursor": {
          "ref": "2cbcd46d-80bc-4cf1-989c-6ffb727ad76a",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fe17f27e-9656-452e-a7c7-35ed32b6fcc1"
        },
        "item": {
          "id": "822d785b-62fd-4957-ad06-a937e142dbe3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7bada984-1959-4f3c-a17d-2a2c7768264a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15bf9263-5711-47f2-927a-57c301b3c001",
        "cursor": {
          "ref": "85ff47eb-0c0a-4601-8e76-0482567e4ece",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b73ca3db-95cc-4fd6-9767-c7eb54f63c0d"
        },
        "item": {
          "id": "15bf9263-5711-47f2-927a-57c301b3c001",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4c566b4f-422a-4674-994e-da4973539756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29a4c1d-7c5b-4af6-acdc-8357971039e7",
        "cursor": {
          "ref": "6e880a9a-05c5-45ff-912c-4d7745568564",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "03c0cec1-19d6-4138-9506-39bc78935ec3"
        },
        "item": {
          "id": "b29a4c1d-7c5b-4af6-acdc-8357971039e7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "16e79835-e9d9-49cf-93fd-99ec608c0001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8890fd-9ba5-4bee-b106-ac4c321519d2",
        "cursor": {
          "ref": "d20cf8ec-b1c4-454a-b197-c2f246cdcd7a",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6139a10a-5b9a-49bb-baf1-1599803eadf4"
        },
        "item": {
          "id": "3c8890fd-9ba5-4bee-b106-ac4c321519d2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "70665574-f39e-4388-bb12-2f93bdce4b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63aac5f5-0c9a-4d57-8757-648f01480954",
        "cursor": {
          "ref": "c2b76d66-5692-4a58-8147-7b033a573e31",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "bc1accba-8237-47b3-91c6-bf5abb418b84"
        },
        "item": {
          "id": "63aac5f5-0c9a-4d57-8757-648f01480954",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3c2d4e14-f098-4a73-b23d-bdd72c302ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69edfea3-3d00-4e0c-bb15-b0dfaab99218",
        "cursor": {
          "ref": "6342673c-0836-4700-864a-06ec8068679c",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "637ebac7-0d3e-483e-ab08-e324e75c9d1c"
        },
        "item": {
          "id": "69edfea3-3d00-4e0c-bb15-b0dfaab99218",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "995c0570-ade2-4785-b0f0-23130ad75905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5029780-6cf5-4624-9435-086693d8750f",
        "cursor": {
          "ref": "1fb68725-c37c-4eba-9712-17a68b1a6eee",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c2a86449-858a-47c6-988a-c5338569736a"
        },
        "item": {
          "id": "a5029780-6cf5-4624-9435-086693d8750f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0cf59446-4785-4538-9df5-3bfa54cfeb0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae1d4a1-fd90-4c46-8260-afa547322d6b",
        "cursor": {
          "ref": "9727fbac-c94b-451b-a92e-7bc4238802e8",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e90c4aa6-ba96-46b6-af9d-a7ac13ed5be5"
        },
        "item": {
          "id": "bae1d4a1-fd90-4c46-8260-afa547322d6b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1408c188-02d4-4095-befa-15c7ee1489fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fd8987-ed41-494a-aae4-9dd448db7f7a",
        "cursor": {
          "ref": "8ced7c49-4a19-49cb-8584-d126ad945c5a",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5ccccc67-1002-4350-a24f-783f430c71e6"
        },
        "item": {
          "id": "c1fd8987-ed41-494a-aae4-9dd448db7f7a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6cf5aef6-660c-4321-a375-1e2816d62578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b494a56b-e575-4042-93d9-3c2d7c717ec6",
        "cursor": {
          "ref": "57fcaa85-36be-4c6b-8a9c-ae04ddb51b48",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f40b90ee-f3da-4db0-ba9b-66d50e3cd510"
        },
        "item": {
          "id": "b494a56b-e575-4042-93d9-3c2d7c717ec6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8cad37e7-a7d6-47bc-a940-b7dd89ac87be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ffbed6-0d0a-44b4-b13d-fbb575a45764",
        "cursor": {
          "ref": "0fe2589d-4fdc-4f0e-93e0-bcbec8bba403",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "439c73e6-49cf-4896-be93-75f8c58e7597"
        },
        "item": {
          "id": "73ffbed6-0d0a-44b4-b13d-fbb575a45764",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a1120ee3-da84-457c-8da7-4d06e2f9688e",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e87f7960-dca6-480d-a15e-bb27d440f0d4",
        "cursor": {
          "ref": "07e857c3-e23d-4329-8008-44f4f0e778e3",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "37ea3d89-170c-4b71-96ed-0a3705eec314"
        },
        "item": {
          "id": "e87f7960-dca6-480d-a15e-bb27d440f0d4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "583b5515-f1b8-49a5-ab67-641258a9810c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215dd1c4-a666-4b1c-9a0c-867d6019727b",
        "cursor": {
          "ref": "53bb974c-f103-4319-8110-a2c02569bb40",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "45b100de-e5d7-4485-92ea-534ed907713c"
        },
        "item": {
          "id": "215dd1c4-a666-4b1c-9a0c-867d6019727b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1dcc9841-44a4-4dec-946f-044be284b6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c64918f-97d7-47a5-9804-59db47a486cf",
        "cursor": {
          "ref": "2c0aaa1f-8eb5-46e2-a8db-1473282df9f1",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9710fc06-644b-4d45-ad5b-09ad102bcff3"
        },
        "item": {
          "id": "2c64918f-97d7-47a5-9804-59db47a486cf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "84e1d9ad-561c-42c4-9420-e6ec3c565765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def642f1-7d13-4152-a301-5cf21f46ef8d",
        "cursor": {
          "ref": "96a39176-bff6-4544-8444-a5decb199415",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7b3c89dd-057d-4469-81ac-17b5446a72a7"
        },
        "item": {
          "id": "def642f1-7d13-4152-a301-5cf21f46ef8d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "abc4008d-fda6-4da8-8842-ff56b27f19d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741be412-f127-46f5-be1e-655cafef91ca",
        "cursor": {
          "ref": "7011a1dc-3b98-4bf9-9d62-ffa1f1dd481a",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e5ffbcd6-8c0d-4452-b60a-20e11a8e1f4f"
        },
        "item": {
          "id": "741be412-f127-46f5-be1e-655cafef91ca",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c98b62e1-7af2-4468-9856-c5e0be0dbd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a8a80f-7544-4554-a8fd-28801b59d003",
        "cursor": {
          "ref": "840431c2-95ab-4b19-833a-86483b415f6a",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4231e338-1b6a-4a6e-853e-2e792daab227"
        },
        "item": {
          "id": "74a8a80f-7544-4554-a8fd-28801b59d003",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "15e2dd13-b5ab-4030-95d5-856ef69c4ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60e4319-a8dc-4c16-b099-93c34a5351b8",
        "cursor": {
          "ref": "54777a83-c088-4c70-b590-8b8e3760b2cd",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "29cca83c-d0b1-4cc6-86ad-f6dff615860e"
        },
        "item": {
          "id": "f60e4319-a8dc-4c16-b099-93c34a5351b8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "75eaab94-b0fa-4b27-a2fc-58471d10f604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3032a1-6e6f-4259-b063-33a64b4d36ce",
        "cursor": {
          "ref": "f02b5661-9f09-4d76-9106-4e375390360e",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c141ad54-5489-40a4-bac8-f77d2f99d7c9"
        },
        "item": {
          "id": "6e3032a1-6e6f-4259-b063-33a64b4d36ce",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1bb80fe6-f1fd-4a24-a0c0-7ef6ca42b3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6bfca1-d3d3-4b18-8b05-01c11440e010",
        "cursor": {
          "ref": "9e45976e-7a75-4088-8ca1-70f12e105c02",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8eb38c99-cadb-415d-97e0-8ea2c53abbcc"
        },
        "item": {
          "id": "5c6bfca1-d3d3-4b18-8b05-01c11440e010",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a5fbccbc-7aac-45a4-800b-2ba47b40ccd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5bfee6-a3ad-4f13-916e-f7887f391335",
        "cursor": {
          "ref": "9ad3f755-bdd6-44d0-9a13-14cbd2dd5852",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9d51b3a1-e69b-420a-ba36-d9861e25818b"
        },
        "item": {
          "id": "9f5bfee6-a3ad-4f13-916e-f7887f391335",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "48b47fc9-dcdb-42f2-8c9f-0131ee8270a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd07854c-3472-4f02-b62c-59f7803b7210",
        "cursor": {
          "ref": "d1c5c88b-c2f7-4bca-93b1-06578c8fd27b",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bca87994-9112-4b71-8278-615142a33249"
        },
        "item": {
          "id": "dd07854c-3472-4f02-b62c-59f7803b7210",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0df74029-ce0a-4184-85be-c6ea70e21326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a12132a-e7c6-4efc-b013-c7374af4b08c",
        "cursor": {
          "ref": "217aaa16-6a25-43f1-a3a3-ea413cebbdc7",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "99e1df43-0dc6-4327-8621-140b7bc38694"
        },
        "item": {
          "id": "5a12132a-e7c6-4efc-b013-c7374af4b08c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e9209271-79aa-4c10-9553-f9f2a15b67e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d92bbf-1daf-4242-be9e-7bc00c771ef5",
        "cursor": {
          "ref": "3dd3a054-21b8-49cf-977b-92d18234a639",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6f200f04-2cf4-4a69-9249-10382ea62a41"
        },
        "item": {
          "id": "a8d92bbf-1daf-4242-be9e-7bc00c771ef5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "65c4bef0-b839-4b4c-8b72-bee227543823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3998aa1-e5e4-4b90-bd5c-d527ea66abe8",
        "cursor": {
          "ref": "cacde982-6470-4f57-ace0-3636e413c6f3",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1d7aa3d9-c7dc-42f5-8f20-95ca10164482"
        },
        "item": {
          "id": "e3998aa1-e5e4-4b90-bd5c-d527ea66abe8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fe3a9b68-f3f2-45ef-b5ac-371d600f1049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd458728-5f8b-4906-84d2-ee62b53ca3cd",
        "cursor": {
          "ref": "49580af1-c811-4ced-8c67-e2f6f6fe4cf0",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e8a7f6e7-1ae0-4f1d-b29e-b46a9b725103"
        },
        "item": {
          "id": "fd458728-5f8b-4906-84d2-ee62b53ca3cd",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "442eb42d-0725-42fe-9b0b-12ee9c22bb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10af345f-9bb4-4b5a-bd92-cdb8816654c8",
        "cursor": {
          "ref": "e216ff5a-8e05-4773-a61e-f1675905790c",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9bb75418-9837-4f9a-9690-9731ca217c83"
        },
        "item": {
          "id": "10af345f-9bb4-4b5a-bd92-cdb8816654c8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "53a73a47-5b18-45fb-9dd4-6e906fb88997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8f3e3e-2e56-4ac6-8d80-08d39fa53045",
        "cursor": {
          "ref": "2a60c8ac-ed98-4893-89cc-516d5574b189",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5223ccf1-97e2-4da5-8285-44181a565c8f"
        },
        "item": {
          "id": "4c8f3e3e-2e56-4ac6-8d80-08d39fa53045",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1ae0eef0-369a-4c5a-9fd4-ce29260cbe63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09643dc-bf8b-484b-9738-b2ba91e61f02",
        "cursor": {
          "ref": "5ef9c60e-28f8-4480-b6d6-446c6b6d52eb",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d61d2ed8-9717-456d-8f32-bc99a73352dd"
        },
        "item": {
          "id": "f09643dc-bf8b-484b-9738-b2ba91e61f02",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "73058f72-3964-4c17-9e2f-8ca75afe84f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43d69ee-9787-4744-854a-9d46839f3e82",
        "cursor": {
          "ref": "3583fb54-0e89-4ef8-8fcd-9dac311b666f",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "33bd7f34-6089-4fcc-b84b-ba638acf79e9"
        },
        "item": {
          "id": "e43d69ee-9787-4744-854a-9d46839f3e82",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "dcd9134f-5953-4ac1-a56c-167c1ac4533c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba708676-e600-4ed6-880b-ff7678e055c1",
        "cursor": {
          "ref": "8e8c47d3-aee5-4e5a-ad86-fa44acc2cccb",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f629da34-baf1-4200-b5ae-9f7aa65e1b91"
        },
        "item": {
          "id": "ba708676-e600-4ed6-880b-ff7678e055c1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "caccda57-5870-409f-b40f-0a20af7d9f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee022c9-eef8-4e9b-927f-d0c2ba8f5a49",
        "cursor": {
          "ref": "37b7ee9b-5c21-4853-b311-9e44dd21edf7",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "601741ac-4652-4fe4-8e08-4a067a86968d"
        },
        "item": {
          "id": "1ee022c9-eef8-4e9b-927f-d0c2ba8f5a49",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fd41e3b5-9fff-447a-b9ba-02be7b43a04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237f0f31-9efd-4611-aafe-8d1aaa21a274",
        "cursor": {
          "ref": "15dba8e7-2eb1-4ac2-afef-dac48e1637c7",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c0316011-51a8-4ff9-a277-1653fa666b0e"
        },
        "item": {
          "id": "237f0f31-9efd-4611-aafe-8d1aaa21a274",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cb539567-c50f-4ca5-a1b1-48b9c9bae070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24af5b0e-007c-41f5-8f46-d93bde900aab",
        "cursor": {
          "ref": "de969d61-5f8d-4fbf-a33c-c4f74960e78f",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9124a893-df8f-483c-83ff-0a9abe4feea8"
        },
        "item": {
          "id": "24af5b0e-007c-41f5-8f46-d93bde900aab",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6f17c375-0aa8-4184-aa00-58c179c4ba08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013e77f5-a378-46c3-ac70-524a9d8ab42e",
        "cursor": {
          "ref": "8ae15270-2350-4204-bc4a-f03c858c1610",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "67268b33-d6eb-4bce-82f2-616860836656"
        },
        "item": {
          "id": "013e77f5-a378-46c3-ac70-524a9d8ab42e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "47de779a-02d1-4762-9f80-a68c1493ae4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42e93fb-d541-4220-887f-880aa2965546",
        "cursor": {
          "ref": "8d6e02e0-5cdb-4fb6-8fb8-bb192fd4bdd3",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c5a40725-b250-41ff-8201-586eab0be011"
        },
        "item": {
          "id": "d42e93fb-d541-4220-887f-880aa2965546",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6b88f503-14b7-4cb2-9b7f-0a58ef5fc826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0000fa89-3b3c-4649-bc2c-1d639cd6c4cb",
        "cursor": {
          "ref": "9ed91164-387d-46f1-86f5-2cc884ec2822",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "eefa7a2a-e42a-4bf9-9b68-5954881c6d91"
        },
        "item": {
          "id": "0000fa89-3b3c-4649-bc2c-1d639cd6c4cb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1531e20d-d85c-4e4c-8d71-3220714a4eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5a436d-978e-4d27-a4b4-ec1ba36d671f",
        "cursor": {
          "ref": "685c8b98-a88d-4509-a3ba-a69a8caa6d7d",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5409685d-cee4-4b9a-8e3f-1051836d9a11"
        },
        "item": {
          "id": "7f5a436d-978e-4d27-a4b4-ec1ba36d671f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f74b0590-b396-4e87-95bf-0a80e8a2266a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb69803-18a5-45b0-a2eb-43c252b56644",
        "cursor": {
          "ref": "bdf290af-e705-48ed-b6b5-3485bd63e92b",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5c4a347b-0007-4890-b133-21aea936ec1c"
        },
        "item": {
          "id": "ffb69803-18a5-45b0-a2eb-43c252b56644",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "943fc21c-eb6a-43bf-8523-5ecbb8dc1d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82b2a5b-ca1e-40d4-bf94-2a9c52416a26",
        "cursor": {
          "ref": "e62c4a53-b439-4b20-89dd-8407b2b8d36a",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e2168f9f-d513-4faf-8be3-ae4671f765d5"
        },
        "item": {
          "id": "e82b2a5b-ca1e-40d4-bf94-2a9c52416a26",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1ff91576-e3ae-456e-a984-d9898225d25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a54a48b-ddd9-4443-91ee-8cd7eba4545c",
        "cursor": {
          "ref": "e76b017a-c7c9-4962-bd7a-21002517ae22",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "30200b87-aac4-4e37-bca7-b3f3531c6d4d"
        },
        "item": {
          "id": "4a54a48b-ddd9-4443-91ee-8cd7eba4545c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "849a6402-8124-478a-a806-8513fa01bdf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4c66c3-5158-4068-9e62-e282aa762600",
        "cursor": {
          "ref": "f736147c-9ff1-4f96-8f61-f6b08d26dab0",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7fec4e94-6a74-4c4f-82ae-46065bdda354"
        },
        "item": {
          "id": "fd4c66c3-5158-4068-9e62-e282aa762600",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b5db2713-183c-460a-a93b-9b60a649e7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8775b8-af84-403e-ab47-5c9b926929c1",
        "cursor": {
          "ref": "fb936b5c-ada7-4749-9803-43802a61b8d6",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3b7497e0-515a-4250-8dbe-1b9d7bdaa501"
        },
        "item": {
          "id": "1a8775b8-af84-403e-ab47-5c9b926929c1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "299c3f27-02d8-496a-afd0-ca115a07454a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a823e89-aae3-4107-96cb-cd432bea7ef7",
        "cursor": {
          "ref": "de968af3-2c76-4623-b765-2ef4fcc6d29c",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f2c94860-b2c6-467c-a504-12c345d3df73"
        },
        "item": {
          "id": "3a823e89-aae3-4107-96cb-cd432bea7ef7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "dfab9663-dd41-42f6-90c8-b5d1792903d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e92e17-3c25-4cbf-8705-7ebde7ace176",
        "cursor": {
          "ref": "11857fac-6a46-4469-b48d-22dcbdb3473a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "489312a3-bec8-4dab-935e-a2d62e3def0a"
        },
        "item": {
          "id": "67e92e17-3c25-4cbf-8705-7ebde7ace176",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "546eff82-820e-4410-8f2b-ea17c5ee4b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c07cab-44ed-430f-8746-7d70a890fc22",
        "cursor": {
          "ref": "c9519278-ac8a-4a0f-b12c-3611fe637704",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "55abb575-d003-40e8-8cf5-4a65f80433f3"
        },
        "item": {
          "id": "41c07cab-44ed-430f-8746-7d70a890fc22",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8679f796-7b5e-4668-b400-d10dc6cf2362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419f0214-a093-49cb-b4f1-bdd9c464cb6d",
        "cursor": {
          "ref": "12c23fdf-8d13-4025-ad70-75682f870761",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "90e5088b-9993-47f0-9d52-a8aa1768a244"
        },
        "item": {
          "id": "419f0214-a093-49cb-b4f1-bdd9c464cb6d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fe413fb6-fca6-4fa2-9a8e-833af8ee0430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0425162d-6a7e-453d-9bcd-a0d96113bae8",
        "cursor": {
          "ref": "df843daf-4412-40f2-b869-638f4a1c86fb",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "352f8921-0e03-4679-a083-5bc9a86d7d13"
        },
        "item": {
          "id": "0425162d-6a7e-453d-9bcd-a0d96113bae8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1a4bcfb8-f911-4e26-869a-3eeaa01f01c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999d84b4-601e-4f43-8143-c280d1b28115",
        "cursor": {
          "ref": "f895853f-c778-452d-8ab7-73a99f5d071c",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7ca63642-bb9c-418b-bc86-4da7e34bbe2f"
        },
        "item": {
          "id": "999d84b4-601e-4f43-8143-c280d1b28115",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9282ef21-2833-4c3f-9317-543174722be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d56f905-f4ed-443d-aa43-e13973c46942",
        "cursor": {
          "ref": "4443072f-896c-419c-aead-162ca2acab75",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a60d5fd5-d186-47fd-b8f7-46c38b7f7129"
        },
        "item": {
          "id": "1d56f905-f4ed-443d-aa43-e13973c46942",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "678602b8-2cf8-4d40-bfa1-7d49aec4e4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43ccc16-c619-454f-80a0-604447d5a11e",
        "cursor": {
          "ref": "39f69503-8318-44a9-bc2e-7e822afc137a",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e8bea1cd-72dc-44d0-bc1b-db0d6b175cb5"
        },
        "item": {
          "id": "e43ccc16-c619-454f-80a0-604447d5a11e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "49735413-ba76-4ff4-8315-621a65a65bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f91287-e4e6-4c64-9024-941add953986",
        "cursor": {
          "ref": "fe157753-8a5e-409d-9138-b731257622f6",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6fa10bbf-076e-44e1-a9f8-e7391d8e51f4"
        },
        "item": {
          "id": "d7f91287-e4e6-4c64-9024-941add953986",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0f9e64dd-32f7-4089-903c-d112666d3e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f2ab2d-1b43-4240-a311-d0c172766176",
        "cursor": {
          "ref": "6441d16a-4cd4-48ad-8104-7dabb19a2771",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "228f086f-463e-4b13-81e9-a0b575b5eb7a"
        },
        "item": {
          "id": "94f2ab2d-1b43-4240-a311-d0c172766176",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8cdacf93-b4bf-48f2-a915-2a94491a3e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e2d251-82b0-4ed7-80fe-c610e763b260",
        "cursor": {
          "ref": "ae207d51-a578-47dc-b04d-f2e092e03afd",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "832ae698-3b47-4090-aae9-cb081e608dcc"
        },
        "item": {
          "id": "d6e2d251-82b0-4ed7-80fe-c610e763b260",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "20ad525a-e5b2-4058-a6b5-8bdaab00067c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4743b192-ec48-44fd-9a8f-009a6da98459",
        "cursor": {
          "ref": "e07e5fdf-be33-4f34-bda8-5487f10b2b4c",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8974c745-2200-4b20-94b2-180d880f67dc"
        },
        "item": {
          "id": "4743b192-ec48-44fd-9a8f-009a6da98459",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0cf8a833-0a90-4f87-909f-47614e4df667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b14f99-6337-4cae-9aef-49fa028ad694",
        "cursor": {
          "ref": "141fcc36-8d18-4390-8554-bafc8a74d751",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d945cd80-e66a-4e1b-a2bc-ed6f52edd570"
        },
        "item": {
          "id": "e9b14f99-6337-4cae-9aef-49fa028ad694",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3e514f86-f91b-4271-894b-2147e8e84455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62138c98-244f-48c2-838f-fe920099a721",
        "cursor": {
          "ref": "cd83bcee-8a92-44a7-936b-56c1902716b0",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d219ffad-ad66-4ec2-926c-213d0ea07eda"
        },
        "item": {
          "id": "62138c98-244f-48c2-838f-fe920099a721",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "10f75a33-084a-444d-ac4a-e3e926c91b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8cd9f6-e1f1-41de-aae5-3e27be96244c",
        "cursor": {
          "ref": "a47aed9a-dbbc-4d93-ad69-1a60933a437f",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d2bc77b7-01ac-4cb2-8b0d-78f5b1290d76"
        },
        "item": {
          "id": "6d8cd9f6-e1f1-41de-aae5-3e27be96244c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f9908de9-e447-4ac3-b69c-d1186ea3af7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b7674d-e956-42e1-b9af-3eef6e3c50b4",
        "cursor": {
          "ref": "3d1e3347-135e-46a7-8a97-5e8f2e4ced07",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b6f63cef-db75-41be-82ce-e340f7434ce2"
        },
        "item": {
          "id": "e3b7674d-e956-42e1-b9af-3eef6e3c50b4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "64e164c0-dab6-4e65-a2ee-7355300f66d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07194b5b-7e71-4a70-9bc9-9425afb44243",
        "cursor": {
          "ref": "36afd27b-c6b0-4f5e-9d62-deaebdc0c18c",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7a0303dc-f05f-4b7b-9fc5-bf62bd04a806"
        },
        "item": {
          "id": "07194b5b-7e71-4a70-9bc9-9425afb44243",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f1fd6bc0-5dbd-4819-9d95-bae4c033a9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739cc81c-3b41-4830-ba49-3da54d6cd69d",
        "cursor": {
          "ref": "dfae36c6-c06a-43f8-ae70-0b60cbb024d4",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "53c9c6c5-c63b-4649-8d85-dfdd12b645fb"
        },
        "item": {
          "id": "739cc81c-3b41-4830-ba49-3da54d6cd69d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3b4080fe-7829-4211-ad66-de07edee50bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b403b25-82e7-4b51-b09a-8f071fb3fa00",
        "cursor": {
          "ref": "80b50393-9128-457c-8c1c-eadbee3d8ecc",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bfdbb8df-4c27-4b4c-8d63-50a77d119a01"
        },
        "item": {
          "id": "3b403b25-82e7-4b51-b09a-8f071fb3fa00",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7155a126-60e0-4d89-9619-a994bb88a486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1e7638-1bfe-4525-9404-e81cab6c037f",
        "cursor": {
          "ref": "109655b1-6c3b-4ef2-9473-ecb20c388bcb",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4e917051-98da-4f72-b983-0b94de97c365"
        },
        "item": {
          "id": "6e1e7638-1bfe-4525-9404-e81cab6c037f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d29dab6e-12b7-4dd5-870e-cfebaf7b23d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39b622e-3657-4acc-87c0-4cf70de24e54",
        "cursor": {
          "ref": "e98a11b5-c260-429b-acee-e17c041c64db",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "15b1c5be-2288-4fb8-86c2-a4ce93e5970b"
        },
        "item": {
          "id": "e39b622e-3657-4acc-87c0-4cf70de24e54",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c4ca6157-9e0f-455c-a447-de171cda4471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe337b8a-8398-4f2f-a42e-aaafa6fda476",
        "cursor": {
          "ref": "53436cbd-b73b-40b8-9c89-903843c0ce8b",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "affab2bb-997d-42ea-9f30-5a4c8878c67d"
        },
        "item": {
          "id": "fe337b8a-8398-4f2f-a42e-aaafa6fda476",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b18b837f-ddb3-4d2d-8825-b90b9e304fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b122a0d9-56de-4a95-8137-fc3a4df49f54",
        "cursor": {
          "ref": "351caf52-0b8c-4b69-8b8e-bc81e7bbdb98",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "113de075-d4b3-4fc2-96f1-3ac5aa4b456d"
        },
        "item": {
          "id": "b122a0d9-56de-4a95-8137-fc3a4df49f54",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "22f43963-ed01-42a0-a555-ad5b2dad9eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c14b7e-6cde-42e2-93a5-5a854c8576f3",
        "cursor": {
          "ref": "ed15608f-bc23-4dce-b0c7-f85f191d6dd0",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fb259ea7-db5c-454f-899a-02a6b60b2ae2"
        },
        "item": {
          "id": "25c14b7e-6cde-42e2-93a5-5a854c8576f3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a5e0c4d2-b979-4e6b-9dc2-b47d4fa49527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ff6ead-c9e4-4bb5-be3d-5a702367386f",
        "cursor": {
          "ref": "1e51fccc-b4b6-4adc-90dd-849ebe077408",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0d365c37-fc95-4233-9ad1-0ac311de2c29"
        },
        "item": {
          "id": "97ff6ead-c9e4-4bb5-be3d-5a702367386f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d406d6ad-e23c-49af-8fa9-3bf528113a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7b1164-5de2-40ee-82ca-82e7ee58d523",
        "cursor": {
          "ref": "4eadf674-fb78-441b-a016-ca689997ff12",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "05248761-a39f-4f2f-a4b9-119a319b1724"
        },
        "item": {
          "id": "0e7b1164-5de2-40ee-82ca-82e7ee58d523",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d9643bb9-a945-4398-9730-02431f7c1da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d9d46d-0aa4-419a-9a0f-84d43c3e547e",
        "cursor": {
          "ref": "9d91fe9e-032c-4d05-8e73-66109f829b67",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "05fc7d98-45f9-46d6-a063-9fa1451848b3"
        },
        "item": {
          "id": "20d9d46d-0aa4-419a-9a0f-84d43c3e547e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "37ee19ef-df21-45a8-af8f-c74845422cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c828718-0e85-43d3-af9a-0f503604631f",
        "cursor": {
          "ref": "a5b9038b-bd8d-4997-8b94-b52d86105181",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1c1743ae-0dec-49d5-a0ea-abf19f5175cf"
        },
        "item": {
          "id": "9c828718-0e85-43d3-af9a-0f503604631f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2adace49-0096-42be-b10c-d118071947d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d62106-0651-4f41-9239-fb1f4bac4e2d",
        "cursor": {
          "ref": "2571f4ff-a56f-456d-a77b-c215eecd0dcc",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "233c8f9a-67c2-4302-b8cb-c09c29f97104"
        },
        "item": {
          "id": "68d62106-0651-4f41-9239-fb1f4bac4e2d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1c1c8618-40d2-4cfd-93e9-a34e03705236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c93097-7794-49e5-8b6e-34f98647467f",
        "cursor": {
          "ref": "a8153767-d20a-4d27-99ec-eba7c2915bf8",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0c398a55-925d-4f24-b3f6-8e89f8675347"
        },
        "item": {
          "id": "20c93097-7794-49e5-8b6e-34f98647467f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "83e3857e-b160-401e-ad6f-89f3d3b8ee05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355cf7a1-837d-42ce-befa-bcc4a195e117",
        "cursor": {
          "ref": "8057f151-c920-41db-8216-e0e744616ad0",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "285d151e-f750-4571-8e8c-2e4182522700"
        },
        "item": {
          "id": "355cf7a1-837d-42ce-befa-bcc4a195e117",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "95cdfbba-21e7-4734-b76c-a07c6889d7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c13d470-a41e-404d-8439-cbffde8effb3",
        "cursor": {
          "ref": "6e25adfe-64ed-4e7b-bfcf-7e97a216d594",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ed34de2d-8f6e-4b65-b785-f5c6c878314d"
        },
        "item": {
          "id": "9c13d470-a41e-404d-8439-cbffde8effb3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3f796e5f-c8e7-47b8-9435-6cf9028996b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84360457-265d-4146-a110-e9d446fa3272",
        "cursor": {
          "ref": "261d77f9-9ad8-429b-9d5c-65e957381aa2",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "721de605-a20a-4d4a-ad8d-2645714d7c18"
        },
        "item": {
          "id": "84360457-265d-4146-a110-e9d446fa3272",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0576ed27-ac4b-46c1-babb-56841c7b6831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a4dded-43fd-41e6-9c0c-09ccdde085f2",
        "cursor": {
          "ref": "bdbff0b6-b761-4aa0-8ce2-e3bc3b82066a",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ac534463-6889-4646-ad4a-d4c9e7d5f201"
        },
        "item": {
          "id": "f9a4dded-43fd-41e6-9c0c-09ccdde085f2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5b00c1bb-440a-4023-9731-6e7f34c399b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced9ac2a-3679-4bb0-9ba3-9dd44e241753",
        "cursor": {
          "ref": "ea0db1c5-56dd-4c8e-8e66-2e27ff185725",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "efea5dfa-a479-4ba4-8bfd-e94ea7daabeb"
        },
        "item": {
          "id": "ced9ac2a-3679-4bb0-9ba3-9dd44e241753",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a8b9093f-75f3-4a51-b494-dc70e4b85cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2adabf-059a-43a1-8969-9c49cffd5c71",
        "cursor": {
          "ref": "eb3d4a95-8ba4-485b-b1f2-9f0236e07795",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0dddbed6-cc0e-4e39-b271-3421561d451b"
        },
        "item": {
          "id": "3f2adabf-059a-43a1-8969-9c49cffd5c71",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9f584915-9665-4f60-845e-55002416c20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df08dcd9-381c-44e8-a53c-36b547644970",
        "cursor": {
          "ref": "a1e902d4-2fff-40c9-965c-a03c4484c5e3",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "97963672-ad1f-4045-91df-077010d2ca79"
        },
        "item": {
          "id": "df08dcd9-381c-44e8-a53c-36b547644970",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "151d2fac-feda-4003-b640-7f66352d9444",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b345e35e-1bae-420c-addd-0ca0b4746f87",
        "cursor": {
          "ref": "d9ba913c-c71e-41bd-ab5c-8ff182b43d95",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "903fe1ed-bda5-4229-9fe9-b2e5cf78e5d7"
        },
        "item": {
          "id": "b345e35e-1bae-420c-addd-0ca0b4746f87",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a843d637-ad34-4544-a542-e4b972bead49",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c870ae-fb59-478c-8679-10b04d0895f1",
        "cursor": {
          "ref": "bfb25754-ff89-4b5b-961a-4e948e130147",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "639c9d66-f01b-4cc9-bd81-dbc4c9cb1412"
        },
        "item": {
          "id": "29c870ae-fb59-478c-8679-10b04d0895f1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "398f5001-4081-4cb3-a466-11be51615c6a",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9894da0-0f30-4f1e-b9fa-49470a6c5c9c",
        "cursor": {
          "ref": "c40f8cf9-ac80-4a06-82a3-2a8606eac067",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d4635285-8427-4b33-a0c9-67bd64f7f29a"
        },
        "item": {
          "id": "c9894da0-0f30-4f1e-b9fa-49470a6c5c9c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "281a49c5-e16f-4758-b52c-7c75865f5e18",
          "status": "OK",
          "code": 200,
          "responseTime": 616,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2f4bd8-d2f2-4e1c-8aed-bd3da8854920",
        "cursor": {
          "ref": "804ab4a3-5001-44c6-b46c-44f98581b026",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1daf3a7e-9d2f-49a7-b95b-99df5c226d16"
        },
        "item": {
          "id": "1a2f4bd8-d2f2-4e1c-8aed-bd3da8854920",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "784ce6d5-7385-40ce-b25a-62b0effff31f",
          "status": "OK",
          "code": 200,
          "responseTime": 612,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c2babd-a5f8-464a-80df-cbf23d2b88a5",
        "cursor": {
          "ref": "2e052b48-3383-4dcd-a4c4-ec1c03332e0c",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b7197311-50f9-466d-a83b-eb9b305e4e4c"
        },
        "item": {
          "id": "76c2babd-a5f8-464a-80df-cbf23d2b88a5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "45f6c095-8d49-4056-8d70-8aedbb5e75db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c2babd-a5f8-464a-80df-cbf23d2b88a5",
        "cursor": {
          "ref": "2e052b48-3383-4dcd-a4c4-ec1c03332e0c",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b7197311-50f9-466d-a83b-eb9b305e4e4c"
        },
        "item": {
          "id": "76c2babd-a5f8-464a-80df-cbf23d2b88a5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "45f6c095-8d49-4056-8d70-8aedbb5e75db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c2babd-a5f8-464a-80df-cbf23d2b88a5",
        "cursor": {
          "ref": "2e052b48-3383-4dcd-a4c4-ec1c03332e0c",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b7197311-50f9-466d-a83b-eb9b305e4e4c"
        },
        "item": {
          "id": "76c2babd-a5f8-464a-80df-cbf23d2b88a5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "45f6c095-8d49-4056-8d70-8aedbb5e75db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d42edd-ea0c-48b0-838a-14e37704e200",
        "cursor": {
          "ref": "a29f30cc-15e4-461c-8368-9dbf9d087c55",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "90e12132-99e9-477f-aff5-3cae4dc2e45e"
        },
        "item": {
          "id": "24d42edd-ea0c-48b0-838a-14e37704e200",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "014fc266-730a-44b3-b87c-adc1517d17ec",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb031f2c-a7d2-48ad-b972-3cf2eb5e2de1",
        "cursor": {
          "ref": "7d33c8bf-3776-4f41-9e80-3fb2da6b73f8",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "698d2445-65c1-4e7d-ba95-a609164ecb30"
        },
        "item": {
          "id": "cb031f2c-a7d2-48ad-b972-3cf2eb5e2de1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c4ac7550-abcc-4e0f-84e2-dfc0d0eb606e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "cb031f2c-a7d2-48ad-b972-3cf2eb5e2de1",
        "cursor": {
          "ref": "7d33c8bf-3776-4f41-9e80-3fb2da6b73f8",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "698d2445-65c1-4e7d-ba95-a609164ecb30"
        },
        "item": {
          "id": "cb031f2c-a7d2-48ad-b972-3cf2eb5e2de1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c4ac7550-abcc-4e0f-84e2-dfc0d0eb606e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3efc6173-2768-4a7b-bdd2-c7130d44ec24",
        "cursor": {
          "ref": "40b881f2-439e-4a35-ad62-4a0b6ff3e548",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4ad78aab-97d4-4866-8257-4e4477ec343f"
        },
        "item": {
          "id": "3efc6173-2768-4a7b-bdd2-c7130d44ec24",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "2d7a6ce3-3b02-480d-ad42-b9a6871021e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "3cd5d9cb-a591-4f25-a1ca-99fb9f7074f6",
        "cursor": {
          "ref": "2ef15b59-e255-403d-921c-f50957ae6ed0",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f9737963-708e-468e-9942-a63d420f1b12"
        },
        "item": {
          "id": "3cd5d9cb-a591-4f25-a1ca-99fb9f7074f6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d79fcec1-f2f3-4723-8742-ffbf23cd19e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "3cd5d9cb-a591-4f25-a1ca-99fb9f7074f6",
        "cursor": {
          "ref": "2ef15b59-e255-403d-921c-f50957ae6ed0",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f9737963-708e-468e-9942-a63d420f1b12"
        },
        "item": {
          "id": "3cd5d9cb-a591-4f25-a1ca-99fb9f7074f6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d79fcec1-f2f3-4723-8742-ffbf23cd19e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "95eab01b-b494-44b9-b840-270afef2ed27",
        "cursor": {
          "ref": "d49dab3e-08d8-4bdc-9e04-19291c2b3d94",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "68b9acec-4211-4bfb-8891-537c41bbd4f7"
        },
        "item": {
          "id": "95eab01b-b494-44b9-b840-270afef2ed27",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "acf51880-ba8e-4deb-985f-8fb00de8e585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}