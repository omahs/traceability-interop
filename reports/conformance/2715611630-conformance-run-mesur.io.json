{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b7ccda11-1aa0-43aa-ade6-762ccc9b9fc1",
        "name": "API Configuration",
        "item": [
          {
            "id": "71c35185-87df-4fac-90b6-83aadb265640",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7b3108d0-1df4-4743-88cd-efb6d3d78cad",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d90db7ce-ec44-4192-8773-b97ed8373b7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ef05a14-3990-4dae-a564-162804b7e707"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "9fcdad50-7829-4642-878e-67733adc28f4",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "bd66f38c-1ccf-42f6-a378-911c0184e89c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcc56fb9-ece4-4c03-b2c8-47e3505dde9a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f08ace66-aa41-48ba-abcd-11f6b3d093e8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385387d0-ed9e-4186-8bf7-dc7e390500f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1c38e66-411b-4793-8cca-ca3a7bdc29c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6845fed-9967-48db-abac-41633f9c5f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbd2a8c-405d-4641-9681-4426c3620129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38890c69-d23b-40d8-9ae3-ae0ebd935d74",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c95cc6-10bc-4141-8a36-ecd1dad91bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f986c73-4138-49f7-afa9-5bce88c14b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c1235a-c4ed-4275-8f5f-917cba9eafa7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7738d6a-7e1e-435e-9109-80c1fc571cff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ba8324be-5eaa-4b23-93f1-e8987efdd3f8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23f05f26-23eb-4532-8b72-3ad429cae603",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5da5c0e6-d09b-4894-b826-0526882b7e94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ed839fff-2544-4e70-93db-ea26a4ae9b98"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4e29525-e41f-4768-b9a2-87623581f19d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "ee7806b2-f9e6-48e0-ad86-2f650b07d612"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fc70744-698a-46c0-9bab-22eb3e82bcc5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68a4d27c-0851-44a5-91b5-2f9bb2a3a129"
            }
          }
        ]
      },
      {
        "id": "8692fcdf-47e7-4823-93a9-7a4bbf453130",
        "name": "Issue Credential",
        "item": [
          {
            "id": "b85e0faa-66c3-4702-988c-22b369e285fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef57c09c-7512-4cde-8225-824ae19f8fb5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7a4e5a7f-cf57-440d-875f-4442fafe339d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4776bd46-440f-413b-9683-bfa950d398a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4112c0e-847f-4a47-9fee-6877a4e477cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df73df26-c855-448d-8b7e-f985e6c2897c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af0fc668-578c-4982-9a67-70141cbe50d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674626f4-0be7-4c73-b2c3-49a3e889a154",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192d2952-15c5-4296-ba04-7913fae95440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5534b26d-c15b-4ec6-9339-64da777d8c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee4a7d9-3d7e-478f-b791-938d8626a85c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ea9193f-43d1-4b84-9a94-47ec4a06e9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977ac594-a571-44d0-b1d9-94ea3db94646",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88003c6-5e25-4256-ad5e-a68f85289ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930b5a6b-080d-40d3-90ba-3ca2ce1e3305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85022ee-b15c-4ecf-aa60-64abe0cb0566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a8132ec-62aa-4a12-a906-002adb7029e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd55154-ab81-4968-a837-ba8f2f7e73d4",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd176d21-95e3-47d8-9cc8-75d23bd86d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8119208-5e04-4a2d-befe-b02e67c9103c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bbd2d6-721e-4e7d-8933-c400a66dbc5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dbbf267-e231-453b-b411-3fdbc611450e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc074ed-776d-4c78-aa93-bd79d14e01b4",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdf5b69-6f23-4fad-a055-8c1f47c401d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7f16eb-27be-424f-80fc-ce0ef01ab8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6323cfe3-6e61-4bfb-ac5b-c5af30d6ef12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59e2f23f-5628-4710-9653-b67103f03913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07df2014-382a-4add-a738-82ad94507530",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9ffbc8-f60b-48f1-9144-e163fc2ce6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0719976b-1a59-4b91-b13a-d9a42194338c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0842e51-bea6-4ce9-93bf-2dd84a08b074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d547fbb8-cf14-4741-aa4a-167dff39317b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7a336b-3eb0-4875-83a1-a8d374996b40",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cb0e7c-c577-44f1-8038-cad5e87d43dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f3f725-9ed3-47f6-a5cb-3589f530c99e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb61cd9-7daf-4237-a0f6-a595ec06157c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e92b27b9-4063-4842-b139-1f9c3e57807f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87d994e-c15a-433c-8d3a-6c9c7ca5fa5b",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd80604-7416-4289-8e39-0bc69da5c078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6b9211-4c2a-45c4-9502-40890dc8dfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e94069-0e2f-4bb7-a424-2fcf6c68a0e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45a22bff-1594-4896-b6bf-a421806df51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b26d33-85ed-411f-9dde-d9d60c36df1f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecb0962-7eae-4805-8861-da7f6d515286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17824eb-0bc7-492e-845e-f8c9c3441682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27380c07-823e-4a03-b74e-7c0329e80558",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e43ffe-7e4d-4e16-9440-b586bc683fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc80a9b4-4b9f-4137-a5ee-3dc62711dce3",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7786137-afc8-4126-a8c5-133470718019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c81090a-40eb-470f-b501-d81495f74833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731e4159-2cbf-4aa0-a8c6-a9d7268080b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4653ade6-da22-4a9f-a389-2df0cc237e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f2bcf9-662d-44ae-a30e-b8344ead48da",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa00876b-d6e9-432e-b4b0-695116ffb4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a917be3-4f82-433d-a6b4-27e3fdf4f643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4de725-bd73-4fbc-8c8d-0d7605c1b70c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a3e00114-cc76-4a61-88e0-0c75e36b8f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac7ea16-1cd3-4937-b3ff-fe0f0da3db52",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d8970d-1466-4cf5-9a26-b568b9eb72d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14511cfa-fafd-4c18-9df2-1e6a058c3e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3af4f0b-3b66-4e3c-8d4c-a490bbfc0df4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "122abdd7-2e52-44a1-99bf-791acfcb57e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80aaca49-96bf-43d1-a95b-eb3b0c6e455d",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4424db7c-2ed9-4ba1-954d-6f0a796e40b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2dd6efc-91d5-4b57-a5da-7ef9b3cf896b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d029afd-1cbc-4856-a255-44861954b684",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "62a145c3-a6ed-4482-8f10-71dabf0bad30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d122f5-ea05-4d0d-b4b2-420a2c26e556",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "066c6a2a-7a2b-46a0-af2b-e6a0fcfcc9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75061d0b-76d6-4aed-b0b5-0a1cc9f152ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491f1634-0a2f-4bba-a119-9341d39d2e3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e2d7e64-ad3c-4865-b0aa-c575db7aa688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6650ea9a-8cda-4f68-9305-ef33d800acf1",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4efa666-85dc-48b2-8c1b-a114be4f04bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31774747-3adc-4573-925e-92562bbc51f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f497daa-2cd1-4358-8144-acba42ec156e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d529714-4538-4a9a-b525-a25313190fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbee2fd9-d291-4741-85ad-275acdef3500",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0781b0b-1d98-42ae-afcf-c44dade664b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f53395-1303-4c06-a2a3-1d8db299c33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9ed5d9-d8a9-4d30-88fd-063ec5e22728",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd325c7-de1a-4467-a782-3b1b742fe2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87f702a-8309-488f-9c5f-196dd1d3fcf0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e87ac57-2804-46dd-a287-2af6396f3865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53dc484b-a268-4267-a2db-cf0a6cb9fbdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4ac548-26ac-4b58-a69e-cef722f64f82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47319d14-b722-4d3c-84f5-d95ad1073fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd2a49c-471e-464f-8900-a6cf8074247c",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f593a7-eba1-48a9-9ec6-bda3608b5d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14ecd76-ef0e-470b-93cf-cfc0f5ea3416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1cc498-ba68-4595-9806-765e86be6e19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2842a81c-9c93-45c9-9a50-bb812a3a277f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed2e5c6-d8cd-4773-8f42-632d38c6b564",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fa1419-9ea6-4b62-8f29-3d88dace8a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7f2b59-fad6-40d0-bd7e-22d24abcdf45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c00808a-ba92-4a29-832f-3ede400bf1a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ad67545-2c8c-4b8a-94ed-0edf7a6b6ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9297112a-f9c7-4f26-adc8-351854c87cb4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf5034a-37d7-4b91-abd0-a0cf7e240e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd89a20-4704-4f54-badf-e03eaf3ebb26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fbdeb8-7ed3-4074-a1bc-868338cc250f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac84f787-f465-43a5-8a0e-f2092283d167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b9384c-1b25-4688-8c4c-1ffc16b07004",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad34a96e-bbe2-45a0-b1fe-accfa465eef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1798ca58-149d-45f6-94cd-ce784e6625ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad4e7d5-230e-4000-97cb-20e0a7c56edc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bccd161-2835-482b-8824-5e8057d0ddc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556002e0-ee23-4800-870a-ab09fc458e1e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e602f0-2b3b-4f1b-905e-edec97d6b29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2485e729-10f4-4eec-bb75-13f6d2b4c9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ce4866-2703-49f9-ab56-c4ee0ffc6289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d27aba9-6d10-4bc1-a22e-caf9afed31e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a80b5f-7262-491a-999a-a0f66ec9e86e",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab7a1c0-afbc-43a9-9b04-262de1448a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026c8585-5fca-4678-96b3-9e45afb0324f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4022ff4-0582-4fe6-af44-1fbd7d41a192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9107c0f9-ef1b-4fa7-a94f-4d8affe6c493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc291f0-8899-4406-8f95-eb3d6f2aa792",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301b794e-c0b6-4011-9ba3-d9f43cafb276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27cc8d61-d715-49bd-81a5-989dc1dcbd45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38d8ff6-b017-4f9a-a1ac-2a4a8acf8451",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25271594-ad53-4d50-9195-cad7951ae4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212ccb1a-948c-47b3-a2e4-5fdfc57ee91d",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d92a869-cb10-4028-b050-f77f4542a2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33015f3c-b366-40fb-be07-ac5a6e0e6292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49589577-8afe-4a5c-9932-c5775b590a5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4248685d-6850-45f4-9e54-7f8d9194ee0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cae284-ee86-4e72-847b-34fa4fb9a90c",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a828d667-cd87-49dc-8c48-30e137eed8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93da1bf0-ccdd-4129-8e34-1937e2d2bbbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa23450c-9f56-4255-88f2-f2419ba513fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e1d73ba-b1b8-4b98-91f9-b23e06b3eb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9483c1-24a3-4325-9a97-6dc727461839",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fe2765-338e-4010-8c41-ee4e9378b1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd2c43c-2cf8-4b60-9b70-9bcb7944b61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e41ddb-a85c-4e4c-96cb-26f3c62e89f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "444e5cbb-01ac-4cba-aefd-dfc29170b383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624a5ff4-0fc4-4dfd-bb56-f8c8e7f7acae",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c864c08c-ec20-4922-94b3-718b39726f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "85a21082-7bef-4cd9-b2e8-9c10ec3ce772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4b48cf-f9e9-4a17-8220-4fd1c32498dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd2768bb-4a30-49ac-bdb3-eb2c5b78227f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "55600325-0802-4750-a9fb-26f63974272b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0028eb1-b709-4ddc-8433-4014dcf363a4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099916a6-3b6f-46a0-a77c-9f0d6412c2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a54cfd89-c329-4b7d-9581-a56af8b054a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69777d0e-06ab-4304-a13e-1a6f4543ef22",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "6d4e70c5-320a-4181-a3c8-6adfd9a3efd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53db4343-ec7f-4ceb-90de-2eb21465b387",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bde7b2-e967-4a7f-9f7a-33f542a42505",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4db631d9-4c7b-47a3-8816-98d834a92c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113b9d62-b289-4422-a303-401a951e70a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "4e1c4051-199a-4334-9097-9c5a71f54be0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "644e0c78-5d7d-4602-a7ac-211080ec0a71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0dd41c3-4193-4ae5-8184-97e907d781b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f0076f6-da43-47c4-8ead-b0bbc358a0f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4f76c5c-0ea0-43e2-b3fa-eb164a8c5dd0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7a6cb304-c332-4057-a302-6075ca0784d5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc8be72d-67a6-4958-a004-eb7e8dd337b3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b896c7f7-e528-484d-a205-d4b062141eb1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2cb5dcd2-02bf-4c9f-a4eb-3d25ae7101b8"
                }
              }
            ]
          },
          {
            "id": "5271950a-99ef-4ad1-94de-e86659891359",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f262bb3c-f828-4c7b-a438-d84ffb14c601",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1f98b2b-4a69-4131-8bb3-86be1d4c7822",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "207cf393-0fec-4e25-b3a9-faa0e336edbb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "199539a9-cadf-4d44-a574-a556479629b8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "cc63dfc4-2bb7-43ee-9b28-bbdd76c72510"
                    }
                  }
                ]
              },
              {
                "id": "c53c88a3-2fdf-4599-bf95-2ba3bd4bfd15",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b8e736b-6426-4846-8811-31882317233c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc521783-8a66-4a4a-a6b9-dcc0be1a8793"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d92ffa7c-783b-4b3e-b74d-87f0fe22e830",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "15931c44-0635-4746-99e5-cefc6fd79f19"
                    }
                  }
                ]
              },
              {
                "id": "96a7c1fa-6d91-4949-9554-3a8e874ef602",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcd7cc27-fcdc-4f93-8a9a-9118bccd7b3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fcac20d7-1d4a-4785-8f99-460e9c669ea6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6de78008-9d60-4d4d-810a-483ac34f58a1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "6fd6d1e1-eed2-4aab-94a5-d5c2d24717ba"
                    }
                  }
                ]
              },
              {
                "id": "cf99ba01-f995-4946-aa7e-f0a0a8af3478",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ca5ea6f-7ede-4e0a-a768-86a9c7872c30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6abc00f7-14a3-469b-a24c-1c95f6b8401c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36f44888-891c-4802-877b-7e9762ef673c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "40aa472d-3fc3-40fc-8622-d9ad5a6931c0"
                    }
                  }
                ]
              },
              {
                "id": "c4dce85c-a9be-4537-b0df-394ef1db0822",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1de26591-cd17-4384-b8a7-3a6f1963eb3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61dfd91e-c7a4-4a06-a8b7-bdc0887f2347"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9714619-6185-4f06-aeb4-604d3ea38b20",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "103195ea-960c-4532-a71a-8e43c83ed415"
                    }
                  }
                ]
              },
              {
                "id": "fc00c9c7-7a87-4e04-a6ae-ef9dba63da44",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95d209cb-3e9f-414f-9e80-de27adbf1aea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86fff32b-f35a-46be-9886-0c6004c92e3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f76f444-8b6d-4ccc-bac2-723c89a6d400",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "dd933aa2-2a82-4e24-ac06-171712aaed1e"
                    }
                  }
                ]
              },
              {
                "id": "4b4cd3f7-6ba0-470c-aff7-26b9d9706c7a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cd8d27e-4fcd-40fb-a49a-735bb9ee03af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9981a1c-0ec1-46c1-8131-5a1a0ff4146f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1845fc4-5f31-43e8-8a4e-5782f64fecc0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "76fda3bf-e3d5-46be-a08b-36c40296de9b"
                    }
                  }
                ]
              },
              {
                "id": "0cf51831-87bd-4e44-9d17-8c029690cdd2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02505a38-0d08-48b6-9c27-de1952b84c0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ec62b28-5e6a-47be-9e1c-fb47c7ae7cc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bb655b4-3f0f-41da-8762-ac2f96096a6b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "1fc4ddb5-ec1c-420f-ac46-cea3bfd74c5e"
                    }
                  }
                ]
              },
              {
                "id": "1b1b7044-6656-44b4-9d78-23a2b1c05292",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab91bb5f-4647-4cbb-b4f9-07ad1e4ece76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3491911c-034f-4def-a723-b0182689c08d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "757ee8fe-611b-4b8f-849b-42dcdc92b6a4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "85038745-c38c-43d4-8eb8-67fdee7b0608"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fef15c1f-1ca0-48de-a404-d545450f421a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "00ca594f-2b2e-4c84-b978-1e55bbc8332e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "857f65f7-d1c2-437d-8ac3-ba3bd7f01c88",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ad954d0-2f25-4c34-8292-a5903e818150"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f65036ee-f738-47fb-8324-1ccf0e1e050a",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "62aae0cc-ea92-496c-bd46-76391526c95a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25ec4340-91f7-4004-ab5f-9107ec3f7645",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7383ccdf-dfa9-43b7-8feb-2cce2b4da1fb"
            }
          }
        ]
      },
      {
        "id": "17213b7b-5abc-4996-bc67-c2c4d1d0c283",
        "name": "Credentials Status",
        "item": [
          {
            "id": "e9c2ddf8-fcca-413b-a0b5-c69fb77511bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53aed28f-9f81-4ad4-adc0-9ed592457939",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8041f70-a59e-4a6a-b28b-f1bebe230531",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2dba8e-2a2f-4750-9ed7-c714fe88616d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b92b5e-27b7-436b-a9eb-01ebd6f765e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432c48ea-61dd-45ad-8f45-34bde7e433f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3b41112-1a39-45eb-9119-348e7d557a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b832ade-2ca1-4f36-afbb-cb5f9bca0eca",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe6fa80-f5ab-4acf-ad54-652f2f97dc8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "242b4547-dcce-46af-b9be-e776ff0863a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b97a7c-5bc4-4830-8145-e1056c22ca2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea5e3dc6-5360-42b1-88a2-a71fadc847bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6b51390-a868-41b3-ba7f-790399663e7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eda5d179-52aa-449c-bda4-8b85ef83a9b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7316468c-edb3-4578-b6d2-029865296a31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ddc6798-0c51-4736-b7ae-036e11e54efe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81b06c61-0d3f-47b7-8fb2-ad9f1dc3fb77",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "adf581f5-774d-4095-b571-923600ec7793"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25d1218c-4e20-4eb1-87e6-df5bac7f1efd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7f4cc15-f276-4ac8-9d79-2a9e8719f745"
            }
          }
        ]
      },
      {
        "id": "0e620f9d-9bee-480f-9fde-b6f986a38e38",
        "name": "Presentations",
        "item": [
          {
            "id": "91284ac2-cddc-419e-85f5-0107e4f01594",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0dc0bb1c-e1ce-4b63-8f89-8d88a885179a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ae94794-cd06-4957-a31c-1fd371d75c4a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebf6a4c-45c8-4c2a-8bb4-5b2a96b54874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0699cb0d-ff23-42eb-9f1e-0e63dbc7313b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3bdfe1-f198-4c87-a4b4-43e37a215ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0951ee11-12cd-4e80-9643-3c7657e5596d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a029075e-8de4-4659-9a76-8544a11eda77",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b98cd99-8649-4dc0-8646-488739cef032",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcc2e773-be85-44e3-89e9-cd092279db3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5214eeb-62fd-4cc1-ae57-793184d66e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1998f118-6122-4921-a0ea-e212d3923bb8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf8bb980-938b-430f-84e7-c60ef0e59340",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e56b1e37-a2be-4bcc-8839-e474022cd6d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68ebfdc9-aad3-4316-88bc-88c2ebaca761",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3eec7337-02df-498f-befd-7880539da863"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb21e141-038c-406c-aa8f-392e09df0987",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "49127749-3475-4171-8779-326707117c70"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4debdc27-c89c-4558-9b63-f963a82574e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "caeca35e-490b-4cfc-80ca-3fd5a3f20c54"
            }
          }
        ]
      },
      {
        "id": "1dca7861-a865-4699-81da-7312b65dcfed",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "b4443287-7100-4a10-a4be-15369aba2a9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "44a334c4-43b8-49f8-8a83-b7a10a599360",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a4b6f1f-f1f5-43df-a579-f3e4f19f9067",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22ee8ba-a628-4384-8928-4ac485e29f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5de8a78-255a-4d1c-b927-757d17d206e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed1c2b0-7d34-41a6-8794-69a3bffd9d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73951893-a9ba-403a-8ffa-d0dcfa8d49a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fcde92-7d37-4cff-9ee3-ca004e32791b",
                    "name": "credentials_verify:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd77c7c0-b964-4525-b34f-2d51583b654a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "681e022e-235e-4eb3-b960-ef3981c03ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ce326c-742d-4815-b6d6-2680f7ace01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4628e1d6-6455-491f-a097-f21a2bdb4f71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26c44a21-3e6c-43c6-898d-9665f3799a30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d684957-771c-468a-984c-46ffb4d92958"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5d02578-fbd9-499c-bb92-c86c050d2429",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dc6120a-895e-40b4-ad3c-885ba0c385a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c726eaf-baf6-48ad-8edb-1e9e3920eb03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "427d8f28-712b-41cd-a4fd-49e082959868"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c0a74e3-f37a-435f-826e-910f08895845",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5750df4-41b5-45d3-8d4a-01f2654ac9b5"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 384,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 98,
        "pending": 0,
        "failed": 82
      },
      "testScripts": {
        "total": 193,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 191,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 109.96363636363637,
      "responseMin": 69,
      "responseMax": 446,
      "responseSd": 61.28709300166751,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1658451030456,
      "completed": 1658451039913
    },
    "executions": [
      {
        "id": "7b3108d0-1df4-4743-88cd-efb6d3d78cad",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 49,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "682030fe-c18b-4c5b-8031-b50ed921c126",
          "httpRequestId": "28fc770d-340b-4aa0-b0e9-33cb9f635063"
        },
        "item": {
          "id": "7b3108d0-1df4-4743-88cd-efb6d3d78cad",
          "name": "did_json"
        },
        "response": {
          "id": "074d930f-d065-47eb-8d23-b3644529210a",
          "status": "OK",
          "code": 200,
          "responseTime": 323,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08ace66-aa41-48ba-abcd-11f6b3d093e8",
        "cursor": {
          "ref": "3c902510-28b0-49eb-89df-4eec26c20d3d",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c6dc186b-62a4-4843-90ce-53a2597376b4"
        },
        "item": {
          "id": "f08ace66-aa41-48ba-abcd-11f6b3d093e8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "44a742dc-1da0-4310-af3b-a885ef8c9424",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "f08ace66-aa41-48ba-abcd-11f6b3d093e8",
        "cursor": {
          "ref": "3c902510-28b0-49eb-89df-4eec26c20d3d",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c6dc186b-62a4-4843-90ce-53a2597376b4"
        },
        "item": {
          "id": "f08ace66-aa41-48ba-abcd-11f6b3d093e8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "44a742dc-1da0-4310-af3b-a885ef8c9424",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "38890c69-d23b-40d8-9ae3-ae0ebd935d74",
        "cursor": {
          "ref": "fe107078-51c2-49c1-a1ad-ccac2aced1d2",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4dd7c156-2035-4139-b5b6-17f8a5ee8a18"
        },
        "item": {
          "id": "38890c69-d23b-40d8-9ae3-ae0ebd935d74",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d422fce5-806d-4739-bdd8-0652b3fcd3f0",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "38890c69-d23b-40d8-9ae3-ae0ebd935d74",
        "cursor": {
          "ref": "fe107078-51c2-49c1-a1ad-ccac2aced1d2",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4dd7c156-2035-4139-b5b6-17f8a5ee8a18"
        },
        "item": {
          "id": "38890c69-d23b-40d8-9ae3-ae0ebd935d74",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d422fce5-806d-4739-bdd8-0652b3fcd3f0",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "23f05f26-23eb-4532-8b72-3ad429cae603",
        "cursor": {
          "ref": "a7db1d68-fd35-4179-ab67-b3477572e49b",
          "length": 49,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b68a8d5e-6f2e-46e8-a6be-a1a7bcfca8f4"
        },
        "item": {
          "id": "23f05f26-23eb-4532-8b72-3ad429cae603",
          "name": "identifiers"
        },
        "response": {
          "id": "89f37113-2e65-4e46-ad7c-5e89c2845997",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4e5a7f-cf57-440d-875f-4442fafe339d",
        "cursor": {
          "ref": "b6b18dc2-c93e-4628-96ac-ad64912acb6e",
          "length": 49,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3228bcbb-da2d-4284-bfef-c3ec1bfc0a9c"
        },
        "item": {
          "id": "7a4e5a7f-cf57-440d-875f-4442fafe339d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "72023447-5df6-4904-9022-4530e952dc67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 446,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "674626f4-0be7-4c73-b2c3-49a3e889a154",
        "cursor": {
          "ref": "28db7c34-b0d8-4492-a0fd-9d25db9a4239",
          "length": 49,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d4165759-608a-45b4-84b4-3fb71acdad22"
        },
        "item": {
          "id": "674626f4-0be7-4c73-b2c3-49a3e889a154",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5c8e66aa-b7df-43a6-9ade-da077e4558f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "977ac594-a571-44d0-b1d9-94ea3db94646",
        "cursor": {
          "ref": "91700de1-e8c0-45e3-84ba-82eb40cea39c",
          "length": 49,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bb018dd1-1a16-471b-9e2c-a487b4bdc3ea"
        },
        "item": {
          "id": "977ac594-a571-44d0-b1d9-94ea3db94646",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "bcf7b0bc-cedc-441a-8013-d34d89de9665",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "0cd55154-ab81-4968-a837-ba8f2f7e73d4",
        "cursor": {
          "ref": "ed36a232-41d6-4e35-8d7e-b4e8c23c1b63",
          "length": 49,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fba8b794-dd24-4be8-b966-d8f5a4717383"
        },
        "item": {
          "id": "0cd55154-ab81-4968-a837-ba8f2f7e73d4",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "c94ef391-4a87-49eb-9c34-8554c2424427",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "efc074ed-776d-4c78-aa93-bd79d14e01b4",
        "cursor": {
          "ref": "3e79a508-676b-414b-a753-b417fb528f7d",
          "length": 49,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "04d1980b-c2e3-4757-8eb4-cbb6ce4d0344"
        },
        "item": {
          "id": "efc074ed-776d-4c78-aa93-bd79d14e01b4",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "0e23dc64-907c-4a10-9fda-0d2b8a6f1000",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "07df2014-382a-4add-a738-82ad94507530",
        "cursor": {
          "ref": "edd4b62b-cec6-4fea-8225-9fbb842865bb",
          "length": 49,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e6e13e42-57c0-4ed9-8406-64be296a1fe0"
        },
        "item": {
          "id": "07df2014-382a-4add-a738-82ad94507530",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d1412b36-99c6-449e-9f74-a8702e2deb59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3a7a336b-3eb0-4875-83a1-a8d374996b40",
        "cursor": {
          "ref": "ee9f44b4-ca77-4f27-a9c8-48df909f1d15",
          "length": 49,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "39533ceb-7b6a-400e-82de-b9be45a7afc4"
        },
        "item": {
          "id": "3a7a336b-3eb0-4875-83a1-a8d374996b40",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "9c0663bb-80df-49cc-a27f-d3bfac7246d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "d87d994e-c15a-433c-8d3a-6c9c7ca5fa5b",
        "cursor": {
          "ref": "4b86ec83-62bb-4ee2-8688-0b2a576bdf04",
          "length": 49,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de1b3efa-32a9-4aca-81dd-88c1eeeed540"
        },
        "item": {
          "id": "d87d994e-c15a-433c-8d3a-6c9c7ca5fa5b",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b7b2c8e0-71fd-407a-9711-771fdcd0de5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b0b26d33-85ed-411f-9dde-d9d60c36df1f",
        "cursor": {
          "ref": "95f34d4d-81d4-42ca-ba16-54fe3267e02c",
          "length": 49,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1b7b9c6b-4bf4-468c-b061-08cf7f4f70e2"
        },
        "item": {
          "id": "b0b26d33-85ed-411f-9dde-d9d60c36df1f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "01eaa06b-5102-45bb-8359-77989e3559d4",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "dc80a9b4-4b9f-4137-a5ee-3dc62711dce3",
        "cursor": {
          "ref": "67964d7d-d4de-4800-93b4-e4262e752d4b",
          "length": 49,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b99bf708-a1c3-4a57-9978-a00f6683fb8a"
        },
        "item": {
          "id": "dc80a9b4-4b9f-4137-a5ee-3dc62711dce3",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "6268a837-4052-46ac-9d27-ceff65f5baef",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "31f2bcf9-662d-44ae-a30e-b8344ead48da",
        "cursor": {
          "ref": "a33ea479-6ed0-444c-8acb-af33b7448e84",
          "length": 49,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "66426da6-a784-47b4-af4d-c06a1807ba2d"
        },
        "item": {
          "id": "31f2bcf9-662d-44ae-a30e-b8344ead48da",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d48bfdc5-8e6c-45ac-82fc-9a399ab1b6ec",
          "status": "Created",
          "code": 201,
          "responseTime": 100,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "eac7ea16-1cd3-4937-b3ff-fe0f0da3db52",
        "cursor": {
          "ref": "bc0af427-3a2e-4275-b07c-9d03519ad953",
          "length": 49,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2fc9b5ca-0d60-4838-bb8c-702420a324d4"
        },
        "item": {
          "id": "eac7ea16-1cd3-4937-b3ff-fe0f0da3db52",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "afc0239f-47da-4bd4-b52d-4aa4f69d2296",
          "status": "Created",
          "code": 201,
          "responseTime": 100,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "80aaca49-96bf-43d1-a95b-eb3b0c6e455d",
        "cursor": {
          "ref": "4aa10f8b-7786-4e6f-90eb-57fa3cdd1303",
          "length": 49,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "55dd32e2-9d60-45d8-b063-353a85f9f01f"
        },
        "item": {
          "id": "80aaca49-96bf-43d1-a95b-eb3b0c6e455d",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "2cca8364-ed71-420a-bf8b-8f987a57ad38",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "a8d122f5-ea05-4d0d-b4b2-420a2c26e556",
        "cursor": {
          "ref": "e7c80a1e-f523-48c3-ac34-ad9faec2bb3c",
          "length": 49,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c7ed6a0c-7c11-49fc-87de-3963dc8f4641"
        },
        "item": {
          "id": "a8d122f5-ea05-4d0d-b4b2-420a2c26e556",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3720184a-404f-441c-99b8-a31953a43d49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "6650ea9a-8cda-4f68-9305-ef33d800acf1",
        "cursor": {
          "ref": "a196a0a6-997e-4971-8845-afb1b31c5ab3",
          "length": 49,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8204b2d8-46c0-40c1-b230-77c51ab6bf70"
        },
        "item": {
          "id": "6650ea9a-8cda-4f68-9305-ef33d800acf1",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "07971d84-cd09-4286-9287-ee65eee773e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "cbee2fd9-d291-4741-85ad-275acdef3500",
        "cursor": {
          "ref": "5f99002e-5553-4210-b7b1-d73e355a5ddf",
          "length": 49,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e30fecd0-9d4f-4bff-a41e-c36e18660115"
        },
        "item": {
          "id": "cbee2fd9-d291-4741-85ad-275acdef3500",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "940d5f17-4291-4852-ad14-06aace0412cc",
          "status": "Created",
          "code": 201,
          "responseTime": 104,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e87f702a-8309-488f-9c5f-196dd1d3fcf0",
        "cursor": {
          "ref": "639dd9f6-6749-4926-a247-bb6f8c0fcb6c",
          "length": 49,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9881abca-81a6-4e7a-a191-8e2692a8639f"
        },
        "item": {
          "id": "e87f702a-8309-488f-9c5f-196dd1d3fcf0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3a949194-6c7e-4951-8e19-77e62e646f9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5dd2a49c-471e-464f-8900-a6cf8074247c",
        "cursor": {
          "ref": "02885ca1-3158-4d2a-8289-b3589188a1cf",
          "length": 49,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "20afe621-85dd-4308-ae2b-78626ebc0eff"
        },
        "item": {
          "id": "5dd2a49c-471e-464f-8900-a6cf8074247c",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "5b4047b0-4661-495f-9776-3da64257f256",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6ed2e5c6-d8cd-4773-8f42-632d38c6b564",
        "cursor": {
          "ref": "030eb474-988a-4651-8f97-066cc9ca4d24",
          "length": 49,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "13710c0f-bd88-47a5-beca-00bcf2513129"
        },
        "item": {
          "id": "6ed2e5c6-d8cd-4773-8f42-632d38c6b564",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "938fac02-a00b-46b6-9c52-1c99eee0f5fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "9297112a-f9c7-4f26-adc8-351854c87cb4",
        "cursor": {
          "ref": "e9fee998-e1d5-4356-835c-14fa8e918f36",
          "length": 49,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "55f07712-e870-49e9-b2cc-6003e95cf331"
        },
        "item": {
          "id": "9297112a-f9c7-4f26-adc8-351854c87cb4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "193dbb12-4673-425f-a289-5d0520911799",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "12b9384c-1b25-4688-8c4c-1ffc16b07004",
        "cursor": {
          "ref": "24dd158d-5c1a-4b84-83d5-04b127d0e484",
          "length": 49,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "334e462f-1c5b-418c-b1f5-7287bd8b9fbb"
        },
        "item": {
          "id": "12b9384c-1b25-4688-8c4c-1ffc16b07004",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "5d7870da-b33e-4a44-9bcb-fc2f49c33c4c",
          "status": "Created",
          "code": 201,
          "responseTime": 99,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "556002e0-ee23-4800-870a-ab09fc458e1e",
        "cursor": {
          "ref": "5305fcbc-eff3-425e-9913-e187194e4e7e",
          "length": 49,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d66b4922-495a-45ae-ae62-d4dbb7893da2"
        },
        "item": {
          "id": "556002e0-ee23-4800-870a-ab09fc458e1e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9f4d8ada-2c7f-447b-a498-48f838d8a87e",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "b4a80b5f-7262-491a-999a-a0f66ec9e86e",
        "cursor": {
          "ref": "b084f7a4-21a8-4e28-90b8-155eb2ceb040",
          "length": 49,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0f932506-a85f-41f0-86c8-567c83249856"
        },
        "item": {
          "id": "b4a80b5f-7262-491a-999a-a0f66ec9e86e",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "89a2c0e8-53c4-40d3-bc59-dfb2ccea9186",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "3bc291f0-8899-4406-8f95-eb3d6f2aa792",
        "cursor": {
          "ref": "09de794b-6f1b-44cf-9337-0bae3d4df6a3",
          "length": 49,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5dc78ee1-adb6-40e8-b7f4-3d0e5b07c1b3"
        },
        "item": {
          "id": "3bc291f0-8899-4406-8f95-eb3d6f2aa792",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d58e6708-4a71-45db-afbf-b3ca489b543f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "212ccb1a-948c-47b3-a2e4-5fdfc57ee91d",
        "cursor": {
          "ref": "b67d53d3-5597-44be-bd09-a05ef5dbb45e",
          "length": 49,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "eeb4ca88-30df-4efe-a268-99f06a900a00"
        },
        "item": {
          "id": "212ccb1a-948c-47b3-a2e4-5fdfc57ee91d",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "1580f44a-08b3-428a-a576-c84a6fe19fa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "17cae284-ee86-4e72-847b-34fa4fb9a90c",
        "cursor": {
          "ref": "a6c0c061-aca5-4d14-a7df-2a7a8d83f8b1",
          "length": 49,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ef383319-0d03-4481-87c0-5649e55469aa"
        },
        "item": {
          "id": "17cae284-ee86-4e72-847b-34fa4fb9a90c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "c3c4243b-1af4-4005-b7a4-424f0aa6178f",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "8e9483c1-24a3-4325-9a97-6dc727461839",
        "cursor": {
          "ref": "a4701626-9988-41f0-9bf3-5edd0fabd8c2",
          "length": 49,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "40e834e3-833b-40a2-93fa-f23a5b5208da"
        },
        "item": {
          "id": "8e9483c1-24a3-4325-9a97-6dc727461839",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ba4c9b36-881a-4e4c-a89d-bd22b1dd85ea",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "624a5ff4-0fc4-4dfd-bb56-f8c8e7f7acae",
        "cursor": {
          "ref": "01912c8d-065b-49cf-81ab-0e136c78a491",
          "length": 49,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "96aaa6e8-760b-477c-97eb-dc7c821083b0"
        },
        "item": {
          "id": "624a5ff4-0fc4-4dfd-bb56-f8c8e7f7acae",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "c528c8d9-0b8b-4308-851a-a103f3b62846",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d0028eb1-b709-4ddc-8433-4014dcf363a4",
        "cursor": {
          "ref": "7af6d7f2-9cac-499e-a3a0-6a165920b822",
          "length": 49,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c2436e54-a597-4b66-a82e-44246a083e28"
        },
        "item": {
          "id": "d0028eb1-b709-4ddc-8433-4014dcf363a4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cbb94e7c-c8ec-47fd-a44d-6c70a0fb0d8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "53db4343-ec7f-4ceb-90de-2eb21465b387",
        "cursor": {
          "ref": "720c3c5c-eeab-4042-b7c9-893d26932295",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "be578446-5281-401a-bf19-bcc85c499c8c"
        },
        "item": {
          "id": "53db4343-ec7f-4ceb-90de-2eb21465b387",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b0aa7c02-39ec-4a49-9fb5-15ba4f5070c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "53db4343-ec7f-4ceb-90de-2eb21465b387",
        "cursor": {
          "ref": "720c3c5c-eeab-4042-b7c9-893d26932295",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "be578446-5281-401a-bf19-bcc85c499c8c"
        },
        "item": {
          "id": "53db4343-ec7f-4ceb-90de-2eb21465b387",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b0aa7c02-39ec-4a49-9fb5-15ba4f5070c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "f262bb3c-f828-4c7b-a438-d84ffb14c601",
        "cursor": {
          "ref": "2cfdb081-4e61-451f-88a6-a09f921ebe75",
          "length": 49,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9c9db456-4cc6-43f4-8f0e-29439afa9241"
        },
        "item": {
          "id": "f262bb3c-f828-4c7b-a438-d84ffb14c601",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d543a3a4-d79d-4c3d-b331-f4985bb8e118",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c53c88a3-2fdf-4599-bf95-2ba3bd4bfd15",
        "cursor": {
          "ref": "7474c964-c245-44c4-86fc-123d1b3e29cf",
          "length": 49,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "450244e4-a825-4e53-8dc9-97630323adb4"
        },
        "item": {
          "id": "c53c88a3-2fdf-4599-bf95-2ba3bd4bfd15",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "498f0a64-d92b-40f3-a575-d3dccef123e7",
          "status": "Created",
          "code": 201,
          "responseTime": 137,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "96a7c1fa-6d91-4949-9554-3a8e874ef602",
        "cursor": {
          "ref": "884e3da4-4f87-4fe8-b515-e7b0c3dd901a",
          "length": 49,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e8bb1ce8-30bf-4d14-9f86-3ba6a2a79cad"
        },
        "item": {
          "id": "96a7c1fa-6d91-4949-9554-3a8e874ef602",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {
          "id": "9e46300e-e931-4555-8f88-38cead71162e",
          "status": "Created",
          "code": 201,
          "responseTime": 109,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "cf99ba01-f995-4946-aa7e-f0a0a8af3478",
        "cursor": {
          "ref": "975412db-7c88-4e7a-82be-c0ad83e4ff70",
          "length": 49,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fb97c589-58d6-448a-b4ba-d356acfea8b8"
        },
        "item": {
          "id": "cf99ba01-f995-4946-aa7e-f0a0a8af3478",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {
          "id": "b7d23234-211e-4048-818c-a067fa621189",
          "status": "Created",
          "code": 201,
          "responseTime": 94,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c4dce85c-a9be-4537-b0df-394ef1db0822",
        "cursor": {
          "ref": "69c1fefd-6902-4deb-b48e-184705ef35a0",
          "length": 49,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0145427e-7a7a-40c9-ab71-568675033373"
        },
        "item": {
          "id": "c4dce85c-a9be-4537-b0df-394ef1db0822",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "97cb4eea-b201-4f87-aa17-94e18775c4bc",
          "status": "Created",
          "code": 201,
          "responseTime": 104,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fc00c9c7-7a87-4e04-a6ae-ef9dba63da44",
        "cursor": {
          "ref": "1d1628be-7339-45e7-ac94-11e02cadc68a",
          "length": 49,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b372c97a-f727-41a7-96f7-3ca76a023ddd"
        },
        "item": {
          "id": "fc00c9c7-7a87-4e04-a6ae-ef9dba63da44",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5c5b641c-e1a2-466f-956c-51fa22721744",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4b4cd3f7-6ba0-470c-aff7-26b9d9706c7a",
        "cursor": {
          "ref": "aa1ef0e7-dafe-45c9-a6ba-19688757184e",
          "length": 49,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2480161d-dedd-492d-a2a3-468a0811fb77"
        },
        "item": {
          "id": "4b4cd3f7-6ba0-470c-aff7-26b9d9706c7a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "87315e38-abf5-42d4-bfd4-d49951ad8d12",
          "status": "Created",
          "code": 201,
          "responseTime": 96,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0cf51831-87bd-4e44-9d17-8c029690cdd2",
        "cursor": {
          "ref": "653e0096-8879-49ce-9d6c-e57b620c9dc4",
          "length": 49,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4b700daf-2546-4005-9322-7b9c6972dd33"
        },
        "item": {
          "id": "0cf51831-87bd-4e44-9d17-8c029690cdd2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3510360f-53da-466a-8d44-073617ba83e3",
          "status": "Created",
          "code": 201,
          "responseTime": 95,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "1b1b7044-6656-44b4-9d78-23a2b1c05292",
        "cursor": {
          "ref": "024a6903-a7df-4d8b-8c59-21a133a7cbf8",
          "length": 49,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "01f59248-6924-4813-bafa-1ee9f5705b43"
        },
        "item": {
          "id": "1b1b7044-6656-44b4-9d78-23a2b1c05292",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "ff6bc896-6ff3-418e-b120-f3a562d0e893",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e8041f70-a59e-4a6a-b28b-f1bebe230531",
        "cursor": {
          "ref": "5bda11cb-9a41-48ae-b946-fb463ce00aca",
          "length": 49,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "de5c0c9a-337c-42db-801a-899a742e0268"
        },
        "item": {
          "id": "e8041f70-a59e-4a6a-b28b-f1bebe230531",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "29a0f551-5f5b-4092-bab4-9684554ff23d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5b832ade-2ca1-4f36-afbb-cb5f9bca0eca",
        "cursor": {
          "ref": "f1e42dc9-724e-4127-980b-d25e7028ccc9",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5186a4fd-c9ca-4c4f-8c3b-007389d65190"
        },
        "item": {
          "id": "5b832ade-2ca1-4f36-afbb-cb5f9bca0eca",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "40a5765f-5d02-456c-922f-b17e67eba051",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 70,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5b832ade-2ca1-4f36-afbb-cb5f9bca0eca",
        "cursor": {
          "ref": "f1e42dc9-724e-4127-980b-d25e7028ccc9",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5186a4fd-c9ca-4c4f-8c3b-007389d65190"
        },
        "item": {
          "id": "5b832ade-2ca1-4f36-afbb-cb5f9bca0eca",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "40a5765f-5d02-456c-922f-b17e67eba051",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 70,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7ae94794-cd06-4957-a31c-1fd371d75c4a",
        "cursor": {
          "ref": "59c791f6-606a-482c-a7d8-f6b88aa7ba5d",
          "length": 49,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d15e4a4b-4329-465b-9405-fe52c6836e25"
        },
        "item": {
          "id": "7ae94794-cd06-4957-a31c-1fd371d75c4a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "db43fc00-ef75-4b96-a1bd-48840464bcab",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a029075e-8de4-4659-9a76-8544a11eda77",
        "cursor": {
          "ref": "ae584125-5ac1-4b14-a692-aba73797deae",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b411bd61-29bd-43b1-a9db-b340e6fa6bb9"
        },
        "item": {
          "id": "a029075e-8de4-4659-9a76-8544a11eda77",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9c2d93d3-25ce-4986-bd0b-1b98a4137b47",
          "status": "Not Found",
          "code": 404,
          "responseTime": 72,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a029075e-8de4-4659-9a76-8544a11eda77",
        "cursor": {
          "ref": "ae584125-5ac1-4b14-a692-aba73797deae",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b411bd61-29bd-43b1-a9db-b340e6fa6bb9"
        },
        "item": {
          "id": "a029075e-8de4-4659-9a76-8544a11eda77",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9c2d93d3-25ce-4986-bd0b-1b98a4137b47",
          "status": "Not Found",
          "code": 404,
          "responseTime": 72,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2a4b6f1f-f1f5-43df-a579-f3e4f19f9067",
        "cursor": {
          "ref": "6633fd6e-6c58-4573-a3b2-3b34531b029f",
          "length": 49,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2685edb5-78cd-4a38-83a8-fdb64cdb971f"
        },
        "item": {
          "id": "2a4b6f1f-f1f5-43df-a579-f3e4f19f9067",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2427c4f1-de87-4da6-8c3e-1ee8a6657502",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "26fcde92-7d37-4cff-9ee3-ca004e32791b",
        "cursor": {
          "ref": "5ff204df-d2f4-4c16-8bbf-1072a6222776",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c58de5f2-c775-4d7b-b04a-3139c828d346"
        },
        "item": {
          "id": "26fcde92-7d37-4cff-9ee3-ca004e32791b",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {
          "id": "5c163f73-ceb6-40de-8367-c2c309083142",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "26fcde92-7d37-4cff-9ee3-ca004e32791b",
        "cursor": {
          "ref": "5ff204df-d2f4-4c16-8bbf-1072a6222776",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c58de5f2-c775-4d7b-b04a-3139c828d346"
        },
        "item": {
          "id": "26fcde92-7d37-4cff-9ee3-ca004e32791b",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {
          "id": "5c163f73-ceb6-40de-8367-c2c309083142",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      }
    ]
  }
}