{
  "collection": {
    "info": {
      "_postman_id": "7f2d134c-0652-4763-bcaa-ff75092b3e39",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3a5991c7-248c-4ca7-9905-f67f9f61576c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "26b49b26-f380-4cf6-8278-2607ef8b4adc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "685b275d-5537-423a-a17a-08db227cf3a3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23e1bbca-0982-48eb-88d3-4a782e907fd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3cb5d456-8653-4df0-b6e3-d1ac15926355"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "80affe87-3106-4046-bf26-f63ca4caa4af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8448e71b-6cd6-4eec-adb1-ab706cc9c83d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fb70336a-35d4-450d-9ac1-b411fd1c7096",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "158e94f5-93a8-466d-93a3-c9c33fb24f43"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7573bb4-e41b-4087-8005-94ae4d3d7735",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8315e6aa-cec0-42e4-8358-b30d2eaee6bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcd8a874-6e11-4289-9792-1e58ab786e69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfe33bbd-0a71-40b5-b0dd-54fd44604a4b"
            }
          }
        ]
      },
      {
        "id": "2d8113b6-9138-4889-ad92-2a6b03f016c0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "67ee25d6-48ab-4a2a-8124-a1bc0ee2a30a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "509bf482-3912-415a-8547-f9eeeec09196",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7e9dc19a-7d7c-4a2f-bb2a-8834236995eb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b4906d-703f-47d4-83fa-f0785f548e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64d3eb7c-c09b-4498-911d-d4ea85ad9d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43be8a79-7aae-4ec5-8c8e-f19e97a84d47",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2a7a79-bbc2-4522-83a8-1e8aeead8062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "938e0d55-e4d6-40f9-814d-e30781890c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7382b127-9394-48fb-9bf2-884818df7dcb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43955179-30f8-4a44-83ce-18b82306303f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a7d72b6-2c92-4a4e-b89d-fcbff159496e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "47550068-2ff8-48df-92c4-f000ef70302d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92bbf07a-5e62-4c82-ba11-1e68d0c8e843",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c41c1a0-6d30-456a-a3ba-98b0f9c04825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10be7914-6ed9-40c7-bc9b-41f8482a7ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59637f6c-6bd8-4006-9445-af6ae67873ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b2ff42-93c4-4e49-92f7-33be15ebdcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6734ec6e-fb1d-4e4f-a9a1-ec4e3df5cb79",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af73676-81c0-41e0-b910-9ef6688eb41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46ba1f09-0fc9-499c-af5b-fb10a57e3118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be204b1-2728-4330-8b6f-217790f685b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a433ea0e-697e-4b25-9f29-fa3a36211d02"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e13855f0-0d85-4fec-9d55-90cdc1c85996",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c9dfa8bb-aeb8-4940-a567-2a34fed69ea5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ca19f4d-534c-4561-b5f7-a7870d6c77ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bc9ea72e-c6cd-4473-a6b6-e1619cff24fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79d2b773-56e9-4c77-b092-af3c0b1736d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "103db7fb-f491-4e74-828c-c96ebfbcf74f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b48aa64a-d1fe-4567-858e-1141ad37a031",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfa9c638-78bb-46a3-b618-724c3fbd0e62"
            }
          }
        ]
      },
      {
        "id": "9720e628-bb55-4c59-b88c-025277dc4987",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "133c05da-d64d-477b-8353-0a1d76c680a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e830aef3-07e7-4b47-bb9a-51efb8ae1885",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9faae834-550e-46df-944b-fb6574b8066a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f901cb2e-1aea-4b89-90e3-f7c092d65379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f44256-c62b-45a0-a537-2955c6037780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cca63d6-8b0c-40df-aed0-1b49a63b47e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0e3a81a-52d0-41c4-995a-e6f0826126a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12700a08-9a70-495c-9650-8915457c6fb9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b07bf2-c8d9-44e5-a2e4-20811e1f0cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c286185d-3d30-4431-a81b-5637605d99da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09f9707-ef39-4ef0-b058-c5e6296f93cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f36f306-3fcd-400e-9edc-809f7bb3f86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404cea3c-ff10-4599-94a1-276cd4e5908d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4c0fcb-ea60-48f0-8e12-05890289f042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6193017-fdbf-48f1-859d-df02742065ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b24792-f2d7-409c-9936-664b2a902f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf65612c-36c3-4c63-b366-b86356e0ea81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b73013-6bdf-4b7f-afef-d17ce719b160",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809e4832-0aad-4b70-b79a-3b5bac5adec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eda63fb-ed3e-4a02-a36c-851f424ff7d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13a1edd-c127-4738-9fae-00a1c7c559f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "819909bf-9efd-4ddd-86ea-cacab5f28cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e912e4-cf35-492c-a090-def064c65dae",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f287b8-8e40-42f7-8c39-f5732c12bb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9754663c-44e9-473c-bd59-fc057567f4d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a043aa-9869-4bda-9a5d-8c805ac53c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31b40f1d-bd70-4ef0-9d72-f198fe8ea2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7e8310-3139-40c5-8c4d-e15f29837df8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a3126f-740e-4aa6-a8b4-b6c4cae477ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ae4eb6-becd-4f9d-8c55-fe0d1ffe5c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f5d949-9776-4f08-958b-1ca3e54b1450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ff9cd9b-7b7e-445e-ac51-753a84211bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5ea5d1-70db-484f-8944-4ed19d253c95",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed14023-d260-4eaa-bb03-0864fc250911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bddbdb4-f73e-4acd-8162-e086accf6916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46270235-5299-4d58-8603-5f0b9d12d07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22df03da-d07f-46dc-9250-30f6c519156b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacaffba-b039-483c-9a89-e9d2d0fb0583",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a518b75a-8f09-42c6-b1ff-cbe5043266b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76bc99e6-8982-4565-8ea1-863377708329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404b895a-d377-4541-8c51-2b5008ad04f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de2d190a-fa04-4e50-845c-0808fb14278f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8421c101-16de-4d3e-a8cd-2a1062f45ae3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b19353-e17f-4641-b6cb-a7cca0cc5566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc2ddf8f-49b3-48e1-abd0-17ae6386d992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c0ed20-b17a-4442-b358-fb05e7f2dc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26f078b9-27a6-440b-9930-0c13a6827285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb7c995-af5c-4bca-8e7d-ad43b6429839",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf72e8c-d3d0-47f3-a90d-50b424e2f542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "324c581a-a034-4729-a587-79be0245c4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab806db-f120-43b9-ae03-8a06538c55d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "031a85d8-d78d-48f3-86ef-6007dc6b609f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968d4ed9-9415-4255-9083-7de557743780",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21624422-df2b-488e-8990-08db4164623b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d0d110-8443-48ba-b389-8632fb0e4bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341d7b31-f19e-4777-ae66-a4c083f1112f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "634a97fb-f07e-4347-ba72-029beffb7c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adca9b64-ce2c-496f-af61-27f1d56c57b3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f115b27d-43ba-49c2-a6a8-c99e7b54fee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a29049-db8b-4282-bdf2-cc5d157cb804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0fed40-0755-43dc-af75-86b58f984575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dacb9718-0539-4da8-bcee-c42fef273fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34e691e-0523-495d-bed3-91e43b6f51b2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1563ad4b-5725-49d3-8817-714735866949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d92957d-a3b4-4651-8490-6d96359817ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88919d9f-1976-41a8-a535-b835ec294692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b518bd9-5ce1-409c-8b8c-4372c2700f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de95ece3-2b3c-4bb2-a9bc-fb1220bad39b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aecf3e0-6c6a-43d4-8ab5-86a37659d762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8416634-a591-4516-9215-83686e7ab937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df2a3ed-1b5e-4460-a8d4-ccbe3cbf9fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "626d2f4d-4f8c-4ca7-8115-0eaf0838f4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938e5c3f-2d54-4ead-94b6-19537b7ec491",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d581ebdf-3a33-4adb-8ada-b39c5288be6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e9d134-debd-48ce-818c-9376bae2a876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ff9e3a-3e72-49f9-9f36-58e9c839951f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed364813-8b45-40da-bc1b-ae1bf141741d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575677c3-1f45-4d56-a23c-984f7cfc942b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e323d7-8e3a-4e19-ac8b-e25e02cd13d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bca993a-07f4-468f-b7e2-27dc5a548a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fca4486-c0ae-4dfa-ab91-da0aa60d2247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b837531-8cc7-4115-844a-2f4812a01751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dd4951-7784-4fac-a6ab-09a72c9c79c6",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298b883e-9e50-410c-af89-e5d9f8ccee58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "763f50b7-d3c0-4f16-80c0-304c784876e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34229e1-b1d6-47d9-a5a0-cbf78222f24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82028fc2-84b4-421d-9235-ef54992b3d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd8cb0d-2c55-4c90-ae88-ef90bf9e1260",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ceff00-5cc5-4587-a932-a26952bed8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0189f83a-52e8-499b-ab63-b3bd72dcc942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae1b2aa-0abb-415a-8cea-d7e7452259b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e047de96-5ac9-44da-90da-355692495910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04dbac5e-9be5-40a9-8fc4-76effa5da082",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb256acc-f898-42fa-a37f-f57dd2a80f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd5d0eb-6c49-4165-80cf-d2dadd4e144d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33a9a2c-68bc-4b1e-8104-7c386f5811d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2215bdce-cc00-4074-b181-d78535e1605c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38b4d6a-9090-4550-8510-43fd1babc840",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a706d171-b052-451c-bd6c-6ef4e3b3f8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df74e0d3-ccde-4560-834b-213316f2fd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba0be31-c724-4d48-907e-ed1908663e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a44c452f-04c9-4e6f-9a83-672d7a696c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf13cb8-14e9-4eab-b01a-66b090be1fdf",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a439972-0b0d-497b-8340-82aa66d2aed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b19b23-8973-4bee-9904-f564f37c3515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f3d691-6d3b-43af-af97-3dfa2f9bff82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c669ce14-6cbf-478f-a58b-69b9bfd3e82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fd0a3d-7d53-4f4c-875d-18ecafeb72da",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609051ed-ac72-4cfb-a59c-022212b77a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa67b21-e874-4df2-a272-9e8222c1caef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c0260f-ce4e-497e-9bb0-bc3e77339b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9b1f38-838d-4e52-b640-4d4bbbea962a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a0f442-4518-414c-b8a6-075ced1651dc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8af0c81-c157-4c5a-99b6-2076ef548724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca05ba9-df74-4307-b757-770f8974a7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5280cdf9-44c2-4cf7-af41-34fef2fd1213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7208cb7f-aee6-42f1-9e20-101e7fb25cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4fa972-91c2-4699-aa06-dd1088344d70",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a170bf1e-9972-4a6e-b618-e4afac897f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7477ff-34f3-43ab-b463-5f1b374ee3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6449471-02d5-4458-9e24-60c64b8cbe0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3595975d-e9c0-4e41-9305-3bb6f72af440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8808c5d3-6622-4507-83f7-a7c65b088c13",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc536a5d-ad79-4e7f-8a6b-95e5c52b1d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b984d37-18dc-4fe7-89ce-812d30ba1c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7124f456-2eab-4cbe-af16-caea7eb37247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "df3694b5-338c-459d-bc3b-d7e6d337f0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbb2dac-2082-4277-a191-2b888feed12a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9f4297-d5d3-4266-97cd-a45ac0dc30f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98b409f-b6d1-42bc-88ce-2a2b809e9b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843cef29-75f7-4081-9ff9-1bcc1b2a2dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e7dd33-dbdf-4693-ab46-b4370586215b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386ff25d-0c90-458e-8df8-c99ade833992",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4840abe-7b50-4480-b0f7-6789ec49e5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a84c27-4d7e-43f7-a14d-b40b182774bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff52318-5607-4f81-978d-a23d5cc6ecd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "55fa962a-f4fa-4d5a-871b-02f5cc3f8dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4630235-4180-4fa8-8aa4-1280dc8f84e7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be8b07b-e36f-4c03-a720-90433670ccd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f873ba99-c1d5-45f1-80c8-5c60fab6a16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ad9f7d-2203-4625-ae7f-1efef8e2844f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0484bd-094c-401b-8d33-1d82ebebe133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bc8175-196d-49b8-8637-bfa1a07c737a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b259987-f661-4753-bf03-6447d68987d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92044012-2068-4c5b-be1d-002ea45958f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e7e9f7-f7f9-48a6-bcbb-bc23d4c48c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b686d19a-a607-47cd-8442-a0438f11da2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b9feb1-b4e2-4869-93d4-9a3dd11d0760",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a15c41-0b38-4cf0-8b3e-86a5881539cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038748ba-52d2-4a39-9f2e-596dc15c01f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad5eedf-1945-4a66-af36-0799a985db55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca2759d-4854-4e91-b855-49061ea72950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad427f59-d563-45dd-94d3-e00ba80495de",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a115c93b-6299-461c-88f4-0c28767c6b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42008a4-4969-41c3-b998-6a481dce555a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d539179-7e49-46df-b862-9c68847a0bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb557e1-b4f2-4d5b-b6cb-4d4b4b93631f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5f1afd-b0b8-4c3c-b933-be33713138f9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2112c98-4fec-4715-83c3-aa5fd515fc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60910725-a078-4418-a1fe-f033316b729b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8dac64-5ec9-456d-9045-30798f8bbebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65b74e31-5111-4485-96a0-15d0a7794d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b781f1-282a-4727-b2f6-df7b56de1915",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab199474-d2a1-4a59-992e-434e757a2d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63bbedc-e059-4e8c-9e16-bdd8341046c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2673c433-4cc4-42d1-979e-8e9578d48f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8d8d38-a299-4e41-89f3-ac3be96164f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d24c04-e951-4610-9f0d-30f97c30ede9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66653991-25ff-4685-ac88-ceb855da3199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d191dc46-d5ca-4140-889b-9c00b9f52fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca43c941-ffde-4c2e-96cf-8f946856dbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5156f89b-0ff1-4118-b7db-5eafcb5e8d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e8eede-1e56-4b64-a652-5df15c845fa3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5debcee-ad45-498d-8589-a2148854b064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633b6d60-6987-4caa-aaf6-a853c932bbc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4f4987-09b9-49a7-b0b7-addacb7ffb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "40bacf47-5b96-44eb-8cb8-33236bd80fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405db117-e10f-43cb-967a-ba57f0441b5f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee923bf3-710a-486d-8dd2-b437877ab0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f936d052-c03e-4442-8dca-cc7616ed1c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8a3766-dc22-4440-a5b2-f44b936bea18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "deb88a60-8499-4cc4-a9f6-8cc98f3908e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9754376-6b32-421f-8c18-9193e2f3f108",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86077cb1-347b-4111-8344-ea4cc55149d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1010e462-301d-4a96-801b-d64a191613ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c1aeea-15a4-44bb-bc7c-dbdd95ad0c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6250d15-6ca0-4386-a29b-73e3dfe462bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686a3445-ce7b-4c04-b5d2-aa97ad7508ec",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf12ed8-09b0-46e3-b0af-261f9b579a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e25ac24-a126-49c4-bdef-d0a5d543e2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f59a9e-03e5-4b08-8318-246675715526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc79074-8de4-4cf4-a655-f8a6da032fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b481ad9-f040-4ade-980b-d4347790af51",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674f2080-d04e-4507-a736-895cb286d338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a720ad-985a-49f3-9785-a551640fab5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9878eaaf-5eac-4540-80a4-2c79890b0637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4586bb6-e314-4284-a776-0c6b42824ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf1a28c-7aee-47e9-8f30-070b90893baf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3504e39-852e-461c-b005-9d7d37b30b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a63507-226f-4461-ab6d-1c5ab29a17c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad1102e-fae6-4d89-bf2d-cdaeefb7c420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2efa3a-ae5d-4a6c-a645-b07f4dc233e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02345fda-eb75-4d9c-b647-dda57136693a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d279cedd-5bae-48b9-b135-fcd5b907ed13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23413fc6-a868-4203-969a-fdd86e84d56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf541729-11ad-4c63-bfd3-83ca7263077e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "46b86591-8e9b-4a83-af12-65e508e3f97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d87fde-2c74-4302-9bf8-fea46fe27156",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e8131a-62d8-40c2-b83f-c6aca0f88a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e53b5b-e8f7-40f8-ad7a-5d1b64f2fc01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b544ecb-63a0-497c-a5a8-1e1bbb238a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c9696206-5d99-46cc-b890-4190b9c17ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1e50c9-c963-42b0-89b3-68032bc6553b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f20d3d-fcc3-4a6f-b4d1-a30883bd2633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aff4d61-9d5e-44c6-9a98-b36ec4392a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da686472-a42f-4fed-a711-b8f13022a714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b6b3a1-171d-4e0d-a98e-dac851f2711e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1a2ea5-9312-42df-a75c-49964225e4b9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297d39d0-3a0a-4b03-aac2-c54604486505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7d82dc-f576-4016-96d4-f7441b3144df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110942ff-995c-4757-a642-032073e3ab26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "210be49d-72f0-4c25-8c2f-96b8da91c582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effc2de3-5db9-4a47-bc7e-9ad4363a93d9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a3e410-46db-4797-9eb8-025199daa50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc07d9c-048c-4ec1-b943-ab682056ef2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c2d0b7-d50f-42c0-92f3-9d72a6d8fd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa178fe-50ec-4a76-b102-be1ea2d9e7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a31e51-3fc6-4fca-a7fa-9c59f61867f5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3227273-fd93-4949-ad2e-439854259b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1e4fe6-0a9a-44a7-b152-13a44d0079fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f3027c-201a-4435-8456-72d484116514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4c5114-2684-4a97-bac1-67c2fdf62ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a21ac4-c556-4497-960f-84741b41d293",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2efe0a-b65f-4dd4-bb71-96bf9cfbc980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadb7ffc-69f0-4f44-81f0-7785ed153683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bca4692-907d-4315-84e4-f1cb9d1bc0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eb8718f-d85e-4125-abd2-43e00a32a136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8aa465-8717-4f78-ad78-704215b5f525",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc242947-6813-4049-b5db-d42c0475b7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1c9cf7-291b-454d-8387-ced1a37050d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2cb4f4-259f-4c87-91ec-b33dd50a22b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc27899-8a9b-4e7b-8ead-3affb94cc5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554179ca-f323-469c-ae73-42d0dee3e792",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44d1289-7f8d-4ad5-92c1-8c998c750054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3cba43c-4b9b-43c8-b38c-ba9e4cf49520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95012398-ba3d-4c32-a7e0-bda623ba78cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36483282-2415-460a-98a2-4f98a2c70d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0dfd076-a9f0-416d-a0e7-ed3ac904a464",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff1e479-7649-4f72-a136-2a5e327a87f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d41ec0-0d57-4d40-bfc7-e411fae9fc3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d492349-0f6f-41b3-9810-407052bc1b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93654e53-7810-4c33-941d-8e61a137cfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb070fa-748f-4fcb-804d-824cf00ec48c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948dd628-b1c7-4571-9f91-c12773c89297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2771e79f-36e3-4058-ac78-41d03ee4aeee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fae34d5-d872-4d1b-a7dd-c42b8e7cb433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0739e5a-9df3-468f-ac53-b919516d19db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3fd30e-0e7f-4065-8bad-a7e0e2f70543",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723fa5b7-317d-4f54-b134-727238c4c725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2cb3620-ff7a-4c5c-90ac-565d894e4f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174ddca5-84b3-4010-a835-c299d9934652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dabac62a-65a8-4f88-a293-842fcc69bba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ed3625-f919-472e-8cc1-9db44b09a387",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7607de-84cf-4c3b-a67f-d8e70e074511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01402352-59a9-464a-a2e8-ee5764b8ba76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f72133d-b8f1-4ff3-b960-bc848acf5273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1048c2b3-11ec-46bf-93bd-4c6eb398823e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e4feef-be8f-461d-b0f0-fdb7bd2f2c2d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f49ac15-2055-4251-9839-3fde21b54ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e7bffa0-8782-4d4e-bd01-7152a811ee5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4373329-4b25-4d4a-b293-2fe3d6fdbebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65fb41e9-f629-4be5-bbde-e9a8c121c44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d2786b-6c57-4e2e-8349-eda094ebcb09",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e303021-6543-4c5c-9a10-d260ae1ee1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f8b00a-3a9d-4545-a16c-adf0c6fe1b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d6d4fb-3073-4db9-a577-46430184268e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d0524c-5620-4072-a73d-46f9c1cec68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3649bf-47c3-4ae6-b0b9-8986a59ebcd7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b563336-f440-43d0-9188-8b3bf3e9e657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b95b6b-0736-424c-8f1a-2b786bfd49fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffecff8-cedf-402e-8879-fbe7ba3d4126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "711864ae-4dce-4088-b9e2-7dcd42c1cbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cf88b4-9a0e-4215-a48d-e510c0297ccb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a076b8-53a4-4e7f-ad02-efb01cdf06c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100efda7-6958-40a5-aede-f541e4d211ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09113d2-ffc2-4e98-805f-e7da946f1a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc720e6f-2f01-4d6b-b7b1-2f5e192dcbda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9323e59b-bb36-46ad-8a26-c7574cb151ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc212fc-4d69-4ac6-a5c6-e929c963e1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454eff23-bec9-49c3-8c5c-4f18abe072d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28dff47c-e5b7-4b2a-9ada-65d0a76e2a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc7f3f5-5c1e-409a-a154-e6c0500974af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af493484-79fd-40b9-8676-cd4569855ad2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ab187c-26fa-4d68-9ef5-ae1fffe3aeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e95cdfa-f8eb-4fbf-85db-a39d7d22abea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef84b8b-aa31-4905-9437-027e3553355e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf707bb-7271-42fd-956f-c8babb20bae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a428821-b1e7-4d7a-a49f-87658df658fb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f895b4f-c8ff-4107-8c37-27e66c1c77b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b628a86-701b-466b-9207-1c3c92af1d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac303ca6-dba8-4bcd-a6eb-05f53dc87417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcef2de4-77c9-470c-830d-686404df7bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc63be3c-6e0a-454a-a820-7fd8e54dec33",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d9d0ff-27fe-46a9-b45c-615109130918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97b2333-8efd-4cf5-9d41-01bf531a6474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4786ca-78a0-42e8-9f27-601fb9e1252b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c415f788-9e4a-4875-8891-06c9f86262fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1882c66-b1e4-42a5-bdd1-bcc22869a600",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61fc577-3e6a-40f2-9ad6-46f0d282ada9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2308b2aa-4cab-4494-bb46-08a7c5b6f1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c5cf66-2ea2-461e-a9af-2ca3809ac0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6654962e-5b24-4bdc-b6fa-c5f0e6d480ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3aa532-2cce-4deb-b8d3-b3a2c504f16d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df348a40-45ac-4959-91be-dc2fb2891468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8c045d-8ca0-421d-b055-7036d86f53c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b65a0c-7ae7-49f4-b972-1ac2dab14e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "388121ff-2767-45e3-9924-1b37f2178a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d95c16-d83c-4aac-be3e-40937b117adc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf265e5-27e2-4ac1-b1c0-f7b7652c1663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4caf87c-660b-426f-9a09-8df7076de19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9c91c2-61f1-4092-bb8c-7cfef401afd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5de9f42-87ea-4958-ab94-57195df2a7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ce9679-5322-4d39-8dce-0a2676c2399d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d95b9fc-a157-464f-adf2-d333da7be8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d80a73-88c3-4b07-b750-730c60090429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f03b6d-eb1f-4370-abff-f10a98b6bc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45d0af25-2c69-47dc-acc3-2a128c5cfa72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1e7f4c-faa7-478b-b6c7-d02616c02d8d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8af8d7-e198-4913-9106-a0e50b4cc02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc05d67-3759-4de8-971a-74eb42475444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec913f14-7c4c-4541-830c-bed8e0b3cd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ea7a96-04f2-4ba8-b48c-ee089c16e814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c078ad0c-ac87-4d54-acce-e6f3e9abd9d2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248fdec2-b16f-4a3b-b34a-f2b95426ec2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6280474b-ad78-46aa-8ea0-ccd79900b86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42604444-ee29-4572-9258-f4a81b3a131f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd69ba0-e739-4a19-9ebe-7d244e4d20a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e99936-54bd-4f62-8334-f9fdf8f2e9c2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b40da1b-b3eb-494c-88fa-44a722623e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef875790-e756-4f43-a028-4987afc39287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b92dee-5bb7-4525-945e-00d046f3e9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "96365792-7563-4430-9ee2-89032bca3233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a2cbe1-208e-4391-b0d1-1789798eff69",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3884d7-6854-4ce3-a61b-e6e38be944b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d5fc78-a71e-4c91-859f-689781d85cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a27e1b-39c5-4b90-81f9-8c7e696b40cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3341b368-a38c-4712-8b47-4d5ebc52d325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ba00e6-2332-4157-83bc-fa3aa6e1342b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c34b862-1828-4dd2-bbba-428c65237257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0122b2d-095f-4386-ab7a-169f3609ee2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59d52a3-0d38-443d-a770-e656be861696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97bf2f18-70eb-4b4b-bc79-f1f114442e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf7165a-3e40-4d35-b984-c603ea15020a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bff2939-aad0-49e2-8b96-cbc647d698d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c925cdb-b369-4f07-8617-d8e83970e876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947d4ad7-a181-4cf3-a246-0d47eaccb7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f542fd8-d3bc-4b4b-85fb-6c45985964b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953fc31c-24e5-4d4d-a81f-11effe91ecdc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6abdf6-5d73-480b-980d-eab19eea8700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff93de2-d118-4186-a515-c1e2da8b4a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c334b6-a357-4da6-91ca-59448f464969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29bb80a5-429f-4326-a12e-e198b892eac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850dae71-bf55-4097-a30d-1c4e39e24de4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7055c6-4005-4e14-9f1d-443adb02b69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32579085-b01f-40c4-b750-03c7e87d6684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff3a00a-b319-4979-9e19-35d1bcca2069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6459f92d-1953-4cb7-8f25-dc29c1f3549a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442e28dd-d8f1-475b-ab67-4f4f48bd526b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1da357d-f7bb-441c-a46f-caee290f5258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7dfc441-7438-4d6f-99e1-c92130ed7040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc16ad04-272e-4510-a032-1c8970cc36fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12d5b7b5-0857-475d-ad00-d477a9d5fbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018f4082-5029-42b5-8a2c-2f595e8727b7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3110c23d-a0cf-49cb-af77-57b52716340b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68211b9-932c-4cd6-905e-68a29182e334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1ff7a2-6d0b-4ce6-b14c-8c8dc54f1103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "00ff1c2b-a37c-4d98-aeb7-956d2ea73e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fddd96-a3d0-4953-88e0-f9d205bd9fcd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d82baae-7f90-4cf1-a2c1-6ec3b0532ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8350f5-d7b5-497f-82b2-a82243da356a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaced21-3309-4452-9c86-43b1d0aa8c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21b6f4a6-7665-49f5-8eae-30c1eeabef2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e851758c-3f60-4145-809a-81c876c16cf1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4aa1c00-8308-4b96-a440-6393d03c5142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393dc68d-2d24-4cf4-bba6-c64532a70fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf8c582-e87f-4c76-b641-d69f619907d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b680d4db-1532-446e-ab6f-cd7bfe44c648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c892ed-f540-4dfd-86a3-60550d141072",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3d2889-6247-496f-8372-18d264e87eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2603e9f-a7ae-4dea-a058-09eec222a89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87033eb3-7b24-43e1-8b66-5492a99c5393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db1e391c-e4c7-4a94-8bff-23030ba5ad1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae176942-46b8-495a-b613-56c3935682f4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e8937f-0ec7-4302-b5ff-5ea95bb849d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1244a10e-2038-40cd-8903-46bc4b2028b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e1a3d5-4fb2-4ae6-b991-f3564630c192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c75d2c4-3acd-4ff0-976e-561b7c7c4bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8807fd-027a-48c2-b165-ef6bd56f5930",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180b4f1a-afa4-48f5-a144-a5408a9f6f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82962f10-beb2-4e85-b780-dc14b833bb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c51ee1d-888d-4e54-beb0-48d8b963dec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc87514-cfcb-4d79-8711-e1b5efc5ae51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a46b06-e3d6-469a-8514-126e58f37ea7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a5d77c-728b-4c54-ae6d-5ecc52fe59e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a687c9a-9c65-411a-a04e-e17e4009518c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26f4996-05c6-46a3-839d-21104341750f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc9c55a-9cf7-42b8-8b61-a54bc14afbf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fe5b47-fb0a-4158-b60a-47d26ab14364",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b6a7a6-f43a-49ed-a243-20bc060edc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fab8e7a-a464-48dd-bbf5-5752f964f14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f93e402-769e-436b-82d1-e5704c07ce95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "66418ddd-4d4a-4e87-8096-777928368ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba54f2b6-0efe-44cd-aebd-46b2f57659a0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e684c2e8-e2ae-474a-b950-3417c1dce602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecaadabf-58f5-48ad-8e6c-715b7b9582a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f6c76e-dbc5-4d6f-ace1-00e04241f1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b0ae7a-9ba2-4352-98da-9ff5382d3669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08253512-beb1-49c2-971c-13de155ebbf9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed38b3e-3610-4598-a7fc-00a2a9378bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2559f49-521c-4f22-a6d1-8b92cce12a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e518c1ca-163b-4a47-b542-0b6c2d2fee05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "45eaa2ee-3a9d-46af-b126-49d32639426e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4546d4ae-3fc0-4ce1-acf1-857faf610e85",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323a472e-5cf8-4a16-abe6-a3a6299808af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd223ab-40f6-47fd-b9c9-af6812d03d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349abe05-0998-4b94-8091-33fec1294a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7284f8e8-5225-4c12-a41c-9024684a3f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b900df35-1c4e-493a-9b76-dbbdf1df00f7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f24a70-4e01-4e57-bba2-2edb3fb5399d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "095124c6-4c09-446f-ac12-0ac120a60be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311ccaef-38c2-419f-a2a8-3a420b8d91a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "279baccb-d976-4792-af15-b47120885a62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc2c9521-98bf-461a-8103-fdcf95efe56f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e3966a3-cb19-4a21-a1c2-d18d929242d1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631dde0e-494d-43f8-8c83-e13b85db3af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d42b41f2-0cb0-4ecd-a5ee-6034b6ee08b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8263a33-e000-4a88-9e21-58cbddaf17aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2603e530-1d1d-414d-a731-f478fab77d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9d4a7e-f112-42b9-8ef6-c8994a15b119",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0798ff3b-0c9b-48d9-b6c9-8307c1ad4f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87d643f5-6d75-4c4e-867a-6a80cab726ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8efd634-e988-4da8-91e9-9b40e12d816d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "21055744-bb13-4b3d-9d76-8a6786a9a2b7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecc76734-e0fa-4cfc-b559-c53fbcc62284",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6756e0e3-e695-4105-b42e-c31585194ffa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0de97299-17c5-430c-9464-dda12be37da0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27db3f84-6fac-486b-8df7-a4edd53707a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51becd03-1688-44db-9313-f57b2c398f6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c360812-2e27-4cf3-9df4-d7f23b6cd054"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b673f185-fc0d-4728-a4de-02294ee819e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e8b1ffc-1e98-4dbf-b318-3f81829b9ba4"
                }
              }
            ]
          },
          {
            "id": "ea6b6557-39a3-4e91-a652-72775baf8718",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9456dc4e-9475-43af-a5aa-c631d1807820",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5d3da95-37e1-4749-a542-a22558e26294",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35294d1c-acff-41da-98fd-64aa37e7ca90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb06ead8-99dc-4941-b133-56169a2e762b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0db6bc21-479c-47d2-8e06-dcfda100440b"
                    }
                  }
                ]
              },
              {
                "id": "2898f1df-b15e-4249-bc0f-43ed7e4464f0",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba86d142-02a7-4e48-a3be-6d82fd7f3a6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4d6ecaa-43a0-493e-baee-7bd201f5bd05"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0513ca2e-11e1-4733-90cf-1d9932acc296",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1d8bcdb5-b2ec-48a7-add1-02b10cb662b0"
                    }
                  }
                ]
              },
              {
                "id": "94942e5c-3eff-4cab-ae4b-de536745bb5b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92c1d9dd-0631-4406-a908-234f1cfa73f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f894850-3f1f-4d93-9714-9e8dedcb663c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "920043da-80fe-4044-953c-7e91cbbb69fd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "148f2d7f-a8de-4e5d-967e-a6792fe9b867"
                    }
                  }
                ]
              },
              {
                "id": "55f3cf71-1474-44e7-95a6-03998f0e1fe5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47672352-94ac-44e8-b011-0e419c798179",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c67dd52-0cef-4049-8971-d2a209a34531"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a62be3a7-fe9c-4753-9ea2-d182d8257250",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ec7495e2-a4c5-4aa5-8cd6-deb7b47bb897"
                    }
                  }
                ]
              },
              {
                "id": "1a47b800-9d1e-4d68-af94-e556ab584cc3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2134bf8e-7338-4700-8c61-a40e5ffe5865",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bd66171-0aab-44b8-b8a4-6a986d5085ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "683c970b-67ba-4c41-bb1f-2ecf8e3fdb74",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b42d3e09-ad71-43b5-9550-59414ae1ca62"
                    }
                  }
                ]
              },
              {
                "id": "7dbc1cc8-45a3-4266-a391-18e09caed07b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06503fa7-5597-4466-abd2-6c955805938a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31e67f21-b50b-4b79-8f53-99ad4ba46002"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc4dcb19-90c3-4177-8449-8d248fd838e2",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "52646910-9363-4712-80bd-b60a20770e38"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5478c3d8-dd26-4279-a3f6-8e1fd75d550b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "efb34817-bbbb-4915-abfa-2906263dad6b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b624291f-0298-4491-b649-e2d91bf44f2a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69758e7b-f315-4ff0-930a-dbd7df88ffcf"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b009faa-a3c2-47cb-83b0-9bf08879bc29",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8d65db2e-7a4b-451f-bb29-39c7bbf1bb9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e74c6847-ecc7-4155-aa28-9cc27d13048b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "daac2a87-4780-41f0-8b09-7e9b06f92ccd"
            }
          }
        ]
      },
      {
        "id": "991ff107-36ea-4b8b-b9fe-4cfee3567546",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d6c9def0-8848-4cfa-ab6c-4e5a9e58e96d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0674d9ac-19fa-4273-929f-50dafcb8221c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9159c71e-7097-4cf9-8e6d-490ce014a85b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5364b02b-ca0b-42c2-83ca-89ee2ebc3f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf69b378-e19c-4f57-aeba-ce5875ab7317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa6d6c4-67ba-48c8-8c5b-146c23829b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "27f075bd-2de4-4f5e-be0b-f151c0c485be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf628e2-7e99-473b-a066-82b74e812f76",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf9e175-aa85-4049-8d86-e46162fe97a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3e5c73-36f9-4da9-8469-b75a98234ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce65b00-cd84-467d-8302-31899d585501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f73dd92-4757-4b20-8d41-1ad8fb94be15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672fe6b1-243d-4095-8382-0e8ff93f65d3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37f029f-f747-4b1a-9290-794ea1220f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a044256d-6b0c-4c92-9e67-730399e50b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9981f818-bf20-4891-b965-48fdab1a37a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f343079-2b93-4677-8511-a1fb094fd05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52d89f2-43e8-4f6f-8ce9-d00f9a2aee1f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d338f3c-c865-4229-9cdc-a1aff725a597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dcf998a-bbb2-4a55-a0cb-958f4797ed25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e872cdf-f19f-4cfb-a83c-2345fe97bdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5428eff-7c22-4504-b2f7-3c37ffaf5fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f4ebd7-eadc-4eb6-b0eb-4f00b9f52091",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abff319-e5b5-49a0-8a78-e1e198473aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c434bbf-f88a-446d-a356-d54157edd6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a950d381-368b-4a71-be9f-f948a59dd1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3314f49-fd57-48b2-8117-4785ed3a6d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacf0fff-67ee-4021-b2a7-38d669aba6ba",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b400e20-f2ae-4e6c-85d3-4d0723239c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a92516-0b43-45dd-93d3-d4ef87544376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76325b0c-90c1-4358-b312-9910856de4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "543f74ce-fc10-4053-9065-e2b8a9e9f488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11ac813-ec67-432e-bf52-624a9ebc40c4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d85caf1-a2e8-4623-b47c-bd6c69ca53e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60dc8bc-f1b9-4bc5-b787-dd96cdf48c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a679d58b-6e29-4fbd-aa6f-6906f49c7235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "55a74001-94c3-47fb-b21c-189b33e8e1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cad4b6-7cb9-4252-8199-51518e64001b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea871c1c-f2ad-4f2d-99c5-37fc7de49b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d0b824-79b4-4c92-899a-4da24f62e891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec44324-5353-46da-b134-8ce46bcb0551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "812a2195-9f4a-48ed-b473-688a092ed4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf679d6-7174-4615-bc1e-e542d4272251",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19abba2-361b-4a42-946b-2dc2785d7158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ae0c47-4ab2-4e3a-990b-d97c2e6e987c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369b5f90-eecc-4632-ba9a-5918f9378860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64d6ab94-432c-4263-9955-0ff28d3c9d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de5d7cd-8a74-4676-a6b6-aeb4a77b5f91",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058a639e-9f0b-4588-ba80-7438ec1f812c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a03240-98b4-48d6-9684-5f6d1dd4c8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d87b04-2d66-4ba4-9ee8-8ca7a927aee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e682c26-9b29-4c34-b9a2-de226164cd01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be90624b-aad6-4f44-b3d8-2e4bdac49656",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373a291d-a34c-4e00-aa4d-3c7ab7f79e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54398d7a-6f20-4510-8b35-16c5941d2727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ce8904-9ba4-409e-9613-5fbce8933a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5d0869-9806-4125-939e-ae3efa7c0c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bff393-2234-47de-af3f-7bb1b858f040",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fe3dd9-4418-46f2-bbbc-2e7cee577ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a800d6-b998-49bd-9533-6f27f8939acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc29a90-36aa-4dc2-b9d7-16f42c988fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4460a7-369a-413a-a3e4-ddc3d665071e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1abe0ed-b8b0-482b-879e-56b2e746a5cb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2796263-d834-42e1-ad0c-d8ccee8d1ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07273af6-2026-448c-b71d-3dbb15a17e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a84dc82-fe97-4a83-a9aa-b1e55ef3e3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25f469aa-4cea-4571-8c3e-feaba28bda13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2adf2db-a111-4813-8132-7da56a257259",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21a1478-7cd8-45fc-a4d7-331a2e0eeabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc290a9-5e86-4e7b-962f-653a3025a9f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddb282c-3e82-448b-9e10-caa5cb64415a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "020b719d-4644-4350-865d-aa2b93eb1130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa0fa2d-9960-4b47-bdb9-f525749d88bc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec44f669-c7e3-427e-8417-f42b8d9b9e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e17e532-3afb-4f55-a235-e71ba4e07c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244f7aff-639f-461b-8c35-7ae55c1f2954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c88a9aa9-6a41-4687-9e06-c5638470ef48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecf894b-72c1-4a04-8f4a-45ef6fd8331c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c3cf68-78b5-4dee-a633-dce3887975a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24503276-1102-4f35-9af2-7c4d84ac5eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccfb966-a589-44e2-84da-f3a80a2958ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "445a41bf-f799-4040-9ace-b78b14a2c516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b8d596-2daa-4c3f-8272-9c962472b01e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7744bbf1-ecb1-49f9-ba6e-a88e3b7f8b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78aa70c-54d4-4812-9d78-04f8084fc0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f90051b-8c76-435b-9e1e-94aa168d4fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4bce2b-0e2c-40ec-b168-d9328e36834f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b72911-09d8-49ef-b8ba-cd237aaa8040",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660241f5-be53-47d7-8dba-7041a75a6f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3725d7-a166-4642-8432-6aa314fe4e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cf7c88-5a57-45d6-a7c9-a9227e6aa931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c8e46b-000b-4ad0-824d-562dd08a124d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377dca7b-7f34-4c65-8e7e-aab59f7c9b48",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1447ae43-f8c8-43e6-8dea-8a521d92aeb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ea407d-bbaf-4fd7-82ea-74db42e9f644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcc13a7-a0a3-4b37-bfda-81620e3c9c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a31932bd-b6d8-4205-a371-fac09daf15b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb24f28a-78cb-4994-bff5-d5ab5feeaef2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475e067a-26f7-4a4b-b6f1-9b4d03fc8e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c39e59-dd1c-4218-bcc8-aceba0001a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f01b8c8-f807-4209-9dd7-f4b03cb62b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ec49cd4-06cc-4fe0-92e6-4aa00f523902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dac5e60-8879-4fcc-a516-d5d378a2ed0f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9723b83-87fc-4439-945f-4d697e26226b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8e3088-70ae-4c8d-98fb-4feb4a2f3154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8beeeba-17bd-435e-b8e8-e96a9e5a966f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e000ab75-ac9a-4730-92fc-4cf8bbb8fe46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c88d2c-126b-43d3-a613-3fe82d88bbc7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0da89bb-004e-4d04-9ed4-36756a67387d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08df2bb5-9e7d-4a9a-82dd-0e892cd8fcbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6d8b19-bea4-4c56-973f-f15ad616363d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "409bed79-fcfb-4516-ada3-1282e545df28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319ca26f-6284-4642-8a59-d11eafaa2fb2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b425852d-a96b-443d-ab5d-69347bfc53d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdac4be1-b593-4741-a064-f7f9a4a35def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22c2989-3570-48df-8575-a7835276c823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3efd83af-8057-40e2-97f9-f2d85af9b53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2ec26d-1f75-414c-b804-1eebc8ee46e0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d03856-0711-4c9c-a672-930824b68c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3d9a49e-f179-49db-b962-bafd3bf997d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12dd4710-1125-4e9c-bbb1-8244fbbbe64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36eceb57-9be4-4744-8acd-47f9f1d8233b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca688a41-494c-47f9-a166-eadca55db550",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55aff3b5-e62b-40d5-921a-1e1abe32d51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a254ff-d066-4c86-9191-04fcf01f17c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c1dc4e-e3e6-4786-a192-93f726159956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84f6bc9c-f2ec-4129-a25f-543191618433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b474ff1-2fd4-4f89-9d89-88734ea5900a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0ca8d6-f2de-4ef6-86b5-9ac2468e967b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d3e1b5-3504-4739-99a7-1a5c987a13b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ceb7b0-5ffe-4b4b-ac29-3b54fa75c8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78c81b6f-d760-4f39-b64d-cba026a7405f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9f2326-4a0f-4a13-9079-4b9c93673220",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf0a7e4-af26-4388-bcbb-bdb0b8d687b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5ea8e2-8850-467c-821b-df8a7b1276f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa97ed2-857c-443a-9d1d-4f4eb0a6a37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d39b2c-f107-479d-bea3-564ee1d6be65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0b0a58-7f11-4859-8e4b-a496792e2004",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53773f28-4c41-4677-993f-f5df177331c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8cd4480-26c3-4767-b454-52a6e4590d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0c8304-c294-42d7-b212-8091d8a81f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3113a5d7-656a-4d99-a650-5d18d0a896b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16085f7-7f8a-47bf-beb5-299ebde8538f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa134cd-a949-4b46-94de-ac03aa36eae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357e2ab5-1aaf-468d-ae09-4bd3f061739b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba74ca3a-6ac1-4b5a-8517-67d7ca594798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fac2632-a303-4ca7-8e1e-489eda7d01c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78590a60-4b9d-4b5a-9b3e-5a6404a677d6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137b4156-5d78-470f-b860-1952d21bf939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b922735-1f59-4e64-ab7e-f8af0611f24b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070fa1c2-8a78-4676-867c-e2f606bdd4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7998ed-4997-47d5-a6e6-949cd083592b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a87cd1e-7bd7-4d6d-ae26-a6006a18c5d2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1f6368-e165-4a97-ab77-ed73b394a8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc653b4-b8ce-420c-a536-5068f412bff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19c6c89-a045-4d3c-850b-37fb69c4102e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9878b462-04af-4bf6-9026-47569db2bda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9bb1ec-d777-4e4a-8b1b-393730da4a2e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e97172d-f3c5-4632-b709-55170b22bd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dec594c-7cd3-483e-851b-894cffa8dc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a8f105-ca0c-4175-8005-3e0b1474e6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "404c50ee-f81e-4d95-8cbe-f788581351a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e4cacea8-69f3-4c45-849d-b51bcf949c4c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73594fc7-f637-4a60-b3e5-9d79674058f8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9c5305-fbe3-489d-a0e1-7a8e4c4f4671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba7afca8-2932-43f8-8a3d-8237da7c529d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ddf97f-7667-4507-85cd-4342cafe3ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f5db792-6461-4c82-8851-9d29e1787678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd60900c-d66c-43d3-8dec-12c75b6724d7",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8c847b-9838-4b3d-b64b-e6c5240d69c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "352adb2f-7264-412d-81f0-cc7f97fc88e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0296947-89c0-4bd3-9946-2545ab9cfd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09b65ce6-88cb-4806-a5b0-0b740332ac11"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37e66e26-4c7e-4ef0-8945-d14ab7d1552d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad059093-ce11-4285-9010-65a2d68d9ab8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5f44e27-c5b3-4f5e-a42e-439c759e56c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "752d9206-1955-4511-a6e2-c4269d00c764"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6967216e-b86c-4060-95f0-e9ee5e132269",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "21c78f56-acc8-4f3a-bada-0d3ac7179a63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f1868af-36bf-4a3c-88ac-5bd10ad17a76",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d78c0395-b111-47a7-839a-f73bf553152f"
            }
          }
        ]
      },
      {
        "id": "5ca793e5-6661-4187-94ed-ab0a41ef1790",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4ae2428a-2711-4294-88a7-24d7d77e8eb0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f50471c-8a7b-4987-826b-d2e01b231d03",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "626bc6c3-3f18-496c-99c2-6a481c3db11d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f49904-0125-4e5c-aed3-762a8d7e2d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d8a2dde-253f-4742-a317-b58ff491dc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448223ed-938b-4779-9bf9-c40f32723e17",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe809454-943e-4d5f-9007-f0d2bb5d3ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47df177f-eb77-494d-9bb4-4416142011f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ea18cf-edda-4e6e-8cb0-bcb34fdd1fae",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd74f803-8d96-4551-9c82-7b62049f93f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e88ee9-5124-4416-b8d3-64ab0e374add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f03c944-b6b7-4869-a009-6d84c2d6e4d2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e0ff4a-0d19-4492-9bc2-5a14663bba00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c0fc9c-99d3-42cd-a869-035d0244d765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e78fdb-b63d-4a5a-af63-3857c739d7b7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82f5714-c2c3-44c6-becb-e237c7a7cd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc26fe95-5e02-4a73-8280-e05f2a52cbbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdaaa55-768a-40f1-b8f4-9c667e0c2e3a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19707e3e-7ee6-4ba3-8d06-0ebb53c41fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44463d28-92b1-409b-8343-63c386a373d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb3a2ae-68c6-4f31-82ae-58a1bbc310da",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b37496-6077-471f-b567-f926dc302c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e663e90c-48b9-4cf9-bb9d-8a77127a6cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43af77b7-c338-4624-8d11-e238f703daf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c542971-8426-437d-9e77-29845816e1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad8a5db-e326-4065-a45b-3d5b879b7a17",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0d0b5a-986a-4112-af4f-9a405270e9af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6d67d3e-f551-45b9-8f4c-eccb69eee9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e52612f-0c8c-4cba-be09-c57708d1f22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cbca21-4e04-4ba5-988a-ee0a62eff36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71daddaf-d557-4322-818b-6ae572e72742",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3a001a-0f04-442d-97e8-35d5bf9d9348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50bb1b2-ae4b-4407-a034-b51c652d9da1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc5c54d-85e0-4bbf-952e-27cf0aedc6a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13207fc8-9c34-4fb8-9a96-2f94e292dc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813e940e-3889-4f3e-842a-65d033fb6bb7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f60170-c19a-47b8-acfc-b028a69a2f96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02cf9099-258b-48f2-89d3-b4437d70c694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3cdd89-3053-4444-bc4a-29b0cd2b35ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3cc122a-3801-42df-b54e-22a25d5d1946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76334370-1396-4815-a2cf-7869458102a1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e5a06f-4ac4-45c5-b198-e42a7fcd16fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b8d79e-8dd7-4c95-98e5-117643fb736d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e870060-e340-4b0f-8922-cc5b4b1b9866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0960a0-f36b-4205-83d9-02853b1a7a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017d9782-31fc-4885-836e-0eda84dc1abe",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f01048-d56f-4e5a-be74-516d610e24c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1c7bed-53bc-4329-bcd3-f54f01924523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea27abb6-b421-4cbe-9507-808164ba1831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93ee863-9c62-4582-909d-6f3702a75080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1145a25e-d6f1-4247-a640-dfef6604cbe5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fadf27a-e753-42f1-be3d-8ebc160c747d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ef96055-2bee-48f2-9dcc-a253d91599de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11e0567-89ef-4004-8800-44fe734cfc24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e419f995-a302-4f00-b324-8e259d96469a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e344ed2-31e1-4a58-b31d-59d3e2d4c3fc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec480f93-6ba7-4c04-9ce0-a5e40261d3c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77d2cdb9-48e2-4185-be25-334b33edc47a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aaabb54-fa0a-47ea-bde2-a29d6694a971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402c65f9-58ee-4328-b2c6-01374f1f8b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d055c8db-a121-405a-902e-fee51a072852",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a97f80d-30d5-46e1-b504-49bb691239e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd91a3df-cde5-4cd7-be1c-d4dbc005e568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0e7ab6-ef5a-4629-8202-28b0646038ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c5e4c8-de54-4974-8aa7-7bd975e0efb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfc2e83-3537-4d70-bd5d-cd17d16bde37",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907884dd-96ce-494e-8250-18cb36fc9b36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e76dda61-4cab-4d8e-977b-f7b56e1275e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9318722-e42e-4596-a838-b984a93e788f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f851e5f-960c-438e-b4ef-0da3238d9832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ddc528-6979-4104-a932-9969553d7757",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f55cf67-f9a0-459b-86da-47ee0cd50c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6eb95c-2c1e-47d0-82b9-69df0f6f108e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72390560-2491-4bcd-b358-736d916055ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6366228e-b98e-4331-bbde-6495cff29d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2824ab7-fece-436f-9814-be09086c7887",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0c2a37-42c0-49b1-a2ca-3e1e246fb3ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b2ec94-74e3-44ee-bb47-030f362854d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f253075-860d-4f21-8687-fc7cdeb6fc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c19e6c-42f4-4803-bd7f-08cd543bdfa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c04b51-531a-4a08-8aa7-b343541afc7b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1661a6-3f86-4fd5-bb5a-1cd141dce898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d4f52d-11ee-4ee6-99d5-fe7ed215bfbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af82f4b8-f747-4d6e-84ad-19bf565373c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb63ecc1-8e32-4959-ad42-03e01f55d290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a35cbb-70d7-41a3-ae2d-d72bf7370e19",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3051c5-4f50-40ab-a497-dd7feee7f8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533b6250-16f0-4aa3-95e5-6d1d92981c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1c9059-fb15-49bb-8f8d-aff81b37f12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109f7a35-2b05-4bf3-9583-c20719d3c06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9b68c6-e587-4157-bbac-35a00ff71bc1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d48d61-c654-46e1-b164-b51395b784a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b92b4e29-b134-4e86-8a75-b06d0043fe5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b503fa-92af-49bb-93b1-fa16d98c12c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7fa459e-ba12-47b6-a10f-241e66515512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88290801-df86-4a8e-b111-af6139de9658",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ee3ce9-2a47-4456-b1da-c367be34836a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bddf42e-1a3b-4288-8031-d7280bf54b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ad474f-7850-4245-a292-baa3890f1382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3149b561-ba4a-468d-919b-6cdc663ab888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3457e565-3ae7-4793-86a5-90f589b5f758",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f20bb92-9915-46b2-8b39-6f6ecda5f01f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f38e10cf-e68d-4c8f-a25e-72d4f9bed746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cd2a2e-3357-482d-90cc-1701885fdb54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664d71c3-1aaa-4941-9361-f09dcf836d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458ff0e1-1c2c-424e-a314-b3e1f15ac440",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545454e7-9eb0-4a2c-a21b-8387023bb6ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3f288fa-dfc3-4afd-8714-63edcdaaa318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a43c11-ce9a-4911-91b1-4e01c9129501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4490c8-da41-47f1-8566-854970c45d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a2046f-97ce-4f94-b6b0-cc7cad7ed78a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada363f5-56ff-4875-bfcd-5867c43779be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f0c20b3-1fb9-442f-99df-1c6ac74bc053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4e5df6-4a07-451f-b6eb-d0e80ba630c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28634a7-1a29-40bd-a960-82697e9c63ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed43ea3a-bbf5-4a91-9928-0fb41c7e56cc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c518be06-7882-459f-9511-66eb0942e408",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e8aac40-e992-4c18-b8f7-88e2b89eae2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037b34a5-6b4a-481d-9c7d-2ce82048833b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3233af-d15a-4839-a607-49337f1108ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a3eeb1-c8ae-46e4-b6df-6ac619da1099",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cb5966-d407-43ac-8116-0bc66b544c32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec74dc1e-fbbd-4452-b74f-6c2617e87930"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7b8713-ad93-46fe-b66e-394c24d0e135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eba91f3-9b1b-42b6-8880-8b8e37b61e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c708d0-2514-4ce2-b0fe-6ef8ca9c4d1d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7f7803-d48a-4922-aebf-5672d6502964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a831f54-4a2c-44cb-940f-85fbed5c5add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34196698-5229-4500-9fc0-eb4fc86e4132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6678aa78-0d7a-4311-ba00-b2f2ffe2fcec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e487a2-9026-4d79-9fae-eeaad0706c6b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16404b27-e924-4f1e-8f75-acb473dea50f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37727738-f637-4452-8aa8-5fae9936ecad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1b9a6e-36c1-444a-8ef8-4970373a2487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b35a58-0389-48c8-87c7-cee9e694ab18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844d6da2-874c-447d-bb07-05bd1b74a205",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df86fa5f-b6de-4d6c-b026-39a95b6b7f38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fba4370c-ea8d-4fdc-b263-9beda9566817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebc9cce-0a69-413f-b089-dc4bb9b8c972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04446098-93c8-44e1-95bd-d2d9918734bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea33da7e-62bb-45d4-82f2-c775fa26d1b8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9a990b-9c9a-4e81-827c-1ff541eb512d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eb9971c-be4e-463e-af15-5bfbfc259892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f7bfd9-857d-4606-a2e0-11071b83500b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1475552e-b915-4b3c-ba1b-16d164a176ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa307511-1103-4176-996f-3833467f9cb1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8206a86-e8e7-4cb9-9479-dbb99cf2dd11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd6b290c-969a-4500-848d-42a3c293b54d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bde71c9-b1bd-4e22-adf8-ae741f4dc7dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac7ff6a-2ad2-47af-884a-fa2149452fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fa86ab-2e37-419d-bc1a-d277e97ce809",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfb6e3c-b804-4427-a4f6-63c8663dbcaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8bfcd2c-11fb-447f-a9de-7a823e29856a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "069c2724-9626-497f-a755-9aeaedb95235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a348ab6-48a8-476b-b54f-7b7a07c7269e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acba061-f281-44e4-9204-8b12d224a1c4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea004eb-e7ae-4dab-85fc-087e013a4781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "670ce963-b6d2-4d49-bf6a-25fed341ae8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d8d97a-206b-4b5a-83ba-7ad570a36ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d748da-5527-4466-8ff5-f5116f26fe25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec4e6e8-d8f3-4683-a049-4a5ea9074b5e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98faf6da-c23f-49f9-a937-84a4d377fe1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f189eb5-95b2-401d-9deb-ec5a8290df13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806cfab5-8d28-44b4-9287-ea04358dc523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18569e4-3581-4d47-8d52-d094500215b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9fe2a7-9398-47bf-8b29-1956465cd3ec",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3137ea0-4f59-4c18-8afe-8df3741d1985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88939d95-a577-49ed-9f79-2db4fdb0108c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0682fec8-0f61-4eb8-ae78-5a3c4e2fc7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f68181-3718-4ad5-9159-ce6cc677ad3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e00947c-6d69-434c-adde-9a836b86f27d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee73f3e7-4d9f-4f0b-92d7-48d469a88d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3cf396-7636-4be4-a0a3-53ccfc4b9cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11dd580e-f287-4b5f-9045-f9fef9064cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a418f221-9e2b-48be-86b1-da67571f1fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff6047d-c4b1-458f-986d-7f06bda2139c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50df2f85-4253-4a05-abf3-9b52c562bf1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b90807-d82e-42b5-a0bd-57aaf7813398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a437666f-f193-4cea-8ca5-0c23f1094020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c045163-f91d-44af-9209-5ae1bf221f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3a7d99-2462-435f-89ef-ae162b5089ea",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14aa130-b614-417e-92a9-940ee9c0448d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6c4f9e-d7b1-4bfb-9e53-d88a6c614aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1087f1-6392-4eb9-a36b-f85e6ad2a4cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d843ce-68e9-4ca8-986d-f2e4ad6dd9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b43d694-1cb1-4477-ab87-7414bea926a2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa90acdb-dd87-49c8-9104-49a70bf3f542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbc50c0-bf74-4309-b2a5-7ab0b16aa9d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7d481e-307e-4b02-ad56-276eb1c9a233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837ffde5-77c7-4f2e-8f5e-3b8fbb4b47dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b027700-755b-48ee-bc86-e9b692c1ace7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a7193a-2411-480d-880f-83262b9dabcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693e0bca-9f19-4b92-a7cb-417487a6f922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5f97d8-d272-439f-b9db-10d7924b7dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f6cab9-35c6-4986-9bc2-d2861a53f040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bbab3b-ce21-496a-9b3a-bc585166f33e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a965f69a-8508-4c01-8421-b17c707cc258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463e6c65-953d-4366-8cea-4ff4942e8385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc856c0f-f0b6-479b-88fe-a125b949a6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01c06a3-2030-4410-b8e6-463f12ac7cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63619a05-f7f2-4741-83ce-143a6a3abe40",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5986cf4c-153d-44e8-93c7-6fa2904ca83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c563afb1-2068-41c7-bece-943b4054cfe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f53ded4-4041-4b04-b51f-63078171e3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af70292-49d4-4634-8249-2885c9db909a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb85b8e-65b8-4979-8780-0a660f5e6c63",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c2f14e-a657-4abb-a29e-e12e1c9a00cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12521393-c9f6-4a05-bf1e-f1cbae56e23c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22acf3f3-495b-4f83-bd2a-09f3c4c75354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389121c9-a000-4590-b847-97033e8982cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2824c1-81ee-4062-b287-91b1b5eb0cb4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9c0cc1-c5a9-4bde-95fe-0ddfae68b788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640bc881-da3e-44a1-8821-5abc994688bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc9d160-5a02-4152-bca4-d6b785790e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbbe32f-9874-442f-9a04-1b09d8586fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ed30a5-46f7-44ed-a8bb-aad3268efa5b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a21d8f2-e7a2-444c-b7c7-66458af9b12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca767285-5035-4bef-80bb-a2709446090d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9113cade-2a28-4d49-a9ca-554e905fe53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c1e846-c056-4d22-8112-672503636862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c33b98-9bdf-429d-9727-466ba7e8d6cc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f2c9c7-0e8c-46c3-9194-5d98ffb1e803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ba6496-6fc3-4000-9593-a201f2637098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d22980-81e4-4477-ae2d-988f4cdc6c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b248248-05fa-4ffe-98f9-d64bc02301b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645f3d89-c09f-411c-81fb-4127a2d553aa",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267be77f-0ec5-4f24-a709-c718d81e99cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5139092-578c-42aa-ac94-717fae8e74d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6176e7ab-80b5-46a9-b23c-535944125386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d2d95f-3183-41a1-9575-ed96facc0c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa8e95b-2417-4f92-b621-ba1dfac0a2e4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6f5a0b-cce9-49ff-869f-139af65b449f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c8636c-ca8e-4631-b26a-d11664fca200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e957c84f-9ec3-400d-b023-57d0a1a402a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d8b0b0-c1f3-438f-b0cb-2061977337f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45da140-506b-466a-a021-d22c21eb5e95",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03db474e-0f49-4573-99f3-fef7b3a37ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72633579-6154-49ec-a892-7dd524d67adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31da871e-5602-45e6-8cf3-17391cdd5771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84333af-9072-4834-a2e5-2d32d17c9914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546bb5be-b14a-4dad-9b98-31692c9e905d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33489cc-235b-4c37-a0e7-3a82b326e3a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13729f87-91c2-4747-82d5-049205d9bb0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5615f8e-eac9-446b-8a32-f1051718facf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d35bb8d-5fab-4b5e-82b5-a3e9935148a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce4ec05-e58a-4d9c-b5d7-1dd7aae990b7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5067ba2-a320-46d3-b6a5-fbc2ebd72689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625dbf64-286e-4593-bfa9-06b0081c974e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df8762e-5da4-4910-a964-96d98bdeced7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71d6965-87f5-4a3f-97c4-bf6edc2045b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f45d46-f1dc-4e7f-8687-94d906e6508f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f1b098-e122-420f-a4e2-9d57bf37b6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4b2b0a-893d-4709-9dcd-438767e7beb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b32940-6cae-4979-950e-df79e9b707f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a76d526-3688-419b-8f30-681c856020a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec9d057-bf94-4b02-accf-a4e0b0fc57e1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2befb5d6-7c1a-4f4b-82fc-7295a1def8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f952a723-44b6-4d5b-ab9f-8e67d5b27ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5b73d3-5ff8-46a7-9a55-7cf9c6326b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b366c7f6-82b9-42e1-879d-6b53ccff3df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24493fe0-cd02-41bb-8b57-6e9339aa4541",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0195679c-2596-4c6c-b9c7-0e28c07e63d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1249a8d-d8d0-4c06-8218-f7fc1dc6e202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9169fd-fed6-49fe-b4aa-a9c6ac3faf2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4999efbc-bd95-46dc-8142-b16990bcf305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0ae1ff-3e62-4046-a895-edcb9093956d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8fdac9-0a5f-42d5-87ed-eadc39c0ecb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5295a1d9-a5df-4044-8786-da602026ae5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52dd516-26cc-42f6-a34b-9958d99b85da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aad7f44-de2f-4ec8-bc5c-cd76cec84b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e768c3-7bb5-44c0-bd36-0de7d2b4da62",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177dbf91-7c49-46df-8619-9dafda31c101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7439bbe8-0bb3-480b-b40b-8fb4bf71739d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a627162b-3d73-46b1-8ff1-a3de5bc15bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b140fed9-0b76-4577-b4c7-f28a3e8574e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfca7633-2c1a-4fdc-821d-92141536b97d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0dff8b-0f67-4c2a-a846-bc5403f54333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca32f1bd-09af-4ffa-9dee-dabf7f98ddc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b638d949-20e2-4bb3-b38d-08953a7a5163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de3291d-352b-4f4a-bc78-17d39e861fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff141577-e118-4e8a-9ce0-bfd302bab099",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4317ee3-64e8-423d-8cc8-d5daed705132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfef559-53a8-4efa-81d9-96843b888bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7a0ea9-cbe8-4dfd-b265-e9bf14c100c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9248fb-f2ba-467a-98f7-016fec89bc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2009fc-ee48-49ce-aeda-0d3cdc055fbc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9971b20c-227a-410c-bb2a-4386a7ad4dde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398acdaf-6e4d-4422-9f28-30206598a9e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0052987-892a-4368-a48f-88ef855ed06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74999516-b379-47d8-b4ff-a1bdfeb25245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee966ce-cf18-4478-aa41-d8b25e8e84da",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356c14e0-2289-4daa-8880-7378773059a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e799afbe-a062-4018-b15f-2f0a951003b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a6ca1b-b119-497f-a58f-805029243090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "585c71e6-81d7-45b9-ac72-33522fc8e377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a6a08f-e960-4216-b7f2-47dd451139b9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26eb3dc2-b079-4f36-974e-380e656151ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e49d5ea-6fb0-43ba-8ed1-88eadc8cf36e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974cc63a-3e64-4ea0-a159-99dea11d023f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f047412-247e-4373-b352-5ece3c3db0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef278fa7-bf5d-46c3-af9c-33189b425ca9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288cdf5f-e665-43b2-b41b-f7bee4c0516d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040fbf72-6933-4047-ab9c-ed39379bdad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125084a9-2a24-4675-89a2-b24e2dc8b264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13894fea-09ea-401c-821b-2e033cc67155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b50692b-449e-4b99-8d3e-fe424baef7a2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95ee018-a59d-494e-b208-9430b5c79bbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42d9b830-12d6-45af-a058-7e39abff129b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468b213e-2051-4034-b9c0-ab06656955ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be3136f-d226-4b97-9d31-8e7ee813f983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee28bece-ef9a-49e8-9cea-2c49ddb6c377",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af77754-0bf7-4021-a959-f63df4ca06d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bce9a9d4-61ff-454d-a23f-4285c3ae7d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "980ddd98-fe90-4dbb-b061-1fc385d2b629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6ad347-9721-414d-8d9b-afa047de763b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5deec587-8e7d-4770-aaf0-d3d57c1d207b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0925cced-9f73-416c-82bc-b34fc102a5e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da12873d-7193-4394-97c2-6b59f6d5f1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5fa641-bfaa-4765-b774-ceca2c2bbb75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d556558f-2f6a-4c87-8a4e-72dc73bcb464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96df6150-2073-49df-b7cf-430b1f8fdeca",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740c8c26-2a42-4a11-ad2d-a0607a0e7a41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b4478cf-e3f2-486d-af00-76836ee2d1a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b75480b-a2b6-4c2d-badd-242987857590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ae7cb1-fd8d-487c-8d39-534f843e6519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea98ab7-9bdd-4dd3-9500-4aa2957bca4a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667c1a06-e3c2-4e3b-bac3-85f0229fc5be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f840ea1a-5e5f-40b3-a40d-ec7296de1ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025b4abb-a93b-4cc8-b8ce-1c8b92b83177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08ba3ed-8926-4928-a14d-094319c19e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89eb2cc0-4183-4184-9b5a-a5e358af7009",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52566420-e975-4a05-9def-c2f89f30fd68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69cc0059-d209-45ea-ad92-600e99cf19ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5274b55-ae93-4694-b8d7-61179a88099c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0855c02a-64e3-4f4a-804f-2324b6497ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6dbd52-f472-49fa-8ad9-d98bd4271ca5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2ada4f-a1ef-41fb-be47-1c1e88f049de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d43494-897e-429f-a8b0-23196688caf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5733e3-1957-4a95-b242-510ad835dcc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123c509d-bd5e-4be7-a37a-ce444e373fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e118c780-d63d-4aaf-aff6-fa6afa2df9f3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e86e13-d72d-4ddb-a195-bccc1b05124c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d93ab2de-5117-4cf4-b527-e0205ccb733c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f69985-2dbc-406e-8a0e-74f6f36b402c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec2b217-3299-4d08-96f9-bc6b8eadb7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be499d1d-1648-4fc9-8fed-4eda77403d3f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c107e77d-5408-4fe1-8ede-d02ebcb02148",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64321639-61b2-4905-b65d-e5b75e9b1f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6282db62-4455-4c23-9dc6-77e21b9d5717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2063ba67-0921-473b-8b36-6eaaf37100a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a593bf-24fc-416f-9dfc-07484a655353",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc04bca-e59f-486b-bde3-3ccd79711801",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9f5162d-680c-48aa-b6e0-b4705711f02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a01e9aa-b042-4cec-a78b-0264361c23e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1161ed26-2c38-4b75-a41c-722b6cfad763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06506843-bb37-4b6c-a0d6-641b10ba7754",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e4e8b2-6a42-4674-b849-589b2e86326a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aeadee7-f5c3-44f7-9793-b6669bbdb17d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ef6cd0-79d6-4cda-b543-b66fd47f3098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686f07b2-7958-4cd8-90bb-fbf868fd2e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a0cd4e-6a8d-4944-8b20-0da12d2f1786",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f570b2ae-c4e9-42fa-a233-a310072b8d06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45644342-0774-4a6b-ad71-eb51b733bdde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83750080-6239-4f1d-9882-450a6e4ef2f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43528b02-14e2-477e-99e3-dc28d55bd2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41159caf-c46a-492b-a009-0f87d52a8c99",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05e8544-7f5b-4e4c-b8a8-4a1538d49368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b6c9c6c-105b-495d-9835-0a4aa31c6280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea5a23f-c8de-4ff1-986f-f641ee35e01f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563bfca5-84e2-47d8-86fb-bae1e63c9700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b446f5-b94b-4c2c-bec9-cc889b5bff65",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7853f7d2-e2ef-4194-9852-ec9e2b985ebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ec5c6de-14ad-4884-9710-56db928e7e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a666fe-9a08-4fe3-9bb6-d102dd332e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8dc5fcc-424d-4bcb-b879-12cd508df1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a960342-1bb8-4e8d-aca6-597bc2cb4e11",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bd3e96-f88b-4cde-a34f-40fc1b0a6812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b49ad68-bba1-42f0-b503-eeedfa8f7c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944d624b-91b0-4d1a-a88a-d004c752a7c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5fd7cc-ee95-457f-955e-b9229b236c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c8abed-e9b2-4cb7-87d2-b241c2047034",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91024183-1c3b-408f-a7b6-36100b9ebc1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "856ad6c4-bc89-450e-a493-5872f4f4eb56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a58a508-83a2-45a3-94da-39a1f68b9e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbffa14-8ab1-45e8-abd6-38d36c9fa363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96137d1-8b7f-4268-86e6-194b6316c70d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d304e8b-e58e-4b09-ade7-b33d8d7aba09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af4a52cf-6002-4f2d-a615-2b0a3abbae09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62f71b2-25cb-45e6-a159-9f99884327eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32a195e-dc06-469b-bb9b-9be195bbf84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b036e554-be74-46b8-aa75-2c2d3eb7d6bc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e85c46-3be9-49c9-87ae-35eb1ae9d089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc9c0bbc-11fd-4a89-a2ea-42ace6087b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842578a5-b6cb-4523-ba10-90e527278d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4b9dc0-c16c-4250-837b-7f015ed4fa06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef76a4cf-23a5-4513-acdf-0fc547f5d6fa",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935c0d7d-93cc-48b0-b532-514ce4fdcb7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b33556-67ca-421b-a82d-6ed41fa3aa09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66fd012-40b0-4017-b81a-df09b87ee171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52198780-8d95-491b-a744-969f62ed527d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55d0519-4863-4d25-b93e-3071ac5d909d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173d5e69-de56-4df0-89e0-0166a9bfc57d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b21293-5112-48ce-b7e8-1d2abc8dd733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55025db4-2d2f-4afe-a235-3e997b737c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3ad593-d03c-4570-9af8-a35513b2f830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d387e56a-4c68-4000-9f4b-24935fcfb574",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32144980-6aac-45cc-929b-f2341ba738ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "924fed31-fdac-4383-beba-5968190385d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae750782-ef29-4a16-aef0-27b2466f4af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ab892e-d875-4da9-9186-345bbae0aad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc52cefc-54b6-4fb8-8664-a75d124c837c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb15854a-1b99-423e-836b-9c29801f33f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef4378f4-61ea-4397-ad5f-57a7c120d82a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8eefd0-d18c-4583-884f-c99d8ce35965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f90b279-8ec1-4966-98c6-0747ed778ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c895c1d-ed13-4929-bb54-50a553fa065b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6bb2de-d5d2-446e-8dfc-9858b66b8417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d92ecfb-f9c5-4ea1-9aee-f6c0e3d5de2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b80cdb-cf5f-475b-85f4-e69bca357c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe954d99-00cb-4fd1-803e-e718ec2b8fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4be1c3-ed19-4b89-b94a-d3f280d458e6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6033d0aa-f0a1-4956-b619-b8d037e61086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "883fe3e5-022b-4142-8f35-b8d74b31c8ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b42f0d-5eda-4fcc-ad73-67207f32cd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae19749-840d-4209-8d0c-baf956f033bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1243599-bd64-4fcc-8d26-5fd2f18ec29c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b562ce6c-d20b-4e43-a914-84adcca6ba46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a386a4f0-c62a-424c-ac72-1b4bb99fb143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1c032b-800d-4b5e-beef-a5e27ffb75f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ec77d3-5f97-4007-8b4b-d8adb1639d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad8e158-875b-445e-9a59-23bd49eaec87",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bf0541-01df-4135-ab5c-42e93afc7783",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d2d9316-5877-47fa-a56b-a77f450881fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb26cdad-dfce-4286-9765-fd4710f424ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e226396c-d98c-49ff-9c09-4b1131bf85f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb33415-adc4-4ceb-8b36-f54fbd8354ab",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a9bd75-e741-40ba-a73e-752af8654a4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45442a69-4c4f-456e-b637-f571d369a090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda916b5-3203-4eff-bd0a-512933242645",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436d901e-05a6-40f2-85ee-aff8066eb258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f909ff26-7bd3-4e3e-b38a-19b3e27b5969",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d23339-9267-4f64-b673-95dcd538be1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d6dd8a7-f4a2-499a-87e0-55f7ae5d9a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858082a6-5a05-41f9-8bd1-5049585dfc15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f8809b-4f39-415b-a19f-c3bdd113053f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa39d604-6a26-4579-bff2-92b6551858b0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f00aae8-a11e-46c5-8a45-f1f6ac0bc863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d7a39e7-0dd5-4405-a1d4-347ea5d17755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434d056a-53e5-4d4a-ae7e-f12282fb8446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05cc3306-6f6c-4e6e-a04c-78542b384fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e233e64-2d26-4bc7-9ab5-594fd810889b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcdcbcc-f8c8-4cd0-9710-c522e702ab05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be239687-fe0f-4505-b40e-ed80a6803ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72afbafe-e5bb-4676-8344-3a81dc70414d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f89da7a-fa42-4961-a014-d566ccdba65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33da8e1c-233a-4636-b9b2-3e7414e0b2a8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db0d216-8cb1-4882-bf85-d842b65c0389",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3158b709-aa53-41aa-be66-28ce53cb6cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b957c4-67a4-4b8f-866f-74f7bb2f3604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d3d251-9d5c-454e-a1c3-70cb98df1119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ced5be6-6b5a-4c52-b3bc-5dacf539dc04",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2feb2da-aa62-4c2a-a88a-962b8986f399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00583998-26c0-41e5-b303-9f9e8202c41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86458a6-5139-4f1d-93da-faac8a829ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58344216-0815-4472-bbf9-44c19f423354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c162198e-9e84-47f6-a2e0-49ba043e6249",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491cbe32-cc61-4258-8dfa-6c5710b4c348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19c77839-9799-4ef8-8f73-d6244ba755d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd06f3d5-6e7e-485c-984f-11c0f4ace10c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14fc4891-a54d-4ff1-af32-2ace707d6fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60d57b1-d7d0-47ba-8708-eff185ba2b02",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969326ae-df17-4ef3-a62d-4594bd0672b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48aa0009-b747-4643-8e8a-ba16000072dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5fcf51-b887-40b2-a10b-b18affe071bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c91543-43fb-44c7-b974-0f89ab288e33"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f55b9ee6-2158-4c14-a3b1-f964a282448e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5931cc9a-19d8-42b3-8cec-71b798c40712"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54c8574f-5dcd-4ba6-b304-bc954832d327",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09a234d0-1189-4d36-96d1-71bd5e7c7f9e"
                    }
                  }
                ]
              },
              {
                "id": "4d75e343-0e09-4d19-a3e5-0c1e2c0029cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fd78c06-a3f7-47d0-b02f-17c1f2fdd503",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b99b9a3-65b2-4a21-85d3-34fbe4ad667f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bd7a51c1-e6db-4049-bb14-9daf20358630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1434d1-4755-4a07-97c3-fcd709279fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdd56551-3877-4588-92b8-3a76ffc9ecf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ac1465-5030-4c66-a57b-601e26358530",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f75a496-a24a-46da-9339-6e0073dd80d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b70ef47c-932a-4274-a77e-2dacbc6159cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de8453f-e706-44ba-a06c-546504475f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2155017-c981-4e09-abdf-c202ec38374a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c362d976-674a-429f-b263-a1c0e6d04bef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dffb756-e5f2-433d-b499-9cef977212fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a3b937e-a791-4503-b118-0606f1496e1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc1f9ab9-a148-45d9-bf17-edd8bf59ade1"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "4229bc26-c9c8-40cc-bdb8-f0cea34c0d43",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ef3ca572-3270-449a-90ce-bf0bcf7bcec9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ff12aee-a23c-463c-81f6-1f76c5802203",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e777cdf-0682-40ad-97b1-7e206ee28434"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e00ff398-dcb5-4a2f-92b0-332107c14c1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15b56262-c57a-43b5-8ad6-fe9d4f7b039c"
                    }
                  }
                ]
              },
              {
                "id": "302a365b-aaf3-4cd9-989d-54e087c1b033",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9372479-a3e9-4813-a431-b1a97c82e82a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3a4e52b-7c88-4203-9327-d1fabf77b61e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53c43987-431b-4922-9486-fef768727309",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "459eaf1c-9e8b-43cf-84a2-5ab35ebe5422"
                    }
                  }
                ]
              },
              {
                "id": "6df29a1d-e629-4732-8e30-3ac3d3cfd068",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63279743-bc13-4df9-9e20-ab8e8f66785c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5198745a-6fff-4770-8e37-5dd6f9341eb7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e1366c2-efec-406a-be36-71c757e7634b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "246a6954-39d6-4328-82a4-0b9f5f7ada8d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09d9e097-69a1-408f-933b-fbc4ea6fc955",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5c94cda2-5cb9-4cbe-821a-7f27a5960442"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d012923b-b3aa-4b31-b747-9c2a1ea9888d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4ef0651-240b-40b4-a8e7-e55bd06b76be"
            }
          }
        ]
      },
      {
        "id": "8e4614e0-3ea9-4856-8b3a-f07cb16dda60",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3b3dc52e-aeda-4bb9-a59b-88710c3eba85",
            "name": "Negative Testing",
            "item": [
              {
                "id": "54e47bff-fef6-4211-9863-a87f2e076c5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a399404a-6b6e-4a26-99cb-0eb3fb1e7958",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b192b8e6-e61a-4ef4-9057-1c01910af599",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "84d8c394-d564-4950-ab46-7337266759f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5ae033-2092-448b-be2e-2f2f13b7255b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbc3cf0e-8bc2-4a12-bf3d-16e8475a5543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c111b9-87ca-47bd-ac43-62bac198c960",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297a78ca-0d16-497e-95c2-72d8f9b51b93",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4d901c5e-fad2-471d-969f-61109d89a060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38178025-5e75-4113-a337-606b3adb0f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa8760bc-6f94-417e-adab-2e8c10f4a655"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e3bfbaa-c40b-4a77-a6b1-80c2bf910d52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6bb0aa5-1826-4b9b-97ed-e303659fac91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c633c8cb-c3e4-4c95-b68e-412000c8f101",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76d56012-11a5-461f-a0ce-6d48c0290fd9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f12714c8-f751-4c9e-87bd-073d952bfa74",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5de7f354-b315-478c-aacf-826fe34f0606"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6378ea0-89ec-4fd5-b9d8-ae4225129afa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c09852dd-921d-4129-9e55-f54e6915bf2e"
            }
          }
        ]
      },
      {
        "id": "334439a1-66bd-4408-bdad-c98b23b0e125",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e3f8337f-1dd8-47aa-a35a-e9789f10c8fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7983bfa5-2741-4fde-b651-fdef2eb1e166",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34d217ce-e91c-49e2-8633-bb4db505b03b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b38ded-17c8-4415-848c-f6a072ef1c67",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "48846a54-b217-4a01-8224-147a25dd8e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfe841b-515c-431c-98db-958ce96b2477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1bcbc47-e905-4f0e-94b3-1e47c424c952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d1ab88-fa73-4f74-aa17-cf9dbb30b700",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7e2aae-4cbe-4f2e-bfb0-0184fcdd4384",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5b867b47-d9e3-40b4-ba7c-cd8e4299dac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a0c8fb-c548-4eec-8a7d-0bae3db627c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "869cec8e-62e0-4d69-bae1-449b8fff12de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba490d77-bf9a-4a2a-a7c2-0fd9bf55a103",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c21fe1a-3303-4939-9ebe-48c4c97fb6da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71106f0c-8178-4749-8009-80516ae7c454",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cefdd4f-2f55-416c-97d7-eb81c5980986"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9dbb508b-a070-40ae-97dd-3195d46b4cb6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "89329120-777c-4d98-96d9-af2742079233"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef3d9503-8548-41f8-8c5f-57bb4d663966",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24e2d387-8d50-469b-ace8-f897554b87ae"
            }
          }
        ]
      },
      {
        "id": "7e4e42a2-42ee-4912-b8dd-c92316c6c578",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bb673204-1505-4151-bb3c-c2c876389ff7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a13ca12-1f8d-418e-b307-629ddf828aac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0822467-6123-4e54-9a7b-3db92be4abc6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb982e8-d18e-4a7c-ae82-20f276cc102b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3634b737-428b-4ab4-9199-43b58eed7a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf99d06-9a6a-4331-9e28-24a9ea9a81a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "064d2927-3e62-4af6-b823-c4bdf5c0a357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3347f278-e7a2-4066-9f12-44fddcd2e33d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d75b141-e939-4187-b8ac-314b6eabcfbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "498e0e6f-069d-4bb2-82f5-39bf95252294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002e8079-134c-45ec-86a0-1f7776654aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "363ccaf5-0ef8-4caf-8a0e-00e6bd88ae92"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c75c63d8-85b1-4691-8f5f-c76de2e98a11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4ec4119-6987-4c9f-ab60-3efe26802011"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16fbac99-fdd2-4e58-83b7-42975c3a12dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8da5431-7862-43bb-9667-5f188ff2a8e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f60787f-00a7-497f-8a7b-6da0e22bce38",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fed572ad-1603-45d2-b3e6-f39a53633c69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e64c2ea3-1b3a-4497-a28b-16ccadd098d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc74351e-8972-4986-8f0f-605ebd6bbf09"
            }
          }
        ]
      },
      {
        "id": "167a76e2-4f52-4027-aee0-57121858011e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a2399f7-ea14-4711-aab9-4685519fe26e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c3128f6-0d1c-4f3b-aa0e-a749845e3f68",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "acb83872-cbf1-4b0a-b9fc-80774b0bbe21",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e5b9b2e-1d1e-4cdf-b2db-3623b640a04f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c89867a-e85e-4f81-9101-928c9d477ef8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1855,
        "pending": 0,
        "failed": 5
      },
      "prerequests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 243,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 492,
        "pending": 0,
        "failed": 96
      },
      "testScripts": {
        "total": 933,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 5
      }
    },
    "timings": {
      "responseAverage": 227.76587301587307,
      "responseMin": 64,
      "responseMax": 1848,
      "responseSd": 293.3301487009754,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665536831986,
      "completed": 1665536902385
    },
    "executions": [
      {
        "id": "685b275d-5537-423a-a17a-08db227cf3a3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 243,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c144e8e3-8d61-43eb-9a3e-4311ce810ffa",
          "httpRequestId": "0f4a41dd-d53f-46cc-bba6-29aa86695878"
        },
        "item": {
          "id": "685b275d-5537-423a-a17a-08db227cf3a3",
          "name": "did_json"
        },
        "response": {
          "id": "8c276266-e35a-44c8-9908-ae62ba81666c",
          "status": "OK",
          "code": 200,
          "responseTime": 670,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9dc19a-7d7c-4a2f-bb2a-8834236995eb",
        "cursor": {
          "ref": "d69e5e99-c167-4b9e-ac48-9135a2d972d5",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "db6102a0-596c-4263-99e1-cf5d4ba1b0af"
        },
        "item": {
          "id": "7e9dc19a-7d7c-4a2f-bb2a-8834236995eb",
          "name": "did:invalid"
        },
        "response": {
          "id": "576191d8-0fb0-4b8f-bf9c-fa6517cd658e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9dc19a-7d7c-4a2f-bb2a-8834236995eb",
        "cursor": {
          "ref": "d69e5e99-c167-4b9e-ac48-9135a2d972d5",
          "length": 243,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "db6102a0-596c-4263-99e1-cf5d4ba1b0af"
        },
        "item": {
          "id": "7e9dc19a-7d7c-4a2f-bb2a-8834236995eb",
          "name": "did:invalid"
        },
        "response": {
          "id": "576191d8-0fb0-4b8f-bf9c-fa6517cd658e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43be8a79-7aae-4ec5-8c8e-f19e97a84d47",
        "cursor": {
          "ref": "c8805e5e-d07b-4b00-b1f7-34c794f89870",
          "length": 243,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7437567a-9dc3-400e-ac07-fa39b2824304"
        },
        "item": {
          "id": "43be8a79-7aae-4ec5-8c8e-f19e97a84d47",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8fc556e7-1e78-4fd8-84a0-be023cd1ac66",
          "status": "Not Found",
          "code": 404,
          "responseTime": 341,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7382b127-9394-48fb-9bf2-884818df7dcb",
        "cursor": {
          "ref": "f0caacea-0e1e-4806-a473-2fd249d506ea",
          "length": 243,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "39c737a4-d419-422c-9d9d-5cab408f4950"
        },
        "item": {
          "id": "7382b127-9394-48fb-9bf2-884818df7dcb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8ca5c52b-3b88-4d8b-af8d-b30527c4f6d4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bbf07a-5e62-4c82-ba11-1e68d0c8e843",
        "cursor": {
          "ref": "856e3956-3a16-4ac4-a617-21b4f71b88e1",
          "length": 243,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0a5f35ca-9650-43f8-86b8-735c403e2b15"
        },
        "item": {
          "id": "92bbf07a-5e62-4c82-ba11-1e68d0c8e843",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a0826256-30c7-42fd-833c-a85fa35dab0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6734ec6e-fb1d-4e4f-a9a1-ec4e3df5cb79",
        "cursor": {
          "ref": "4858c6a8-fe2c-4ce8-9c8b-1371c7a569a5",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e8dae558-6e00-4f2b-bf50-6e73d0ea26cb"
        },
        "item": {
          "id": "6734ec6e-fb1d-4e4f-a9a1-ec4e3df5cb79",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8c17a27-5197-4ec3-95dc-38c190e159fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 80,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6734ec6e-fb1d-4e4f-a9a1-ec4e3df5cb79",
        "cursor": {
          "ref": "4858c6a8-fe2c-4ce8-9c8b-1371c7a569a5",
          "length": 243,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e8dae558-6e00-4f2b-bf50-6e73d0ea26cb"
        },
        "item": {
          "id": "6734ec6e-fb1d-4e4f-a9a1-ec4e3df5cb79",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8c17a27-5197-4ec3-95dc-38c190e159fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 80,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9dfa8bb-aeb8-4940-a567-2a34fed69ea5",
        "cursor": {
          "ref": "ff207d32-881c-4507-aaca-dd1918e02c25",
          "length": 243,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dea39d59-2d51-4ea6-b2bf-7b0662ebe269"
        },
        "item": {
          "id": "c9dfa8bb-aeb8-4940-a567-2a34fed69ea5",
          "name": "identifiers"
        },
        "response": {
          "id": "37fc420c-b11e-4dda-9646-61697ec35e22",
          "status": "OK",
          "code": 200,
          "responseTime": 255,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9faae834-550e-46df-944b-fb6574b8066a",
        "cursor": {
          "ref": "2fbc4e84-21f1-4940-97bd-d3338b833b63",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "428ce508-e414-473c-9375-445d3a957b17"
        },
        "item": {
          "id": "9faae834-550e-46df-944b-fb6574b8066a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2440fdbb-ef98-4c9d-a260-628882ce52ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9faae834-550e-46df-944b-fb6574b8066a",
        "cursor": {
          "ref": "2fbc4e84-21f1-4940-97bd-d3338b833b63",
          "length": 243,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "428ce508-e414-473c-9375-445d3a957b17"
        },
        "item": {
          "id": "9faae834-550e-46df-944b-fb6574b8066a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2440fdbb-ef98-4c9d-a260-628882ce52ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12700a08-9a70-495c-9650-8915457c6fb9",
        "cursor": {
          "ref": "07bae83a-0842-410f-ba6e-0631adfe5be2",
          "length": 243,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "17e2eb8d-e751-4df5-9113-2cf4176adf88"
        },
        "item": {
          "id": "12700a08-9a70-495c-9650-8915457c6fb9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1caa6689-2f3b-4cbc-af48-ce27239d06bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404cea3c-ff10-4599-94a1-276cd4e5908d",
        "cursor": {
          "ref": "3bf8f846-429d-4400-9ade-d2b425a001a1",
          "length": 243,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "74837f64-3d55-4658-b79e-df788b5ef3d4"
        },
        "item": {
          "id": "404cea3c-ff10-4599-94a1-276cd4e5908d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "aa972379-7c0f-4d01-8450-66c869ec7394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 613,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b73013-6bdf-4b7f-afef-d17ce719b160",
        "cursor": {
          "ref": "3668104e-f0c8-4801-be14-7e09b20ccb05",
          "length": 243,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "700742a8-378d-4ea0-9bdb-5953bbc0eae7"
        },
        "item": {
          "id": "05b73013-6bdf-4b7f-afef-d17ce719b160",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "645607ce-3680-4dfb-bafe-0ab86bdb802a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e912e4-cf35-492c-a090-def064c65dae",
        "cursor": {
          "ref": "1633a907-26dd-4f0e-8525-15ae29709966",
          "length": 243,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5c09f0b2-df12-4ffa-a206-a70fe95dad12"
        },
        "item": {
          "id": "f4e912e4-cf35-492c-a090-def064c65dae",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d7f3dd9e-37ea-4494-afa5-a6f353a30f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 360,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7e8310-3139-40c5-8c4d-e15f29837df8",
        "cursor": {
          "ref": "f49d536f-e0ac-4804-8a00-eca82d90fe27",
          "length": 243,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c886852f-ef2b-4020-8ee5-cb5196b59a13"
        },
        "item": {
          "id": "8a7e8310-3139-40c5-8c4d-e15f29837df8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9dc412bc-ef50-496e-be98-df7a671d8c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5ea5d1-70db-484f-8944-4ed19d253c95",
        "cursor": {
          "ref": "1cb1e1e4-a848-4c9b-8982-8d8d18076810",
          "length": 243,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f8f52973-313d-493e-a59a-8768cac0fc9d"
        },
        "item": {
          "id": "2b5ea5d1-70db-484f-8944-4ed19d253c95",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "77a07bca-6968-40e4-ad9b-c22eddaa7af1",
          "status": "Created",
          "code": 201,
          "responseTime": 1848,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "eacaffba-b039-483c-9a89-e9d2d0fb0583",
        "cursor": {
          "ref": "524ddf3c-7b62-482e-9252-11f8b4a6d11a",
          "length": 243,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "21498e62-0c65-4ae1-884a-f6919228c1a7"
        },
        "item": {
          "id": "eacaffba-b039-483c-9a89-e9d2d0fb0583",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5f4d291b-2d7e-49c4-ac6f-88d653a3b40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8421c101-16de-4d3e-a8cd-2a1062f45ae3",
        "cursor": {
          "ref": "33661730-69e7-4f37-a1e4-11666afca4a0",
          "length": 243,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3782ffd1-e3be-44a2-8e4c-983b5fb504ec"
        },
        "item": {
          "id": "8421c101-16de-4d3e-a8cd-2a1062f45ae3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "125dc3bb-f6fa-4e94-a4e4-050372dc0933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb7c995-af5c-4bca-8e7d-ad43b6429839",
        "cursor": {
          "ref": "9d3104a3-537e-42d1-93dd-03ce53905de4",
          "length": 243,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f5c41b99-9ba6-4446-9f8b-6e38305839f5"
        },
        "item": {
          "id": "2cb7c995-af5c-4bca-8e7d-ad43b6429839",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a78789a3-12bf-405a-adab-f8e2867459b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968d4ed9-9415-4255-9083-7de557743780",
        "cursor": {
          "ref": "55d9db19-5ce5-4e20-8efd-a7f2b51ebf84",
          "length": 243,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "29e7b6b7-77f8-47c2-b0eb-619ae2581590"
        },
        "item": {
          "id": "968d4ed9-9415-4255-9083-7de557743780",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "314b55ae-635a-400c-afcd-6c71682f9922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adca9b64-ce2c-496f-af61-27f1d56c57b3",
        "cursor": {
          "ref": "23a89528-2320-421d-81a8-501688e03c38",
          "length": 243,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4be5defc-1c2c-468e-a888-eca80bf3bcd8"
        },
        "item": {
          "id": "adca9b64-ce2c-496f-af61-27f1d56c57b3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "107a0858-0197-4bf9-a5c9-2dd264adeaec",
          "status": "Created",
          "code": 201,
          "responseTime": 1288,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "d34e691e-0523-495d-bed3-91e43b6f51b2",
        "cursor": {
          "ref": "8b60b343-e653-47df-bce3-24b263963dc4",
          "length": 243,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0e9ab81b-8574-47af-befa-e65df4de156c"
        },
        "item": {
          "id": "d34e691e-0523-495d-bed3-91e43b6f51b2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ddf825a3-9dbc-4720-8848-29364e504671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de95ece3-2b3c-4bb2-a9bc-fb1220bad39b",
        "cursor": {
          "ref": "33768e21-47f6-4858-bf03-7e7ad10ed9bc",
          "length": 243,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c075137e-edda-41f4-8152-06e171863c44"
        },
        "item": {
          "id": "de95ece3-2b3c-4bb2-a9bc-fb1220bad39b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "445e6899-23c4-4c45-90a2-5a9e0a4b60c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938e5c3f-2d54-4ead-94b6-19537b7ec491",
        "cursor": {
          "ref": "b94830a3-b565-4e7a-ad56-8c0c9b5698a7",
          "length": 243,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "312238db-debc-46ae-a55b-591c4006af0b"
        },
        "item": {
          "id": "938e5c3f-2d54-4ead-94b6-19537b7ec491",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2fe09e01-8009-4d3e-9142-00651161cad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575677c3-1f45-4d56-a23c-984f7cfc942b",
        "cursor": {
          "ref": "d029705d-4f42-4097-9b27-29464209c513",
          "length": 243,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0f303e1b-b614-44e5-8a8f-d35b41b9106e"
        },
        "item": {
          "id": "575677c3-1f45-4d56-a23c-984f7cfc942b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d8e33172-ad59-4320-a979-03b4b2c12344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dd4951-7784-4fac-a6ab-09a72c9c79c6",
        "cursor": {
          "ref": "f09585be-fb02-4681-977b-6d7d948c71d7",
          "length": 243,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "aeec499d-14bc-42c5-a4e9-ad91c50d5535"
        },
        "item": {
          "id": "e9dd4951-7784-4fac-a6ab-09a72c9c79c6",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1818e2a0-dab8-4c72-bb99-da5c0a10338f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd8cb0d-2c55-4c90-ae88-ef90bf9e1260",
        "cursor": {
          "ref": "06e86afb-8857-4b1e-b1df-a01ee77cc139",
          "length": 243,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "792a9e4c-be80-4e6b-ab78-58fe11f873b2"
        },
        "item": {
          "id": "ccd8cb0d-2c55-4c90-ae88-ef90bf9e1260",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "857c9081-738a-426e-8419-d599aeef6f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04dbac5e-9be5-40a9-8fc4-76effa5da082",
        "cursor": {
          "ref": "7cfade67-883d-4e19-8fdf-cd3b49c06cdf",
          "length": 243,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "95ba67f6-2347-4166-92c2-d7a025d93de1"
        },
        "item": {
          "id": "04dbac5e-9be5-40a9-8fc4-76effa5da082",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5ca8ebee-cb24-4585-b66e-6b08d57a838f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38b4d6a-9090-4550-8510-43fd1babc840",
        "cursor": {
          "ref": "fbcd0170-cebe-464a-a73d-35651781b2e0",
          "length": 243,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9614b900-502d-4fbe-a972-f0532b732ffd"
        },
        "item": {
          "id": "f38b4d6a-9090-4550-8510-43fd1babc840",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "379914ce-e3eb-4579-bbe2-340d245332cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf13cb8-14e9-4eab-b01a-66b090be1fdf",
        "cursor": {
          "ref": "fd3a0c0d-517d-454a-b096-05c5620b78a6",
          "length": 243,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c50b2c2d-79d3-4da4-8295-470792c97945"
        },
        "item": {
          "id": "4bf13cb8-14e9-4eab-b01a-66b090be1fdf",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "118feeac-982d-4f26-9027-c21a49f05fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fd0a3d-7d53-4f4c-875d-18ecafeb72da",
        "cursor": {
          "ref": "e20a2376-cb47-440a-a831-17cf48fcaa51",
          "length": 243,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0e0c2815-06d0-44a2-a544-bd44072a1b8d"
        },
        "item": {
          "id": "74fd0a3d-7d53-4f4c-875d-18ecafeb72da",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d3243ad0-e846-4e85-b418-3c19a56a225e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a0f442-4518-414c-b8a6-075ced1651dc",
        "cursor": {
          "ref": "59e8c4ad-6632-4384-a412-75e45f9fb74f",
          "length": 243,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "79c5c671-6206-429f-96e4-85c2d6fdb922"
        },
        "item": {
          "id": "73a0f442-4518-414c-b8a6-075ced1651dc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "47811236-9ca7-4aa7-9d4d-4c8d1cdeb920",
          "status": "Created",
          "code": 201,
          "responseTime": 711,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "3d4fa972-91c2-4699-aa06-dd1088344d70",
        "cursor": {
          "ref": "9c3dd2c6-66d6-4365-b1c6-c1bafc25caf3",
          "length": 243,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "aa8a44d7-3170-44b5-981b-571c4f7e8fc1"
        },
        "item": {
          "id": "3d4fa972-91c2-4699-aa06-dd1088344d70",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "55b3e330-5df2-4adf-9849-b4d70d0b1037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8808c5d3-6622-4507-83f7-a7c65b088c13",
        "cursor": {
          "ref": "f6595dc4-55be-4fe1-978d-245a38fb3239",
          "length": 243,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b3f093a2-10b5-43df-9e34-757ed584c7da"
        },
        "item": {
          "id": "8808c5d3-6622-4507-83f7-a7c65b088c13",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "21bbce21-26d5-4770-b4f0-0d4ab6875778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbb2dac-2082-4277-a191-2b888feed12a",
        "cursor": {
          "ref": "d110f8f0-3511-41d9-8a2b-6af0a84cf1f3",
          "length": 243,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fe0f952f-dcd5-45c6-91a4-a17b70a61bcb"
        },
        "item": {
          "id": "ffbb2dac-2082-4277-a191-2b888feed12a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "99c7b02b-f309-486f-bbfc-432c1daa9505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386ff25d-0c90-458e-8df8-c99ade833992",
        "cursor": {
          "ref": "cd19b3a2-4d95-4a8e-afc3-96f76396f080",
          "length": 243,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8e29d0c6-1358-41da-8f9f-ef321ea3506c"
        },
        "item": {
          "id": "386ff25d-0c90-458e-8df8-c99ade833992",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6d488b0a-470a-4dd6-8215-cf270dbdeb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4630235-4180-4fa8-8aa4-1280dc8f84e7",
        "cursor": {
          "ref": "c11698c5-c7a4-4e25-a11b-c6ad22937433",
          "length": 243,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0a85edfe-cc65-47f6-bcf9-e57da234d7df"
        },
        "item": {
          "id": "d4630235-4180-4fa8-8aa4-1280dc8f84e7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "30f9f6ac-f08d-486e-aa34-18bec29675de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bc8175-196d-49b8-8637-bfa1a07c737a",
        "cursor": {
          "ref": "31b3e66e-daf2-4954-9790-f283503beccb",
          "length": 243,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d84ea19f-521a-42c3-8f93-1005494691c3"
        },
        "item": {
          "id": "e2bc8175-196d-49b8-8637-bfa1a07c737a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0420de33-c9da-4cba-8c05-146d05c8c60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b9feb1-b4e2-4869-93d4-9a3dd11d0760",
        "cursor": {
          "ref": "aea7b1ca-204f-4e15-bf1a-7b84607960d5",
          "length": 243,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2b35c0b0-499b-4f6a-9531-07aca6ab9b57"
        },
        "item": {
          "id": "36b9feb1-b4e2-4869-93d4-9a3dd11d0760",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "86c837aa-d548-4e95-ba24-8e0132b6e364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad427f59-d563-45dd-94d3-e00ba80495de",
        "cursor": {
          "ref": "72256d4e-3cc6-4b4e-bae7-df16041dfd43",
          "length": 243,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1d06ff42-756a-48a8-8a6d-c180847d597d"
        },
        "item": {
          "id": "ad427f59-d563-45dd-94d3-e00ba80495de",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b786469d-6a66-462a-ab9a-0de5fef3601b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5f1afd-b0b8-4c3c-b933-be33713138f9",
        "cursor": {
          "ref": "5a269884-c593-4056-933a-e365a284d216",
          "length": 243,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f9d336ae-8f15-4276-b0c9-1d5a12df9367"
        },
        "item": {
          "id": "ce5f1afd-b0b8-4c3c-b933-be33713138f9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ec461615-7b80-443a-9080-693efb3874ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b781f1-282a-4727-b2f6-df7b56de1915",
        "cursor": {
          "ref": "6fb32318-a70e-4c48-a8d4-403dc9b31ec1",
          "length": 243,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "04bc453d-ffbd-4494-aad4-7b9dbaf5588b"
        },
        "item": {
          "id": "a1b781f1-282a-4727-b2f6-df7b56de1915",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c7ec4a75-0ee5-4a94-a567-c99c2be91e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d24c04-e951-4610-9f0d-30f97c30ede9",
        "cursor": {
          "ref": "f8012ecb-0ce1-4d4d-bdf8-63f8b956fa88",
          "length": 243,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b58cdfb7-c36c-4506-82a6-433e1c3f1cb8"
        },
        "item": {
          "id": "d1d24c04-e951-4610-9f0d-30f97c30ede9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2488bbeb-9198-4639-b371-edb1e26fc803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e8eede-1e56-4b64-a652-5df15c845fa3",
        "cursor": {
          "ref": "f66457d0-c75a-4849-a2ad-4a3542724d50",
          "length": 243,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4417c46a-936d-4e70-9333-0b7b5c56b550"
        },
        "item": {
          "id": "77e8eede-1e56-4b64-a652-5df15c845fa3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "445e6f5d-7d9d-42b8-ac5e-2161ca897641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405db117-e10f-43cb-967a-ba57f0441b5f",
        "cursor": {
          "ref": "7bb7d297-55aa-4938-805a-21626b115269",
          "length": 243,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6e3003c2-93bf-47b0-9c6a-511eb7198b41"
        },
        "item": {
          "id": "405db117-e10f-43cb-967a-ba57f0441b5f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "17107f9e-7d79-4c98-be6c-3895b51e11c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9754376-6b32-421f-8c18-9193e2f3f108",
        "cursor": {
          "ref": "979ebdaa-610f-426a-9647-38c6ec9cd41f",
          "length": 243,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1bd45e30-c2f4-4fa4-8de8-ac90966c46c7"
        },
        "item": {
          "id": "d9754376-6b32-421f-8c18-9193e2f3f108",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1fdef3a7-0593-4bf6-b7c7-2da66ca6a2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686a3445-ce7b-4c04-b5d2-aa97ad7508ec",
        "cursor": {
          "ref": "c4c72d19-9683-4f9a-8dd2-c2d69baf9d10",
          "length": 243,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b9195ae7-3a30-4aec-9539-29330c15d266"
        },
        "item": {
          "id": "686a3445-ce7b-4c04-b5d2-aa97ad7508ec",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "54978ddd-769f-4784-a19f-fa3652427a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b481ad9-f040-4ade-980b-d4347790af51",
        "cursor": {
          "ref": "f04155ce-3d1e-44b7-86db-c557cc33d206",
          "length": 243,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1f3271ce-1b0f-4555-bb7e-d2e97c9467fc"
        },
        "item": {
          "id": "0b481ad9-f040-4ade-980b-d4347790af51",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0a41a12a-7a18-45a5-9fd1-c8866cb1e805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf1a28c-7aee-47e9-8f30-070b90893baf",
        "cursor": {
          "ref": "c95a5e3b-15c2-45ba-a7ed-ab960ee71014",
          "length": 243,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "19292507-49eb-472b-9061-98dc5384f143"
        },
        "item": {
          "id": "1cf1a28c-7aee-47e9-8f30-070b90893baf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cbed010e-6a7d-44e1-9741-460f896078de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02345fda-eb75-4d9c-b647-dda57136693a",
        "cursor": {
          "ref": "27e5f188-1a25-4cf3-a440-1f0b38b82904",
          "length": 243,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fe4ea2e1-76ed-4993-b369-0a7187de8f0c"
        },
        "item": {
          "id": "02345fda-eb75-4d9c-b647-dda57136693a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "795eee95-c5fc-4097-87dc-e614463bd5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d87fde-2c74-4302-9bf8-fea46fe27156",
        "cursor": {
          "ref": "a9cbc589-9918-43a5-a441-a10902dbe133",
          "length": 243,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8552fe1b-a15f-4451-b6d6-d3bee4938fd2"
        },
        "item": {
          "id": "25d87fde-2c74-4302-9bf8-fea46fe27156",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ec43ada8-41b4-49a4-931d-a5519f38acb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1e50c9-c963-42b0-89b3-68032bc6553b",
        "cursor": {
          "ref": "f4c85e92-b372-47ce-88e9-59c4d2a2b461",
          "length": 243,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "24837738-46c0-4b2d-87ba-0a49c7d56461"
        },
        "item": {
          "id": "3e1e50c9-c963-42b0-89b3-68032bc6553b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "30095633-aaca-4e45-b1bb-ebf0761f3f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 498,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1a2ea5-9312-42df-a75c-49964225e4b9",
        "cursor": {
          "ref": "0d7ea304-9f90-4695-a061-ef169d9c5cca",
          "length": 243,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "87bc5550-d96d-4997-850e-c9c9ba7fbf16"
        },
        "item": {
          "id": "2a1a2ea5-9312-42df-a75c-49964225e4b9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6d545770-14bd-4390-a1d2-f3277864d56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effc2de3-5db9-4a47-bc7e-9ad4363a93d9",
        "cursor": {
          "ref": "19a307f4-845e-4c4d-b483-e8b123140583",
          "length": 243,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2404213b-6f5e-4e3a-8558-40a38e2c7f4b"
        },
        "item": {
          "id": "effc2de3-5db9-4a47-bc7e-9ad4363a93d9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "254e626a-9740-4890-b05d-b78ed64c6f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a31e51-3fc6-4fca-a7fa-9c59f61867f5",
        "cursor": {
          "ref": "a5872b4a-5ab2-4124-8a6f-85b161ea20b5",
          "length": 243,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cb420144-5965-44d5-bb96-513b10dcdf67"
        },
        "item": {
          "id": "42a31e51-3fc6-4fca-a7fa-9c59f61867f5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "69e2fa7c-ec34-48b1-b835-4543e0ca304d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a21ac4-c556-4497-960f-84741b41d293",
        "cursor": {
          "ref": "8c4089d5-dbc3-4e5f-8106-5bbe4bd4f6ba",
          "length": 243,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "33a11510-26d7-49b0-b140-cd3091e3ab00"
        },
        "item": {
          "id": "f3a21ac4-c556-4497-960f-84741b41d293",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c094c1fa-2850-44ef-bdf7-3ce44c3311b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8aa465-8717-4f78-ad78-704215b5f525",
        "cursor": {
          "ref": "185ac6c0-5f64-41e8-8ec4-6ed8e51bd329",
          "length": 243,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7b7189c9-0dff-4001-ba63-d1793324fb1f"
        },
        "item": {
          "id": "3a8aa465-8717-4f78-ad78-704215b5f525",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "937bf4c3-4ad2-4471-b303-5fc38a892a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554179ca-f323-469c-ae73-42d0dee3e792",
        "cursor": {
          "ref": "b53fde00-725e-4efc-bbb1-364c6f6877b2",
          "length": 243,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3c6e632e-ec3b-43b5-9b3b-19818699f94b"
        },
        "item": {
          "id": "554179ca-f323-469c-ae73-42d0dee3e792",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "44818998-941b-4554-ac15-3181f27c508d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0dfd076-a9f0-416d-a0e7-ed3ac904a464",
        "cursor": {
          "ref": "a52849fe-c81e-4da3-a174-ac5d60d1a1ca",
          "length": 243,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0153d999-b570-4114-a888-9e45a5c3fdda"
        },
        "item": {
          "id": "d0dfd076-a9f0-416d-a0e7-ed3ac904a464",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dd20d8e1-628c-43a6-84e4-2a0a6a0b446d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb070fa-748f-4fcb-804d-824cf00ec48c",
        "cursor": {
          "ref": "2a9bd139-2bcd-4591-9b3e-c6c542b798c0",
          "length": 243,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5d4348a5-8cd6-43c5-b442-041a45dbb19a"
        },
        "item": {
          "id": "beb070fa-748f-4fcb-804d-824cf00ec48c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "143f0ae5-0843-4163-9a17-355d9ca3838a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3fd30e-0e7f-4065-8bad-a7e0e2f70543",
        "cursor": {
          "ref": "74fe793e-d15a-4be6-8407-8bbdf4174e65",
          "length": 243,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f259ce0d-3029-4f28-b305-e70e508934cb"
        },
        "item": {
          "id": "3d3fd30e-0e7f-4065-8bad-a7e0e2f70543",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ccaece47-bf0c-4be6-85d8-037fd66504b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ed3625-f919-472e-8cc1-9db44b09a387",
        "cursor": {
          "ref": "feeec1fc-dc95-4ee1-ab12-83d743c04400",
          "length": 243,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "13954fc9-2866-4427-9d26-87711fe9b219"
        },
        "item": {
          "id": "78ed3625-f919-472e-8cc1-9db44b09a387",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "60c79dbb-aa29-456e-b3f8-f0dfd0516a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e4feef-be8f-461d-b0f0-fdb7bd2f2c2d",
        "cursor": {
          "ref": "db7ab068-113f-4b13-b0d9-29dad9f8cfae",
          "length": 243,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1f3abaee-9e48-4822-ab6e-ae84f8a62305"
        },
        "item": {
          "id": "86e4feef-be8f-461d-b0f0-fdb7bd2f2c2d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8b87f167-2687-438f-abd1-2740d6ae98ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d2786b-6c57-4e2e-8349-eda094ebcb09",
        "cursor": {
          "ref": "be08a2dc-634f-4e5a-8e2c-8f916e64d20d",
          "length": 243,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6f498ce2-57a0-4c6d-adea-b7f1446069cc"
        },
        "item": {
          "id": "e6d2786b-6c57-4e2e-8349-eda094ebcb09",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ac75b88c-d06c-4d5a-8f3f-c634a4a25b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3649bf-47c3-4ae6-b0b9-8986a59ebcd7",
        "cursor": {
          "ref": "856eca35-fd08-4e1b-a00f-4f6644b9368c",
          "length": 243,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5d749f3d-2c42-472f-b441-86a00737aaa8"
        },
        "item": {
          "id": "eb3649bf-47c3-4ae6-b0b9-8986a59ebcd7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "78379621-3196-425d-ae6f-e636ed5e8ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cf88b4-9a0e-4215-a48d-e510c0297ccb",
        "cursor": {
          "ref": "a95c974d-ed45-4d08-bfe3-5775748a3719",
          "length": 243,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "61aa36fc-d545-47f9-8c7b-e47883adc4d3"
        },
        "item": {
          "id": "02cf88b4-9a0e-4215-a48d-e510c0297ccb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "041c54c5-a7ad-4461-b339-a998cbc33c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9323e59b-bb36-46ad-8a26-c7574cb151ab",
        "cursor": {
          "ref": "e3bfbc73-c99e-49bb-8ca1-4c1b658e5fe6",
          "length": 243,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4c461b6c-4e66-4faf-9e13-9b15b3bb6433"
        },
        "item": {
          "id": "9323e59b-bb36-46ad-8a26-c7574cb151ab",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ff80150d-497d-4430-8565-c2514e544f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 362,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af493484-79fd-40b9-8676-cd4569855ad2",
        "cursor": {
          "ref": "e0c9f9dc-989f-4c63-84bc-c14019969d02",
          "length": 243,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6755e6bd-492d-40ab-b2cc-e4a219f3c5da"
        },
        "item": {
          "id": "af493484-79fd-40b9-8676-cd4569855ad2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dec2e0e1-4032-4317-937b-51560db80283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a428821-b1e7-4d7a-a49f-87658df658fb",
        "cursor": {
          "ref": "2230b52b-3eb6-48a7-ae5b-d1f4cce2e0fb",
          "length": 243,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2b951237-edf7-4897-9398-887d6a409d4a"
        },
        "item": {
          "id": "1a428821-b1e7-4d7a-a49f-87658df658fb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "12fa5c66-2fe4-4725-bbf4-08b1c384979e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 772,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc63be3c-6e0a-454a-a820-7fd8e54dec33",
        "cursor": {
          "ref": "3f66f6fd-b06d-4654-8985-adda08551e5e",
          "length": 243,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "326dd5c8-916b-4ecc-9d64-4195fa9485e4"
        },
        "item": {
          "id": "fc63be3c-6e0a-454a-a820-7fd8e54dec33",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a6315fbc-2ab8-4be2-b098-eb18eeccb6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1882c66-b1e4-42a5-bdd1-bcc22869a600",
        "cursor": {
          "ref": "2432b81a-2c84-46fb-8b09-adc28592167d",
          "length": 243,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9d2dc1c1-b2e0-44d3-a44e-4299962ae0b9"
        },
        "item": {
          "id": "b1882c66-b1e4-42a5-bdd1-bcc22869a600",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "70017be4-d752-49b5-b314-2d680de3a3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3aa532-2cce-4deb-b8d3-b3a2c504f16d",
        "cursor": {
          "ref": "c74e9839-0b0e-4e3c-8321-418ef3622946",
          "length": 243,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ecb8f057-4aae-421b-a6de-0b069eef6d8e"
        },
        "item": {
          "id": "2c3aa532-2cce-4deb-b8d3-b3a2c504f16d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c5bed868-89c7-49d1-95fe-0df3eb94935a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d95c16-d83c-4aac-be3e-40937b117adc",
        "cursor": {
          "ref": "514113ae-dd76-4083-acff-10b00db6ee1c",
          "length": 243,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "120c3783-9aef-4c20-8bb5-459b4ffe4926"
        },
        "item": {
          "id": "f2d95c16-d83c-4aac-be3e-40937b117adc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d3cc225a-91f3-42f9-abd8-05df23d847a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ce9679-5322-4d39-8dce-0a2676c2399d",
        "cursor": {
          "ref": "dfa93bc3-4941-4a62-8bb8-5b6147fabb04",
          "length": 243,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "78371d26-b5f3-4884-9a2e-bcee6a002a87"
        },
        "item": {
          "id": "53ce9679-5322-4d39-8dce-0a2676c2399d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cb6ffbe0-53b6-4e3a-87a5-b593ccda5a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1e7f4c-faa7-478b-b6c7-d02616c02d8d",
        "cursor": {
          "ref": "077d1746-4720-496e-b3a6-ff665d7e2291",
          "length": 243,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2fdff5d0-1313-465f-afea-108e0ec183d2"
        },
        "item": {
          "id": "ef1e7f4c-faa7-478b-b6c7-d02616c02d8d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d1b080d9-d666-4143-bec7-b0218522b2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c078ad0c-ac87-4d54-acce-e6f3e9abd9d2",
        "cursor": {
          "ref": "d2d64c19-2439-4c9b-9355-c4a086c2f598",
          "length": 243,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "10f5b34e-d416-4193-ab9b-e29baa0b7f49"
        },
        "item": {
          "id": "c078ad0c-ac87-4d54-acce-e6f3e9abd9d2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "773a6479-ed8c-4c09-bfbf-fb34ada1b875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e99936-54bd-4f62-8334-f9fdf8f2e9c2",
        "cursor": {
          "ref": "1584aaf2-dd65-4ce3-a820-06ce45e9a97b",
          "length": 243,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ccd6f19e-b9d5-4cce-bad1-c8a3822b4360"
        },
        "item": {
          "id": "35e99936-54bd-4f62-8334-f9fdf8f2e9c2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d71296be-2c88-4188-9037-6ec35b87a140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a2cbe1-208e-4391-b0d1-1789798eff69",
        "cursor": {
          "ref": "26af5644-230f-4d20-8845-b6a7fa4e91d7",
          "length": 243,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5935bf6e-8d23-4dd6-bf03-5889eb617af9"
        },
        "item": {
          "id": "a0a2cbe1-208e-4391-b0d1-1789798eff69",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7cf5bda3-eee5-4d02-81af-32549c137dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ba00e6-2332-4157-83bc-fa3aa6e1342b",
        "cursor": {
          "ref": "6ad03baa-51ce-46f3-a18b-1b040098ac86",
          "length": 243,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "44b7c485-2541-4194-a66a-7d67ef622f06"
        },
        "item": {
          "id": "d8ba00e6-2332-4157-83bc-fa3aa6e1342b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "34acf6d5-c206-49a5-b7fc-1ac2de29f0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf7165a-3e40-4d35-b984-c603ea15020a",
        "cursor": {
          "ref": "f60beff9-e32c-4d0d-a40a-2f30f8282c90",
          "length": 243,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4ed7017c-2b21-4c8b-8050-ca6e8a49d181"
        },
        "item": {
          "id": "bbf7165a-3e40-4d35-b984-c603ea15020a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f41303cc-d4c3-4b97-b830-cefffa3ed687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953fc31c-24e5-4d4d-a81f-11effe91ecdc",
        "cursor": {
          "ref": "cbdcc56e-cbe3-482c-b29f-2cead5afd4b9",
          "length": 243,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ace7af82-4d4c-48f9-9854-15bf1019c787"
        },
        "item": {
          "id": "953fc31c-24e5-4d4d-a81f-11effe91ecdc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ad8e2595-bb1f-4a42-ac17-f5f77a7314a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 360,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850dae71-bf55-4097-a30d-1c4e39e24de4",
        "cursor": {
          "ref": "e941f625-7356-4747-a23a-c856549a3593",
          "length": 243,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d9e0c9aa-9530-4f71-9696-4b22b7e3e506"
        },
        "item": {
          "id": "850dae71-bf55-4097-a30d-1c4e39e24de4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "fca2ec3b-02ae-4201-bcb4-21a60b03f09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442e28dd-d8f1-475b-ab67-4f4f48bd526b",
        "cursor": {
          "ref": "324978f8-18c9-4e88-a082-b9b130ab7204",
          "length": 243,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e22e3849-3d62-43c1-9cf2-038f517d8e8c"
        },
        "item": {
          "id": "442e28dd-d8f1-475b-ab67-4f4f48bd526b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "71d7aac7-e4e8-4809-8a3b-56fcbb9b6928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 841,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018f4082-5029-42b5-8a2c-2f595e8727b7",
        "cursor": {
          "ref": "5d9535c6-b525-4054-9543-1a34f4601030",
          "length": 243,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "122d997d-dad5-4a6f-a616-7bd781f4c948"
        },
        "item": {
          "id": "018f4082-5029-42b5-8a2c-2f595e8727b7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "287986c6-01c7-41c8-900f-27d2c6df99c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fddd96-a3d0-4953-88e0-f9d205bd9fcd",
        "cursor": {
          "ref": "6d41e55e-9ef8-4503-86cc-509f1f31dc73",
          "length": 243,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6641529d-4a5e-40f4-bc47-78df10ae5b8d"
        },
        "item": {
          "id": "d6fddd96-a3d0-4953-88e0-f9d205bd9fcd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6f7dacd3-d25c-49ed-b5ee-7b252e5c8613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e851758c-3f60-4145-809a-81c876c16cf1",
        "cursor": {
          "ref": "10ec8d5e-d572-4a75-ad83-9d6e866fcfa1",
          "length": 243,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5ee5ca1c-338b-4b40-8b36-239b26584335"
        },
        "item": {
          "id": "e851758c-3f60-4145-809a-81c876c16cf1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8275e0b9-78fc-4ba1-b366-6da4e231b3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c892ed-f540-4dfd-86a3-60550d141072",
        "cursor": {
          "ref": "5a8fbe67-9da0-4ecc-8e39-e92420280303",
          "length": 243,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "42d20f0d-d9b0-465f-9239-04a2702f1ef1"
        },
        "item": {
          "id": "39c892ed-f540-4dfd-86a3-60550d141072",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a9056e8a-3390-4227-8a61-0122558b2e23",
          "status": "Created",
          "code": 201,
          "responseTime": 736,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "ae176942-46b8-495a-b613-56c3935682f4",
        "cursor": {
          "ref": "9d66763d-fd5a-4215-871b-11d4ee8bfd7b",
          "length": 243,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5eeb826f-6069-49c0-a6d5-414aa0bee269"
        },
        "item": {
          "id": "ae176942-46b8-495a-b613-56c3935682f4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "57681151-f9cd-4bf1-93e1-1996f4d03c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8807fd-027a-48c2-b165-ef6bd56f5930",
        "cursor": {
          "ref": "39b39ae8-55cd-474e-84f7-f3f1c445ad63",
          "length": 243,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fd447985-efe9-4335-8318-db72561c62ac"
        },
        "item": {
          "id": "cb8807fd-027a-48c2-b165-ef6bd56f5930",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2fe00bd6-9cab-4e6b-b117-51ccd2c14c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a46b06-e3d6-469a-8514-126e58f37ea7",
        "cursor": {
          "ref": "38574e5b-d64f-4d71-936b-323ca60f6ee0",
          "length": 243,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f6595fbe-5eaa-4479-9b2d-d86abfc9b470"
        },
        "item": {
          "id": "44a46b06-e3d6-469a-8514-126e58f37ea7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ca132e6c-dc87-4983-8415-54d0ff603b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fe5b47-fb0a-4158-b60a-47d26ab14364",
        "cursor": {
          "ref": "e93c1c51-f2e4-4997-b0d7-26b45ea855df",
          "length": 243,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1e76673a-bbf2-4eba-89b0-93ef8ff56739"
        },
        "item": {
          "id": "70fe5b47-fb0a-4158-b60a-47d26ab14364",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b733883b-63e3-45ec-a1a7-eb52ea55d221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba54f2b6-0efe-44cd-aebd-46b2f57659a0",
        "cursor": {
          "ref": "d6ab269f-3447-4634-b20b-9790c0744124",
          "length": 243,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "80ff183b-c32e-48c8-a98f-0a47cd22f422"
        },
        "item": {
          "id": "ba54f2b6-0efe-44cd-aebd-46b2f57659a0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ab07dfb5-3ab9-42ac-a27d-8ddaae2911e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08253512-beb1-49c2-971c-13de155ebbf9",
        "cursor": {
          "ref": "1d3450c0-9785-4ca2-9f53-57b51102c45f",
          "length": 243,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2e110ae6-c811-4ee0-813a-c5d2599be20f"
        },
        "item": {
          "id": "08253512-beb1-49c2-971c-13de155ebbf9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "12e95223-442f-45d8-a118-cf13ffb1f30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4546d4ae-3fc0-4ce1-acf1-857faf610e85",
        "cursor": {
          "ref": "cf4da981-f3bc-4eb7-adb5-1dc7788b1e4d",
          "length": 243,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "835602e6-3279-4288-8f6f-b49843dd6b21"
        },
        "item": {
          "id": "4546d4ae-3fc0-4ce1-acf1-857faf610e85",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "249cfbac-7c8c-4699-aeaf-a181fb979abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b900df35-1c4e-493a-9b76-dbbdf1df00f7",
        "cursor": {
          "ref": "980eb572-622f-419e-970a-f1290f78784a",
          "length": 243,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3276bfb4-3217-4bc2-a585-99d9fca45769"
        },
        "item": {
          "id": "b900df35-1c4e-493a-9b76-dbbdf1df00f7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bfe88cae-0e10-433b-b495-5c4a733e86cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3966a3-cb19-4a21-a1c2-d18d929242d1",
        "cursor": {
          "ref": "960ce552-25e9-41e4-8070-371d3247e0c1",
          "length": 243,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3b24eb65-8815-4884-9eff-ff6849cb96b1"
        },
        "item": {
          "id": "0e3966a3-cb19-4a21-a1c2-d18d929242d1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "344fa8b5-9b26-4410-9b96-2110e1e0cbce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "ec9d4a7e-f112-42b9-8ef6-c8994a15b119",
        "cursor": {
          "ref": "cbb45046-163a-426a-b2f7-f12d6ca2fb17",
          "length": 243,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1819f0c4-5329-42dd-8fd0-5165e98a3391"
        },
        "item": {
          "id": "ec9d4a7e-f112-42b9-8ef6-c8994a15b119",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f6f1e91c-a6d1-4e4d-84f0-ce6ccf9d0fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "9456dc4e-9475-43af-a5aa-c631d1807820",
        "cursor": {
          "ref": "73ec4caf-831e-42c9-8559-46f7988419b2",
          "length": 243,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dec3ed52-8234-4fc3-af43-5078a6d78f92"
        },
        "item": {
          "id": "9456dc4e-9475-43af-a5aa-c631d1807820",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0567eabf-0acc-4271-8ebe-15c71a0d8ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:96)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:96)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot read properties of undefined (reading 'created')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'created')\n   at Object.eval sandbox-script.js:6:96)"
            }
          }
        ]
      },
      {
        "id": "2898f1df-b15e-4249-bc0f-43ed7e4464f0",
        "cursor": {
          "ref": "90f09dfa-4716-4811-a387-197071c31124",
          "length": 243,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "07c1d238-8a40-4dd6-93fa-7813c52cace6"
        },
        "item": {
          "id": "2898f1df-b15e-4249-bc0f-43ed7e4464f0",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "ceba5c6c-4f8f-40f3-b80c-f012fd400a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "94942e5c-3eff-4cab-ae4b-de536745bb5b",
        "cursor": {
          "ref": "b9a57c12-e6a7-42aa-ac37-7f43d2dba68e",
          "length": 243,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "73d157b2-c993-42b9-b7c8-d14dd43807c9"
        },
        "item": {
          "id": "94942e5c-3eff-4cab-ae4b-de536745bb5b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "698d1b44-516c-4006-8dc6-afb1fd57b462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:98)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:98)"
            }
          }
        ]
      },
      {
        "id": "55f3cf71-1474-44e7-95a6-03998f0e1fe5",
        "cursor": {
          "ref": "6c07be21-0caa-425f-a26b-f0f8ca626153",
          "length": 243,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "962d83b3-90b7-4761-9b85-f7ef6008c5b8"
        },
        "item": {
          "id": "55f3cf71-1474-44e7-95a6-03998f0e1fe5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "162d38aa-b99d-42e2-a368-addad5a87820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:99)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:99)"
            }
          }
        ]
      },
      {
        "id": "1a47b800-9d1e-4d68-af94-e556ab584cc3",
        "cursor": {
          "ref": "8dc03302-8d62-44cc-9d44-0da3a7d0df61",
          "length": 243,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3a6cfb9c-b644-4690-9421-54d30e5a7c41"
        },
        "item": {
          "id": "1a47b800-9d1e-4d68-af94-e556ab584cc3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2b966717-c77e-4a75-a471-7f1e0eef04a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "7dbc1cc8-45a3-4266-a391-18e09caed07b",
        "cursor": {
          "ref": "ce4644b0-7f29-4b90-8c28-ea6e33b7d350",
          "length": 243,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "61584040-67a5-42f2-bfce-ebe88ddc3065"
        },
        "item": {
          "id": "7dbc1cc8-45a3-4266-a391-18e09caed07b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "82cfb65b-8580-4dbb-af73-81df75de175b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "9159c71e-7097-4cf9-8e6d-490ce014a85b",
        "cursor": {
          "ref": "39551e63-1b3c-4b75-9173-4db77db53611",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "be6a0950-dd93-4e71-83e7-4d63c9b1f295"
        },
        "item": {
          "id": "9159c71e-7097-4cf9-8e6d-490ce014a85b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4557a216-249d-426c-b7e6-17c11a1d66b3",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "9159c71e-7097-4cf9-8e6d-490ce014a85b",
        "cursor": {
          "ref": "39551e63-1b3c-4b75-9173-4db77db53611",
          "length": 243,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "be6a0950-dd93-4e71-83e7-4d63c9b1f295"
        },
        "item": {
          "id": "9159c71e-7097-4cf9-8e6d-490ce014a85b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4557a216-249d-426c-b7e6-17c11a1d66b3",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "fbf628e2-7e99-473b-a066-82b74e812f76",
        "cursor": {
          "ref": "5a4e05b7-fef1-4316-92f2-f7606c0fd663",
          "length": 243,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0e441528-21bd-489a-bfb9-0696ebdf014c"
        },
        "item": {
          "id": "fbf628e2-7e99-473b-a066-82b74e812f76",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b394e64c-bb4d-4b7d-84cf-edb30e13d405",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "672fe6b1-243d-4095-8382-0e8ff93f65d3",
        "cursor": {
          "ref": "1edf7373-e4c9-4a75-b1f4-eafc3cf5fd77",
          "length": 243,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ba7ebfb8-c423-49b9-8d0c-41412ab4ff06"
        },
        "item": {
          "id": "672fe6b1-243d-4095-8382-0e8ff93f65d3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3655cfd7-fa5b-49f5-b115-de255f0ffc98",
          "status": "OK",
          "code": 200,
          "responseTime": 347,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "f52d89f2-43e8-4f6f-8ce9-d00f9a2aee1f",
        "cursor": {
          "ref": "3b9abad3-2be4-47fd-8663-adb8bb445493",
          "length": 243,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "41d49250-6ec0-4886-bcbb-550332cbbe1c"
        },
        "item": {
          "id": "f52d89f2-43e8-4f6f-8ce9-d00f9a2aee1f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b39d9a6f-d085-4c34-b423-7462bda760d6",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "73f4ebd7-eadc-4eb6-b0eb-4f00b9f52091",
        "cursor": {
          "ref": "11427436-ab5d-44d5-a089-edb6b7b09031",
          "length": 243,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f059a990-2800-4f4c-bfb1-092e058de10e"
        },
        "item": {
          "id": "73f4ebd7-eadc-4eb6-b0eb-4f00b9f52091",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "91475eeb-4e2d-4ef1-94c3-7540a3790154",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "cacf0fff-67ee-4021-b2a7-38d669aba6ba",
        "cursor": {
          "ref": "7942297f-330f-437b-ada1-89f5e46a29e4",
          "length": 243,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e81c3e85-6ca9-47e6-a89c-d7f52828c72b"
        },
        "item": {
          "id": "cacf0fff-67ee-4021-b2a7-38d669aba6ba",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d6cb3f62-6795-4141-82e5-53b87dc4d211",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "e11ac813-ec67-432e-bf52-624a9ebc40c4",
        "cursor": {
          "ref": "9e6a8ebb-8c49-4c6e-aea3-36a0aeaece72",
          "length": 243,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "42605a5d-9e8d-4bf2-a8d1-ef793a04f6bf"
        },
        "item": {
          "id": "e11ac813-ec67-432e-bf52-624a9ebc40c4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3693fb44-6f34-43c9-b0e6-6df48d3dfc85",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "20cad4b6-7cb9-4252-8199-51518e64001b",
        "cursor": {
          "ref": "1d782fea-cc14-4ede-a049-c197656bc85f",
          "length": 243,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "82bdde97-6a09-471c-8863-8b3de677fd38"
        },
        "item": {
          "id": "20cad4b6-7cb9-4252-8199-51518e64001b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bf28d1d2-3e9b-438d-b494-edde25d18fed",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "dcf679d6-7174-4615-bc1e-e542d4272251",
        "cursor": {
          "ref": "b96bc05c-5440-4056-bebe-dad3f55be159",
          "length": 243,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9f29d2fd-3ab5-49ab-89a1-cacbdd99cd54"
        },
        "item": {
          "id": "dcf679d6-7174-4615-bc1e-e542d4272251",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d4db5791-d6d0-4b22-9e54-b690ee39d815",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "4de5d7cd-8a74-4676-a6b6-aeb4a77b5f91",
        "cursor": {
          "ref": "16b5737d-b5f4-4afc-ab61-fabab2894c8a",
          "length": 243,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9da17a12-d61f-4d19-9bd9-4980dc0ae180"
        },
        "item": {
          "id": "4de5d7cd-8a74-4676-a6b6-aeb4a77b5f91",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c533cfb9-b7fc-4002-bec8-f86ef8fd7905",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "be90624b-aad6-4f44-b3d8-2e4bdac49656",
        "cursor": {
          "ref": "7ebc73b9-1611-4bb7-90f5-0061427b3bdc",
          "length": 243,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3dd2a7bf-7941-470b-8542-f8c4c347fa6b"
        },
        "item": {
          "id": "be90624b-aad6-4f44-b3d8-2e4bdac49656",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5afc55d6-e36c-42b4-9e12-f13416ac3485",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "92bff393-2234-47de-af3f-7bb1b858f040",
        "cursor": {
          "ref": "f6732cb7-31ca-4ca6-b58c-37fc496351e1",
          "length": 243,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "438c708e-6899-40a8-8169-e35af8396239"
        },
        "item": {
          "id": "92bff393-2234-47de-af3f-7bb1b858f040",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1a72cf02-8b97-4c0a-ba40-e1585e04004e",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b1abe0ed-b8b0-482b-879e-56b2e746a5cb",
        "cursor": {
          "ref": "a1912d2d-ad23-4c00-99c7-443a976addf3",
          "length": 243,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "63dea4f1-5a31-4623-acb4-584fcd128f49"
        },
        "item": {
          "id": "b1abe0ed-b8b0-482b-879e-56b2e746a5cb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c2078c8f-7c87-4a20-8c5f-61bcc2433ee2",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "c2adf2db-a111-4813-8132-7da56a257259",
        "cursor": {
          "ref": "420a0577-98dd-4037-864a-da92c143fba6",
          "length": 243,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f975cede-4b82-43eb-afe4-7ec01ba617af"
        },
        "item": {
          "id": "c2adf2db-a111-4813-8132-7da56a257259",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bd4e422b-83b4-4791-831c-a7361f942d84",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "afa0fa2d-9960-4b47-bdb9-f525749d88bc",
        "cursor": {
          "ref": "b0ef52d3-e4b3-4867-b47c-aa7c353e3688",
          "length": 243,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d76faa90-7cc6-4d1e-a11d-97fa005f3185"
        },
        "item": {
          "id": "afa0fa2d-9960-4b47-bdb9-f525749d88bc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "df32a1f0-d68c-431a-ab54-8233c40d01ef",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "8ecf894b-72c1-4a04-8f4a-45ef6fd8331c",
        "cursor": {
          "ref": "9ee5992c-b866-42bd-85bc-1f022a226b98",
          "length": 243,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4c6d5d3f-153f-40f6-9dea-4e4b4c09ec13"
        },
        "item": {
          "id": "8ecf894b-72c1-4a04-8f4a-45ef6fd8331c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ab8161b5-ba65-4ecf-a989-a0ed2f158d32",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "53b8d596-2daa-4c3f-8272-9c962472b01e",
        "cursor": {
          "ref": "914dc066-172c-44c7-88e3-a0f3036613c7",
          "length": 243,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c7beb605-4d56-46ea-8c8e-d64bcd7c9c3e"
        },
        "item": {
          "id": "53b8d596-2daa-4c3f-8272-9c962472b01e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cee7096e-8446-4ab1-a04b-4823d8c24703",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "f1b72911-09d8-49ef-b8ba-cd237aaa8040",
        "cursor": {
          "ref": "3df86d00-68a4-4668-ade7-861bce0b5241",
          "length": 243,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5285a767-cf4c-467c-8b00-268deced6a0a"
        },
        "item": {
          "id": "f1b72911-09d8-49ef-b8ba-cd237aaa8040",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "adf8d017-f8eb-43c0-95bf-7e9765762bbb",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "377dca7b-7f34-4c65-8e7e-aab59f7c9b48",
        "cursor": {
          "ref": "3ffc63a5-a4b1-4ca5-8338-eefc384b20fd",
          "length": 243,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "83b2bb43-b860-45a1-b4d0-c30a0c932e4a"
        },
        "item": {
          "id": "377dca7b-7f34-4c65-8e7e-aab59f7c9b48",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "401ab39a-0a5a-4f07-895b-bfa11e679686",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "fb24f28a-78cb-4994-bff5-d5ab5feeaef2",
        "cursor": {
          "ref": "f15b351b-657e-475f-944f-c08cb297fd78",
          "length": 243,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7b1b090c-4939-44e1-9356-b3438e9a237a"
        },
        "item": {
          "id": "fb24f28a-78cb-4994-bff5-d5ab5feeaef2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "707830f9-6825-40e8-9f4a-b3ecc7846161",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2dac5e60-8879-4fcc-a516-d5d378a2ed0f",
        "cursor": {
          "ref": "56929c92-426d-4084-8693-3bfaf98a4de1",
          "length": 243,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "395bc178-d538-456a-aac0-a0cf5db8f1a9"
        },
        "item": {
          "id": "2dac5e60-8879-4fcc-a516-d5d378a2ed0f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bf43a86f-4411-4cfb-85a4-4962c085b30d",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "89c88d2c-126b-43d3-a613-3fe82d88bbc7",
        "cursor": {
          "ref": "b71ac32e-2f8c-4560-a9e2-b11dca916e6e",
          "length": 243,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "80888f85-5fec-4a01-adc6-70d82a81dc4f"
        },
        "item": {
          "id": "89c88d2c-126b-43d3-a613-3fe82d88bbc7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "18c958ec-9db5-4656-a97d-6ea57e62be36",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "319ca26f-6284-4642-8a59-d11eafaa2fb2",
        "cursor": {
          "ref": "cdbe52b6-cfc1-471d-8349-83999cdba10c",
          "length": 243,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "40b59bdb-9f92-4ccb-bad7-6b9273fbcd6e"
        },
        "item": {
          "id": "319ca26f-6284-4642-8a59-d11eafaa2fb2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3900d872-a620-4b89-bad2-2fbee57bf05e",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "4c2ec26d-1f75-414c-b804-1eebc8ee46e0",
        "cursor": {
          "ref": "779bd678-c8ff-48b8-8511-45d5e5d2097a",
          "length": 243,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9d325b8b-d194-484d-8ce1-f4dca71687f1"
        },
        "item": {
          "id": "4c2ec26d-1f75-414c-b804-1eebc8ee46e0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b9f5bd7e-faf7-4640-adbb-2753c181ceb8",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "ca688a41-494c-47f9-a166-eadca55db550",
        "cursor": {
          "ref": "82a22412-d936-4a76-b5e2-9c08d68af0e7",
          "length": 243,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "87fc622b-13fb-427b-beed-03242e9328b6"
        },
        "item": {
          "id": "ca688a41-494c-47f9-a166-eadca55db550",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dcc3e286-acd5-41ad-9016-69563d998da0",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "9b474ff1-2fd4-4f89-9d89-88734ea5900a",
        "cursor": {
          "ref": "c1b4c6e7-2ec6-4c0b-9902-be4b013eb213",
          "length": 243,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b421290c-69b8-4e13-b1d0-b2be0dd5ea15"
        },
        "item": {
          "id": "9b474ff1-2fd4-4f89-9d89-88734ea5900a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5f6fef9c-c28f-4915-b9b7-6c204f856a4c",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "2f9f2326-4a0f-4a13-9079-4b9c93673220",
        "cursor": {
          "ref": "88a2cbe5-cc91-400e-8751-b04eedd313c6",
          "length": 243,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "18ee366f-5883-4eff-8b82-109ba288f7aa"
        },
        "item": {
          "id": "2f9f2326-4a0f-4a13-9079-4b9c93673220",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "851f1f95-3e12-44e7-857c-ac44615e374d",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3e0b0a58-7f11-4859-8e4b-a496792e2004",
        "cursor": {
          "ref": "e093ef9d-237f-4a5f-b2e8-4e036c8f3d52",
          "length": 243,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1ac3b76e-4532-4fe0-90a6-6ba4a891536c"
        },
        "item": {
          "id": "3e0b0a58-7f11-4859-8e4b-a496792e2004",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7fbe033f-3cf0-444d-abe6-2e8d6437cbb7",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c16085f7-7f8a-47bf-beb5-299ebde8538f",
        "cursor": {
          "ref": "fb6a3c1f-3321-40ee-ba13-bb5f6dfd645c",
          "length": 243,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d1b16a21-2479-4cfd-9306-264d2fe5174f"
        },
        "item": {
          "id": "c16085f7-7f8a-47bf-beb5-299ebde8538f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5c6f513b-9056-4853-96c3-30eb883ce1ef",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "78590a60-4b9d-4b5a-9b3e-5a6404a677d6",
        "cursor": {
          "ref": "9a9edcea-0782-4be2-a7ed-4a5b4f57c7d7",
          "length": 243,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "34e0a0a6-3732-46fc-bef7-dfb6c9f128fa"
        },
        "item": {
          "id": "78590a60-4b9d-4b5a-9b3e-5a6404a677d6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7cc70257-2df5-4ef3-98da-2a2297913e0c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "0a87cd1e-7bd7-4d6d-ae26-a6006a18c5d2",
        "cursor": {
          "ref": "256390e4-52dd-4dcc-9e49-f59e60e76e4f",
          "length": 243,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ee7b0a9b-18d6-48ba-ab0d-c8aad271b7e4"
        },
        "item": {
          "id": "0a87cd1e-7bd7-4d6d-ae26-a6006a18c5d2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ca730296-390a-4b72-8c1b-ae8dddcbbf3c",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "dc9bb1ec-d777-4e4a-8b1b-393730da4a2e",
        "cursor": {
          "ref": "987c4e3c-77fa-4db7-b39f-f12d8878dfcd",
          "length": 243,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "faca9175-9a35-4858-8ad9-35f7639fbe5b"
        },
        "item": {
          "id": "dc9bb1ec-d777-4e4a-8b1b-393730da4a2e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c665d2e3-9a16-45c4-a718-8f7a66d148ac",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "73594fc7-f637-4a60-b3e5-9d79674058f8",
        "cursor": {
          "ref": "364603c1-96cc-4ade-a592-67353fc5bccc",
          "length": 243,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d2f031e4-a89f-4538-beca-6dbeadb1422d"
        },
        "item": {
          "id": "73594fc7-f637-4a60-b3e5-9d79674058f8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e9f4ebed-8e4b-4079-8d31-e9bff1d303f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd60900c-d66c-43d3-8dec-12c75b6724d7",
        "cursor": {
          "ref": "39788737-2536-4b9b-bbe1-80bdaa8b20d4",
          "length": 243,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "745be669-5d69-4fe3-8b23-061933b45ca2"
        },
        "item": {
          "id": "dd60900c-d66c-43d3-8dec-12c75b6724d7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "05a3c80d-0121-46cd-9791-fafc4f7f70b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 113,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626bc6c3-3f18-496c-99c2-6a481c3db11d",
        "cursor": {
          "ref": "62b8adaf-a545-47f9-8e48-f76f38d432fb",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ff80e177-5236-43ed-9140-8933dd27c21f"
        },
        "item": {
          "id": "626bc6c3-3f18-496c-99c2-6a481c3db11d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a35d2555-5063-46ca-9da7-b5f0a02edad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626bc6c3-3f18-496c-99c2-6a481c3db11d",
        "cursor": {
          "ref": "62b8adaf-a545-47f9-8e48-f76f38d432fb",
          "length": 243,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ff80e177-5236-43ed-9140-8933dd27c21f"
        },
        "item": {
          "id": "626bc6c3-3f18-496c-99c2-6a481c3db11d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a35d2555-5063-46ca-9da7-b5f0a02edad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448223ed-938b-4779-9bf9-c40f32723e17",
        "cursor": {
          "ref": "9fd0fc05-a923-4665-bb9b-2d1e13a474f7",
          "length": 243,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9ff2f1cf-ad34-48e2-999b-42f5858aba56"
        },
        "item": {
          "id": "448223ed-938b-4779-9bf9-c40f32723e17",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f2ff9e82-527e-4e95-a328-e3c81f148715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ea18cf-edda-4e6e-8cb0-bcb34fdd1fae",
        "cursor": {
          "ref": "1b3238d8-65d5-47e3-afca-5629408d1abb",
          "length": 243,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ede2f2e7-638e-417a-8fa2-9bea819b2019"
        },
        "item": {
          "id": "03ea18cf-edda-4e6e-8cb0-bcb34fdd1fae",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b742e787-6eef-420f-ae53-fbee7ed45b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 551,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f03c944-b6b7-4869-a009-6d84c2d6e4d2",
        "cursor": {
          "ref": "a8ba21f4-9441-4a10-b660-58b4d5f4cf78",
          "length": 243,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "98941608-7792-46d2-9256-4b6f6a638079"
        },
        "item": {
          "id": "1f03c944-b6b7-4869-a009-6d84c2d6e4d2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a9afad70-6285-4e3c-b4fe-f69f801edeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e78fdb-b63d-4a5a-af63-3857c739d7b7",
        "cursor": {
          "ref": "fcd1760f-ce72-4ade-b949-f5822d6b5dbf",
          "length": 243,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fb536473-1d3d-4822-92b2-660e5af8fb4f"
        },
        "item": {
          "id": "d3e78fdb-b63d-4a5a-af63-3857c739d7b7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5d44a0f8-1bf1-4989-b0ae-d588c1dfbf12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdaaa55-768a-40f1-b8f4-9c667e0c2e3a",
        "cursor": {
          "ref": "1fafd9be-9c26-4c9e-9ff8-0cdece1bfb6b",
          "length": 243,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "aaccaa56-cae0-4b65-bd9c-c8fd40b80a3a"
        },
        "item": {
          "id": "8fdaaa55-768a-40f1-b8f4-9c667e0c2e3a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "539e7ed4-7c85-4c48-808d-fe3e45fcd7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb3a2ae-68c6-4f31-82ae-58a1bbc310da",
        "cursor": {
          "ref": "879d71cb-2488-426f-b2a8-5550d28542ef",
          "length": 243,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3ae03fdb-2378-4637-9513-214ccaaecb9b"
        },
        "item": {
          "id": "bcb3a2ae-68c6-4f31-82ae-58a1bbc310da",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e8a35b99-af47-4801-b6b0-adeeac3dd715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1461,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad8a5db-e326-4065-a45b-3d5b879b7a17",
        "cursor": {
          "ref": "180b276e-202f-415e-a6ea-33cd15b1c6bc",
          "length": 243,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5f83ce54-14b6-4239-ade2-f9f7c2b97ef8"
        },
        "item": {
          "id": "6ad8a5db-e326-4065-a45b-3d5b879b7a17",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "79ff16c9-d0f1-4d3a-9252-7b64aac03481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71daddaf-d557-4322-818b-6ae572e72742",
        "cursor": {
          "ref": "dc20139a-1932-48f8-90f5-7278d0831300",
          "length": 243,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "604a7c1b-6bf6-4510-a984-524ca5bde81b"
        },
        "item": {
          "id": "71daddaf-d557-4322-818b-6ae572e72742",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "331a6288-505c-444f-9bc7-ac458a984794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813e940e-3889-4f3e-842a-65d033fb6bb7",
        "cursor": {
          "ref": "c658745e-e8f5-4f77-956c-5541d935e91b",
          "length": 243,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b4f6d2b7-d568-43b5-9297-e475601c9903"
        },
        "item": {
          "id": "813e940e-3889-4f3e-842a-65d033fb6bb7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d588fec3-e6d1-467f-b7fa-f67ed7b1cec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76334370-1396-4815-a2cf-7869458102a1",
        "cursor": {
          "ref": "ff8912b0-e87f-4a05-ab7a-866f3bcdcaf3",
          "length": 243,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ac5beb2e-5068-48b2-9b0d-da9add7f2612"
        },
        "item": {
          "id": "76334370-1396-4815-a2cf-7869458102a1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "12cbb38f-87cb-4c24-a763-b6871e5fedbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017d9782-31fc-4885-836e-0eda84dc1abe",
        "cursor": {
          "ref": "362420dc-76e6-409d-ad8c-0a8a6034eb99",
          "length": 243,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0d789efa-1fce-41d0-a41f-37fda458b4a1"
        },
        "item": {
          "id": "017d9782-31fc-4885-836e-0eda84dc1abe",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a7c18423-6f82-4a01-819a-209e8d9145f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1145a25e-d6f1-4247-a640-dfef6604cbe5",
        "cursor": {
          "ref": "61723553-acab-4764-80f1-dcc47f132ebb",
          "length": 243,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "763b7750-b72c-4f00-a2f1-da9c6ab36751"
        },
        "item": {
          "id": "1145a25e-d6f1-4247-a640-dfef6604cbe5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a2199df1-8149-4fab-9c02-ce7e898659fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e344ed2-31e1-4a58-b31d-59d3e2d4c3fc",
        "cursor": {
          "ref": "0d632c19-9309-4f65-9fa1-b1ba098fb497",
          "length": 243,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c08ee2c7-edf7-4e83-8e25-7aab5bc8eef9"
        },
        "item": {
          "id": "2e344ed2-31e1-4a58-b31d-59d3e2d4c3fc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f25c687a-5e95-49b2-af38-9322d2b4dfc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d055c8db-a121-405a-902e-fee51a072852",
        "cursor": {
          "ref": "54a4c8a5-0d4c-46a4-9dcb-30c88783c859",
          "length": 243,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "792bc795-ccca-4846-9fde-9a2251d598da"
        },
        "item": {
          "id": "d055c8db-a121-405a-902e-fee51a072852",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0da9f028-e2a0-42ad-a1d1-79c5e1fdce5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfc2e83-3537-4d70-bd5d-cd17d16bde37",
        "cursor": {
          "ref": "d20fb41c-3240-462a-8309-e48bfa4461af",
          "length": 243,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7b14ecfa-33ae-4e98-a936-c7976baf4cdf"
        },
        "item": {
          "id": "8cfc2e83-3537-4d70-bd5d-cd17d16bde37",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a4dfd179-777b-4c7b-89b3-f67580ef86ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ddc528-6979-4104-a932-9969553d7757",
        "cursor": {
          "ref": "b1a2d8ec-3be1-4451-b74f-3d6b83c5a16d",
          "length": 243,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f2107855-9fba-4ad0-88ae-ab03c655a980"
        },
        "item": {
          "id": "67ddc528-6979-4104-a932-9969553d7757",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "df854ea1-0843-4ca8-a77b-1919442de881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 722,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2824ab7-fece-436f-9814-be09086c7887",
        "cursor": {
          "ref": "993326d3-5392-41be-9f5b-69cee488905f",
          "length": 243,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "138bf416-3bec-4c95-be9d-d36ad10bd3f6"
        },
        "item": {
          "id": "e2824ab7-fece-436f-9814-be09086c7887",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "30e00bb9-8c45-4ba6-8162-9de2972b329f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1446,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c04b51-531a-4a08-8aa7-b343541afc7b",
        "cursor": {
          "ref": "84ef0e54-0527-4531-9517-1a688c6e55bb",
          "length": 243,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a8247f5a-91a2-4d45-99ee-c0311a0160cd"
        },
        "item": {
          "id": "08c04b51-531a-4a08-8aa7-b343541afc7b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2a30ab76-9f81-4bd6-9ff6-b1b15e428bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a35cbb-70d7-41a3-ae2d-d72bf7370e19",
        "cursor": {
          "ref": "6765922d-2af3-4adc-b1d8-7e396fea765e",
          "length": 243,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "124e8fa4-7889-4cd4-9589-80274f3e3c48"
        },
        "item": {
          "id": "c5a35cbb-70d7-41a3-ae2d-d72bf7370e19",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "302edc3d-c6c4-45e7-8582-1b0f397e0b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 508,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9b68c6-e587-4157-bbac-35a00ff71bc1",
        "cursor": {
          "ref": "5ded5a15-94cd-444e-bf36-a759084c73ba",
          "length": 243,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c1bc71d9-b1ed-43b5-80d8-ef2b9cd37bec"
        },
        "item": {
          "id": "be9b68c6-e587-4157-bbac-35a00ff71bc1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "112fe266-f7d8-4d86-a741-9db323f69a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 508,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88290801-df86-4a8e-b111-af6139de9658",
        "cursor": {
          "ref": "dd9f7b00-0938-4994-8e20-0d79aa1b18e8",
          "length": 243,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bdc961d1-ccff-4e2a-8e87-7a5304f4319e"
        },
        "item": {
          "id": "88290801-df86-4a8e-b111-af6139de9658",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f4e80f4e-7ff9-4c85-b904-a2dad051d495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 363,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3457e565-3ae7-4793-86a5-90f589b5f758",
        "cursor": {
          "ref": "1aad49fb-b6e5-44b6-af18-919df347326a",
          "length": 243,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0ae623d5-c194-4ffe-8df8-df229b1169e4"
        },
        "item": {
          "id": "3457e565-3ae7-4793-86a5-90f589b5f758",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d409086a-3f76-4ee4-a465-eab9a30f9935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458ff0e1-1c2c-424e-a314-b3e1f15ac440",
        "cursor": {
          "ref": "0978fe45-c1e4-4ef9-bd04-4b82c193f770",
          "length": 243,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6f89a1b4-5e52-460d-90e6-568b5d565975"
        },
        "item": {
          "id": "458ff0e1-1c2c-424e-a314-b3e1f15ac440",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2f6964b0-b5d8-4f9b-ad75-0f53c6f15b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a2046f-97ce-4f94-b6b0-cc7cad7ed78a",
        "cursor": {
          "ref": "1d022358-0c6c-476a-b276-fa4896d7ff3d",
          "length": 243,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0fa0cf1a-00e3-4870-acf3-d9442815466e"
        },
        "item": {
          "id": "32a2046f-97ce-4f94-b6b0-cc7cad7ed78a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "074c78fe-04fe-48c9-a32d-bb8a6d4de6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed43ea3a-bbf5-4a91-9928-0fb41c7e56cc",
        "cursor": {
          "ref": "364424bd-00d8-42db-8920-b77455f68591",
          "length": 243,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f1b6f359-d65e-4b6c-b4ac-411de767389c"
        },
        "item": {
          "id": "ed43ea3a-bbf5-4a91-9928-0fb41c7e56cc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9997f31c-7e2a-47ba-ad07-20cb9aeb6d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 383,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a3eeb1-c8ae-46e4-b6df-6ac619da1099",
        "cursor": {
          "ref": "6a79fd32-7d8f-4dff-990e-133a4bb31fa6",
          "length": 243,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "918dcd3e-bd70-49f4-ad8f-a874985e74ad"
        },
        "item": {
          "id": "12a3eeb1-c8ae-46e4-b6df-6ac619da1099",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "612320c9-4b66-44a0-95f3-6d2fd165629e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c708d0-2514-4ce2-b0fe-6ef8ca9c4d1d",
        "cursor": {
          "ref": "9d5bcd73-0a3d-4ccd-a829-2d1efaf1ab2f",
          "length": 243,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8f2648cc-80af-48cc-9bb4-a704331c5adb"
        },
        "item": {
          "id": "59c708d0-2514-4ce2-b0fe-6ef8ca9c4d1d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "73245438-3e85-4896-8366-69cb614852f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e487a2-9026-4d79-9fae-eeaad0706c6b",
        "cursor": {
          "ref": "22fca6f2-5fd8-49ad-91ed-969768e4fb74",
          "length": 243,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ea440879-b8df-4ae9-aa14-960815020b72"
        },
        "item": {
          "id": "35e487a2-9026-4d79-9fae-eeaad0706c6b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d4232f88-6b4d-46d7-a197-97bc3335443a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844d6da2-874c-447d-bb07-05bd1b74a205",
        "cursor": {
          "ref": "fc53b8cb-dc3c-4a5a-89ff-c25867fff5e2",
          "length": 243,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7d772a44-75ba-4a34-b79f-233ec36af63b"
        },
        "item": {
          "id": "844d6da2-874c-447d-bb07-05bd1b74a205",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e424a28f-99fc-4b11-9693-9e46ad1fb5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea33da7e-62bb-45d4-82f2-c775fa26d1b8",
        "cursor": {
          "ref": "c449b10c-c6f8-4630-9d94-f7a39f71c8db",
          "length": 243,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "39e65ff5-11ff-4b24-8414-d91299b7efec"
        },
        "item": {
          "id": "ea33da7e-62bb-45d4-82f2-c775fa26d1b8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c556c603-b4d3-4d27-b479-f527fd825f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa307511-1103-4176-996f-3833467f9cb1",
        "cursor": {
          "ref": "88bad07a-eae0-44a0-83b2-f9da32eb3198",
          "length": 243,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2dc5ce64-0391-4c7e-8596-474aa703aa0a"
        },
        "item": {
          "id": "aa307511-1103-4176-996f-3833467f9cb1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6e812dba-2b10-4514-85a7-691c08194951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fa86ab-2e37-419d-bc1a-d277e97ce809",
        "cursor": {
          "ref": "7e8c54b8-7b6b-4e72-877c-6a8553501bff",
          "length": 243,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4e4ab216-ba72-4ac2-93c3-0b5e7d16ae0c"
        },
        "item": {
          "id": "47fa86ab-2e37-419d-bc1a-d277e97ce809",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d7679e67-b49a-471e-8d87-3a8d373355df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acba061-f281-44e4-9204-8b12d224a1c4",
        "cursor": {
          "ref": "28e11bfa-1afd-409d-90b1-f78d3b2bc560",
          "length": 243,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "adf3f6a0-351b-4df1-8fd4-a2e937e23667"
        },
        "item": {
          "id": "1acba061-f281-44e4-9204-8b12d224a1c4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "174af411-a125-4094-881f-c944f6faab4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec4e6e8-d8f3-4683-a049-4a5ea9074b5e",
        "cursor": {
          "ref": "e193c510-924f-414f-b8fb-b8f167e88ca5",
          "length": 243,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d4d76539-b22b-4dfb-98dc-b49422650541"
        },
        "item": {
          "id": "aec4e6e8-d8f3-4683-a049-4a5ea9074b5e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d18e7686-367d-4db1-b262-2aa63b730f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 789,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9fe2a7-9398-47bf-8b29-1956465cd3ec",
        "cursor": {
          "ref": "0edd45f3-d4c2-42f4-8009-5e6b99869d95",
          "length": 243,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "14431b20-f379-42cf-9985-241da81a3373"
        },
        "item": {
          "id": "9e9fe2a7-9398-47bf-8b29-1956465cd3ec",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "86bc4d82-fc51-4932-9080-508fdd7051bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e00947c-6d69-434c-adde-9a836b86f27d",
        "cursor": {
          "ref": "8021340d-4e6a-47f3-9291-dce539df357d",
          "length": 243,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "21e218c9-55f0-4c9d-bbb4-51c1edfe0bdd"
        },
        "item": {
          "id": "1e00947c-6d69-434c-adde-9a836b86f27d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "755f7572-7612-448b-9ffb-85bd31f60f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 435,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff6047d-c4b1-458f-986d-7f06bda2139c",
        "cursor": {
          "ref": "fcd544a0-72ab-45b0-ab60-0caec7af4856",
          "length": 243,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "494f3b79-5e15-4996-8c3c-e10dbcc98644"
        },
        "item": {
          "id": "fff6047d-c4b1-458f-986d-7f06bda2139c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "999b6e10-610a-4b1b-86f0-aa188adc06b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 749,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3a7d99-2462-435f-89ef-ae162b5089ea",
        "cursor": {
          "ref": "0103a7d8-57b9-435c-872d-79704f7fce5c",
          "length": 243,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "06d5ceb7-b8ab-4f7b-9d46-2b9a2d8897e3"
        },
        "item": {
          "id": "fd3a7d99-2462-435f-89ef-ae162b5089ea",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ab554c86-e819-4eab-82b3-d166c18cd1e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 401,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b43d694-1cb1-4477-ab87-7414bea926a2",
        "cursor": {
          "ref": "45bca72d-e76a-4d93-a463-e46eaa3a15b9",
          "length": 243,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d0cba06e-c313-4323-a678-09b636a648e0"
        },
        "item": {
          "id": "0b43d694-1cb1-4477-ab87-7414bea926a2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "47fec9bf-f99f-4bb3-87a6-cce16c4cd296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 701,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b027700-755b-48ee-bc86-e9b692c1ace7",
        "cursor": {
          "ref": "40ec53b6-66ac-49fa-a15b-e2787c2124e4",
          "length": 243,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dad495b6-5a4e-4125-8fcd-d075cdcb3545"
        },
        "item": {
          "id": "1b027700-755b-48ee-bc86-e9b692c1ace7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "649738c4-40cc-43de-b71a-f9a704b9bab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 702,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bbab3b-ce21-496a-9b3a-bc585166f33e",
        "cursor": {
          "ref": "2d22ffc3-1017-48b4-b488-52f6deafa3cc",
          "length": 243,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cf7dd288-e90f-4af9-82b5-3298160a9819"
        },
        "item": {
          "id": "b9bbab3b-ce21-496a-9b3a-bc585166f33e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5ef83cd0-7193-41e7-becc-1a1740db9295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 475,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63619a05-f7f2-4741-83ce-143a6a3abe40",
        "cursor": {
          "ref": "73cb9245-97f1-406f-94a7-13f0f5fb2c89",
          "length": 243,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bd4ef6f4-a2f9-466f-8dc1-9326ab991c00"
        },
        "item": {
          "id": "63619a05-f7f2-4741-83ce-143a6a3abe40",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b2e9d2eb-6400-4c83-95f0-8035546adb17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb85b8e-65b8-4979-8780-0a660f5e6c63",
        "cursor": {
          "ref": "04d45caa-ffab-4002-ab0c-825befceb5b2",
          "length": 243,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "10867d25-e6d3-4218-bac1-8739acc1e506"
        },
        "item": {
          "id": "3bb85b8e-65b8-4979-8780-0a660f5e6c63",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "32fa1ca8-46d8-414e-b068-a5ff9a828d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2824c1-81ee-4062-b287-91b1b5eb0cb4",
        "cursor": {
          "ref": "62ef1765-acde-4a7c-ad62-a5442b9fb337",
          "length": 243,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7576e288-8f10-4934-ba3e-5cd21b3456c9"
        },
        "item": {
          "id": "5c2824c1-81ee-4062-b287-91b1b5eb0cb4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4f536657-4160-406f-923b-f874a939c100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ed30a5-46f7-44ed-a8bb-aad3268efa5b",
        "cursor": {
          "ref": "6d4d5e20-c5d2-4470-8bfb-d94afdce5cc8",
          "length": 243,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c9d78657-5b85-4796-9e65-5ded84e0da45"
        },
        "item": {
          "id": "83ed30a5-46f7-44ed-a8bb-aad3268efa5b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d9c7b171-ea6d-473c-bb35-147fe5248579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 526,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c33b98-9bdf-429d-9727-466ba7e8d6cc",
        "cursor": {
          "ref": "6d019c2c-90de-4c1f-a7d3-4f8d76fc4ab0",
          "length": 243,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3aec20cb-4476-459f-a040-0cc76f4a7b2b"
        },
        "item": {
          "id": "07c33b98-9bdf-429d-9727-466ba7e8d6cc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f792cbc6-3bc1-4811-b061-0ac2ce37900b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 907,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645f3d89-c09f-411c-81fb-4127a2d553aa",
        "cursor": {
          "ref": "3d5a091d-d544-4290-b408-caba12ef2fea",
          "length": 243,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "addcffaa-bb70-4961-b8b9-ace5a4c997d2"
        },
        "item": {
          "id": "645f3d89-c09f-411c-81fb-4127a2d553aa",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8338e845-3589-4410-a5fe-f287319b155b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 577,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa8e95b-2417-4f92-b621-ba1dfac0a2e4",
        "cursor": {
          "ref": "386cc20b-5bda-496b-8cf8-127d2ab18312",
          "length": 243,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "256ed7e7-91e1-4dfc-b096-34a8bacc5f46"
        },
        "item": {
          "id": "efa8e95b-2417-4f92-b621-ba1dfac0a2e4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d8830091-2f63-4492-a782-4edabf379b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45da140-506b-466a-a021-d22c21eb5e95",
        "cursor": {
          "ref": "68a2e898-d5b9-437e-981e-16fb58646203",
          "length": 243,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b613d185-cdb7-4145-840f-335ad22c88f3"
        },
        "item": {
          "id": "e45da140-506b-466a-a021-d22c21eb5e95",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e6b928d0-4754-485c-a1df-145fa4914b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 363,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546bb5be-b14a-4dad-9b98-31692c9e905d",
        "cursor": {
          "ref": "78313e6d-44ea-4845-83fd-2a093bd7042b",
          "length": 243,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9c9b1e33-97f3-456b-a942-8655a57885d7"
        },
        "item": {
          "id": "546bb5be-b14a-4dad-9b98-31692c9e905d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "018d3b56-cb2e-42f0-861e-a3c9ffe02f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce4ec05-e58a-4d9c-b5d7-1dd7aae990b7",
        "cursor": {
          "ref": "52d18ac0-5b03-4ba2-9de8-df6ce7112f4b",
          "length": 243,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cc7ad65d-6e09-4cce-a385-1fdbd396e1f2"
        },
        "item": {
          "id": "1ce4ec05-e58a-4d9c-b5d7-1dd7aae990b7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "583ba6f9-028b-4aa9-b4aa-86075dd25372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1086,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f45d46-f1dc-4e7f-8687-94d906e6508f",
        "cursor": {
          "ref": "9316d79d-be4f-4e8b-bc39-8960d5a59c0a",
          "length": 243,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "300c7e62-045a-491a-a944-f1abc69ac971"
        },
        "item": {
          "id": "d2f45d46-f1dc-4e7f-8687-94d906e6508f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "07560db3-a3b0-4cc9-a09f-38e822ce0ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 995,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec9d057-bf94-4b02-accf-a4e0b0fc57e1",
        "cursor": {
          "ref": "2d034331-9e2e-4fce-8256-70ded345c672",
          "length": 243,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "84950601-2a88-4e1b-84c3-5fb96a65d15c"
        },
        "item": {
          "id": "aec9d057-bf94-4b02-accf-a4e0b0fc57e1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1421c950-306d-4e01-a8ac-e7825848b081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24493fe0-cd02-41bb-8b57-6e9339aa4541",
        "cursor": {
          "ref": "167cc37e-f969-423b-9bdb-432c5450dd1a",
          "length": 243,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ec08eb4c-0bf3-4c70-b4e1-09d409189d7c"
        },
        "item": {
          "id": "24493fe0-cd02-41bb-8b57-6e9339aa4541",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a73e2943-ac4e-4d77-b943-5b8ceb5b549e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0ae1ff-3e62-4046-a895-edcb9093956d",
        "cursor": {
          "ref": "df9fc723-663d-4fd1-a6d4-a9efa0029909",
          "length": 243,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "008033ed-cef3-4881-8113-ba9741c1a739"
        },
        "item": {
          "id": "ea0ae1ff-3e62-4046-a895-edcb9093956d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b4eaf3a1-d0ba-4e07-82d1-7273ca33e018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e768c3-7bb5-44c0-bd36-0de7d2b4da62",
        "cursor": {
          "ref": "01fdabab-91c2-4368-be1a-36667752e33b",
          "length": 243,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9e87e229-9a07-4aec-a1e3-b2dbb4c1b631"
        },
        "item": {
          "id": "e8e768c3-7bb5-44c0-bd36-0de7d2b4da62",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0ec86294-705c-41df-b9ac-7461a7698ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 709,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfca7633-2c1a-4fdc-821d-92141536b97d",
        "cursor": {
          "ref": "ca60cf5b-4aac-466e-8e12-698c52f51480",
          "length": 243,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "09805a09-3fe2-4847-8f84-3761c03ce208"
        },
        "item": {
          "id": "bfca7633-2c1a-4fdc-821d-92141536b97d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dbc1d582-716f-49e8-bec8-ee6eaaaa9817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff141577-e118-4e8a-9ce0-bfd302bab099",
        "cursor": {
          "ref": "48c3a6ea-65f9-4f96-a9b0-6eaae8c48b03",
          "length": 243,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7a4bb51f-ef68-4167-9d38-35f7ee749daf"
        },
        "item": {
          "id": "ff141577-e118-4e8a-9ce0-bfd302bab099",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b7801eef-579e-4e67-8491-af78208175b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2009fc-ee48-49ce-aeda-0d3cdc055fbc",
        "cursor": {
          "ref": "9bbf1a44-e71f-4bc0-b9e3-77ff656a5ea9",
          "length": 243,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "46ac94c5-736a-4490-959b-8e6470263d58"
        },
        "item": {
          "id": "0d2009fc-ee48-49ce-aeda-0d3cdc055fbc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "02518fcf-5eb4-4e70-a904-5c416e0b1aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee966ce-cf18-4478-aa41-d8b25e8e84da",
        "cursor": {
          "ref": "d7f0adc9-40db-4b70-806f-2b6ce42a5f4a",
          "length": 243,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "132d0819-ff25-4b71-b1d9-2662b87b021f"
        },
        "item": {
          "id": "fee966ce-cf18-4478-aa41-d8b25e8e84da",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "685b505a-a8fa-4490-b130-f66d08c1c235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a6a08f-e960-4216-b7f2-47dd451139b9",
        "cursor": {
          "ref": "863ed3b4-0140-4ebb-955e-39a645ad3afb",
          "length": 243,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b803bcfe-57a8-4aed-91f2-75798a69454f"
        },
        "item": {
          "id": "10a6a08f-e960-4216-b7f2-47dd451139b9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6fcce3e0-d5a5-4117-9651-251b86da1723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1347,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef278fa7-bf5d-46c3-af9c-33189b425ca9",
        "cursor": {
          "ref": "cdc0f079-ae5b-4f10-b060-b0979363edc4",
          "length": 243,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9112d575-183b-4e43-a865-215bc1fc4e3f"
        },
        "item": {
          "id": "ef278fa7-bf5d-46c3-af9c-33189b425ca9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8d88611f-5f3c-4297-8285-c321b41f4b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b50692b-449e-4b99-8d3e-fe424baef7a2",
        "cursor": {
          "ref": "fc28271a-c0b2-465a-bd9f-82b98b9cc581",
          "length": 243,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "81187350-a323-40ee-b8e2-d0e9116544c0"
        },
        "item": {
          "id": "6b50692b-449e-4b99-8d3e-fe424baef7a2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "410679fb-4343-428c-8803-cda59c964c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee28bece-ef9a-49e8-9cea-2c49ddb6c377",
        "cursor": {
          "ref": "4fff02f8-9225-4856-9966-8e31e83c5d91",
          "length": 243,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0edd6b7f-4b4e-4d5c-bfe5-7eb685cff002"
        },
        "item": {
          "id": "ee28bece-ef9a-49e8-9cea-2c49ddb6c377",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "122ebd42-4382-4db8-8128-2ac1fab5ba3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5deec587-8e7d-4770-aaf0-d3d57c1d207b",
        "cursor": {
          "ref": "b3d155c2-d27d-429a-8b13-16f85d7d7461",
          "length": 243,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ded0bfbd-694b-4e21-8f68-bdac28b926f7"
        },
        "item": {
          "id": "5deec587-8e7d-4770-aaf0-d3d57c1d207b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "49cbc7aa-33cf-46c2-a324-b85848ead8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96df6150-2073-49df-b7cf-430b1f8fdeca",
        "cursor": {
          "ref": "980aeccc-65db-43f0-9a0c-b21efdc84a4e",
          "length": 243,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b38af998-7ee3-41e1-8353-b64c4004da87"
        },
        "item": {
          "id": "96df6150-2073-49df-b7cf-430b1f8fdeca",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ddf582f9-d9fd-4d28-b878-8b32b867c149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea98ab7-9bdd-4dd3-9500-4aa2957bca4a",
        "cursor": {
          "ref": "039fa98e-4e78-4094-81c9-1e357fdaec90",
          "length": 243,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7b2bfbd8-7459-4c58-a7dd-4495e7217199"
        },
        "item": {
          "id": "3ea98ab7-9bdd-4dd3-9500-4aa2957bca4a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "753b1457-a959-4d20-b5b5-857cdd651602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 370,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89eb2cc0-4183-4184-9b5a-a5e358af7009",
        "cursor": {
          "ref": "7ec5016d-a235-4d99-b645-cf0b7c929b65",
          "length": 243,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ec912cd5-17b4-409e-8b3f-65064b52b23a"
        },
        "item": {
          "id": "89eb2cc0-4183-4184-9b5a-a5e358af7009",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b878c697-1f78-4d1d-b170-8bdcc40bc946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6dbd52-f472-49fa-8ad9-d98bd4271ca5",
        "cursor": {
          "ref": "449e199d-5961-44bc-b9d1-2d3f7a7ae943",
          "length": 243,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6610cdfe-6fbf-44bf-bac2-5453cfecbdd4"
        },
        "item": {
          "id": "fb6dbd52-f472-49fa-8ad9-d98bd4271ca5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "60849ae7-683e-4c76-8663-fd60a1d5582c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e118c780-d63d-4aaf-aff6-fa6afa2df9f3",
        "cursor": {
          "ref": "223d0e60-a2f1-485f-a396-1e9e8476fc7c",
          "length": 243,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c3157274-48f9-4fc2-987e-6f7251831db2"
        },
        "item": {
          "id": "e118c780-d63d-4aaf-aff6-fa6afa2df9f3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "de73f096-4ac3-463e-8ac6-76b227d5d082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be499d1d-1648-4fc9-8fed-4eda77403d3f",
        "cursor": {
          "ref": "778a1904-8037-4f38-8c4d-cd39819fd7a6",
          "length": 243,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7f4d0dbb-4493-4aa2-a160-ab97934a0cb5"
        },
        "item": {
          "id": "be499d1d-1648-4fc9-8fed-4eda77403d3f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3791f23d-2677-42ab-96f2-b45ab9b97321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 382,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a593bf-24fc-416f-9dfc-07484a655353",
        "cursor": {
          "ref": "96b28f22-6c38-4bc1-9c67-a6e94285c199",
          "length": 243,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "afb23931-0dc4-4be6-b298-9c3b7f853626"
        },
        "item": {
          "id": "41a593bf-24fc-416f-9dfc-07484a655353",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "97b1e50b-07f8-4c8b-b294-231944c140e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06506843-bb37-4b6c-a0d6-641b10ba7754",
        "cursor": {
          "ref": "fb9624bd-0082-40a6-9df9-8daf7d1422ec",
          "length": 243,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "11af2373-3350-4bc9-aec4-c8480a68db73"
        },
        "item": {
          "id": "06506843-bb37-4b6c-a0d6-641b10ba7754",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c908e558-e0c6-4022-bed2-cd42e2821e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a0cd4e-6a8d-4944-8b20-0da12d2f1786",
        "cursor": {
          "ref": "957553a1-f756-4036-84e8-030325c29bf7",
          "length": 243,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "16feb79a-69d9-4ba2-84d9-f8b6a0aa4c64"
        },
        "item": {
          "id": "f0a0cd4e-6a8d-4944-8b20-0da12d2f1786",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b7b4ab33-5864-4e54-9d1d-45038abcdb61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41159caf-c46a-492b-a009-0f87d52a8c99",
        "cursor": {
          "ref": "acd11e32-224a-42d3-a942-faef1d683f95",
          "length": 243,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8085e70d-ea82-4931-9bd0-2024442cbef9"
        },
        "item": {
          "id": "41159caf-c46a-492b-a009-0f87d52a8c99",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "dfdcc685-d624-4472-9b7a-5506c98ed61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b446f5-b94b-4c2c-bec9-cc889b5bff65",
        "cursor": {
          "ref": "91998e07-12d8-4f15-b95c-e4637788a475",
          "length": 243,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "60915e3a-2445-4ab0-9915-c413823cf69a"
        },
        "item": {
          "id": "31b446f5-b94b-4c2c-bec9-cc889b5bff65",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "74cfb091-6a69-4be8-b9f1-a9b5b5e6a068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a960342-1bb8-4e8d-aca6-597bc2cb4e11",
        "cursor": {
          "ref": "f2ea1f42-193b-4498-a525-c8bc64127659",
          "length": 243,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "05f39ceb-5792-4482-b873-fff664cc9f84"
        },
        "item": {
          "id": "3a960342-1bb8-4e8d-aca6-597bc2cb4e11",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e9745138-155b-496c-9903-5415de920468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c8abed-e9b2-4cb7-87d2-b241c2047034",
        "cursor": {
          "ref": "178486a3-2847-4fd2-837c-a9c57355cdb3",
          "length": 243,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e5b8af6c-68a7-4646-8554-7c85e353bd4a"
        },
        "item": {
          "id": "63c8abed-e9b2-4cb7-87d2-b241c2047034",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cfb1268d-5fe0-42b4-9cd6-966313d1478e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96137d1-8b7f-4268-86e6-194b6316c70d",
        "cursor": {
          "ref": "32c17bf7-f2d9-4cbf-8dac-d89debd1ecd4",
          "length": 243,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "44b4fda0-b268-42eb-bdb4-ab66cd9f5c7e"
        },
        "item": {
          "id": "a96137d1-8b7f-4268-86e6-194b6316c70d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "198e5cc7-125b-4e09-a95c-5ec8695afefe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b036e554-be74-46b8-aa75-2c2d3eb7d6bc",
        "cursor": {
          "ref": "0b7cee54-851f-4549-bc97-cc9134687387",
          "length": 243,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e247d418-5be7-4b24-8114-f2c998aae8de"
        },
        "item": {
          "id": "b036e554-be74-46b8-aa75-2c2d3eb7d6bc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "15cf66da-9827-4a8a-84f4-516aec5aa8c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef76a4cf-23a5-4513-acdf-0fc547f5d6fa",
        "cursor": {
          "ref": "7a3f0a34-425e-4910-a44b-77c4f2aab87f",
          "length": 243,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "37c0b904-a92a-48c3-9854-12e25ef224cc"
        },
        "item": {
          "id": "ef76a4cf-23a5-4513-acdf-0fc547f5d6fa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a5815307-68ad-485a-8c28-17cb1459deb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55d0519-4863-4d25-b93e-3071ac5d909d",
        "cursor": {
          "ref": "7f001ae0-f155-46df-9ece-5c1a83e1f7ed",
          "length": 243,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1fe86e1c-bea4-4521-8116-b2979b563928"
        },
        "item": {
          "id": "e55d0519-4863-4d25-b93e-3071ac5d909d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3efb4151-a88d-4ad6-b28e-f16e11fe2ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d387e56a-4c68-4000-9f4b-24935fcfb574",
        "cursor": {
          "ref": "736b0afd-7cde-4e19-859b-b315f4b62368",
          "length": 243,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "177aeb53-ceda-47fa-895d-1fee5b374e73"
        },
        "item": {
          "id": "d387e56a-4c68-4000-9f4b-24935fcfb574",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e239a6c2-3c4e-43fe-82b2-22193ec05eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc52cefc-54b6-4fb8-8664-a75d124c837c",
        "cursor": {
          "ref": "4d2125ce-0a44-444f-9fdc-79cf4fda2a8c",
          "length": 243,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "75d9e206-6d12-48eb-8a36-2f30683bafe2"
        },
        "item": {
          "id": "cc52cefc-54b6-4fb8-8664-a75d124c837c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "eb76c076-f6bf-42f3-ab36-53baa256007e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c895c1d-ed13-4929-bb54-50a553fa065b",
        "cursor": {
          "ref": "e37afc0d-fd47-44e5-a824-ffd42a2ab223",
          "length": 243,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4dfe7504-b409-4deb-b2a7-5824b64a8339"
        },
        "item": {
          "id": "5c895c1d-ed13-4929-bb54-50a553fa065b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f346ae75-449a-4b15-b99e-dd9c5391f8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4be1c3-ed19-4b89-b94a-d3f280d458e6",
        "cursor": {
          "ref": "6ec822c8-d3f5-43ca-8afa-0b09b870d4c1",
          "length": 243,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d8b3beb7-0a28-4fff-adc1-23bdf9638a82"
        },
        "item": {
          "id": "4e4be1c3-ed19-4b89-b94a-d3f280d458e6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b0f43d43-f525-4e65-b7d6-16ef6371d06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1243599-bd64-4fcc-8d26-5fd2f18ec29c",
        "cursor": {
          "ref": "459fba51-2d12-447c-a8af-178ef2d90641",
          "length": 243,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "383eb8f4-23df-42d4-9427-fc61548bfb4e"
        },
        "item": {
          "id": "a1243599-bd64-4fcc-8d26-5fd2f18ec29c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f71f6ec6-f3bd-4c2e-bc96-9ea789956eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad8e158-875b-445e-9a59-23bd49eaec87",
        "cursor": {
          "ref": "1a262b8f-a19e-4fcb-a7aa-11f04c31d753",
          "length": 243,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "67146b61-ff0e-4cdc-ba8d-42ef86cd3c47"
        },
        "item": {
          "id": "9ad8e158-875b-445e-9a59-23bd49eaec87",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "91644c5d-5a7d-4eba-8a5d-1826e66c0755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb33415-adc4-4ceb-8b36-f54fbd8354ab",
        "cursor": {
          "ref": "ed19f7c8-8a20-45fa-a872-547b4ceef8fa",
          "length": 243,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9cbab9ec-3c51-461e-b242-a7b63030f25a"
        },
        "item": {
          "id": "cfb33415-adc4-4ceb-8b36-f54fbd8354ab",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "de67d701-ac8d-4230-8d72-1072be0359a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f909ff26-7bd3-4e3e-b38a-19b3e27b5969",
        "cursor": {
          "ref": "d3e05888-9561-4024-a21c-c95bb0fec6b5",
          "length": 243,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f210566a-a4b8-4eb0-b35e-192148868aea"
        },
        "item": {
          "id": "f909ff26-7bd3-4e3e-b38a-19b3e27b5969",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "77b5c805-6421-43ba-b713-ab6a4d50c527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa39d604-6a26-4579-bff2-92b6551858b0",
        "cursor": {
          "ref": "603bfc0b-dee4-4624-9940-615c9fa6be5d",
          "length": 243,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "03b6238b-514a-4330-ae7e-ee0a2d2fc997"
        },
        "item": {
          "id": "aa39d604-6a26-4579-bff2-92b6551858b0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6c388f19-5381-4eb7-a43b-c79d37014f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e233e64-2d26-4bc7-9ab5-594fd810889b",
        "cursor": {
          "ref": "9e3c62a2-d451-4a17-9bba-79b0838cfe8b",
          "length": 243,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6801d0ae-e625-4306-afe9-191b6ec9f933"
        },
        "item": {
          "id": "1e233e64-2d26-4bc7-9ab5-594fd810889b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fbee4607-30aa-4725-acc0-b7f998969d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33da8e1c-233a-4636-b9b2-3e7414e0b2a8",
        "cursor": {
          "ref": "c2993b59-b377-4277-8a2e-053380084972",
          "length": 243,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5b6c8240-a258-4e20-bf74-dd99a90080f1"
        },
        "item": {
          "id": "33da8e1c-233a-4636-b9b2-3e7414e0b2a8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f5b7b9d5-454c-4286-9080-e3f825389e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ced5be6-6b5a-4c52-b3bc-5dacf539dc04",
        "cursor": {
          "ref": "ec0d09dd-92f5-46a4-bc12-4fde2a2a80c5",
          "length": 243,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0d6fa2ca-ed8e-4e15-8a23-12145b915047"
        },
        "item": {
          "id": "7ced5be6-6b5a-4c52-b3bc-5dacf539dc04",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7388ecb4-997e-4ed0-b6fb-3f284bb161fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c162198e-9e84-47f6-a2e0-49ba043e6249",
        "cursor": {
          "ref": "4a3f5b97-710f-453f-b713-f29b8130ce69",
          "length": 243,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9e95a040-5d50-4790-83bd-a14298f5073f"
        },
        "item": {
          "id": "c162198e-9e84-47f6-a2e0-49ba043e6249",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "992d34aa-3ec8-4f03-bf57-b97658312e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60d57b1-d7d0-47ba-8708-eff185ba2b02",
        "cursor": {
          "ref": "19c5a275-decc-48ad-ad54-793984438c02",
          "length": 243,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ff24a06a-8a7d-4dcb-bf40-70126d891880"
        },
        "item": {
          "id": "f60d57b1-d7d0-47ba-8708-eff185ba2b02",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "20eee2f6-04b0-4bd3-a12e-7189ae44d9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd78c06-a3f7-47d0-b02f-17c1f2fdd503",
        "cursor": {
          "ref": "86b8df06-f521-4d2a-a3cf-a06b4a257394",
          "length": 243,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3b09b22f-bd6f-4915-becd-975be457c935"
        },
        "item": {
          "id": "9fd78c06-a3f7-47d0-b02f-17c1f2fdd503",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1db4a8e3-558f-484f-b01b-e1860ac6fbce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ac1465-5030-4c66-a57b-601e26358530",
        "cursor": {
          "ref": "266d382b-e3c2-4bda-9cd4-97ad13f37b88",
          "length": 243,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "aa0f0e01-0186-4e7d-9bab-7325f0ac8327"
        },
        "item": {
          "id": "34ac1465-5030-4c66-a57b-601e26358530",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0155ee5d-e7fa-4cbb-8a2c-4a09483a8bd0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3ca572-3270-449a-90ce-bf0bcf7bcec9",
        "cursor": {
          "ref": "6a47e558-c5e2-41a2-8b33-e244bd470e78",
          "length": 243,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f16ca35c-6965-4f2b-9c9e-d73a1c1afbf5"
        },
        "item": {
          "id": "ef3ca572-3270-449a-90ce-bf0bcf7bcec9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4633f770-6987-431a-b9cc-3a31522519f0",
          "status": "OK",
          "code": 200,
          "responseTime": 1103,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302a365b-aaf3-4cd9-989d-54e087c1b033",
        "cursor": {
          "ref": "bf522c72-6112-4662-be06-8f7bab4d0028",
          "length": 243,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "135086c0-be39-4c86-8baa-24f64fc88f0d"
        },
        "item": {
          "id": "302a365b-aaf3-4cd9-989d-54e087c1b033",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "ceb73323-46de-4e70-bc53-3a72a7cfed83",
          "status": "OK",
          "code": 200,
          "responseTime": 1164,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df29a1d-e629-4732-8e30-3ac3d3cfd068",
        "cursor": {
          "ref": "97769620-98a2-40e7-9687-197f2357cc67",
          "length": 243,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1b7eecfc-b446-48a2-87d9-fcfe6def30a5"
        },
        "item": {
          "id": "6df29a1d-e629-4732-8e30-3ac3d3cfd068",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ba4e31db-7abb-472d-859e-e7cceff8fd94",
          "status": "OK",
          "code": 200,
          "responseTime": 1460,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a399404a-6b6e-4a26-99cb-0eb3fb1e7958",
        "cursor": {
          "ref": "5d18a4a6-ba5c-4171-9285-93a13a00fb1d",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c77888ee-bbc8-4da5-a1bb-343fee7d452a"
        },
        "item": {
          "id": "a399404a-6b6e-4a26-99cb-0eb3fb1e7958",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1e89a8c9-879a-4e64-932f-5faf794abf61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 136,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a399404a-6b6e-4a26-99cb-0eb3fb1e7958",
        "cursor": {
          "ref": "5d18a4a6-ba5c-4171-9285-93a13a00fb1d",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c77888ee-bbc8-4da5-a1bb-343fee7d452a"
        },
        "item": {
          "id": "a399404a-6b6e-4a26-99cb-0eb3fb1e7958",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1e89a8c9-879a-4e64-932f-5faf794abf61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 136,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a399404a-6b6e-4a26-99cb-0eb3fb1e7958",
        "cursor": {
          "ref": "5d18a4a6-ba5c-4171-9285-93a13a00fb1d",
          "length": 243,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c77888ee-bbc8-4da5-a1bb-343fee7d452a"
        },
        "item": {
          "id": "a399404a-6b6e-4a26-99cb-0eb3fb1e7958",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1e89a8c9-879a-4e64-932f-5faf794abf61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 136,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c111b9-87ca-47bd-ac43-62bac198c960",
        "cursor": {
          "ref": "393ced3b-bd63-4df9-a9da-7e961f3a3819",
          "length": 243,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9fe8545c-48ca-4b5c-b875-c9250a4d1686"
        },
        "item": {
          "id": "71c111b9-87ca-47bd-ac43-62bac198c960",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9dad66b4-d4a4-474d-bc79-b3008bba29bb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 74,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d217ce-e91c-49e2-8633-bb4db505b03b",
        "cursor": {
          "ref": "a80b150c-0671-4221-91e5-99b552bbe8aa",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d7c087c7-c54a-471e-8ce9-5ae214894fa2"
        },
        "item": {
          "id": "34d217ce-e91c-49e2-8633-bb4db505b03b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "43aa7601-70d5-42ea-803e-02ce76f47665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "34d217ce-e91c-49e2-8633-bb4db505b03b",
        "cursor": {
          "ref": "a80b150c-0671-4221-91e5-99b552bbe8aa",
          "length": 243,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d7c087c7-c54a-471e-8ce9-5ae214894fa2"
        },
        "item": {
          "id": "34d217ce-e91c-49e2-8633-bb4db505b03b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "43aa7601-70d5-42ea-803e-02ce76f47665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b5d1ab88-fa73-4f74-aa17-cf9dbb30b700",
        "cursor": {
          "ref": "0d5b796c-7416-4fa9-80e3-32e78eac9a42",
          "length": 243,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "652fe644-3a6d-4664-9135-7521c3bc73d0"
        },
        "item": {
          "id": "b5d1ab88-fa73-4f74-aa17-cf9dbb30b700",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "66a5b3a4-d674-4041-8c2d-c74b70a7c66c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a0822467-6123-4e54-9a7b-3db92be4abc6",
        "cursor": {
          "ref": "b959853f-42a8-4d50-a787-248a3710d68d",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "92e30b04-13c2-4680-a4ad-938195967e31"
        },
        "item": {
          "id": "a0822467-6123-4e54-9a7b-3db92be4abc6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9fced5f2-659c-47ec-9c0e-1bf182e20f6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 135,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0822467-6123-4e54-9a7b-3db92be4abc6",
        "cursor": {
          "ref": "b959853f-42a8-4d50-a787-248a3710d68d",
          "length": 243,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "92e30b04-13c2-4680-a4ad-938195967e31"
        },
        "item": {
          "id": "a0822467-6123-4e54-9a7b-3db92be4abc6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9fced5f2-659c-47ec-9c0e-1bf182e20f6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 135,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3347f278-e7a2-4066-9f12-44fddcd2e33d",
        "cursor": {
          "ref": "3088bf8f-3a55-472b-a67a-c914428d3982",
          "length": 243,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2314a05d-11ec-4ce9-9a85-8babfce9ae98"
        },
        "item": {
          "id": "3347f278-e7a2-4066-9f12-44fddcd2e33d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "92dc1e68-f599-462c-ba7a-b73a32d3ba0a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 101,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}