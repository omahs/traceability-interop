{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ec702480-c92b-44c6-aa6b-d665fb253d22",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e73676a6-3a41-4d24-b243-905323f1e1d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8c669d7c-8b01-449f-9020-60548fa44918",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "796a8ad4-d3a8-4f28-bb20-192adbadc648",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad9d5254-c912-40c3-836f-a3c900dd16de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "24fb71af-3350-4230-be7d-8d5ef3da35d4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3bc68eb7-f85a-4b88-8728-ab8662c9e838",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0ddff87-975a-4051-b308-86210f01af15",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "28062ae5-cf5d-47f9-9f7c-862906d4de07",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290bbe79-cbf7-47e7-8db7-e97ee72df294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "421c0033-d3f6-4170-87b6-c681143bf681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb3c1aa-8728-4fc3-8187-899216742d2a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3809c5-43d6-47d8-ad52-5ac897dfd1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a14a954-d6e0-4ccf-bc73-7900901d754f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0992336a-bfc1-4026-a6b8-5228f90d828f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b13ee94-966a-4ce8-b7f4-ca6bacc4f70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eabe9b39-4042-45c3-b91f-b04bdcdf2518"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "44a131cb-901b-4b1b-a479-cb89ab72515d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31e4c75d-1318-45e0-8eb5-13ea32e2cab1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eec83dc-bf1b-436b-b0e3-c5ee524e5734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e4c6fea-4925-422e-a043-50a5351c10f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1074ee9b-438c-4e9a-9d57-4d82c3e5ffb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794b0395-c7d6-4a9d-8243-668a04ec1ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df485d4-1b97-471e-ad96-8d2c4f258b49",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14734ddd-ffe8-4126-961c-2669fda7b5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa776daa-798c-4c09-a6f6-e0de2f6fbd05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520cc1e4-982a-4ee1-b968-1a05811cc63c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c186cdf4-add1-4210-ab76-e7ff9b8e8725"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "83eba944-5ca1-4f88-af8c-79cae312d18b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "37732e54-6fdf-436a-a345-9fb694be89d1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2532faaf-85dc-46c7-bcb6-b6a71b9e65fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "74e89e78-6b6f-47df-a03f-58ade3f3690a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cdacb91-13c8-4a56-8f7d-d124c39abdea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4b0f8165-f3a5-4d52-841f-5b2ebf99d0d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "547e707a-9736-4bcd-89b1-0222c3b1662c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "953565a4-078a-4821-a6bd-e197bca65a0f"
            }
          }
        ]
      },
      {
        "id": "a621eb8c-550a-48e2-a0b2-f2a8c242a896",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "80a52428-4e63-42b3-ae53-9032dbf58e34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b0457c3-54fd-4665-b87e-34157a8211c0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8e386633-242b-4130-9428-11d9ecf60d57",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d02c23-ad4f-4ef1-9124-1f6a08384d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e17bec7-0cc9-48b0-89cc-d687d22da57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8676f81d-7bd1-4f0c-a24d-ea77c37624a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad0a9b89-bf42-42ef-b376-7cb53c762e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21544fea-7ba4-4c4b-bb7a-3b4d771ef44e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18298aae-d843-4fe4-9ceb-a2abc12097a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c15414c-aa8f-4095-856b-d6a7cafa31e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667b684f-4255-45d1-a20b-63fb7a25c10f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "436d94eb-f7da-4d44-a8f4-c6b79c611c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416d0ba1-f747-4b45-b0f7-47c65bbe2011",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118b7f9e-f754-437f-85b0-0ad0db1c1bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84cc50de-550c-4717-8988-dbda906bc6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ec9424-5c42-4271-899a-d56c645c12c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbe8814e-3032-493d-9a18-795d22669177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f48674-7cfc-4719-a3dd-cd20eed7584c",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5847e94b-ef02-4746-be47-1cb3f5eb98be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3ce679-9793-42d6-8fdd-6ace67fb2dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f5fa43-7699-49db-ae0c-1b66aa5b7b7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b6000d6-da11-4a8a-97fd-d2e67cdee986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ea1d07-1d38-4125-92e4-02478463c941",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b564ccf5-37b5-46e0-a672-99924f314194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48027f14-a10f-429f-886f-78decc8a6b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750ca729-beb9-4daa-875c-77b2bd888afd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37a84bf0-64bf-4a4b-8a45-d890200fe36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c7c7c3-d500-45b2-ab00-2ad5ae87f410",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2141a558-4f46-4362-9b44-56d25b65acd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2b4bac-6745-41e8-95e5-2c79b2b0f07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed957ab0-3712-494c-b3a7-05b17f652124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b59edfa-0b2f-4803-9753-902d0a76933e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037d4ab8-7d70-4bd4-8ed7-9b348a72be94",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ddffcc-919a-46f8-8bc9-1eab0754b14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9add49-2a75-40db-b380-01bb3386a799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679252e9-b487-44e8-9020-3ae78c0162fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "907064f5-57b6-469f-a629-3681195265df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c297ef5b-32a0-4df7-b13b-426822866881",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bd9a2d-f2e3-494e-92f1-f6cc5d4bd30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095e8bd3-e868-480f-9644-b008237569eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae7dc7f-bfea-4333-b28d-ca66bd2cad42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78b58dde-7fc2-4e13-99aa-e283b41c92c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4f80c7-407f-4e09-a964-62d588fb97bb",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5417c77-6ed1-482d-82c1-b0f850b86552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056231d9-c7b1-421f-8afd-84518e5152ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe1469f-36d7-42df-9eac-6d8a971f45ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6cbe54b-81a0-4654-bd1b-e357ae57d2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5191a78-10cb-4652-a039-a4c8f92be934",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cad0e5-0c43-460f-a547-437026bd2314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa6e9be-066b-4209-98dc-45b41d5f38a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f422f86-76b9-4a22-b8ae-655cf18bd310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "648c94f9-d480-4126-bf80-89ef6f827a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eac9d55-9e85-4ec4-a9de-041b9ec0155c",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b973c8-c180-4f1e-b02d-b42584251470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e883ac-a143-4cce-9e3c-e316c36934fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b64714a-3e23-4c3b-904c-e907db5b5e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "f9cc049b-907c-4175-86f9-901f68f18093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3731f67-bca7-41c0-8e03-65a1dad384cb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac14476e-017e-42d1-88f3-f8d9a8b005e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7512bc-603f-4815-bd00-8326bacb9395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92ead58-591a-4ecd-b2f7-8aa57456ff11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "612d1839-927c-4531-8190-edf3c742b940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3caee960-d36d-496d-8cfb-666344dd2961",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012d9354-8509-4d2d-bd03-0370158961ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2f3062-d95c-4855-b88e-42cf67674eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb513e97-18c1-481c-bff3-9aa9e3d42617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87cb059f-b268-4281-b90d-6265b59738ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adf97aa-30d8-4f94-bf0b-ab6963b8dc7f",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf60522-d213-4a24-8d47-3778f2c98344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd0dd56-9179-41b2-931a-f0ab6aa6480c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8261f51e-4826-4c8c-8ede-43cc2e2d84fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b9dfe45-b210-4918-b6f6-3149dc6e72c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ba0511-cef2-45e3-a0b2-d33fd0914e07",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032e5675-7e77-4af0-906b-e614d6b71326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e39ccc3-d65e-4109-bbdb-25b75f39d190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c57d33-164c-4f47-b2c1-45f91b3cbb3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "3a4b67df-18c6-462f-a97a-b2c9a223fb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dac1d86-731b-4bff-8110-e3b2e6aeb21e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad0c2f4-249e-4c11-909a-23058c83cfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d73357-0365-40fc-bbbd-4fd164dd37e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d63694b-b193-417a-b338-db11ea0c6b17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "e7d6d0a2-a7c2-4ba5-bd22-9fba46da99ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c1b24e-7b50-49a6-bcf7-6b8afa16e9ca",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9fabbe-11e4-4fc1-b3c7-f19c2f6c3104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840e9d05-db23-459f-a68f-ad5bde48feba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a9d8df-2d93-41bb-b5b3-2111a38e3dc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c07b48d-625c-4f71-906c-a32dc949b63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2723c9cc-05d5-4679-9db2-2a353a9e4011",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba372378-9c44-40ba-838b-f68bb82d2d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e24638-0eff-4131-9c9c-0fd2994b268a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2cdf9f-6d64-48da-b8e2-96d61819065e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e2ea353-4827-49de-8b96-de27978eed8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedd4518-0181-4f3e-bef6-287a53a9a295",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448ea96b-10b7-4a16-872b-a790df16d7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bd70f6-3e0f-403b-8053-5457873e51b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ef14a8-9a51-4c30-8793-551353a4c4ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6015bcf7-ac60-4ae1-a6e2-ac90f349dec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3afef46-68bd-4c9e-a00d-b87be3429b58",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0410d5e-ee29-44b2-9653-60816d8dac4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3eb1eb-8cc1-4363-89bd-373c41fe1e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538b9442-eb87-4022-9d16-54b2bdf95bfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f45fe05-1661-4577-b649-cd4b67b70b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7b0d61-626f-4ca2-bc1e-d30480617a67",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f3dcf6-287b-4ec3-8409-dca82bcac701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84826e5-d4a6-4c0a-b275-be97ae29e5c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac579753-ff10-4395-9a3a-38d411e7c8e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b4336cc-87de-4c52-adba-7a4414b5b0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccc2748-aaae-4bee-8d4a-8158cc1a8c02",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3139ce8a-6254-4a87-a211-55c3f265551f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcdff62-e1f7-465a-81ff-6428728991a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9322b26-32d4-4e44-9c0a-51fe11aee2ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97ac548f-d121-436a-b8d4-ee4ecc6920f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b445da-d777-4108-9d86-65cc89f1cb3b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fceb6a9f-ffdf-4bc2-abc6-61cc28f176f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e720c9-d784-4293-b90d-d99ebebb0282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591f0011-5ee2-4f3d-a932-0818a0627cc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e32947b-5871-484c-a730-8dbf200b4038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0775de96-16a7-4299-b95c-d7374181af29",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a395ec0e-ac2d-46ed-a6f9-339d33d863d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba6cf5c-cd69-4ca3-94c0-6909885e5f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b272262-8e4b-4427-94de-ea3255e62fa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9466826-fd1b-4483-abb3-4afecb08b286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6219511f-e265-4bee-9eb7-3cf31d081793",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec9bb8b-ce75-4837-9278-65e44567eca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b744d838-61f3-4066-9cd8-b813dcdce77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c772fdb0-a87b-43b4-b751-a1cdcff61939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d67966f-d3b6-4048-97bd-4860415fb639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6383d99-774a-4cc4-96c3-49dd13c6b8c3",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12456bad-df48-4838-8082-0119db30e414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64838e15-bb65-4fdf-9cc6-de7463e5e165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb4e5c3-1f35-4083-ba73-386d4b4851d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50197114-5802-426b-b7d3-55705148340c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64d42e7-2c57-4021-a74f-0e59bd9fee6f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b0636e-d44e-4e4d-adde-57da08fda0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee401cc-3b02-4c7a-a4b7-85e41bb4bbae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4206a0dd-fe6f-404e-ab1b-d382c23ad1d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db2f6248-781c-4029-b840-bb6179c7d22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d48c86-1696-49a7-b81d-1119575524c0",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cf7ad7-b0e7-4c22-b919-dc4ce2d48865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db2aecb-6814-4270-8ccd-e0acb814f4db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27099e4-4fe0-44d0-9ed5-3bb0c1997069",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c5c9028-95eb-4c39-bb4c-536767468ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e36a5c6-33c8-42f6-8486-66add462961c",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea3f7bb-c75d-4935-912b-786f2390af2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971938be-0b66-433b-84f2-24f8a8c84725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a388e3a-fde3-40fe-9d6b-168c9073dbc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63c7d6de-92a7-49b1-ac2a-b23c47ee583b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292ebc00-0f7c-4a8e-b6ef-f010df30bd7d",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2c5658-3ed8-46a6-b532-c9a81994e524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d294a7d-db18-4e12-a25e-651b0e2ad712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1a9be6-090d-49ab-9f84-42ffdd1dad33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3741acb-7d1b-4d8f-9ede-6c1b42538ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df129cb-d1cd-4ed8-885b-a767f4267e65",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5094899-6549-4b16-8b78-72e344f7daf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d6814a76-2ae0-4a70-b6a8-6722b772d5db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e992ca-9156-4298-8c92-1e84ef4fa296",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "916890cc-c70b-4a13-b165-e2cd3de43683"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0129d242-7e2b-4b75-82c4-53b0d89ab680",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33fa5b91-c9ac-44e8-8a04-9f6f43909967",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4923368e-0f57-4249-ba99-f5aa76fcf168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9279265f-4d73-43a1-a220-29ac7f783a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb5d89e-4f74-48b9-8f81-aff70f793ab6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "551e9b64-9722-446e-9a34-4a77db8218e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3b7f47-b6bc-46eb-8e0b-570024b16bd3",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f471ef-a4da-43eb-b214-781137b2872c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f44e41a-34e7-4c9b-bfb5-ce2fc4d2a1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcaf2bce-8c9b-4fde-9216-8c637bd1c302",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9e3901e2-15e8-403b-9973-1fc07a76b76e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "832716c6-4c4b-4f4f-8343-3b589546d98f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac273d78-ec48-440f-acbe-60f2bd4c8fcc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d6d593d-c6fc-419c-867b-b46b60b3b3ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "441fe9e4-4cb4-4e14-a6f3-975539552508"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5dbb1f89-0afc-4133-ab10-a1ccab15bd74",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9f30551-b500-4442-b420-b5dff00b1dc2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "15370c5e-bb1a-4e1e-ab3e-313d9822e317",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "03514a01-1b35-4e6c-8d00-6a78a98dd923"
                }
              }
            ]
          },
          {
            "id": "e450c840-81af-4fe4-8d55-4ac5495f0016",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e6f3dbb-277a-4461-a658-14a63671582d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74e9f829-59b3-4da1-b86a-26c927960e24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8ef069f6-a477-4083-be0c-e9e4e226707c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d4ff853-376e-4bba-bdc1-dcdd813276d3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7ee33908-6aa0-472c-94d9-cb129975b21c"
                    }
                  }
                ]
              },
              {
                "id": "715f94c3-f0d5-426d-ba9f-cc2446747ae0",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abb3d929-1e02-43c2-8de6-658a841ddb48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "99611eab-7961-40f8-ae17-3f0f90e83d27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f78b925-daa1-4e3b-8ed8-7f28dfd33b59",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b73f982f-e7d6-42f4-8b5c-a78986e3153e"
                    }
                  }
                ]
              },
              {
                "id": "490347f2-26bc-461f-866d-f1e1648d196d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a66b0ff1-b8c2-4d41-9793-571df4d62738",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6423b530-0d6a-47f1-a1fa-3d4f2fb895e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4040e648-d197-4375-92cf-ccb675211316",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a7beab8c-1b5b-48c6-97a7-8e831021170f"
                    }
                  }
                ]
              },
              {
                "id": "7bab748a-7f4b-4a73-9719-01f8d539f73f",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f33b6b5-e83c-41ff-86ed-9e399f1b3566",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ebfcce6-1f6c-49d0-ac1b-1825603e0294"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78d5ffe6-5dd0-4ea8-9042-eb8e5c1b102e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5b685ede-0a3e-43a1-bcf6-2903f5cdd558"
                    }
                  }
                ]
              },
              {
                "id": "31c94d70-4a6e-4f67-8420-a4c0aee33378",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "806d126e-d66d-4ea6-802d-b1bbd1f91afa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "d511c78c-4074-4a99-abd4-2182db987b77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a107d154-2c92-4a14-b080-796e654d63a3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "38c7342b-f6a3-4581-a698-0ad9c88e7f98"
                    }
                  }
                ]
              },
              {
                "id": "0f26487e-f829-4e7b-b4c9-c267d4ee8bbb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c569f68d-28b2-41c8-8825-08ece4023464",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1e01722-dd86-4962-9e0a-e2bc2fcaa093"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48319216-67a6-4d8d-93cd-d54f537ab229",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ce8635fc-1160-4a7f-8409-113f81e7ddf9"
                    }
                  }
                ]
              },
              {
                "id": "33cf55e9-9bdc-48c8-908c-071c5b9667e7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acdf975e-a1da-4a61-9bbb-200b5f4b9bde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17cccf00-b592-4a71-ad67-bdc56f51c3ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f504bf3-3bc0-4e1b-89c2-6ed7814d4cdb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "91388230-2b44-4258-8f5d-8acac3390bf2"
                    }
                  }
                ]
              },
              {
                "id": "1f5ace83-b96e-40d3-9983-f00bd036235d",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d2cc38d-9455-4d0e-9551-f37c99fdaff9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7690ab10-9766-4d19-a2dd-4c49c72dee48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48697b61-3f15-425c-92d4-e2c2af3f1d04",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "81a3dcd9-33c3-4633-85a1-42227b52f6c5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8775dccc-f154-4d3b-8f19-ea3006648498",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "333dff93-9b33-49dd-b8b6-a867357fc9fd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aaf1907a-f124-45f5-bdac-d366f0158063",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6fa55fc6-3b34-4438-99d0-5cd2a8404743"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37df14a9-1914-44d8-be1d-617c63da959b",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "0727e07c-93e3-4e66-9828-fd5c9c4c7cd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7cd6b0a0-01c7-4c21-b83f-8563bc23c5ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e87f56d8-53de-47c2-b4c9-20f58b104453"
            }
          }
        ]
      },
      {
        "id": "fe9af6cb-8557-4310-a5a0-25c5327dc026",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "daa04f6d-91d7-4145-9fe8-65be49be5ea3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24f2fa49-638e-4854-9611-85c836346abb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee040834-4e8d-4207-9f9f-5132d087b156",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2941e8-66d6-4246-a435-62313843d81e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19290963-8821-4d27-8639-77e5a4fbe2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb0b222-2d3a-4968-afc3-c15c5b0d1cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5821d6f2-8955-472f-9e65-0bfa8c66f03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637bcd00-6807-4ef3-8311-bf2f9b259c05",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0b62bc-5345-4277-a1fa-fcec14a2a3db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c20ca4d6-5d9e-4606-b9d5-48958ddffb84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab69b79-eab5-413b-92dc-7124f1069757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e93696ef-e84c-4ded-818b-6bb254819880"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0aa98154-e601-45ab-8d13-35a9c2f77691",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9512f700-3150-4600-a6d9-991d0dbfd68f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c05bc06f-540f-4e4f-a505-313ec419d940",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "badacb00-821f-4a5e-893b-b295717ab3ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe687c2b-5e0b-474e-8d46-935ca4c28d3d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "9436e39a-6a66-4a96-a407-998d2c0dac85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5e677f4-e213-48de-9c88-9343eeeac07c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf37e077-8ece-4985-870c-f1e9f86d7c40"
            }
          }
        ]
      },
      {
        "id": "0b13ab3f-5dfd-4a9d-b8a3-c77017f46ff0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4a782a3f-070a-45d5-a4d6-083c1b0a2160",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c597cefc-337a-4aba-bc2d-7f106418c3ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "701a2f71-954b-4440-8f87-dd71b04d63e2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e373261-261b-4bab-b6a7-2c19623bd9de",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "4fd1de5d-a766-4adb-93b8-0a146078ca13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9826128-8238-446c-bdf5-08471aefaec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d51edc3d-08f1-44ac-b4ad-4ee53826b00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1de4783-8758-4dea-9ef2-48e590d3565d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be23e56f-5a71-4f01-a623-adad3db2c606",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "4d6f3ef3-d65f-47cb-85fa-cf1e89f4d293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701d7a17-4715-42a0-ac60-861612713d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5222713-1801-458d-97eb-d2cd4bf60bbe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e070ac54-c0de-48e7-9812-86a017833245",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e42950d-8bb3-499f-b711-64bce8263b2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a900e57-9bf9-4718-8848-3ce488910763",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8e6e06a-c9c5-45c6-a5fa-ebf1bc824071"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb638f02-a430-450b-b094-b70082872792",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "529e824e-9184-459a-801c-6d705e2f442d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9aa81be-7328-4702-b3dd-da4282a4eb9c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e837d1a1-44a9-4793-9f09-f285a4213b72"
            }
          }
        ]
      },
      {
        "id": "c63c0f9d-7f26-4f69-9152-9275f2d2678a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "72b8a8b3-aa9c-4d4b-b6ba-20b613c04db3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea005e26-0b90-404c-aa20-3015c023e8aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c11af85-730f-4407-9347-a2b7f9206069",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c83f119-e53a-4396-ba91-1ad2d4cc3ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6d8f63-ad8d-4bca-a373-b2b479403734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff203e5-69bd-4684-b4bb-fd7576d7195b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66d8822d-f310-4a2b-89de-304854425c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce34231c-ea3b-4c04-a729-f52e49220e99",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395e2ba8-b022-42b1-a4f1-3ecc72f89117",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "28c78b45-2d1c-42b8-a36b-f5d567b34a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab5fd61-99de-4e46-bb09-809418f77740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f55a7d6-9784-4b94-8ded-ed5709a3e198"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79f76f41-a320-4b94-9253-dd23d5889c9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1eef166-ddb5-4c65-bbb4-b02390be9fdd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bd8adfa-c0f9-49df-8116-9af0d81c09db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16f1676c-6bfc-4f33-a585-555549a04427"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51f43c50-6b68-410a-a3fd-b1c525ad0b5d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "7ab6b9da-18c6-4e3a-8e02-082ddcd37f60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "951fad84-8856-4838-bb73-a9f358117607",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "567c4687-5dfe-4902-a046-fcdb99b27ead"
            }
          }
        ]
      },
      {
        "id": "b8eb78a1-86a4-4ec4-a9da-0e816925da08",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "60275fcf-cb39-41fa-a0f3-9cacdd66a421",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e07eb3e-a4e0-4b18-aeac-bbda51f27c1c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "345c25ac-7e9d-4294-b534-ce02ff3fa728",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0c2058-fb34-4f00-b738-cb6f010e3c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3f2378-9919-49f9-9bfe-cafefc6e6c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fed5a3-175c-41aa-ab0d-742e12a2ce98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cca4521-5425-4311-aa4c-1d66a353a0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2ddc19-478d-4cfe-bbee-9f9eb8cf4485",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ea5739-9b65-4316-8ba6-d6a9734e85e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "54f11f4a-a1be-4865-9609-081a64cd618d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6064d3c-de87-454a-81cc-ecdf4a3afa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "012ed3d2-f700-46a5-b753-211e5dfe8c0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04cd73d9-2043-4b38-ba3b-d4f38e95a965",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "741b5e9c-9873-4722-9dd6-7ad5412ba578"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72bd06f7-a9ef-4ead-b756-c44eb439e7ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44ae7c19-3f85-47d0-95c1-a731a307c576"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c35d00bd-cdee-4965-9db0-f9e87a366999",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "6daed516-0b86-4bb1-b404-9dcb743ca8b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f17120d-2f7d-4310-b9b8-575be9429dec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8508338a-0294-4d8b-a96d-a10f30a9918b"
            }
          }
        ]
      },
      {
        "id": "94637a95-d92c-4919-9486-d117abede162",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3b4045c4-ec7b-4535-9cc3-65c6b70c6f6e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fecefde9-a330-4c3c-b574-49eb321f512a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a121fc1a-29f6-479f-8c8e-6160f7de90a0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fb7a78-e814-442a-b837-a0e2b00c5c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3700617b-30fa-44ed-9ec2-3ba3206e1d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "212adfa3-35fb-456d-b2bf-c30a0029e1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b75c833f-bcab-4f51-b0dc-b6cc7afabe86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b20abf-ed89-4aa3-84d7-0701d397e653",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b8cc4b-74fe-4808-8003-930d4f6c0a5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7c840c1a-37a0-4685-904d-9b9e9ae7acf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbcc5612-eb96-4ac8-b891-ba7600da5398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7629d186-3072-49bb-895e-0bb066c2f2db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "874ccaa0-f0fb-4456-8dda-9d83ceddeb66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca33307d-bbb1-4682-a051-c530f1ea5807"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a06d2cbd-aa9b-4b6d-8b83-0dcb28de8b0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95badec2-e6c5-40c5-ac86-b5c844f9bf5f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56aeb6b3-dbbf-471e-bcb5-0f70f026f75a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "b6c17f8a-1f6a-410f-aaf4-6b8a10e4dfbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad89af83-4451-4105-bfcf-47229ab0a24e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38162c56-07b5-4a41-a57b-dd5132022ad3"
            }
          }
        ]
      },
      {
        "id": "b6ce4808-fed6-42ec-bb67-7d4ceea7ec9a",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "07e8b8bc-3943-486d-9155-ea7e56c5f00e",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 98
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.1214953271028,
      "responseMin": 31,
      "responseMax": 303,
      "responseSd": 58.78389223715155,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661129208291,
      "completed": 1661129218753
    },
    "executions": [
      {
        "id": "8c669d7c-8b01-449f-9020-60548fa44918",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7518000b-d7a6-4d60-9103-5bdcf141b077",
          "httpRequestId": "6167d436-107b-44d4-89cb-9fb315072664"
        },
        "item": {
          "id": "8c669d7c-8b01-449f-9020-60548fa44918",
          "name": "did_json"
        },
        "response": {
          "id": "536b8f15-1e72-4f9e-8f2c-7a11bf1c6f7c",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28062ae5-cf5d-47f9-9f7c-862906d4de07",
        "cursor": {
          "ref": "055c1f5b-aa8b-4185-bc3c-4e2749ce14bf",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0004cb16-4620-4853-8d8b-9e198661a6a3"
        },
        "item": {
          "id": "28062ae5-cf5d-47f9-9f7c-862906d4de07",
          "name": "did:invalid"
        },
        "response": {
          "id": "02e01609-6eea-4ad2-a99a-4a24fab2b60e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28062ae5-cf5d-47f9-9f7c-862906d4de07",
        "cursor": {
          "ref": "055c1f5b-aa8b-4185-bc3c-4e2749ce14bf",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0004cb16-4620-4853-8d8b-9e198661a6a3"
        },
        "item": {
          "id": "28062ae5-cf5d-47f9-9f7c-862906d4de07",
          "name": "did:invalid"
        },
        "response": {
          "id": "02e01609-6eea-4ad2-a99a-4a24fab2b60e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb3c1aa-8728-4fc3-8187-899216742d2a",
        "cursor": {
          "ref": "cf390c89-9b7a-4dbe-811e-043d21065168",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9ef7267b-1d1a-49e1-a1f6-a23a02f53c84"
        },
        "item": {
          "id": "1eb3c1aa-8728-4fc3-8187-899216742d2a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "590a3a1f-f5f6-4616-bad4-d918cd6cc02a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 234,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "0992336a-bfc1-4026-a6b8-5228f90d828f",
        "cursor": {
          "ref": "d56a1a17-ce33-4395-b8af-ae568b457f89",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "af8c3454-3883-4f94-b055-b1afacffd6b0"
        },
        "item": {
          "id": "0992336a-bfc1-4026-a6b8-5228f90d828f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "59a3b2d0-eccc-4bdc-b469-dca9b087e108",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "31e4c75d-1318-45e0-8eb5-13ea32e2cab1",
        "cursor": {
          "ref": "2e0105d0-017e-464c-a777-aab66ccb43d3",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fb2f0d9e-fae2-495f-9b21-1e8fe0f82ad7"
        },
        "item": {
          "id": "31e4c75d-1318-45e0-8eb5-13ea32e2cab1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "31ef5ad0-9205-46b7-9c66-b54316ba0329",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "1df485d4-1b97-471e-ad96-8d2c4f258b49",
        "cursor": {
          "ref": "2f717675-f506-457e-9805-d674151a6c22",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8763154c-c5ad-41f8-b5f4-db6521a84faf"
        },
        "item": {
          "id": "1df485d4-1b97-471e-ad96-8d2c4f258b49",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "eaec579c-523b-4689-a9b7-745819281e45",
          "status": "OK",
          "code": 200,
          "responseTime": 286,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "1df485d4-1b97-471e-ad96-8d2c4f258b49",
        "cursor": {
          "ref": "2f717675-f506-457e-9805-d674151a6c22",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8763154c-c5ad-41f8-b5f4-db6521a84faf"
        },
        "item": {
          "id": "1df485d4-1b97-471e-ad96-8d2c4f258b49",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "eaec579c-523b-4689-a9b7-745819281e45",
          "status": "OK",
          "code": 200,
          "responseTime": 286,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "37732e54-6fdf-436a-a345-9fb694be89d1",
        "cursor": {
          "ref": "009d5df2-0e7e-420a-90a9-6330749b9caa",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2dc076f7-ea38-47ba-aa30-a01771590051"
        },
        "item": {
          "id": "37732e54-6fdf-436a-a345-9fb694be89d1",
          "name": "identifiers"
        },
        "response": {
          "id": "91778853-8bc5-49f6-810f-72d9b7d67a94",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e386633-242b-4130-9428-11d9ecf60d57",
        "cursor": {
          "ref": "04684414-52d1-4e15-8bb2-a227c9edcab9",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "71ab0ba3-4bc9-4812-a881-0099d3f217fd"
        },
        "item": {
          "id": "8e386633-242b-4130-9428-11d9ecf60d57",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7044d998-6ad4-446d-bbb3-2004719b2f18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 303,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8e386633-242b-4130-9428-11d9ecf60d57",
        "cursor": {
          "ref": "04684414-52d1-4e15-8bb2-a227c9edcab9",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "71ab0ba3-4bc9-4812-a881-0099d3f217fd"
        },
        "item": {
          "id": "8e386633-242b-4130-9428-11d9ecf60d57",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7044d998-6ad4-446d-bbb3-2004719b2f18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 303,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8e386633-242b-4130-9428-11d9ecf60d57",
        "cursor": {
          "ref": "04684414-52d1-4e15-8bb2-a227c9edcab9",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "71ab0ba3-4bc9-4812-a881-0099d3f217fd"
        },
        "item": {
          "id": "8e386633-242b-4130-9428-11d9ecf60d57",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7044d998-6ad4-446d-bbb3-2004719b2f18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 303,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "21544fea-7ba4-4c4b-bb7a-3b4d771ef44e",
        "cursor": {
          "ref": "43a65a97-10a0-4c22-9739-5dd10a6dcca3",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "922ec2fc-d715-4537-adee-61f7be48a156"
        },
        "item": {
          "id": "21544fea-7ba4-4c4b-bb7a-3b4d771ef44e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "197c6f5a-5d93-4aac-851f-f3dd8c0776d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "21544fea-7ba4-4c4b-bb7a-3b4d771ef44e",
        "cursor": {
          "ref": "43a65a97-10a0-4c22-9739-5dd10a6dcca3",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "922ec2fc-d715-4537-adee-61f7be48a156"
        },
        "item": {
          "id": "21544fea-7ba4-4c4b-bb7a-3b4d771ef44e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "197c6f5a-5d93-4aac-851f-f3dd8c0776d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "416d0ba1-f747-4b45-b0f7-47c65bbe2011",
        "cursor": {
          "ref": "0457c93e-49b5-49e3-bc4a-cff3df299247",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ca0f6619-fab5-42b3-9e43-053f5be969be"
        },
        "item": {
          "id": "416d0ba1-f747-4b45-b0f7-47c65bbe2011",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2a7a8bd8-a012-4f3f-8ab4-295f7251691a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "416d0ba1-f747-4b45-b0f7-47c65bbe2011",
        "cursor": {
          "ref": "0457c93e-49b5-49e3-bc4a-cff3df299247",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ca0f6619-fab5-42b3-9e43-053f5be969be"
        },
        "item": {
          "id": "416d0ba1-f747-4b45-b0f7-47c65bbe2011",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2a7a8bd8-a012-4f3f-8ab4-295f7251691a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "47f48674-7cfc-4719-a3dd-cd20eed7584c",
        "cursor": {
          "ref": "836d873b-9392-4960-a7b0-3163b1c23ed1",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3b5e2e7c-d0ca-4499-a9ab-9577b5a4a404"
        },
        "item": {
          "id": "47f48674-7cfc-4719-a3dd-cd20eed7584c",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "7709b196-ddc5-4ad3-aed6-5a0560ffa997",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "47f48674-7cfc-4719-a3dd-cd20eed7584c",
        "cursor": {
          "ref": "836d873b-9392-4960-a7b0-3163b1c23ed1",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3b5e2e7c-d0ca-4499-a9ab-9577b5a4a404"
        },
        "item": {
          "id": "47f48674-7cfc-4719-a3dd-cd20eed7584c",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "7709b196-ddc5-4ad3-aed6-5a0560ffa997",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "23ea1d07-1d38-4125-92e4-02478463c941",
        "cursor": {
          "ref": "741f8a14-6216-4c05-aa15-8c9f8a22a857",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "67bc2849-095e-4e0f-be2b-4e4259a4200f"
        },
        "item": {
          "id": "23ea1d07-1d38-4125-92e4-02478463c941",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "220d21a0-c133-44f7-8d76-c23b950ff970",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "23ea1d07-1d38-4125-92e4-02478463c941",
        "cursor": {
          "ref": "741f8a14-6216-4c05-aa15-8c9f8a22a857",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "67bc2849-095e-4e0f-be2b-4e4259a4200f"
        },
        "item": {
          "id": "23ea1d07-1d38-4125-92e4-02478463c941",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "220d21a0-c133-44f7-8d76-c23b950ff970",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "98c7c7c3-d500-45b2-ab00-2ad5ae87f410",
        "cursor": {
          "ref": "40dcf170-579f-48c1-84ba-a67f860cf229",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a15bed1c-5a39-4b92-a218-5c99935902d2"
        },
        "item": {
          "id": "98c7c7c3-d500-45b2-ab00-2ad5ae87f410",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "83f24a39-227d-4fd5-b0d2-40fe35256906",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "98c7c7c3-d500-45b2-ab00-2ad5ae87f410",
        "cursor": {
          "ref": "40dcf170-579f-48c1-84ba-a67f860cf229",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a15bed1c-5a39-4b92-a218-5c99935902d2"
        },
        "item": {
          "id": "98c7c7c3-d500-45b2-ab00-2ad5ae87f410",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "83f24a39-227d-4fd5-b0d2-40fe35256906",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "037d4ab8-7d70-4bd4-8ed7-9b348a72be94",
        "cursor": {
          "ref": "594a0f4a-4ac6-4b83-8a36-98201118be12",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e205bd7d-9b78-47e3-a7b9-09fea426531c"
        },
        "item": {
          "id": "037d4ab8-7d70-4bd4-8ed7-9b348a72be94",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "65424a20-bdab-4b0a-8835-fd213e8993d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "037d4ab8-7d70-4bd4-8ed7-9b348a72be94",
        "cursor": {
          "ref": "594a0f4a-4ac6-4b83-8a36-98201118be12",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e205bd7d-9b78-47e3-a7b9-09fea426531c"
        },
        "item": {
          "id": "037d4ab8-7d70-4bd4-8ed7-9b348a72be94",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "65424a20-bdab-4b0a-8835-fd213e8993d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "c297ef5b-32a0-4df7-b13b-426822866881",
        "cursor": {
          "ref": "d57a2ec0-9374-4cac-9c71-efbbef939858",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "04bd6ed2-b290-4543-aace-2570b7b8cce5"
        },
        "item": {
          "id": "c297ef5b-32a0-4df7-b13b-426822866881",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "23faaa39-ecfa-4f0b-9e67-82c80761f29c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "c297ef5b-32a0-4df7-b13b-426822866881",
        "cursor": {
          "ref": "d57a2ec0-9374-4cac-9c71-efbbef939858",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "04bd6ed2-b290-4543-aace-2570b7b8cce5"
        },
        "item": {
          "id": "c297ef5b-32a0-4df7-b13b-426822866881",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "23faaa39-ecfa-4f0b-9e67-82c80761f29c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "4d4f80c7-407f-4e09-a964-62d588fb97bb",
        "cursor": {
          "ref": "d17877ca-460c-48be-90bf-ebba5b8c96f3",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "761ba30c-701a-4060-b765-444c1b67fb90"
        },
        "item": {
          "id": "4d4f80c7-407f-4e09-a964-62d588fb97bb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e24f5c9b-44ba-4fdd-83f9-5fa9a71776ae",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "4d4f80c7-407f-4e09-a964-62d588fb97bb",
        "cursor": {
          "ref": "d17877ca-460c-48be-90bf-ebba5b8c96f3",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "761ba30c-701a-4060-b765-444c1b67fb90"
        },
        "item": {
          "id": "4d4f80c7-407f-4e09-a964-62d588fb97bb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e24f5c9b-44ba-4fdd-83f9-5fa9a71776ae",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e5191a78-10cb-4652-a039-a4c8f92be934",
        "cursor": {
          "ref": "cc844d9d-438b-48ed-b1b8-22867fce817f",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0eee9707-c9eb-4593-a577-df5b316f8c9c"
        },
        "item": {
          "id": "e5191a78-10cb-4652-a039-a4c8f92be934",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "6b459b9b-7a78-4c4f-80c1-00af7cf35a55",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e5191a78-10cb-4652-a039-a4c8f92be934",
        "cursor": {
          "ref": "cc844d9d-438b-48ed-b1b8-22867fce817f",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0eee9707-c9eb-4593-a577-df5b316f8c9c"
        },
        "item": {
          "id": "e5191a78-10cb-4652-a039-a4c8f92be934",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "6b459b9b-7a78-4c4f-80c1-00af7cf35a55",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "0eac9d55-9e85-4ec4-a9de-041b9ec0155c",
        "cursor": {
          "ref": "faf6071b-a559-42e9-84f3-f91ec3f8d807",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "069f8d3b-98f1-4053-bcb0-30b5bdf426e5"
        },
        "item": {
          "id": "0eac9d55-9e85-4ec4-a9de-041b9ec0155c",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6ba2a198-21fc-459e-b060-86526766a433",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "0eac9d55-9e85-4ec4-a9de-041b9ec0155c",
        "cursor": {
          "ref": "faf6071b-a559-42e9-84f3-f91ec3f8d807",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "069f8d3b-98f1-4053-bcb0-30b5bdf426e5"
        },
        "item": {
          "id": "0eac9d55-9e85-4ec4-a9de-041b9ec0155c",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6ba2a198-21fc-459e-b060-86526766a433",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c3731f67-bca7-41c0-8e03-65a1dad384cb",
        "cursor": {
          "ref": "ebb50293-cd84-4932-a10b-a446a653b8c6",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bd22edc3-c14f-435e-abd9-7cb7bac2c489"
        },
        "item": {
          "id": "c3731f67-bca7-41c0-8e03-65a1dad384cb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "eb2967ad-4c3b-468c-8b7d-c392e4fe0dfa",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c3731f67-bca7-41c0-8e03-65a1dad384cb",
        "cursor": {
          "ref": "ebb50293-cd84-4932-a10b-a446a653b8c6",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bd22edc3-c14f-435e-abd9-7cb7bac2c489"
        },
        "item": {
          "id": "c3731f67-bca7-41c0-8e03-65a1dad384cb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "eb2967ad-4c3b-468c-8b7d-c392e4fe0dfa",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "3caee960-d36d-496d-8cfb-666344dd2961",
        "cursor": {
          "ref": "b4342902-cece-4af2-88a9-5770ef733a0c",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "87d3766d-c9ae-4471-8567-942b7e8ce971"
        },
        "item": {
          "id": "3caee960-d36d-496d-8cfb-666344dd2961",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c3240123-83dc-44a2-a0f5-21b01446137e",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "3caee960-d36d-496d-8cfb-666344dd2961",
        "cursor": {
          "ref": "b4342902-cece-4af2-88a9-5770ef733a0c",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "87d3766d-c9ae-4471-8567-942b7e8ce971"
        },
        "item": {
          "id": "3caee960-d36d-496d-8cfb-666344dd2961",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c3240123-83dc-44a2-a0f5-21b01446137e",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2adf97aa-30d8-4f94-bf0b-ab6963b8dc7f",
        "cursor": {
          "ref": "92dc9afd-968a-46c7-8ac1-09cc00b4e11e",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b931b4e7-e053-44ea-9b4f-b5a9db791ae2"
        },
        "item": {
          "id": "2adf97aa-30d8-4f94-bf0b-ab6963b8dc7f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "7c27677e-6565-4630-89ce-a6dde654a8ed",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "2adf97aa-30d8-4f94-bf0b-ab6963b8dc7f",
        "cursor": {
          "ref": "92dc9afd-968a-46c7-8ac1-09cc00b4e11e",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b931b4e7-e053-44ea-9b4f-b5a9db791ae2"
        },
        "item": {
          "id": "2adf97aa-30d8-4f94-bf0b-ab6963b8dc7f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "7c27677e-6565-4630-89ce-a6dde654a8ed",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "51ba0511-cef2-45e3-a0b2-d33fd0914e07",
        "cursor": {
          "ref": "13255a2b-0fee-4e23-b919-899153fc0443",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d99e48d9-7efc-4024-ad70-efac8d1ad77e"
        },
        "item": {
          "id": "51ba0511-cef2-45e3-a0b2-d33fd0914e07",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "2148ad50-bf8f-4e17-9f06-081b51e80047",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "51ba0511-cef2-45e3-a0b2-d33fd0914e07",
        "cursor": {
          "ref": "13255a2b-0fee-4e23-b919-899153fc0443",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d99e48d9-7efc-4024-ad70-efac8d1ad77e"
        },
        "item": {
          "id": "51ba0511-cef2-45e3-a0b2-d33fd0914e07",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "2148ad50-bf8f-4e17-9f06-081b51e80047",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7dac1d86-731b-4bff-8110-e3b2e6aeb21e",
        "cursor": {
          "ref": "8db1ffbd-1164-431f-9973-a5ee7d9fb60f",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eccf60f4-e9e1-479b-b76b-606b7f44aa13"
        },
        "item": {
          "id": "7dac1d86-731b-4bff-8110-e3b2e6aeb21e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f0d18f8b-6dbe-4178-aa79-41fd0109e61f",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "7dac1d86-731b-4bff-8110-e3b2e6aeb21e",
        "cursor": {
          "ref": "8db1ffbd-1164-431f-9973-a5ee7d9fb60f",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eccf60f4-e9e1-479b-b76b-606b7f44aa13"
        },
        "item": {
          "id": "7dac1d86-731b-4bff-8110-e3b2e6aeb21e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f0d18f8b-6dbe-4178-aa79-41fd0109e61f",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d3c1b24e-7b50-49a6-bcf7-6b8afa16e9ca",
        "cursor": {
          "ref": "011fd33a-e948-49ff-9526-83dacb7ec0e9",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a412f03a-2e67-4534-b6a5-2295bb2bcec2"
        },
        "item": {
          "id": "d3c1b24e-7b50-49a6-bcf7-6b8afa16e9ca",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "296ec7ea-0b90-4515-881a-edc2f796a05c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d3c1b24e-7b50-49a6-bcf7-6b8afa16e9ca",
        "cursor": {
          "ref": "011fd33a-e948-49ff-9526-83dacb7ec0e9",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a412f03a-2e67-4534-b6a5-2295bb2bcec2"
        },
        "item": {
          "id": "d3c1b24e-7b50-49a6-bcf7-6b8afa16e9ca",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "296ec7ea-0b90-4515-881a-edc2f796a05c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2723c9cc-05d5-4679-9db2-2a353a9e4011",
        "cursor": {
          "ref": "c689525c-36aa-4da9-b97c-8f3586feef61",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a96bcbbb-cf8f-41f3-925d-57f775d5e400"
        },
        "item": {
          "id": "2723c9cc-05d5-4679-9db2-2a353a9e4011",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "3d09104e-8cd6-4074-a385-b25f408ab266",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "2723c9cc-05d5-4679-9db2-2a353a9e4011",
        "cursor": {
          "ref": "c689525c-36aa-4da9-b97c-8f3586feef61",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a96bcbbb-cf8f-41f3-925d-57f775d5e400"
        },
        "item": {
          "id": "2723c9cc-05d5-4679-9db2-2a353a9e4011",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "3d09104e-8cd6-4074-a385-b25f408ab266",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "cedd4518-0181-4f3e-bef6-287a53a9a295",
        "cursor": {
          "ref": "08c397c7-7bdb-4668-87e0-10bcde3329dd",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "07c7c018-864a-4575-9a8c-415ec736907f"
        },
        "item": {
          "id": "cedd4518-0181-4f3e-bef6-287a53a9a295",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "14c585ca-70e6-4a86-9d29-3ad46f2c1a21",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "cedd4518-0181-4f3e-bef6-287a53a9a295",
        "cursor": {
          "ref": "08c397c7-7bdb-4668-87e0-10bcde3329dd",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "07c7c018-864a-4575-9a8c-415ec736907f"
        },
        "item": {
          "id": "cedd4518-0181-4f3e-bef6-287a53a9a295",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "14c585ca-70e6-4a86-9d29-3ad46f2c1a21",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f3afef46-68bd-4c9e-a00d-b87be3429b58",
        "cursor": {
          "ref": "92e5e34b-c63a-4c2f-9e9f-49d9e9a5cd78",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4b774008-da80-4e89-8922-4df1c22236d4"
        },
        "item": {
          "id": "f3afef46-68bd-4c9e-a00d-b87be3429b58",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a1510b28-f7eb-4cea-aafa-11876bdf00ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "f3afef46-68bd-4c9e-a00d-b87be3429b58",
        "cursor": {
          "ref": "92e5e34b-c63a-4c2f-9e9f-49d9e9a5cd78",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4b774008-da80-4e89-8922-4df1c22236d4"
        },
        "item": {
          "id": "f3afef46-68bd-4c9e-a00d-b87be3429b58",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a1510b28-f7eb-4cea-aafa-11876bdf00ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "1d7b0d61-626f-4ca2-bc1e-d30480617a67",
        "cursor": {
          "ref": "05981c85-90f9-457e-aa60-c53625667bda",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e8ff92a6-8aa1-4dbd-a25b-53ce975c58bc"
        },
        "item": {
          "id": "1d7b0d61-626f-4ca2-bc1e-d30480617a67",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f0315d67-ab8f-48dd-b4e7-ab9aa442851b",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "1d7b0d61-626f-4ca2-bc1e-d30480617a67",
        "cursor": {
          "ref": "05981c85-90f9-457e-aa60-c53625667bda",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e8ff92a6-8aa1-4dbd-a25b-53ce975c58bc"
        },
        "item": {
          "id": "1d7b0d61-626f-4ca2-bc1e-d30480617a67",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f0315d67-ab8f-48dd-b4e7-ab9aa442851b",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "fccc2748-aaae-4bee-8d4a-8158cc1a8c02",
        "cursor": {
          "ref": "efd21778-4e4f-4d75-87ed-636f5ae82629",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0a740e6e-d013-435f-80a2-29088992b766"
        },
        "item": {
          "id": "fccc2748-aaae-4bee-8d4a-8158cc1a8c02",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "193f991a-0aa8-46cb-b287-7eb31f787ffe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "fccc2748-aaae-4bee-8d4a-8158cc1a8c02",
        "cursor": {
          "ref": "efd21778-4e4f-4d75-87ed-636f5ae82629",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0a740e6e-d013-435f-80a2-29088992b766"
        },
        "item": {
          "id": "fccc2748-aaae-4bee-8d4a-8158cc1a8c02",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "193f991a-0aa8-46cb-b287-7eb31f787ffe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "96b445da-d777-4108-9d86-65cc89f1cb3b",
        "cursor": {
          "ref": "4182996b-7ffb-42de-986e-83103f760e73",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "605e0e6f-e9bc-46c2-8e35-ec149c0cb0c5"
        },
        "item": {
          "id": "96b445da-d777-4108-9d86-65cc89f1cb3b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "69d8e761-673f-4c0c-888b-ec59f95583c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "96b445da-d777-4108-9d86-65cc89f1cb3b",
        "cursor": {
          "ref": "4182996b-7ffb-42de-986e-83103f760e73",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "605e0e6f-e9bc-46c2-8e35-ec149c0cb0c5"
        },
        "item": {
          "id": "96b445da-d777-4108-9d86-65cc89f1cb3b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "69d8e761-673f-4c0c-888b-ec59f95583c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "0775de96-16a7-4299-b95c-d7374181af29",
        "cursor": {
          "ref": "f3cfb75b-bee3-4019-8609-82cfde70e989",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "21b8bc75-8baf-441a-a1f8-f5b9ca4730ae"
        },
        "item": {
          "id": "0775de96-16a7-4299-b95c-d7374181af29",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c6e480b6-568e-496d-a55f-cf787f8cf32e",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "0775de96-16a7-4299-b95c-d7374181af29",
        "cursor": {
          "ref": "f3cfb75b-bee3-4019-8609-82cfde70e989",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "21b8bc75-8baf-441a-a1f8-f5b9ca4730ae"
        },
        "item": {
          "id": "0775de96-16a7-4299-b95c-d7374181af29",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c6e480b6-568e-496d-a55f-cf787f8cf32e",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "6219511f-e265-4bee-9eb7-3cf31d081793",
        "cursor": {
          "ref": "2b174d4a-0bc9-487f-90fd-9f5e19071c6f",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cdc0819c-70f6-4171-904e-d56798a2d5cb"
        },
        "item": {
          "id": "6219511f-e265-4bee-9eb7-3cf31d081793",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b1e9d0a1-8da7-4e7f-bdb6-b9a86260e40f",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "6219511f-e265-4bee-9eb7-3cf31d081793",
        "cursor": {
          "ref": "2b174d4a-0bc9-487f-90fd-9f5e19071c6f",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cdc0819c-70f6-4171-904e-d56798a2d5cb"
        },
        "item": {
          "id": "6219511f-e265-4bee-9eb7-3cf31d081793",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b1e9d0a1-8da7-4e7f-bdb6-b9a86260e40f",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d6383d99-774a-4cc4-96c3-49dd13c6b8c3",
        "cursor": {
          "ref": "779abbc3-9421-4e2c-b9b6-d431755823de",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "be3e8723-368f-4e62-a111-7cdabbcf7c4b"
        },
        "item": {
          "id": "d6383d99-774a-4cc4-96c3-49dd13c6b8c3",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "cf2a6d11-b441-4e04-b67c-f2aee181978a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "d6383d99-774a-4cc4-96c3-49dd13c6b8c3",
        "cursor": {
          "ref": "779abbc3-9421-4e2c-b9b6-d431755823de",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "be3e8723-368f-4e62-a111-7cdabbcf7c4b"
        },
        "item": {
          "id": "d6383d99-774a-4cc4-96c3-49dd13c6b8c3",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "cf2a6d11-b441-4e04-b67c-f2aee181978a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "e64d42e7-2c57-4021-a74f-0e59bd9fee6f",
        "cursor": {
          "ref": "44888710-7d14-4094-b77a-db73c657d497",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "513e3ef5-345e-43b4-b64a-2fddbab82fbb"
        },
        "item": {
          "id": "e64d42e7-2c57-4021-a74f-0e59bd9fee6f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3b79ad3a-587e-4aec-9b92-41d24dfd4d3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e64d42e7-2c57-4021-a74f-0e59bd9fee6f",
        "cursor": {
          "ref": "44888710-7d14-4094-b77a-db73c657d497",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "513e3ef5-345e-43b4-b64a-2fddbab82fbb"
        },
        "item": {
          "id": "e64d42e7-2c57-4021-a74f-0e59bd9fee6f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3b79ad3a-587e-4aec-9b92-41d24dfd4d3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "c6d48c86-1696-49a7-b81d-1119575524c0",
        "cursor": {
          "ref": "9da6beec-4bc6-4c77-bee1-9f81f78b677b",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5afc08ce-18b2-4129-8f17-aa7f1b80f105"
        },
        "item": {
          "id": "c6d48c86-1696-49a7-b81d-1119575524c0",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "3e434032-9c74-4a97-9563-702084b525d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c6d48c86-1696-49a7-b81d-1119575524c0",
        "cursor": {
          "ref": "9da6beec-4bc6-4c77-bee1-9f81f78b677b",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5afc08ce-18b2-4129-8f17-aa7f1b80f105"
        },
        "item": {
          "id": "c6d48c86-1696-49a7-b81d-1119575524c0",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "3e434032-9c74-4a97-9563-702084b525d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "9e36a5c6-33c8-42f6-8486-66add462961c",
        "cursor": {
          "ref": "3db8ab88-42b7-4052-89e8-9845219a68f6",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d3fa433b-4d64-4013-ba5b-d631f6c8aae2"
        },
        "item": {
          "id": "9e36a5c6-33c8-42f6-8486-66add462961c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "cacd73db-8dd4-4a69-89b6-3fada536ae01",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "9e36a5c6-33c8-42f6-8486-66add462961c",
        "cursor": {
          "ref": "3db8ab88-42b7-4052-89e8-9845219a68f6",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d3fa433b-4d64-4013-ba5b-d631f6c8aae2"
        },
        "item": {
          "id": "9e36a5c6-33c8-42f6-8486-66add462961c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "cacd73db-8dd4-4a69-89b6-3fada536ae01",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "292ebc00-0f7c-4a8e-b6ef-f010df30bd7d",
        "cursor": {
          "ref": "e97827c2-a86f-41d9-91e5-fa478f3d5123",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eeace063-43a5-40e0-b556-a2e3a20db05a"
        },
        "item": {
          "id": "292ebc00-0f7c-4a8e-b6ef-f010df30bd7d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d3b8864e-77cc-4985-8a36-93a722a9cb0c",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "292ebc00-0f7c-4a8e-b6ef-f010df30bd7d",
        "cursor": {
          "ref": "e97827c2-a86f-41d9-91e5-fa478f3d5123",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eeace063-43a5-40e0-b556-a2e3a20db05a"
        },
        "item": {
          "id": "292ebc00-0f7c-4a8e-b6ef-f010df30bd7d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d3b8864e-77cc-4985-8a36-93a722a9cb0c",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "9df129cb-d1cd-4ed8-885b-a767f4267e65",
        "cursor": {
          "ref": "affbab5e-8319-49fd-b98a-64ff308a99c2",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "481a8b7d-5668-4188-97d3-e3457698afb1"
        },
        "item": {
          "id": "9df129cb-d1cd-4ed8-885b-a767f4267e65",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "35f4185f-7607-453b-96d1-d8b017b4cb26",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "9df129cb-d1cd-4ed8-885b-a767f4267e65",
        "cursor": {
          "ref": "affbab5e-8319-49fd-b98a-64ff308a99c2",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "481a8b7d-5668-4188-97d3-e3457698afb1"
        },
        "item": {
          "id": "9df129cb-d1cd-4ed8-885b-a767f4267e65",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "35f4185f-7607-453b-96d1-d8b017b4cb26",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "33fa5b91-c9ac-44e8-8a04-9f6f43909967",
        "cursor": {
          "ref": "6f6c4896-e1d8-4d31-9168-83897fc1133a",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "10c41c56-5718-4774-8762-a8436e9c90bb"
        },
        "item": {
          "id": "33fa5b91-c9ac-44e8-8a04-9f6f43909967",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "88cb4457-c928-4231-9b8e-c55d75290122",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "33fa5b91-c9ac-44e8-8a04-9f6f43909967",
        "cursor": {
          "ref": "6f6c4896-e1d8-4d31-9168-83897fc1133a",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "10c41c56-5718-4774-8762-a8436e9c90bb"
        },
        "item": {
          "id": "33fa5b91-c9ac-44e8-8a04-9f6f43909967",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "88cb4457-c928-4231-9b8e-c55d75290122",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ef3b7f47-b6bc-46eb-8e0b-570024b16bd3",
        "cursor": {
          "ref": "cc25b808-b660-4d2b-bb70-7a9fb9e2cff8",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0dda832d-b37d-412e-88dd-c8136f646ce6"
        },
        "item": {
          "id": "ef3b7f47-b6bc-46eb-8e0b-570024b16bd3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "35c29bb0-9bd5-4b3b-b832-fb18ecae74a5",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ef3b7f47-b6bc-46eb-8e0b-570024b16bd3",
        "cursor": {
          "ref": "cc25b808-b660-4d2b-bb70-7a9fb9e2cff8",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0dda832d-b37d-412e-88dd-c8136f646ce6"
        },
        "item": {
          "id": "ef3b7f47-b6bc-46eb-8e0b-570024b16bd3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "35c29bb0-9bd5-4b3b-b832-fb18ecae74a5",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3e6f3dbb-277a-4461-a658-14a63671582d",
        "cursor": {
          "ref": "660fc1e9-7b9c-4b73-be76-bc9c00fae533",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "80c07a5a-d287-4a72-91c2-b1bb063b1bd3"
        },
        "item": {
          "id": "3e6f3dbb-277a-4461-a658-14a63671582d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "99db1f21-42c0-49b0-86ab-c090467bb301",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6f3dbb-277a-4461-a658-14a63671582d",
        "cursor": {
          "ref": "660fc1e9-7b9c-4b73-be76-bc9c00fae533",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "80c07a5a-d287-4a72-91c2-b1bb063b1bd3"
        },
        "item": {
          "id": "3e6f3dbb-277a-4461-a658-14a63671582d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "99db1f21-42c0-49b0-86ab-c090467bb301",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "715f94c3-f0d5-426d-ba9f-cc2446747ae0",
        "cursor": {
          "ref": "1c5f28df-04e1-46dd-b0ba-54fd085537fb",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1c257736-532d-41f5-9961-b4f59181b9fd"
        },
        "item": {
          "id": "715f94c3-f0d5-426d-ba9f-cc2446747ae0",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "07834251-0227-4a6d-833a-534ea6537eb6",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "715f94c3-f0d5-426d-ba9f-cc2446747ae0",
        "cursor": {
          "ref": "1c5f28df-04e1-46dd-b0ba-54fd085537fb",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1c257736-532d-41f5-9961-b4f59181b9fd"
        },
        "item": {
          "id": "715f94c3-f0d5-426d-ba9f-cc2446747ae0",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "07834251-0227-4a6d-833a-534ea6537eb6",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "490347f2-26bc-461f-866d-f1e1648d196d",
        "cursor": {
          "ref": "9d78f464-2cf2-46a2-8422-717f3405628c",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "40a074af-dbb6-4bef-808b-8c67e3b45808"
        },
        "item": {
          "id": "490347f2-26bc-461f-866d-f1e1648d196d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "56c1e92b-8876-4613-8fe4-effc714eb0e5",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "490347f2-26bc-461f-866d-f1e1648d196d",
        "cursor": {
          "ref": "9d78f464-2cf2-46a2-8422-717f3405628c",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "40a074af-dbb6-4bef-808b-8c67e3b45808"
        },
        "item": {
          "id": "490347f2-26bc-461f-866d-f1e1648d196d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "56c1e92b-8876-4613-8fe4-effc714eb0e5",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bab748a-7f4b-4a73-9719-01f8d539f73f",
        "cursor": {
          "ref": "70fd3363-78f6-4ff9-af33-9f4ae5974387",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2a3c0023-f450-4a54-82e8-679b3857d88e"
        },
        "item": {
          "id": "7bab748a-7f4b-4a73-9719-01f8d539f73f",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "9e2db73e-5b32-47d0-b95a-cbd62ce64303",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7bab748a-7f4b-4a73-9719-01f8d539f73f",
        "cursor": {
          "ref": "70fd3363-78f6-4ff9-af33-9f4ae5974387",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2a3c0023-f450-4a54-82e8-679b3857d88e"
        },
        "item": {
          "id": "7bab748a-7f4b-4a73-9719-01f8d539f73f",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "9e2db73e-5b32-47d0-b95a-cbd62ce64303",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "31c94d70-4a6e-4f67-8420-a4c0aee33378",
        "cursor": {
          "ref": "85252198-8fba-491e-8e01-937dc0ccdce1",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "85d4beb5-930c-4836-bd1c-9bdfd1c3bc75"
        },
        "item": {
          "id": "31c94d70-4a6e-4f67-8420-a4c0aee33378",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2a52756d-685e-44e9-afab-d845db9122ab",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c94d70-4a6e-4f67-8420-a4c0aee33378",
        "cursor": {
          "ref": "85252198-8fba-491e-8e01-937dc0ccdce1",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "85d4beb5-930c-4836-bd1c-9bdfd1c3bc75"
        },
        "item": {
          "id": "31c94d70-4a6e-4f67-8420-a4c0aee33378",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2a52756d-685e-44e9-afab-d845db9122ab",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f26487e-f829-4e7b-b4c9-c267d4ee8bbb",
        "cursor": {
          "ref": "5dedb698-82b7-4881-82bd-e37702faeae6",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a060e973-048c-4212-94ac-0bbeae8cd51f"
        },
        "item": {
          "id": "0f26487e-f829-4e7b-b4c9-c267d4ee8bbb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "13457b41-f96a-4e44-ae35-5314ba6eb8c2",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0f26487e-f829-4e7b-b4c9-c267d4ee8bbb",
        "cursor": {
          "ref": "5dedb698-82b7-4881-82bd-e37702faeae6",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a060e973-048c-4212-94ac-0bbeae8cd51f"
        },
        "item": {
          "id": "0f26487e-f829-4e7b-b4c9-c267d4ee8bbb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "13457b41-f96a-4e44-ae35-5314ba6eb8c2",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "33cf55e9-9bdc-48c8-908c-071c5b9667e7",
        "cursor": {
          "ref": "405760cb-d807-4760-8453-1e9c1b011592",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "61d1b12d-3cec-453a-a0c2-c8220cc2d74a"
        },
        "item": {
          "id": "33cf55e9-9bdc-48c8-908c-071c5b9667e7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "118a018c-223e-4e2b-bfee-bf7ff1af97bc",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "33cf55e9-9bdc-48c8-908c-071c5b9667e7",
        "cursor": {
          "ref": "405760cb-d807-4760-8453-1e9c1b011592",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "61d1b12d-3cec-453a-a0c2-c8220cc2d74a"
        },
        "item": {
          "id": "33cf55e9-9bdc-48c8-908c-071c5b9667e7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "118a018c-223e-4e2b-bfee-bf7ff1af97bc",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1f5ace83-b96e-40d3-9983-f00bd036235d",
        "cursor": {
          "ref": "8629266f-428b-4af6-afa3-1ecf30e5f9bd",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ebb0558b-eb08-4691-ab10-c32524c15aac"
        },
        "item": {
          "id": "1f5ace83-b96e-40d3-9983-f00bd036235d",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "d577206e-8485-4b99-8478-5e54b64f8cbc",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1f5ace83-b96e-40d3-9983-f00bd036235d",
        "cursor": {
          "ref": "8629266f-428b-4af6-afa3-1ecf30e5f9bd",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ebb0558b-eb08-4691-ab10-c32524c15aac"
        },
        "item": {
          "id": "1f5ace83-b96e-40d3-9983-f00bd036235d",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "d577206e-8485-4b99-8478-5e54b64f8cbc",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ee040834-4e8d-4207-9f9f-5132d087b156",
        "cursor": {
          "ref": "5f430e1c-416c-43a5-bc35-6820dce52476",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "26f863ef-c074-424a-a4dd-29a6f2ba351a"
        },
        "item": {
          "id": "ee040834-4e8d-4207-9f9f-5132d087b156",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f1f2cb21-f98a-416e-bc9b-729f649e154c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ee040834-4e8d-4207-9f9f-5132d087b156",
        "cursor": {
          "ref": "5f430e1c-416c-43a5-bc35-6820dce52476",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "26f863ef-c074-424a-a4dd-29a6f2ba351a"
        },
        "item": {
          "id": "ee040834-4e8d-4207-9f9f-5132d087b156",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f1f2cb21-f98a-416e-bc9b-729f649e154c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "637bcd00-6807-4ef3-8311-bf2f9b259c05",
        "cursor": {
          "ref": "09a18a1f-fd8e-4bd8-bb08-f9b4814a7f7c",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7ee839a4-dfa0-423c-aa19-6e351aef5056"
        },
        "item": {
          "id": "637bcd00-6807-4ef3-8311-bf2f9b259c05",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "9a602f11-0d95-4c28-aa92-8fcf76ff5464",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 33,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "701a2f71-954b-4440-8f87-dd71b04d63e2",
        "cursor": {
          "ref": "2de13aaa-e40f-429e-b78a-5ed5fe0bd127",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2fc58081-46f9-438a-a23b-131a52c8e653"
        },
        "item": {
          "id": "701a2f71-954b-4440-8f87-dd71b04d63e2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "dad37c2b-9ba5-49d8-8025-c0c5998afe6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "701a2f71-954b-4440-8f87-dd71b04d63e2",
        "cursor": {
          "ref": "2de13aaa-e40f-429e-b78a-5ed5fe0bd127",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2fc58081-46f9-438a-a23b-131a52c8e653"
        },
        "item": {
          "id": "701a2f71-954b-4440-8f87-dd71b04d63e2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "dad37c2b-9ba5-49d8-8025-c0c5998afe6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f1de4783-8758-4dea-9ef2-48e590d3565d",
        "cursor": {
          "ref": "b55eed5b-0cb3-46c6-90f2-6463352ef504",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b63b7f71-e61b-40a4-b139-54f652e18782"
        },
        "item": {
          "id": "f1de4783-8758-4dea-9ef2-48e590d3565d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7d003aac-907f-474e-af78-de9301ed8f0c",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8c11af85-730f-4407-9347-a2b7f9206069",
        "cursor": {
          "ref": "8e5bd978-ac45-4039-9e23-b84479b9e74b",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c71e2220-9b69-484c-aa14-61b672e2f0f9"
        },
        "item": {
          "id": "8c11af85-730f-4407-9347-a2b7f9206069",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7f8a3b02-f482-406f-8356-464aaae45f76",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "8c11af85-730f-4407-9347-a2b7f9206069",
        "cursor": {
          "ref": "8e5bd978-ac45-4039-9e23-b84479b9e74b",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c71e2220-9b69-484c-aa14-61b672e2f0f9"
        },
        "item": {
          "id": "8c11af85-730f-4407-9347-a2b7f9206069",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7f8a3b02-f482-406f-8356-464aaae45f76",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "ce34231c-ea3b-4c04-a729-f52e49220e99",
        "cursor": {
          "ref": "9697d986-89bb-490e-9848-994144631aaf",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7a4e3821-f700-468a-acdd-b97d41b7d5d7"
        },
        "item": {
          "id": "ce34231c-ea3b-4c04-a729-f52e49220e99",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e246a61c-1aff-41a3-ba94-35d8b9d55814",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "345c25ac-7e9d-4294-b534-ce02ff3fa728",
        "cursor": {
          "ref": "92cb4bac-3e99-40e5-b811-3fe6b5e22ca8",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8b0c97ef-4fa7-473b-8202-a3976640a124"
        },
        "item": {
          "id": "345c25ac-7e9d-4294-b534-ce02ff3fa728",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0c6a4a28-232a-4a5c-a8f6-cfb8f6ab889b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "345c25ac-7e9d-4294-b534-ce02ff3fa728",
        "cursor": {
          "ref": "92cb4bac-3e99-40e5-b811-3fe6b5e22ca8",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8b0c97ef-4fa7-473b-8202-a3976640a124"
        },
        "item": {
          "id": "345c25ac-7e9d-4294-b534-ce02ff3fa728",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0c6a4a28-232a-4a5c-a8f6-cfb8f6ab889b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "4b2ddc19-478d-4cfe-bbee-9f9eb8cf4485",
        "cursor": {
          "ref": "4cf90af9-8f04-41b0-827e-2b434b05e992",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b7954cc6-2751-4c27-8cad-f374d8eb7667"
        },
        "item": {
          "id": "4b2ddc19-478d-4cfe-bbee-9f9eb8cf4485",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "aedb343b-527d-412f-a5df-6a21b49d5a12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "a121fc1a-29f6-479f-8c8e-6160f7de90a0",
        "cursor": {
          "ref": "331916db-926b-49df-baba-b4a6a518f77b",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0b654a30-424f-43bc-8470-6b0dc1a05226"
        },
        "item": {
          "id": "a121fc1a-29f6-479f-8c8e-6160f7de90a0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f7518ce4-5930-4781-8d4b-b8bc8b9d2676",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a121fc1a-29f6-479f-8c8e-6160f7de90a0",
        "cursor": {
          "ref": "331916db-926b-49df-baba-b4a6a518f77b",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0b654a30-424f-43bc-8470-6b0dc1a05226"
        },
        "item": {
          "id": "a121fc1a-29f6-479f-8c8e-6160f7de90a0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f7518ce4-5930-4781-8d4b-b8bc8b9d2676",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "f1b20abf-ed89-4aa3-84d7-0701d397e653",
        "cursor": {
          "ref": "5953d251-4b45-4673-85b6-423dd23f87d8",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "964b29dd-648c-4fc5-a86f-80e8f33fd05a"
        },
        "item": {
          "id": "f1b20abf-ed89-4aa3-84d7-0701d397e653",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d6feaf2e-6d48-4e52-8350-f7b737bdd54b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}