{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "732ccd10-b52a-4e59-b68b-f899e71ec2b4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9bb982d9-ff84-4cd9-b4d0-07b43c170300",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "659ccdb8-4c2f-40d8-8680-f40e62ce01a9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e865da14-a02b-4416-a303-a99d007ad13f"
                }
              }
            ]
          },
          {
            "id": "20c81f50-9474-418b-a415-b0ff2596a99e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eea12fca-10d1-4c76-a798-b345c0bef3b7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "93ce8ec4-8aa6-4c4a-8417-a206f7e56a7f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "60bd6098-9229-4dca-8f6d-641aa365b09e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "44733ee0-34f7-462d-b546-2a82c1899672",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f3690127-1b18-45c2-b500-d7c18f09b45b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55a25b0f-5539-41dc-8cb4-52307438866b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a4330c3-61b2-4946-b7c2-5145294d11b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d2e27583-3820-4db4-be10-d15c5cb2397a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2420e6d1-f202-4c61-ae08-3b0d9a893b6f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5e91d292-a314-42ef-b58d-ebb60f1b95ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a66cbae2-e4c4-45c4-8575-fb8f599f091c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a89583b7-2a7d-471c-9d04-7d14f97b5767",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a06a6703-10b6-4d17-be85-6cc839b3ff09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5050f6a0-bb70-4302-a11f-2697155fc259",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e7e646a-516d-4b63-bf88-68ad9e12f882"
            }
          }
        ]
      },
      {
        "id": "54fd540e-6a2d-4874-8a5f-80141d07acb4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cb1ecf18-0192-4530-8c01-d7289027e403",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9136852-3103-4c62-9443-597d0290af74",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ca1563cd-eb1c-4193-8103-47e86eccd40a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c10b77-66e5-4656-ac11-ab912041b745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86cc5944-6041-47af-968d-358853e8a4c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b676a6e3-a291-43ec-8513-c4aba8703d4d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea830733-4140-405a-8936-9c8964138d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b968cbb0-a188-427e-a302-adfc1a207e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b458cad9-d58c-4539-bbde-251d510aba1c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1bb28a-53ff-4517-9fa3-eadb1a44cff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f1d3723-32b4-4bfd-975b-8047a3b9eac9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "37f12cf8-e82b-4f19-a99f-ef4938601776",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "03a8af68-3be5-4239-be85-93c803f549ba",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e484f1-b5c4-4b95-b6ce-c50c6a23a68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9039504-27ea-46c7-ba84-331e7bc8cf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1658d9-02cf-4a81-a5ea-17a2c0141494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79e7683-3c11-4943-8945-8343ed695085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b47d28-b995-4391-a35e-9d4bd6fff507",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350a4268-0baf-4bb5-b89d-12bf20a9f7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6fb724f-94e1-4bee-ab94-5c1d44cfd8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43edef5a-ab77-44ed-900c-e9b69400ed43",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "18f6ce5a-c7a4-4f4b-8775-c582de2fb48e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d4a641d9-3de2-43ff-a493-2bcdcb468239",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6384db65-0cd8-4de4-8608-ba63f6dbdec5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c87dca7-595f-4fa7-999b-947ab1145a0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c1043fae-2e97-4660-a6cf-fad45c5d43d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f18c5c05-c673-4d9b-90d8-cfca91191f63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8c05d352-3f09-4333-8287-7fd2dcec0250"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71934994-10e6-4ba7-9109-702590caf921",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "748d54a3-5c12-41e3-ab10-ea1fa382c3bf"
            }
          }
        ]
      },
      {
        "id": "6b80fcaf-3b3e-4a00-8223-e85440ecfddd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4ac740a0-d86c-4f95-905f-d12475c7067c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e2aff8b6-2fb3-4694-a770-991c46b0427c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "56cee431-0a27-4676-86d5-cba15d1659df",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a435e3-3492-41a5-b68f-bff157fda34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28450ed4-0aca-4d40-aaf3-93b1fa72cb75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9419fd-e71d-412d-a391-aeb10e4b5b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "242629a7-e651-4052-ab0a-d2c88c7ddd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168080c9-874e-42e5-83ed-d0fc18e11170",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43786b3d-39b0-4812-b373-213b6c2a5358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5c3561-59cd-425b-b4f6-979c46dd0df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa80d2df-308c-49ad-8c90-6b5d3fcb3bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63cb80bd-a77c-4ab9-8c65-5541ec93bb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9283bd0-115d-4be8-8131-30b77c851487",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41427175-18e0-40bf-9e12-a1c6e8f3fb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0c62d5-ffa4-40db-8050-9890a8de1274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cab2751-afaf-4865-8e47-66432ccb207a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d101cbd-92d8-49f1-b450-61b41ed199ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7605c1-a17b-4f7e-9d9a-07c320236650",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1c6726-fcc8-4179-bf13-f52e23ec3c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d20c5182-a874-4845-95cb-caf7e4590455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee82e67-89be-43c1-b799-ab44299eb930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "873665cd-26b3-488e-a9fb-e5488a3aab7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9528d2-b212-48b0-9b05-2cace085a8bc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ede737e-7823-4f18-b3af-8c13bedc5daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40bd17e6-d7e4-4883-ae28-c1f2823e8c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e58ed92-7d43-47d7-aba1-51fa04e5d80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c6227da-6c68-4b7e-8799-c5eb9ffd3482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324b7c99-6381-4ec8-9d31-8bb408d82d56",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbfceca-004d-4cfb-926e-190cd7c7a9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf65de2-6181-4af7-ae24-9fed2d83a2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00265bf-e198-4223-b65f-ac1d3b2f1083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be222f19-10d8-4329-a47f-3f7dded26fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befab64f-0721-489d-9d50-2e01befcb7dc",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ba895d-171f-4772-bb04-7857fa861dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603969dc-13c7-4c25-89eb-c4b3920d8d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf36f0b7-83ca-434c-a8fa-c7e23a479f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "678e78b0-ceb7-49c7-be6f-ee2e23c0048f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76f6ee9-4dd7-402f-a8b6-7ef5e0fc7940",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c63f5d-df47-4aba-ac5a-0054aca92e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214faf41-4b3c-4ea5-a1de-6f311cde32a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359d7f9c-662a-4635-a20d-6c595dd98b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4a018b9-f100-4dd1-a87f-a5fd78610c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cbeb28-0b77-4f54-8357-baae2d1d4499",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc364a27-e85b-41e9-824e-2719bd60a2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c711776a-52e2-4fce-8cb5-401410f04384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1c88bb-9c73-46fc-be4b-4b04170541df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "363a3a5f-0a7a-4725-b683-37c269ca35e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96bb2bb-1ced-439e-a559-145ddb0c6e40",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f9d002-7a1f-4df8-8661-924a348bb2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259b10d2-b5e6-47eb-b142-e7f7e0f2ce0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79f9511-53f5-4277-9d36-ec7577298765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dedac838-531a-4fad-8fca-f4a12cf5900b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56d51b9-f455-425d-936c-ec9959bb6a8e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e3ce0a-8c99-4c6b-b8bd-2233a0f25965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b46e630-2282-4cd6-b665-305d2716c264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ca9aff-87a0-4315-adce-fc314f23c945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0292de32-5269-4d9c-a351-a0dd945e1341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2367a2f8-c616-4726-9310-5909838e5dc6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64641ce4-dd50-45a7-a3d8-a1728a71b133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac68996-f5ae-40f5-bf19-8bdf33a15e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08af1d90-43e3-4835-82dd-d68c7bb0e357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1b2426d-b77e-4dc9-bb40-c3c4b8d09ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e22652-f77f-4482-88d3-a927354ddd07",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a6a371-76f0-42dd-bdaa-75f10be280f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd19b405-f293-42a2-8efc-71eed3c73917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e56fd87-3135-4d4c-8974-5dcca5c45d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b60105d5-33d6-42f4-b3df-95b986f3d516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d9b2f6-967e-44f1-8eac-837fbe5d6895",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3640cdcb-8491-4c50-abf9-f640e2d7cb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5cea7a1-6d75-46ed-be02-ec300663f7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a627919c-cc81-4a24-9415-7e80c5214271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19ab5ae6-c597-4943-bcfd-8ad561f6f082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c3f9b4-b86d-49ee-9896-2c1a84e75e49",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e74c82-bbed-4772-8fb6-b161c4f00cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63b8ec7-f29d-4f34-947a-d2402432d573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffde71c-58db-4284-93b6-c3112e1f3089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b62f5b63-0468-446c-8789-6d93cb2382a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7113bb9-0f23-47e6-997c-a5aa72c92e8c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6459feaa-dff7-460d-809e-177228027150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5abfd48-a1ac-4359-86af-04cd6268c79b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d5b1ca-05c4-4fdb-9517-a0bfaa069d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64e3999e-1a49-4567-afb6-43a881929bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d0e523-5555-44f0-af73-44895a76494a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75669ff8-d7c2-45ff-8fc6-f715917256eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633a4721-c7e7-48bd-a06f-69b6b9e3e5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017bc8db-858c-4e7a-9527-e9136d2709c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d36170df-40ff-4b85-98f9-be4545ee6f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe42a120-a42c-4601-806f-613f2e1dc797",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf0012b-e6ef-480e-90e2-e2a20af633af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a06ea9c-32f0-4f2b-9726-5b627e8568f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a406b2eb-00d1-439a-a134-d15bfa5364fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "66966c01-c0bf-456f-915e-346d1449dc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea6d2a1-2d41-45af-9c49-ea7391c47a20",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466b3c88-22b2-41aa-ad73-d6265d2ea621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4dca62-8ebe-4626-8b6c-e48636f569b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6314ff-3eed-4de0-aa6d-07588e39e84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43c638b3-3fb7-4a5f-9a1b-e3e7f5ba092c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974df3de-3e5f-465d-abd8-1cb0da9f22ba",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec74855-5741-4d3d-a8b6-d6933f44bdc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8746a15a-fb60-415e-aa97-54b8cbeba7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df8db85-a5d2-43fa-9506-081886293e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d545e4df-d189-440b-8b6e-6221797cf373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b59471-47f9-4937-8e98-d9a12ce58ed8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7ce845-4521-40c9-825f-d43baecfb68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ffb9d91-bce3-40d5-955a-64aed26d4140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a48ab35-4084-4fb9-a898-23e0faa274e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5b2e42-9bb2-469d-8643-691fdec38007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b29e9fa-6495-4a2a-a215-f665444d81bd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76e1d50-73d2-40a2-a79c-6919f340f98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b5614d-59fd-447b-98dd-77dea8b8bf04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb88d88-0a98-4586-8777-e09bc066c747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bbcd078-0f9f-44bc-8d91-b238456386f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f84dc85-9240-4d18-bfc4-d32713e4b160",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b811f6-40e1-4780-9442-c2abc6570806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b272d5e-d244-41d6-a2e3-22c6ca15a3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92418833-cc0c-4d4f-b9dc-b98fdbf6c910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d034350-db58-48f6-a0f3-5e88597580c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19557f0d-906a-4d23-89c5-3481a4174ae1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb778f65-c7f5-427d-aa14-6c60e74a938d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b126b3d-8fa2-4c5e-96c9-03ed6c4845cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef2a054-7383-444d-8aed-6358aad62f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "33cb4ac6-7dd3-4e7b-bcae-ed471476d580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709b1e0e-e5d8-48fe-9b8e-2374b46de871",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4e4731-81b2-4be4-9f9f-101398f21e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a28bd69-f0ba-42a0-9f48-d7b9ca71696a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a893d6e3-a4cc-4581-9c3f-cf6ea26b0a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed7aff4a-da2a-47b1-8305-e64a8c980b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7fe029-5475-44f6-879b-0baa1e74a2f1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e91fc5-7eec-4c4e-ada6-44168154260a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a9ce42-d0b3-4d6b-b479-03d1e1541b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b547c649-2fb5-436a-bcc9-7010dcaecb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd3d9ce-81a6-40da-a5fe-e04ff07f3c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f521a3e0-84c3-4105-88db-fefca57f154c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5879fc33-883e-46d3-b467-ff98a02b77c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e26ccb3-4a31-46f9-9895-78314447ce11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d65f686-b359-48ee-9471-a9a2617c2dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1021a9bc-cb5f-4aac-8b37-7c5e465c4111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4313eb14-a42c-4673-92d7-7e09a7c05ef1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8c5fda-0ef5-4bb1-9477-b65a7fc3e845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b6dd00f-74a2-4dad-a67b-58c83024377e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ea34b3-feef-4139-af2f-4c6fad2cf8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfa8f94-6b0d-4d3c-8c4f-a9ad8da853d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1006f1e-cc0c-4223-92ac-a8a0a50542dc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9688ec79-6ded-4f8c-b10b-6f3cb28d5342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1482a0e9-775f-4d8c-aab2-4e71f8de71d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07c5a9e-1643-478e-bc20-c7961b9d77bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9439cdea-0674-4c99-ab0b-ab46b853b023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d13cc9-facc-4bd4-a635-d268feed6a65",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff414c55-3e02-40fa-b6e0-83da604b5927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec0a60f-d10b-44c8-a731-30630829b372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb41267a-dd3d-4c76-b1fe-d792a2cef4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2240ba93-1233-4f5a-972e-4bdad94d1320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0873a4-e27e-451a-a97f-4bc2278c352e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930b2b93-f640-4630-967f-8fcc018ece33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0474d0-995a-485c-bfa4-a5f60fffa271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636cdbf8-1b9b-4306-9f3c-222994b669ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc3023c-df56-4bf6-9f1a-c313f3f0b495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43883799-4ff3-4bad-965e-5e258c3cc31a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9027d9f1-17e4-4ea7-aa3f-1a5145fba9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c47d46-769d-442e-80ca-de6c95f4d047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e275863-c37c-47e8-b6d6-933256404b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c44d3910-ba67-4b91-8a97-cbbf2338a874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7925466-9219-4f1e-b782-1901cbc271aa",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d62e6ba-24e1-4bb9-9103-787fd4e3e311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f56cbe0-b6b7-4d97-bb06-052add891ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9917670-a079-4d51-abe3-ba7b1f122ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e621042a-c4e7-4723-bd1e-4e8b5c734f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1bce78-83af-4652-ba1d-8c64e03e6068",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c015a82-f2d2-4877-a8c7-0b2e1e3229aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682c8924-dced-4e52-81a5-2f41b5b4508f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f041cf-f252-41d9-af35-19230502a10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a05d85eb-b7fc-4283-9abc-1461cf6e2818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16a291d-efe4-47ee-9f4c-4f552f808f21",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a928e3d3-c83a-494d-908b-40aaceb2261c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eec709e-fc6f-4a22-85a2-94b579dd4e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf8c7ad-b41c-477c-966f-a4030f09eb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f724394c-cd00-4192-b99d-87a1c1690431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776959b2-f68c-4135-917e-b1370131d99d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8965286-648e-4d10-b04b-beab28e6de35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf2ac039-db51-4f4c-8a5f-3beb71b4c2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a56fc19-53cb-4fa7-aecb-c8aca9c1ae32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "651a27d5-102f-4ac9-9cc5-0092c8f1334a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839ca207-8587-4e81-b7a7-e15dac416ae4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c937b044-105f-4e46-9e81-8d94cd6b8bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289ab233-4aec-483b-b8ad-e02a91220de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2676a8d7-84c8-415b-a04e-48c7fbc11f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "112495db-d18a-4f80-9972-4e91476df680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9477d47a-1087-4473-9e73-5cad86fdc67a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0594e567-fe5a-432c-93ca-eda530293fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794d31f1-61bd-45b0-b6ed-4f63a8cbb8bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e84b00-16f4-4cf2-b291-20ccfd77e718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb12b58b-5b25-447d-ba25-244350ca9b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba94180-d332-4d78-b333-1dd6b7e2b94d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dacfa19-c0a5-4d03-b20e-5d2018988f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1112dadd-6f74-4489-b957-78dbb33ddcff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90e8c8f-95d4-4365-9eb9-2ef27a1afe23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2203ce-a2fc-4f9e-a6d7-9db293a167df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6a1afd-817a-44aa-a2af-d9248f845dd8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d834d50b-de44-46a5-bf5b-8c46f001480a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6193d2-fde9-4f59-8947-c769bb9176f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cd6a69-c9e1-4539-b948-c9ce6ac4ef17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2259d61a-2741-46d2-97f7-21bab2a81bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7100583e-0597-45b6-87bc-010e7ad49bed",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92e66dc-63ba-4765-b06f-ab48694ffb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df88962-304f-44e2-ae62-0f30c6af1b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379e2019-1bb5-4720-9fdd-fe51f951d549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc09ba87-6b87-4144-a7f2-eb255f798181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a052a0a2-1780-4db8-9b3b-1b1f413f3328",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c776196a-d85d-4ebe-8bce-adc18f2cfdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4b3c33-4c70-49c7-9851-2bf9091b89f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91ad3ad-8684-4e67-bfab-005afb5a18f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a1bdd0-6202-4822-823c-2c355ebee65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a8b184-3020-411d-8a32-f05d8e59da8c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a7c001-7d53-44eb-b677-0f9c274ad476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596feb02-9e5c-499c-86e2-f817a767b3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec814b0-f8db-43ff-b3aa-83a718c5ce46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb9cdba-b13e-4f84-aa86-9ec5125885a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e853d43-68c7-48b7-99b4-3ff9b00ba97d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b324a3-b073-48bc-8fc0-cac55ca23e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e026fe4-e429-4132-8e02-f0bcf5ed628e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae974ad-ad3f-40f9-a270-23bf8a7204a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d510cb30-9c6e-4321-816f-739ebaa2895b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6396e875-5c05-413f-b6f8-3b9da728f498",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458c7505-f6c5-4b04-81a5-32d59205c15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ebca0f-8f2d-4e65-b021-31b4e1dca543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc1d8d0-45c5-4215-b5cc-1244f7bac1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be761b4d-2146-4af4-b7de-52948df3c462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c662f33b-3a57-4012-bb97-1af60e777edf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50d932a-00d6-4703-aae5-18837b1120f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3b51c1-7fd1-4c45-b223-627c229b01a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4015d3e-e2b0-4785-bf8f-ffa9fd2abf72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "675185ef-57c7-4c13-9f40-c88580535a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71505ca7-337f-4158-8863-3f7e565d3957",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623e862d-6a9d-4986-9890-a6c9964e7e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f6ac74-ca5a-455f-be08-06a277cef18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4605f96a-06f2-4bc9-b8f8-4bbb5e84372b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "248788ac-b911-48a2-83c8-938348c46c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539bbbcb-6e35-4417-b4fa-ea3e7c15e73d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2430c6-baec-4ab2-a73b-ba47b3dc4d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a460749d-5de6-458c-978a-7766d61c71e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9b9674-e192-410d-862d-e2a6b8b74ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d01ac35-09f0-4991-ac54-f50dbbde2100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686b9d52-8a6d-4d37-9196-6758230c224f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc1128f-e544-412c-aa2f-39e08c8893f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbfe1a0-1b49-49b6-a4a6-2298aea7b58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3edf22-607e-4ecd-bae2-f82cccf130cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0abb3c-c52c-47f4-8979-f4899728bfd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0e8add-6426-417d-b8c1-25349ae532f8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a699346-00a1-4543-bb47-abb18978f8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e65bfe-cff7-4a5a-b05a-fb66087bb107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c55e2a-9342-4c09-aa60-7dea6e69c0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0988f8b8-e5c7-41f2-82e1-0a2dd9fd78dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656e7a8d-2566-41b3-836b-e3188a49a02e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f0fd9f-4762-4e62-b114-d5170bd83166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5ae1b1-0540-458e-a051-976758383931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bcb40e-53c3-4c17-af0f-509a8968a31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1591e20b-3c21-4ea8-87e5-421819f6b649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bf2633-8300-4a7b-bb10-d0f15565ff2b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b932c5-53f1-49f5-a7af-9f02a8bb2b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24817064-a90e-418a-ad72-134dec1f9322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31da6c32-f127-4e8a-bd21-e48e1801dd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "98da976f-5b08-4a72-8498-4eaf6f28816b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330a52b7-ac40-4c30-a7c0-0e08f07b0911",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd5287a-0cba-4a3b-b2e0-0df37710c20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090b8e70-5a32-4620-8bfa-933a1cf6d8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98949ca2-1a19-427c-9631-16e6445ad144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24a6d185-67ee-4983-83a8-bfe06465bec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5349be-c4ae-416f-88ed-6878c88cc206",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a9b3c3-1fa1-456d-a109-709320234e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b9e1e1-e411-4b6b-ac5d-1af040538536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf097c3-42a9-4feb-be43-28ff1e72e82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0af1a007-213c-423f-a2e4-08ef1503e255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35b9d0a-d5d8-4b48-ad60-79b0b34100c8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a143ae69-9d48-4970-a268-7a9ed2973d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3d6c4f-1995-4f6c-bcc7-582ca7c67217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ab252a-4ee2-41ed-9d9b-fbb6f4cf2aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dace62a3-871d-48cb-94cc-7bc866824ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29bd37af-7c20-4e44-beba-f037f8e51b55",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bef838-34bc-43d4-b333-7da755dd81a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5229c36a-dedc-49f8-a5a4-d43f4916bc5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0faf5d-cdcc-4ed6-b1af-bbfdbf31300b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "66bbc1d3-e07a-4400-bdfa-46ca1b39ff68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60abdae1-19ee-4937-925f-2f1667584b0f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d066a926-224d-48a2-8611-8291a3df98c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c10735f-8b00-4fc8-b431-2833f49a9e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846d7f70-89d4-4855-ba72-a6fa52df866b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eafc2e14-64e1-44b9-8e3c-901ab9e78406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbb8ad8-5ae9-4786-81e8-6c4ade2f9681",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d164a06d-0ad8-47e4-96e3-5e32123e1f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551beaf3-a0bf-4d1b-a457-8a7a69dcd4cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7e4205-b696-47ab-9fc1-f398aa8b314b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad171e2-6cf3-4c30-b3a4-bb3206ef11b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92762512-1f50-40e7-a8d4-3b44d5adeb67",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1496b42c-8c98-4126-8ca9-49db37d51b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e2d190-a2f4-43c7-9209-0e6dd71b4ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a4c6e4-5a2c-4f5d-bc15-053fe609eaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a93c8fe3-5f4f-40a4-bbe1-40537d2292c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67d4bea-db7f-4668-8e4a-f08aa32f385b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67983d23-39fd-4787-a57b-a0a742bb8fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c72b04b-ff9e-4bda-8ec9-14a196dbad6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7730f6-9c47-420c-9db7-59d97d056fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfdc5789-3e67-4d92-838d-2575ea396c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c776f5-6214-40bc-ab8f-8f8485506265",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65698337-5680-4a9d-a742-aefc1bd7a0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e8c924-b200-4b0f-ba66-05f489d3cfff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d133b0-b4f4-4b3c-bced-06ea3890db3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "03bec6a5-fcd6-4604-8bd0-1ead285d29be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ae1e6f-8d56-4da6-87d4-488c048c038b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1689f56d-eebe-441d-be39-28604204aa2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2cbd1b-93af-4289-8512-03c97524c86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4209df-0df5-4d14-9c92-c3748cdbdb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0681f93a-9f41-48d1-8b15-9048cf04f087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639ef980-4f99-4b68-80a4-9228463a4d7e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684d8d38-0ca6-4e14-ad53-f265a1243680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0855fe-bd40-4dc8-b8c7-212e208388a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691d4bdb-54d7-4f1b-87a9-a7a5dd3a0b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb6c8e3-b8e2-4833-a9ed-c2e5c708be11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86815b3-92a1-4cf9-81aa-435704c73a28",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbef202-22d8-485e-aff4-561bd9dfc13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5458be18-f4a8-41ed-ae93-d3bb252889fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed12b6df-9564-4326-9c3f-3596951a6151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6a9aba-6ba0-4da8-9c85-39a7d9191cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9672511c-e025-4397-88d5-93908fc31b77",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63e2493-d391-434a-af76-a5a9a80ade95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89f789b-b996-45d3-b57f-907cc79a3470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e91178-7f1e-4358-9918-5a6915602ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a7ca1e-4770-4642-a4aa-81d97eac070a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8971b4-68fc-4e5a-b4c3-8e84dc8ea7cc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2ee6b4-d3f2-4918-bc62-ef50ff15f79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a6eabc-556c-4d5c-9b68-521220f675f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb40d83b-eb2c-4f66-8176-418389466065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3af6be3-248e-4e63-a48b-34726a2a5fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f701dd8-4c37-4ba0-9534-52ee80a67d10",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d6d7e1-c925-43b4-9be1-6610f72b1184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf46be2-a7e3-432a-b0bb-cdb7e78b8d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9348efa7-426d-41e6-9a5a-e87aa779fd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5bfccfa-1a6d-4420-9590-01cd08400371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6095c7bd-2fab-4bf4-b8ec-82b04bf21552",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328c8f11-6f2c-452d-880b-c4b59986856e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94c4c5d-36a5-4245-a805-cc65317d1bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7e99ca-38f9-4816-8dd0-1ee6bd98926f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7edc77b7-e534-4959-be21-507ade26f4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef5c2e7-afe1-45ae-a2ee-c0b97f0b05cf",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e2f2e9-5151-4b0f-a2ba-6b9205a04279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46850237-39a3-4e71-b9a8-763a49e198de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c75e85-aaee-41ad-b94b-f45a376fa9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f38f4fa-0c9e-4e4b-8919-87a31c534bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb562fc4-15e5-46b1-859d-1d1e1acb1a34",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8305165b-4f83-4069-bae6-eab77498eda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc43be3-d2f5-4b7d-81ca-4e7e79b772ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cff0294-fc20-4615-b71d-237b549ffd31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11bc13ac-e5f6-4b55-8285-01420727a5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901b27b9-1296-45f5-8a7a-a505f38663ae",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11dc89bb-d8db-4b6d-a108-c00dc9107b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5afc7b-09af-4109-9d98-1f81938e3ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59706eca-132b-4cb6-ae8e-5cf3e3cab85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86675073-b8ed-4a5e-be85-2a8fc0d00d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ae2212-21bd-4303-b4a8-c5e10fe1252d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c7723c-5bb2-4a6f-ac6f-4ce181574783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfa8782-b215-4640-acf4-0bfc00a2436b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf5ec0c-22a8-4423-a795-3ca0eb2c1e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e58a263e-94e1-4d44-9641-1e48f4514a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baecacf5-e168-48f3-b24d-fd04ea9426ef",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c15988-9816-43b2-b367-4f3efdb9e91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ab05a9-b4ed-4a39-b3f4-b1ca553ec991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b767d8-26b5-4dd8-8e07-03ce6aac279a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04e9b0ae-81d1-4fa8-849f-91956a83f562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ad6a82-dbd6-485b-9707-d22240ee1a52",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58489cdc-cf89-40e5-b9b9-eb36ec81f6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90fa5398-d256-40a2-b84f-9074a5b99b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9069b9b-57eb-4c27-bca0-769d70700828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7513d458-84d4-4ad0-b180-f0556e1f19a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d22d422-9730-498d-ac8e-c6f15d30eb9b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e717248b-6f55-47ab-ace5-f72d53e1aaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe98a67-3378-4d19-83c8-8b282dfe8385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6f9900-5088-43a2-842f-226a618fd7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d03ef45-9246-4a80-8e81-e9d76fdcd038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb9f03b-5831-43a3-b563-70ce21d87542",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9630123f-7fc5-4a40-bfa1-a363e3ddfc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d647c63-72c0-439a-9b89-599b992ab727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f2c71f-b89d-4a32-8aaf-8671ea8b3d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1910727c-2f88-48bc-ac15-134878d614a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7715b08-d217-45d2-9bcb-52aac60e3038",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5493c63a-ef31-4627-b533-07acfb47dc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c650c75-7291-40ce-a0b1-5dfbf2e268ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa75f57-88e5-40bb-b590-13481c63b3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8a8d65-7400-4b00-a7d0-c70954e24849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb614309-ddc2-45fc-9396-7b281ee1f4ff",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6ebc49-dad9-4a4b-b5bd-04c49acb2248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6273b6-73be-49cb-8635-f5134c884a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d95a25-eec3-4d07-bf53-8438ece95fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb50045-18d2-4aa1-a78c-4eb0b99a4a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9b4e0d-ca57-4cc0-b2b3-a6615afcd776",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b792b797-6708-437f-bd4a-d3f1b36d077a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30472613-7340-4422-b078-d254fdc69763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4a3075-47ee-4c0d-9211-f685c560f5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdadcde8-278a-4862-ae82-abb147d37a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdf66e6-79ff-48f6-9b56-cb2f1ea06982",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e572e3-d620-4fc6-b759-ff0ed682ec5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91745f62-ecd3-4505-9d3f-dd219410f677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9742bb-dd51-4469-ad29-5a3a4ae273dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "579f50ff-1c35-4e9a-bbfb-8eaf4d02bfbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f5c18b-4e75-406f-83a5-3da58cd19a33",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20c34e3-44bb-4e75-932c-5a288ffe9e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3678d8e-e58f-4c5c-a0ce-ea775bfd19ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98862323-eb63-4c8f-a599-a2732d4b47b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0982f152-7872-4080-afcc-b61cf32cf5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376fa4d7-9e6b-4621-857b-83782562373a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b07d4e-244d-4f7b-b495-d3ad7fa6ad3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557d9e9f-49a0-48e6-8f36-6da66283137a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0b70df-7b85-47a4-bef0-508c0162994a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b20b303-7406-4799-ab21-8f2aa10d6197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2827d95-93cc-4f80-b939-91a06886c6d4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22817e72-fc84-401f-8ab0-6652cd83d334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6328b32b-eeff-4d28-8be7-e6644534f217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f62a6ac-ae9d-4f84-acf0-1b316470e358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52d59f26-8b1c-4f4a-aec3-b0bf0c200a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36da2730-da54-4445-80e8-84ba73fa9210",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798713d7-08c7-41c8-90e3-8383e50473f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7933cfa-e64c-4e0b-9d9c-e6a655528861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e32cdb-82fb-43bd-9c77-521a93a07a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf60176-dba9-4add-b53f-cc4ff7ec856f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e4dd12-2295-456a-ae6f-053b4b66c828",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c49f4c-3624-4f59-ac16-adab2c3cbcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c61c38d-2f79-4fc9-b547-171719e2c1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9a548b-c7ef-49d8-ac21-cfa10d7ea657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad6245f-14cf-4081-bfe2-cd8a16cda8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785ab717-9607-477b-994e-280a30bd9302",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274367d4-b1bc-4a2f-bd2e-9a910bcdd5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd1d0fc-f510-4330-8cac-f0b150dbf3ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e620bb-a349-490a-bc2d-d0f3bf9c98de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd3a500-3a7e-4fab-be31-8a61f4ce5aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad27163-fb63-4ce8-8e58-9963855e7bcd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ee1592-240c-4f51-ad04-e0e452a35396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79db2226-b36f-4ed3-a922-633e717e6225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd7d2b1-fdc1-4c2f-9df0-ce1c4a5ab2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4a9df9-ab76-4d60-a0ea-d094522a52fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e0345b-8573-4772-b037-98e9106d0c12",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b3081a-ab89-43ad-ad69-7665667b358e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15512a6d-95d5-4197-a030-33c874274e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab9c43f-a708-42bc-98ec-826b82c626a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d50a3db1-0af6-4b42-87c9-0a5f47641740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6f487b-b186-47f5-9b39-2edfae55c748",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d6247a-38c0-46bb-946d-913e92eb1375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "232db9b3-70e8-4ab6-b722-9e3150df22b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a1d73c-ad96-422b-948a-2623c3ee7bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "80fe7731-e87f-400b-bf26-61d318d247c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada7d6df-190e-460a-acbf-de95be364c77",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722b1742-4795-4985-bd46-78967fa33f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57960679-ad7e-4dc0-8804-b3194d690f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d049712c-3505-46e2-9850-5fd3864a8efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "80b0ca8b-d5d6-4c27-906e-542e39a9d2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac5c788-af6d-4afb-82e4-6b74f3b432ee",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b628e731-0c9f-444b-97b5-a331f9c4fb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9088a9da-c883-463a-b80f-38fb4a9055b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1dc8164-e5cb-4b42-a909-7043ae6000d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a05862fc-8312-4ff8-8e6c-6c929c34c64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e47b5d-1a1c-45dc-a6bd-dff33491ae54",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c0dea2-21e5-4170-b025-b2aee91e2819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9484d8ce-c2e9-4dc3-bb70-9c6311d12973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e71d8c-a14a-4aa8-b989-b6d9a4c901fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c8432d-ad6f-4bc7-8d67-bd70e5277d9a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "16b93830-0bb5-438d-9922-e484e048e2a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8e86e68-2270-4b79-9c51-210896cced69",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3491584e-8372-43ea-98cc-279c1f986940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5a248f3-386c-47f9-8de5-3158031f6eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3850de12-4685-47c8-a129-b5defd7db5ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9632b952-6149-4f89-a6b4-f1fed2e4755b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196d2a3f-bd32-433f-8eca-b1dd303cb538",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8613628a-42c2-4728-a139-b21a85d6a437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb92a07c-2482-4cc8-964c-45914f72c99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ddfc6c-b8ca-4ad9-ba0f-1ba7477bbf9b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5fbd13da-22e4-43e8-9ef9-73ae2e2d8ff3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff37a1c4-17b4-403d-be42-4055dd4dc10f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e88eebcc-0f55-44dd-81f0-b8b58a8ca06c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c89038ba-d778-4257-a6d2-5c3b80106cb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30325c90-373e-4166-ba19-e19b447157fb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "766db6f5-a04a-4cc6-9598-24a4dfbfe707",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53927de5-deba-412a-9f26-758145610eb7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7145a30a-baac-43b9-a500-357c5999dc36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d99c9dad-3b9e-4aec-90cb-2bd6cd8acaa4"
                }
              }
            ]
          },
          {
            "id": "73d9f29e-56bf-4a92-a634-1ee07e1ef2a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e9979ea8-764a-4a3a-87d4-eaa28031e9ac",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f3ceeb2-53ad-4f7f-a6dc-1b0f14411127",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5ab1ce1-ec30-4b1f-9f10-350d5e137003"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72257762-3076-48b3-9a61-39ee62254ed8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "37979115-c392-4e9d-a13d-ac28fc396193"
                    }
                  }
                ]
              },
              {
                "id": "407d52bd-bcef-462b-b741-9956058ad294",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "278f1491-3ce4-4c89-84be-a76c56839056",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3715a477-b93a-41ac-aac1-ef6bfe1a7d76"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6c2039b-d7ff-47ff-aa9c-ae046a537cb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a7649e49-08ac-49a6-955a-2791726306bf"
                    }
                  }
                ]
              },
              {
                "id": "96f14cdc-fc3e-4000-8bc1-9102c33f4972",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c05b362-037f-4482-84a5-54efee464886",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b78cc4c0-adbb-49da-a71d-fee15f676b8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dd740cd-8a6b-49ca-b7e5-75bd50a3cde5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "df1b8433-6cd1-4f98-9115-ffef1391ed03"
                    }
                  }
                ]
              },
              {
                "id": "91a66a11-41d3-4185-aa4f-2f8d10d228c4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea56a453-6bd8-4e3a-bd06-baefd8504745",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e29166c8-6e1e-4ed3-aca8-6867e2dc3c49"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a308684-100a-48ba-8a34-1c7e9eea95cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4dbbe909-974e-406b-96e7-08578757faaf"
                    }
                  }
                ]
              },
              {
                "id": "e65eccb7-f7cc-4166-b511-800d4f27251a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e510424-f6c7-4317-b377-255f076c0578",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "599b79e0-c086-4258-9b51-6458ba7bf624"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86513d0d-efb1-4831-9a24-0c35e7519e37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "dbf48457-e447-450f-bcc9-08cc421badb4"
                    }
                  }
                ]
              },
              {
                "id": "e6640eee-cdc3-49cb-9b28-8a75f0212c53",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7057a21-1a09-4547-8a7c-128aca3135f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0bc19ec-dbc4-46f5-9824-12ea0493f314"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "386ae9e6-2112-46a1-994c-1f74489c8f94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2e1c1d95-5d2c-4d24-baec-02be12a2a1db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b2970fd2-f4cc-41d6-88ed-a1b786b6e3a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e5f7bab9-5532-4c07-a6a3-f41cfa254b99"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a5010c69-3d96-475d-9791-dc6770ca2386",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1d054951-52cd-463e-b235-57e8ea8db917"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "329feefe-f155-4a72-ad33-469b2cdeb6b5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fcba9ade-3080-4a98-be3a-463e30eb7c76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00152729-893e-460b-b720-cbbd98fa3be7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09b5fb49-cef9-497c-95fc-9e46285ba7ea"
            }
          }
        ]
      },
      {
        "id": "f548de87-f3b5-4e86-86ae-1502a107ac8e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8a315b96-52cd-46cb-bb11-a7187737508d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e884a16c-46a1-4ff0-8e67-0502b8837c8c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "afb24f56-520a-48ee-8861-999ecd2b7c1b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5706efaa-c84a-4e24-bae7-91c404de042d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b176c3c-59b1-4383-8529-3aa48b3105ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdab66d7-6424-48e0-935f-5002761520d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b96b3cc5-709f-4405-9a37-1362ec5b1e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598559e2-ca5c-476c-a8b4-98aa043795d3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db75248b-91ac-428e-ac5a-d146667f820d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230e1b1f-315c-4560-bde0-d5114d232ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4396fb-954a-41ba-801c-68d201bc7890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "83bf5473-32bf-4a02-bc45-af90cab44bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b1311a-cab7-49cb-bcf4-197a4315b3d1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcda0cc0-7cf8-4eb9-bdac-5e019d9336cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95748c82-4403-4cf9-a49f-2a5362f375c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23eff1b-bc3b-4077-b533-a2216202bdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe59e6f8-c0b1-48f0-b3bc-13776fcbac69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96edbc5-2c47-4880-80a0-2a8cad1672fd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae60e74-bdb9-4dcc-8750-2b68864a019d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3254750-6eaa-456f-8118-fe53038bf88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc639a3-ccc1-4cc9-976f-68ca67a09238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34be0905-f549-452f-8d91-48ecd818031d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec5b2d1-90fb-491d-b5ef-6dfe189978cd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0740ba-70cf-4ac5-a2b1-9cacf99a5e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6c8e81-e378-40d6-8466-c62b34823cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e8d004-ca73-4015-ad10-6e13e764e0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67db1824-aec5-4cdb-b84e-14bf9394daa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee8076c-3fd3-4a1f-8623-0e65a8370033",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ac4713-5814-4b95-963f-55b3f7041df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40623cd6-53e0-4542-ad78-9eaaaf0e2f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8624584-ef9a-46af-9027-f5a20f7d8743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f15bf4c8-3670-454a-b5f7-bebbc797580b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09655b29-686e-4b33-8457-22ed21f5dcd1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ece42e3-f7e9-43bf-b3bc-cb1474122be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0185ddd1-1cf9-44d7-b0d4-08af326ae1d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65fcdf4-adb4-4ade-bbdd-ca776f91212e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a57d528a-d5ae-4621-ad87-1a17284c9ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0c6012-addd-44b9-84bf-af1ed887c9db",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2437773b-34d5-4c83-9424-bc0f80f05595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c956cb4-9ca7-4e4e-8ff8-f7df6ce5265d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79bc0e8-0996-4060-bee6-862934848447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47e01113-7b5e-46f3-a74e-75dbca4c61cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b871f7-aa10-42ca-a91c-b5a0e7677fd2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8325c196-2872-4dd2-8340-7c45b2b7cdf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8543dd4-0179-4941-8dd1-ebfe12c85a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001fc071-be89-46e4-b427-e92f5d5c02a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19045525-296b-49fc-adcd-eab6e587399b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32126590-7c0e-453b-94b5-4a5951948ef4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8c67da-488e-493a-b685-6b2126996cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df920805-0cc4-4df9-ba93-e11be516285f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32808fb-1ca9-4b90-b047-c445d3e0798d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dce864f-adaa-41f6-9b2d-0b61537f2d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c073b0-6b4d-4239-a0fc-651baf4e353f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e023d14-c550-473f-98e9-9c21db2eb038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f750c29b-7e18-4805-a91d-6817f365c78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef93c972-f431-443e-9ce0-8757249ab921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "dddf1874-d735-434c-b56a-bad3775f6f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17facdb7-6cc2-450e-8ac7-c56028c91ac7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2320fe83-e445-4aee-b1d4-a1a1ae7b2918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c174c44e-18cd-47c7-8498-5f7392a6ffe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcaf7357-3b6f-4db0-bff3-ccfc219b7ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc14726-ef04-4b4a-9dde-fdf8fb193b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b38f771-dea1-41bb-891c-79f164dc87d3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad491fa-37f7-476a-bf37-955685f64b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a94340-71f8-4abf-9cb3-536ac424f2b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517c7452-2478-493b-9af2-f7dcf106f4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9d61f7-e06a-417c-8684-bafed406c455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61a1d78-d711-4124-8e7e-6ddfcc88c432",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65e2427-ee00-4a70-a989-9cd2dabfabdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94f4359-f547-4827-94e3-c73558963f45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbf7d17-4ed6-4ebb-88b4-cde19a1c98f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "17080b5c-b668-42ab-8714-072569a4be90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041f098b-0ee2-4fc5-a8be-4f3c5eae7c80",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f6b0c6-da47-471c-b981-90bebf76b6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00432639-398b-497e-82a9-6fe4ae690464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1407ae-3054-4f0b-a5fd-e62ed64e6cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "45debb38-42f9-4d24-affe-5d4e2f855870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3c6cec-f58a-4be4-b9f9-2c2138131378",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46d003a-caa1-4c75-a25c-2a5ac4793db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51cf820a-ecbf-49a2-8b5f-e940d12b5af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234b2eca-dd9c-47d6-a490-a4b7780609f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc3b474-0cbc-41ef-85f3-f665de99c8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315543ee-82f0-44de-b9a8-6f98ffa015dc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2df8c5-5e32-4f8e-93dd-0de1cfb78f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab76bd8d-316b-4940-83dc-118a3d9affec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf73480-8040-4247-a10b-f9aec2593fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d0df0e1-b263-43d7-a12f-e793182dba5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904cda40-85a5-4f01-86ba-3e57436ccdb1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def68085-4f23-4951-bb8e-eaecde2c6f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa01930-e878-4c8a-95da-6182b51ee053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a75de6-291f-47cf-b833-9a0172cd1ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f99859-9993-4ed5-9003-8b8293cb9c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa19bdb2-eada-4e02-863a-ea1600cbd1d2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a408f7e-ba1b-45c9-ae58-d974880a7bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d39a5d-5a88-444e-aa2e-8fbb0ddc8095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f084c1e8-9ad5-4576-a74a-d0149652fd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41d48b63-8557-4e14-9e18-3b30ea1ff0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ded5006-1c56-4abd-8699-9ec4cb9408cb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558d97d5-c48d-425d-af7b-8d78d8a3dbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9487b65e-802c-440d-91ba-8c4144396216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f985f245-2f4a-4123-802b-ee7818a1dd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "870d23c7-fb26-43de-a157-bf043c4ab023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a0a35f-7df3-43d6-b0dc-a806d5879e81",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd3c3d7-496f-40b3-b87a-e25ecc162ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427cd4b5-eb47-43a7-bb88-e710cfb6e521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdde261e-e142-4119-b129-d137e66996d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1a18a3-6bd3-4887-bdc7-57da0da359df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7feb920d-bc8c-4a15-b343-1f17f5871240",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b8f6ee-3445-4674-af5b-8d7d6e8f2657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4ba767-670d-4907-a684-4b9bdbad391e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0746d7ba-5c1e-48d9-98da-4298516d132a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a10d3114-1060-4f4f-baa9-7cdf25bf3b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b780d48-70bd-4d7c-8e19-d546e796ccc6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25055f62-cf43-4f0d-a65c-6076e584983c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f54f700-80c2-4e73-87e0-a1b32b981b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30076e36-2830-49fc-b7c3-6f88d3b0f5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76f0e1e6-4830-4086-a85f-0ca0864beb54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750b4929-e41c-4273-8a00-6c72c444279a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b362a880-7859-491f-913e-31632ccd6d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ff25d1-b7a8-4487-88ac-3b592c425398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde614e3-8071-4e9f-a1b0-2afb14068ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18c8681b-b6e2-44a5-97ff-bbbd20d8f8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791f59f5-955f-46e2-964d-b5d8903c49ef",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371f4613-4d4f-4b0c-bdb9-72260a8e1011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ffda679-44dc-4013-8bc8-1de60d532c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd05169a-fbfe-4e90-92b3-12ab4132841f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb86822-fdec-4fe9-92b9-38db39970078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a9834b-c4a8-4641-95f2-229f30282b7f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf74d5d-6646-4dd4-9f6f-352fe00497e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359a1fdd-3db1-46c5-abaf-12e285d16e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54073149-2b6a-4475-a131-b513397375b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7769d7a2-d9ab-45ed-8191-5c7cfbe95a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c43eea-6c24-42c1-8ba0-fdaa88cf79a3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d8055b-5a79-4747-acf3-5c19a086e323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "445b7f66-88cd-4c91-b461-69ac209c1ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa5bd32-e944-43cf-a524-f753bfe24ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a4e989-f11c-4aa9-8163-e7226e657201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f938cfc-9fef-41ba-89fa-c07de0fe9c34",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1d03fc-bf3d-427e-9232-6565377f7869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e5ad8d-75b0-4384-be24-e51654b7f89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da41db8-6192-4afb-8e97-4117c67ddda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efddce37-821d-4fd0-aff6-f9310ad1e24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc7d2f8-a2b3-4a94-9905-a693770a9aed",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506bc96a-2d69-4bbd-aa49-df2899e67cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e87d882-1bb2-4667-81dd-e00830201ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89bafa7-0837-4307-9f5f-641f0bf8bba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e422712-e76d-4807-9057-9d94b0ce3d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d634da80-2e83-4cf7-88c2-cb5eb826b949",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196fd1dd-7c73-4ded-a48f-08c1d84b15c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85246859-f047-4174-a250-fc68c102dbe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8b4033-cc4d-499f-ba45-2dbc89ffeead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a12a63-cf7f-4413-ac31-ff2aa758037c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f87b72-30d6-4d39-ae99-a4006987b2ae",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2552c0c-047b-4b03-bd16-3ff5e7f62bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2d2a50-d274-4513-8176-958d8c3ea993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85581123-9e00-4ce4-957a-4d487be1770d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0f5bed-c29c-48d4-9201-a03a01c22b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce66c5e-d189-47ea-995b-c2f7519249d8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789adcd1-ea42-447b-b71c-e371839f650a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e3f455b-59b6-40e8-b6c8-f4fc094c6fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08edf11-96ca-462e-b12e-b686aeed1d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27571e19-61a3-4cea-b73a-005b57dc217f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "54ac32b0-65a9-4acd-a9e2-077ad2ffbc71",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5103a296-7ad8-4707-acca-94af38e60643",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad577505-8923-4f1a-b645-60596af4a526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5967ac-2751-475e-b9b0-03246bbcd9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b68febf-f1c4-49b9-bccb-a3603f18daa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ae87fc8-35df-4a74-84b2-0cecec69450a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59703ec5-ef77-43ce-b31c-8a81ef15679f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9f3249-311b-4515-a13a-d0092fbb116c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "09c75d96-31ea-48df-b843-1e704dfe2b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1fef46-78b6-4f20-9c8d-f84a7176d12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "943f4613-31ef-4cb1-b8f6-0c4b8ef3ac43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37dd7a79-1893-40ef-95c0-1c559c8227b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6140cb77-2f81-4743-8c69-47dac122451f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10121b16-6931-4fcf-9898-17e6bc78bf16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d714b2d4-0aa6-4164-85ad-ebbada9b33bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ac50e8d-694d-4b60-a7aa-350013893c61",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a32e786b-beff-4a0f-8b47-90614c3e3b24"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cce6c9a-ab24-499a-a1d0-be51428c7303",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74013c18-4d19-42a4-8075-ef42622d84d8"
            }
          }
        ]
      },
      {
        "id": "433c270f-f11a-43d3-8a20-dfc33dabecbb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "76d9dacf-3caf-4462-b9b6-9456298d0084",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6eee1032-b75c-40f3-acad-41ec9c9c4b14",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c6090137-6b24-41e3-9f9c-2580cb2e4346",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f374de-6c3a-4c06-b090-468c51a5b487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d090c7-d3a5-45a8-ad46-daee3ea37d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3593891c-cedc-48ed-afd9-a35a2f429a6e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a57524-75a2-427d-af80-98c855429a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc03349b-fb0a-4431-ae50-6fa93a1cbb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07214a31-97a8-4420-a354-22024b81c50d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fb6ac3-5f27-4b76-8a48-13a97f2f95f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb11d406-923a-4231-af31-8b2b83ab9fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c728eaae-1186-42cb-84c2-769fd55d55ed",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb659601-f939-4b3c-8108-e0adc17df80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f228acf-35b3-4418-b058-cbd0e66e0b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97915869-27a1-4439-a9d6-3ab2339de986",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8d85cd-3f5d-4ca1-b93c-ea210ad6b618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf2ebfb-ca2d-4952-8ceb-6af832e9b84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba32ebfe-fb73-4fec-b7f1-766b9d1785ef",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b8c0a2-9ef1-4432-a93d-cc4ca964143e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4530b5-42b1-4e92-954a-7f7d8c533dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d529cd19-50a5-4f05-8f35-a53db4f3ef88",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35aa02be-affb-40e9-80c8-ef01a835f5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7422c8c1-921c-42d8-acb1-13be0332ddaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5921da-6de9-4feb-8c47-addf382eedb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "294eddd1-322f-44ae-91f5-24a2db8d3827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285e07ee-3670-49f5-afa1-03dd9cb76fb2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b075b49-9e40-4459-a522-5c25d0bd417d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f6776cd-d317-4778-a502-2957dd1b4520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f67098-c2b4-435e-9514-6566fe3aa7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8745d7ac-2cae-40fc-8069-42da84373fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235e2622-78a7-4377-b9e6-0628c8c65f7a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa2e0a2-acd6-4673-85ef-fe387f9fde14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9776785b-36ad-4322-add2-52d5598869f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ec1410-45e3-4195-ae80-876d8470dce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c26166-b106-46e4-a8bc-72fea2faa4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba19ae2e-113b-4d65-a7da-16d246e09139",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b0f5f6-9407-4bdf-8039-6e3b4a2b8804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c11aedd2-c2df-48f2-8547-ec7899190e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3001e8c7-6b24-43cc-814d-2e9e312a4480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18e9ec6-2187-45e8-ae28-3109a6da89f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8717b3aa-7e38-4dfb-b5ca-89e04ee8a5c3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb3e296-4da2-4e54-94f4-c87485595347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db10a47a-61fd-44c8-a56b-6156792004cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7c57ec-641b-4d9a-9425-ffa3b06c2b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac7c2cb-e5cb-449e-bfb2-13e37487f239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957c21b7-d4e1-4095-9570-0cbe70fea29f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7e4116-3484-4fec-9466-5d28d1bb5c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad6afb1-14d3-4194-969d-69c91c269120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2ab946-2ab2-4406-8774-23acef192902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee3cb44-3178-4a82-a19d-614b531055ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d968d0fd-654c-4946-afe3-173d8f467e9f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d46f4b0-8e47-4afe-93d4-3dabe86b2245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b89e026-7fde-4b5b-830c-f390b200418e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0a88ba-feb9-4df5-ba38-6f92df2b3104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9113e098-952b-4ec9-9fe7-b7681644a084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03738549-d6bf-4306-b210-cadd79669f13",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf3f630-7b76-4708-b26e-f7982a500e99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16553676-ccce-4bc6-ba31-5fafcdcedb07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9589b6ec-577a-4306-9afb-c39c941ebad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925292cb-ce97-4996-b148-f0e80be285c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff08f7b-9526-41c7-82c8-bf694f9d9f12",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4424ed6-9446-4134-abce-72455fe67f91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b900998-d106-40ba-ac93-a8798a46895a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6457580-9fae-42bf-8164-5a74f005c630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de55549-db04-4948-8faa-7dd6ddf70af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef30ace0-bccf-45da-a633-cdeb1780405e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2a42bb-5e68-4526-859e-ad97e7fd9116",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6e4eea6-8904-41c2-a170-282f50c0c35f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e1da3c-6c6b-45c7-984c-eb15541ff615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a7b2f4-a8df-48cb-b240-365208a7d08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6e49a3-50b1-429d-aa7f-dc01741f9671",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f57b79-e800-43d7-97ba-c87fb1efd907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8010ae2-6e41-47b0-aa56-d304fa745710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba81b72f-c190-4252-9d5d-b3c53a409722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d046c45-9e82-44a2-aba0-e1b813c56eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7778d8-35f5-44bb-a93a-985cce53aa21",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76056ed2-bd89-446a-82c9-d630782abd14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ecd858-2ca1-4a71-a541-2c92deba47ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd864e11-5d4e-45e1-be76-0238d246c98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1328cca-1397-43b9-af99-51569e6d6d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ee82e6-ee1c-4f0b-ae9b-f4a7a2c0e991",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec28d1ee-0e8f-41f5-8b3e-7d6afee6132a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47316645-b335-45db-8bad-dd9c8ef9b077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5773493-ef12-485d-9179-8af361ddbd99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79faab74-45cb-465a-850f-3e48c0a8c89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4e5e62-a13e-4e17-b89b-ea5c9e40de08",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af16492-a30b-4771-895f-fb750058cb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2e98b1-bec4-4c53-8941-4012bf75375c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc10c2f-3676-47b4-8e97-4a0f82bf4cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b5834c-30c9-4d22-b5bd-8b23d4f1e14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786e300c-29f5-476f-b1c0-8152186c94d2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082c0e38-d882-41eb-9768-811f24c026b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8f017b-71bf-488f-b822-5841a00a960a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692f070c-6a25-497f-81ff-74f8e24bedf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710076cf-6fdd-4bc6-b1ea-c81f7a3e4452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3ff63f-e83a-4b0e-b005-f1c7f4761ccc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d6761d-45c0-416c-ac81-a0fb3653f2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d2eef8-3f82-46b0-9b89-483204dd8ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb745c4-3efe-4d6c-8dfc-df3e85275e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec749612-67cb-46bb-b8b4-53b4362a0624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5cf696-cca9-4ce8-a0f6-f959c69c5be1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d423e8d-ae26-4f88-a7e1-6a9566c8703a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec508f8-5f42-4a6c-bcce-0002dc34fc90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9da82fd-deca-4359-8970-e7540b776cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b4caa43-c13d-4206-9c1a-7d383e6e918e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc588a3e-038f-4a92-b5f4-5e91c2a6b68d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bf8534-ff6f-4c11-8ef6-db400102e6fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e65f0c-a5dd-4ad8-ab3e-3423f0b4b268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d88654-37b8-4e52-af8a-6e366e7b43b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbae110-43e9-4550-adaa-f581bfca7c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0bf0c9-3dfd-43d9-9eef-0febb8ea2c69",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec8bd9b-c1e1-457e-b5b0-13994466b63c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "295805c3-daf9-416a-ad4b-15c41e752b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f54571-4788-4896-8f46-b2053ed5a0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7a1048-6dd7-4c37-a0b9-b39c614734e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b4145a-44d8-4d19-8efc-6bfbc5a9cf44",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e78fcd-e95e-418b-8ff2-26e1218fa768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd398874-a95d-44a1-8c9f-a79a1ca90948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d385b21-d527-4ca2-9573-8634925c3102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fbdab8-11b0-4b73-9548-3540f01fc552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae1a000-f43d-4d2a-b37c-ac5dea6bb2ef",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c534b2-bcf8-4b92-9646-feecc5bbb0e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b08b25-5cd2-402f-9416-fe9257d70bc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a60574-2bbf-4417-a0bd-61e84228a611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e13dcab-9f42-4269-9c96-92a0a7e2d78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0d9dfd-77a5-480f-90ab-56cdbe3f2bef",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c113d9-5424-4656-bdcf-4d13d334406e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7648dcf-8676-4af0-b6a1-1bfdcbf7cf39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5e8bca-0f26-4961-85d9-0e68701b49ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f55167-48f6-49b0-8e4a-4b5736692af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9218e3f-0ac0-4c48-b7d9-9db7de1ac796",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b39cb4-8435-4cab-8071-ef68aa55491c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df2f858-5295-4657-be64-0a881f292f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "124eb759-9345-4522-a779-540363d96dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc258db4-fd7e-4dfa-b2a4-d0d2efc0d59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19aacb8-77fc-468b-aae5-60d5516431ba",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b1b43c-7791-41cc-af26-4cc77035843c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71cb7ed8-c518-4d85-9ae1-2ad36f4ea18a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "729f8ba1-d33b-403d-a4be-505f754bceac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257d27bc-deb7-4e44-9cbb-f4ff087a719b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067cb9c7-83ab-428d-a303-3343d7c9cfa8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2ef6ea-82a0-4fe3-a586-c98b1052304a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a7bfde-0a75-45d2-868a-222d49117b75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4d1b77-6cc3-4845-8979-a49661a2574f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7270e7a-8d2c-496b-866f-2b1e1bd590c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c345a1-48f2-44a1-a1a5-43e6c2ecb706",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61338b4-cedc-40d1-8fa3-6c91f73f0eed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63b3738e-a13e-4b77-a66a-d2752e7337e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe5d01a-0e08-40b0-a08c-39384f50fa63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31219e25-f70b-4c5d-b49c-42d32fb80de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ef5158-bc29-4c50-b320-c2c60867240c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3933026d-994f-4aa1-a5be-327be63da9ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f243a5c-bf66-428c-b3aa-e92c0fce38fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "844cc312-e139-4fc9-b711-fdbc87da3d3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "313edb96-69fa-4a61-a1c1-dcd242dc34f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815a2a64-8a46-4cf4-ade4-de0f5cc2fc69",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1daccb0-83aa-44c9-8acb-1c5761663a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7151d05a-d3e3-497d-8147-27c47d2ddcde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a08f74-645b-4d04-98dd-eb33129c186e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da4531e-6364-4dd8-8096-96caf905d7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd590b84-2d3b-4d5e-a5aa-0a49bc5daff2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84ab05f-809b-4827-a7e2-f76ce0e36a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65af9b60-7176-4109-8a87-fd2e7966e2b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a981fe-c9f5-4681-b674-0f433daf2259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e91810-a58d-4f5c-8ad9-acbdaa0259ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a75804e-e0fe-4ad2-9432-259344d076c8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e69c4b6-3031-4b47-a390-ad1115ac23ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51994166-3920-4c76-8c93-0772eed07038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6186e77f-3d4d-4a78-8db4-b703480e1d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07bf7112-19df-4dd4-aa50-aee46716cd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a291dad-d940-462b-880b-bdf17bb44041",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5d617f-a3be-4cfa-b253-ef2950166964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688f3067-e4e4-4aef-9d68-da4bb578ca53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7526d8-a9cc-4ee3-9046-910038c926ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3959fda7-9025-4e02-95d8-784116afe2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce83a788-9dca-472d-9a7d-5b60480050d4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9f2cb5-55f5-47bd-9678-d3e9e96c7862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5ea93e-8e2f-4acb-ae1e-7acc74b49fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f71110c-fdae-4b66-bc9b-ff88f904f22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce1e4a6-df6c-4438-945a-3dd316edc96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399b5b2a-6761-41ab-bf3a-813ccab13b5e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d77eee3-7f6d-45eb-b9b2-3e6a05d9db68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb645e1-8910-4662-a011-662c61dbabc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "857da5b0-dba3-49aa-9033-1c2b026c9bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8aab76f-663e-42e4-9dec-be6c95cb6b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a511e22-c9c2-439b-ba56-4ebda2bfb488",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2e4ddc-8192-4645-aca7-d90d5d23677c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bf7ed6-ab4a-470e-b814-3e1c8af8d406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d189916a-b627-4283-8793-21d4fa65c3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec3e315-4b2d-47e1-bf9e-ab368b236c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67a8dbe-5712-4e87-aa54-3a5809460ce1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60900cad-4f0e-4eec-9d9b-e47c65995507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e447895-e490-42be-b1e5-db38f6aca48d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba33c299-e7fc-4525-8796-aadf0ed05597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d94801f-9b97-46dc-9d11-85065b0aec0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b97b408-f90a-4367-8a0e-07c1af81197e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fee34f0-634d-4d4a-8826-e37ebe4d0628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b16226-f15e-475e-b452-343aa5e075d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41b6618-8df1-436f-b580-5fe7fcdb82c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1213015d-79da-4e50-8db9-9b592855c4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa63e06-c82b-4e49-a395-0f4afcef8b91",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54a6d32-c41a-479f-9d71-278c8103e6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b0444e-3290-4cff-ada0-a1ae4958d848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae816509-11cb-46e5-97a5-c47b9b451790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc068f9-56da-4906-9832-3c10d008bae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56661704-e2b5-420e-9f9b-4c716a581a0b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a618769-ae10-43ad-b0fe-084fbccdf2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf649b4-6eaf-41b4-b7fa-574953188a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18eeb8c1-bc20-4c48-89e3-550a1d489b62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85148e75-284f-4dd2-90bd-5dae4f4ffbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc875003-528a-416e-a822-d066cc739fc9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc06ebd-b281-4701-87b6-00778b6ccb08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5161e27-03fc-4a6d-8387-d5c6eaeaa9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8033c823-c4a1-4578-a99f-46e4e3957922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e89e8f-fea6-4fba-ae63-85768a822e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b588fd-7e97-4031-b83a-eb47fdec16a2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5d7d74-d868-4645-8f3c-4d769430d2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0f613a-e8d9-4f9c-8f74-fb0aeeb495cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cf86d0-1a3b-4385-9221-4054270ee23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1c4f89-ddd5-4b0f-ae66-2950c29c7da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27421c2-48ea-4781-afd5-14f5c6161e02",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbdbdc30-0dc9-41c1-b969-09f29b008900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8318a2-ed43-41df-b42b-4c751b359a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e29cc63-5130-4b59-b7cb-cc07e68e64d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4257116-1837-4f0b-b59c-4fb011d348b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca9975b-c501-4a22-a3e4-a0dc6c727340",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c886b1-12f5-479f-9834-873d791d2f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da60d3ae-b190-44c0-b421-5318feea3f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aed24c7-a455-4e9b-9c94-74b51907f264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f46432b-3290-40db-94a4-3ffaeb841c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d4a16b-5406-44f3-b842-5a2c03b9be1e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18eb9f0b-8c09-499c-b409-f247dffa50dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601512d6-119d-4f9f-8805-ff819f6be9b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba01efd-0c52-4de2-956f-58fcff8c4ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89458369-ce67-4968-9b92-4185d47b58b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a112f74a-ec35-448d-91bb-526320336816",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a414fac-e46f-4aad-b0e1-a81b308dd7bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33713a75-48ec-41ba-9575-42d186c11571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557377b2-5425-400c-9207-6a4ca51381ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5cb95d7-6074-45d8-8c69-09cf5d448788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de34a5b2-aba0-4f4d-91ac-12b56e9370a6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953d7f2a-d7ff-4ce8-b36b-0c00ad2fe6e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b14268-9baf-44bc-b0c6-f14aca161e0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0711eaf-ce7d-476a-aa2b-612b253376e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97603b6-b86c-43c4-bdb4-3397ea8a5a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfef6d3-ba7a-4d51-9e34-bed581cc8eb1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc102a3-d386-44ad-80c7-e84e4dc861de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5ed118-0a43-4d4a-a174-bec3733d471a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4f2e98-9ea5-49db-b8e4-894a65c8d419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fda9942-5417-4ba3-bb55-1c7127123d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7b23c5-a91d-408d-a820-710116553b57",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880cea39-8ec3-497d-b0b3-c2782a094172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f37105-6bcb-490f-8daa-e8c997541923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9665df-00cc-4855-8deb-3536cf7103f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7257c53-4257-420b-80de-39cddeff48e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cc440d-aaf3-4a04-81d1-5f06968fcebf",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793d69fa-d1c3-4e94-9f59-9afc2d492cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858aa99f-2e2d-4d22-b4e0-c1a015af9187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93d0fdf-5b5d-4a87-b1fc-f8f1c3a7120b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba890259-1b2b-4c81-97e4-075c1e04a7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd9e4de-10cb-496c-9ad3-e5a05089ce04",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2381c0f2-07e6-4a49-a26a-1e96b48d8e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d46d9f-f1cd-4621-879f-d71ab5992ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e8ffb9-1852-4d40-8b49-1b3e38dbf866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2967e32-d8a7-4eda-a5ce-5318d53b20fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54905c30-c6fe-4efa-bd5b-1eff2b89fbeb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803abe4d-80e4-438c-8381-871b1856426b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42313799-641a-482a-bc7d-7a6df8ce93a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3ac49f-9a15-4ae2-81dc-2cf700f96f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2836ef7-9f90-48e3-9bd1-f13bbef04256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f37d34-c700-436e-af71-9b683471ec1f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0eb8117-5948-4a03-940e-b0ad6cd7f5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddaa8e5-12e2-41dd-be77-2169b8d627c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0f3d46-ff84-4d88-bcd9-c3bf1cd433d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47cbefd-e3ca-4ef4-9f0b-7156babb24e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d832fb-79bc-42ba-9676-c5242b20baca",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f7f467-36e1-47ec-be6d-b6e0f994e274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27beee7-00a4-4594-a219-340ad5c5d7cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5decd5c8-326a-4757-ab1a-97f37ea711a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b435cea7-c53c-415e-9c02-33e8289a0d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ea6e0a-4e6a-4730-9b8f-8c6bee83d93b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd50bd1-8205-4f15-a717-f5f97c92d246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3563161-681b-4117-9f62-0d4a7a674834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1221b5b7-e9f4-49c3-92d6-9ce99c77fbfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d53d3e-1ad5-46f2-b682-0c80928b6a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9a0121-5c69-46d6-a661-ca03ae4a47ba",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8dc951-cf92-45e1-a7a0-094e8d890c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdc2228-7c98-42e5-b911-03a52a3cc291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfb5afe-73aa-4439-a7d1-deaac41c0551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0245dfd-3471-4644-b6ac-e3d75f960772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1dceb4-e77b-4d4b-a2fa-b165032aacf2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbb3980-5db9-4a66-881f-33ddfbc45467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03999dd4-74be-4bad-8e82-4d1da33714c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d88b833-a098-4f89-95b4-995d9a179657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7aa7c5e-899d-4bb8-99f6-01379a85eaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3874d8-ffa8-4b49-8b86-6eee07e56198",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908b181b-cd07-4dfc-a25e-b263b85799c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32856ea-4eff-42d0-80e5-489699f85856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de4261a-410d-4c57-a6ac-49d901053ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72b7c32-7132-410d-9fae-576a402ba702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3963bc-cf39-4c4d-8d4d-8aa977e2e87f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab96080c-7b08-47f8-9402-c878edcaafc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1adb68e9-1ec6-4f18-b2f7-8701e020dd27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a29515d-4a16-49ff-a8bb-a3da3fe249f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e61bd04-b894-4f4f-81eb-d239e3c261f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854c9590-45f1-4d1a-a710-9a4f96a7668c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08f72ee-ac05-4df2-8fa1-bfd3b3670ad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da616a49-3f61-4406-9b7c-30c51f0bf3ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a10fa7-cd81-432a-b86d-3ab1a83dd682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d700ad09-4441-458c-8cb8-a478d0012d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061bb344-f755-4f07-b225-73aaa62cb38f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7c43e1-a256-450b-bc82-fa8517317e55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce836b59-1a08-49af-a95e-3059ce21497c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75213f2f-c7dc-47e9-8df1-c799d833e637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ec5a7b-f727-4bba-9af3-ad32d0017593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b187c4c-18dd-4977-8f35-a59d4600d36d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a699c7e0-8af0-41b3-95b5-ba9872c0efa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6af21466-3d9a-4911-9e88-8ae4ce08ded0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57316b45-6ceb-44b0-97df-155ed0f8bc58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13969ca1-81d0-4c06-bad6-a61543348206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60fadf7-eac4-4671-9118-d3bbfd89a67a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21595ab5-3db0-4216-b4b1-a3bea2be7928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecd8151b-c80f-49ba-a422-4fc1699105c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc2a978-44b2-4551-bea4-3ae31133150b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa49797d-520e-42e8-a25e-44dfcf172e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb5105f-785d-481c-b4e1-8d5f09a30bb8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99aba7c7-bbe3-4c52-aa0d-88744cdd75f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d4dac8b-d394-480e-bacb-1ee9dd5c10f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "470ced14-ebbb-46ba-bec2-ab374657068e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b76077-d284-44b0-ab9a-8372c45d2ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daadb1d7-87e2-4a20-871b-cbefb9df55c6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c26646-6ab5-448b-b269-ce40ee7cb232",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cca6e549-d6b1-4fd1-a53b-57a70dfbb327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e612027c-9198-4fd9-8a37-20701cde07a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56cb1ef-f950-4dfd-aa71-d4a642570535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ad51e4-d5ca-4fad-966d-973ad747c2ca",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61873e01-b3fb-484a-9cbe-6b2dfd1ac7c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39e4e230-cd83-404c-83ab-4d286d99ef65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbaf4633-688a-410b-a6b4-2d10479af089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6a58c1-024b-4002-9e45-0a099bce5e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdeb0415-6e9a-4391-804b-f1fae3f6af53",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef71acb-6b79-42bd-bbf3-828f2a3cfe39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a793c9e2-c433-41c4-9b83-3ae3055b85ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bc49fd-7f94-4b21-b83d-34ccefdd1c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49a7bff-6d6d-4961-908b-93fb554f9ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7813805d-bad2-412d-9bba-8bd529647885",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae248e2-8af6-424d-be22-5ad1e81b8f31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37dbadbc-eb68-4c27-84a7-c426be269d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e3c620-3dd3-4975-9f9c-710fb908bed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5560c1cc-cae7-44af-a42e-2208e33d8594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91495175-f790-4f4d-ad8c-365e25e6b653",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97098b90-d77e-4d90-ad97-78fb660bdff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f81cdae-d3e6-471d-a72e-46568f6dffae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e88297-85a1-409a-b893-360be6a7144c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513ac600-a507-4a48-a414-0f1196e3d0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6a9427-bc9f-4555-97c5-65ba2d24bd9b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49df1bc4-39d8-4939-989d-249b7dba8d28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb7e016-fe76-4317-9f36-2f7bb3ba9e11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0bd9cb-bf42-4e2f-95ab-9c73a9c3aa22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5979491-8053-4962-9d6c-dc9b8b6d0788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d661d0ba-03da-4848-941b-d3eac8170c8b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9d3e69-998e-4d2e-afdd-32496081ee84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d71046d3-6ff4-4f31-87a8-cfd2b3d218a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab589db9-2d05-4891-a810-fc15124fd4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9401d832-fa3b-4dfb-9e00-1251830ed907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff1aa59-1b42-490e-866c-a5e7446f9c6b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fbc2bd-d0eb-4cdf-83b0-10476f59c711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11b85641-1604-4952-b58c-ae800a522c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0499a0-a029-4b30-9492-7121770841c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e84045-db8e-4b26-95de-d65300ad1edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d222400-d446-46e1-9050-f5b11339eca0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bb88f2-18cf-461f-842c-8a752700afbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c41ee746-e9cf-4723-b55e-3508e3564acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3b2e1d-988f-4e2d-99c1-2b8bafbb77c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb35af23-b6e5-4c80-927d-e1450b91ee74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cec3a17-2326-4c62-811c-90d3a4aea719",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbe3dfe-cd83-4560-b30a-d8916eaa9232",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39cd94b-dc4b-41e6-abc5-40b20b62f5c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "706f6880-e3eb-4ed8-a06e-a88e267f6a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e59591b-3345-46a4-bf5f-965a719aac5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd153dee-1bc1-46d9-8281-0d55ec8c97fa",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d36c24-cb6a-4b7d-a3fc-417a0c93a2a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "277c8fd1-0395-4477-8d91-1d27ac5f4085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513ca9da-ece7-434f-8421-7de24fa855e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1917b6-2d85-4dba-a205-f425a7c100e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ff5ec4-a07a-4428-b249-9b5b32a37b7e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f73294-dd67-4459-bcde-64c9ffea58c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20634cad-d28b-48ae-a56e-d1ea47db31e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80b2c3a-1676-42bc-bc49-db7695b61b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72f3718-7c29-47f2-8493-45ef86247108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedfc021-cc38-4b4c-98b3-9161d2be5d46",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda4f780-5fe4-4c72-bbfc-8c7eb51a299a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4816d19d-e108-4dde-a113-fbbd614507a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eaa5112-5890-43ca-aaea-ed2cc6999425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c14881e9-804f-42f0-8fbd-215b5810b66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97069905-af6d-481f-82ae-c1ea8d760d66",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eadf39a-0e2a-4418-be8c-adb432805faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e707c4f-1a52-4a6b-b378-f5eef65f50e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a17d68c-03db-48d9-bc97-ad09de9df28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab3c0be-6822-402f-b35f-bc0fd1cb8c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14e49ec-c4d9-4645-9ea8-ff5cfeca205f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8c3bb9-62b8-40b8-a3a8-c5dfac981ed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ffb2dc9-3b0d-4b3b-8602-32e13b8c5b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1080eaa5-a508-4521-8c9f-9708d1b40103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab05f1e7-00c2-444e-941f-84d2ddbf8ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f2645c-3c31-45cd-8541-7b06abca952c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1a6350-0107-40d2-8f7d-96f2e5a814b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c61e1f4e-659f-4a5e-b410-b2cc8c6e9d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ce613e-9fa9-4cee-be01-f43579ab5aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c367bc-b6f9-42af-92f3-044982f83bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813b2599-984f-4088-80ff-a8b9bd0ffae1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c986a0f5-d4aa-43b2-a71e-15f24f780655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52ca9069-3782-423f-b0dd-e4c34f093766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafdd7c2-2b1f-465a-bcb2-e514e0920324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990b6f16-4d63-4683-bb8f-34abf2dc803b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1690a03e-2bfe-43f2-8b4e-fd90690bcad2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc23249d-eb53-419c-9b38-2a65d641c4a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45efa0f9-09fa-478e-a5a8-1f847a6b9476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f90f149-d324-4792-8bd5-7f00ba2e62c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e89fa19-b2b1-4828-b7e2-58982f5d75b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b02302-18f5-42e5-afc2-e76a58da29aa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7336239c-14f1-49e5-9868-9757578bb3ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6906157f-44e5-493e-95c1-9256ba935672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f6101d-a922-4990-9bd6-2bba55434511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97129c64-de69-4d29-b287-abefec6c734f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90d050d-4581-4a16-9879-d3b458231e22",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67565fc9-a5d3-4975-b4fd-1276a43cc689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0489be3-189f-4cbc-a9f2-a79956ab4844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9dbe482-9104-4f69-a82b-cce09125bc0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc0fb16-e5c5-49fa-b55a-a16a22833b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7deea449-cded-4805-ac17-26f867c6f86a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42861a07-c9eb-4781-9eff-779e8b907c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ccd745-1f4e-4017-810e-276914b48101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b48527-69a7-4e9a-8003-3b64889a6bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12701f3e-fe5d-44e8-9db0-815b2a895f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbddbfa-14e0-4c67-b5b6-2494fb33e205",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b28913c-b63e-4b7a-9c6c-60d3831b207c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52d4078-d260-45b9-831d-feff858305f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa04bc6-6cf3-442e-a2ab-41be8495bc94",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40954a9-9d19-441b-9fa6-9c08c27ec431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad018a0-459d-4a1d-a38a-4de0c4e851c1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41828f90-f729-4b89-b88f-34ff460a83e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a49573a-1135-4df7-a95b-56687ab5c7e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a80046b-e663-4798-b5d0-455dbfecdb32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1094f47-34fd-48c4-929c-e5637a7bcc0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42780fc-ba65-4ecd-ac43-d623fdfac61b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003bf822-0cf0-4da9-a132-4a8c2407f04a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e181ed6-8989-4fe2-bfe7-c5e131994b5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6ffe6f-7faa-411b-a71c-85e0f7754a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b4a3b8-e1c0-4a1b-b8c2-5faae97a38b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fcc48b-e3f3-4570-85a7-2dc81c6ec98a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f9b677-a69c-49fa-8d32-c6e43f6023a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84894273-2999-4ffc-b565-857c698322d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8034a6d9-6bcf-469c-9356-e49e7d2cae74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bdc213d-7e34-4c81-bfbd-d8b6c4b516f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a7af4a-b6ba-475d-9862-854c69eb7075",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c69a4e-10b9-49bc-ae56-c94bd8cb8be4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbd7834f-1ce0-443d-a236-aecf63890bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c9d6fb-ec2e-4a49-a89d-d0f2dd5fddcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f512d194-bb04-4f11-9fa0-c54d04177c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5539467b-eb5c-49b5-844e-4d1a0a62ff15",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d448e1-650c-4313-873d-551add051f56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "769e1693-1107-4c02-b186-32d02633489f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a71bdd5-1de5-47c6-9f4e-fde1bf222803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ee4c73-4728-4037-a777-df5e578a129b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a0747b-aadf-4dc8-afed-16c4d9a5365b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc732633-0841-471b-b05b-4e43479b5fbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9208374-df70-493f-ad30-eb730ecb7a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10df8734-b83c-48f4-b52c-cb088a37394e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf06dc9-5284-4894-8eb8-b4278b6bbc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3277aedc-1741-408e-aad4-d406d2f8666e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22769792-8f7c-4a7d-b5f6-d95670feb042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29a1a4a7-8052-4881-a44b-f9803b79d760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1203b45-0db4-4c83-8b60-150bc98ee2e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a1bb9b-fc47-4fa1-955e-0bfc8602535d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cb72f69-3e8a-48ca-a915-816157ef1d1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b28b03b-9dc4-4003-897a-05aea54fff70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "572992a7-61e2-456f-a4bf-d55bba20333f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1ebcd3a-0285-4d0d-94a1-70f803d71903"
                    }
                  }
                ]
              },
              {
                "id": "ae9b7200-dca9-4f84-87ab-6011d4de68f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cac0864-245f-478b-ac85-bd1d31395c14",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c6ddd5-1602-4016-b1c0-e2de698faeda",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d4e06a9a-d7c5-4fba-a280-653c6c527e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fed86f-3ba7-4cfe-b25e-1b93aa1c27d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00fb8de8-464a-4fd6-9c68-4df611793bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044def4e-46d4-4fb5-bd99-2dd54d7a7266",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da1ea83-e5ef-4bfb-9f66-4f74a6bcc994",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "178c3346-42d8-4c48-8391-4fdb0f8d29ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3655327d-692a-4c50-bfea-4e18020271af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fffc6da-8b39-4356-ae9e-456f884e6d19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2bf3a24-cdb3-42fa-8cfc-20a9cbacfd25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3ca1e3c-cf37-4b59-b44c-6f8b082c8a08"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9786f4cb-ac59-4074-b429-876be7c69647",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d78b2d3-b2ad-4f46-8859-b20ab80666aa"
                    }
                  }
                ]
              },
              {
                "id": "98725f70-2ec4-47be-9e5d-381a9dd1c744",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ba9206c6-18e6-42aa-8f49-f41f15896355",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb999ae-504a-4670-938d-98cb4f5bbe8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0dfcc088-9696-4a4f-939b-084e865fa9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a00a83a-dae0-4816-a45c-ebcdb4611917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb887092-0cb1-4812-a28b-5c7eaccff026"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "41cc657d-41c1-49ca-8ddd-0db0d4d3fa43",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b81f7c05-a30e-4914-8161-667bb8ff1eda",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0823cfcf-2b52-4047-a188-770e6a81a3b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e4948640-6346-46f3-95b0-feb9cd456a47"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "284eb4eb-dae0-4c6b-ad04-c8b29a944c0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e536879-0696-4f80-b11b-508e9af02075"
                    }
                  }
                ]
              },
              {
                "id": "02f20d18-6b52-4201-9ea4-bf1a51b5e883",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "922c8d83-b435-4d53-85af-cf448045285b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b4b7591a-1ae6-4b47-8452-6fb2d82ae150"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3992c48d-4e01-4b6d-aafb-a3b4eeb8f12a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "842d0b07-ee09-4810-a738-38b10e090e91"
                    }
                  }
                ]
              },
              {
                "id": "e4b3085b-4875-41f2-a71b-13dc505996e6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "554e6742-7bf8-4b7b-8212-15a6f9952f73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "70ace4f7-b915-4210-8dad-f4f455b88cac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e646ea23-5b97-4ddf-b998-ce03a63b2b8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a927e001-30d2-4817-8a74-567e0dd49c1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "902f0de8-6d61-4f5d-9cc7-3cc9deaca26c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "be95dce4-1776-4197-87d4-75685f9b4870"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40cdf93f-789c-46d7-910b-fde62b41ef8a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "156d514f-8100-4434-b5af-b65b67f5b355"
            }
          }
        ]
      },
      {
        "id": "bd8701ee-f59c-45b6-a841-0f88cd7d4a41",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ed3bede7-af8b-4463-83ec-b3bf0b46ad8a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2193b190-5250-46f6-8d0f-540b03c63396",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75268514-af0c-45c8-80e8-718f731ca88b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ef37e7-767a-4b5f-bb86-077ad36e1f15",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c469b085-3188-436f-9197-1a7d91761035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d4e648-3e33-40b9-92a0-cf9e67231c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c577e925-8b4b-46d7-916a-cde2116d1ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce65a035-3f8b-4505-80e3-61425f902ea3",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d89b83b-2ba8-4b9e-9ede-97b4c0066696",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4363ca14-1192-4d19-8272-f2db44613bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e120e8ce-3347-4fa2-aede-2ca24006a809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "deef67d5-b60f-453d-89a9-80dd05260745"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daf5fedc-bd31-4cdc-bcb8-27f66b76e004",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5820f80-78a6-4550-a54f-7aec74e47b7b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f6aed7e-1473-49b2-8d79-c698fae746ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d76e2575-e782-4c39-b5d6-5d037eac7722"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4c59cab-d9c2-40e6-acd5-d85c1596300d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc4fab20-29ff-467d-ba33-dd8315302ca7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63067055-dff2-4d7c-bcc3-5a678f481d7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16f4e03c-0aaf-4a60-a449-c7021bbe73f2"
            }
          }
        ]
      },
      {
        "id": "9cabd87f-5c28-4bae-9bd5-fdae5debaf37",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0a3fd3d2-8b21-4754-a40f-a8c7b82438bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ff44b3c-9918-4282-92e5-db604a4b099e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a939fa3-ba9e-47e4-83df-9293fefaa94e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912aa8a0-abce-473f-a7e7-164f9021df6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "22cf4897-22c3-4a4e-84a4-ed9c82251296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2edaaf5-40f2-4e28-b327-cb7db1512237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f584834-532f-43c9-ae17-f43231b103ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200b2534-69e4-4398-affe-a7f5adfe0616",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6393254b-3c0f-4e66-a438-d44a638c1ba0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e290f184-329e-49f9-8691-41061b946618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bf1e8b-2ce9-4ccb-8dd3-32a4e42354be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be150ed2-7dbc-4f0f-989f-2891812440c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05db1262-68d1-4e7c-b0b2-f6e33ce65cba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9fe9be5-e838-4466-88cb-ae97fdcd3a24"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "82214d32-d639-4182-bcf6-35e4d52d61e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9486023-619c-4f30-9e22-ba1aaa3566c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea28cf46-26a9-407e-8bfc-879304fcc2c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e07463e8-65d2-4b9a-a7a5-b09a413830f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21b0b945-c5cd-4799-81a1-5d70f7acf314",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95e03f6b-4eb4-47c7-bef8-a8b61d6d22f2"
            }
          }
        ]
      },
      {
        "id": "3225dfd6-a278-4d35-a3c6-fba05a740650",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "78ccfadd-3625-48d5-b055-414753777184",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b88a588-a22c-4ab0-a5c8-ec3e819104e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "17c75435-2711-4299-b84c-7995ad0011ff",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d64cfe-64e0-453f-81ef-214510689905",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f3e35399-804f-474b-baa1-d1484566e05e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d93e3cf-2b4a-495d-addc-478fc6b9202c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84909e42-34ba-4d5a-a66f-e4cddb0e623a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74802c20-f7aa-4d47-ac4a-7ad8810cd86a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5943b32-7ef6-4fa8-a99e-f5160557e81f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "186c7143-721c-43cc-9703-381e6e82550b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22d9eb9-13b0-4ecc-9810-9a108f80bfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c65631d3-a8f8-4614-b608-2b0573d9b5af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1526b586-fe6a-4eb6-b719-bd2e377240c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5668c5ff-a648-4203-af17-db2076f1b019"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eba44d00-01bc-4fc8-85b6-ce9c21d08c7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12fb955e-18e5-4e97-bdc5-0abeb6343580"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc70870b-63d0-4792-8465-80c3ec0cd0f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e10d5422-a403-4038-99ae-992489348b8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff1e5a90-ce95-4fcf-9f74-b09b31280512",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e36a2c0-2f3f-4b02-8849-dd282a03b748"
            }
          }
        ]
      },
      {
        "id": "a3bfe1ee-10f5-408d-b04d-604e0cae4ebc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36b4e34b-d7af-42f7-8cb8-77f5de891ea2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb3a6df0-3c0a-45b8-a810-b8c5eb54f69b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b35541e7-323a-45df-b576-3137213eb9d3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6fc02f7-502b-4fde-ada3-cc3a90a860c2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93f385c3-bf90-466c-a074-0d32aa74c3f4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 123.37931034482763,
      "responseMin": 9,
      "responseMax": 659,
      "responseSd": 109.35073887729776,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669682505283,
      "completed": 1669682550970
    },
    "executions": [
      {
        "id": "9bb982d9-ff84-4cd9-b4d0-07b43c170300",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4666ee82-8b7b-4020-be46-e77f2877c383",
          "httpRequestId": "c4ab37eb-95c6-4a6d-b3fe-13fdb91419c8"
        },
        "item": {
          "id": "9bb982d9-ff84-4cd9-b4d0-07b43c170300",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e46a0ce2-8ee4-4a46-81f8-0ef7d9622119",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "20c81f50-9474-418b-a415-b0ff2596a99e",
        "cursor": {
          "ref": "84cc562c-9e65-488b-b1f9-21baa342dbd4",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "51c854df-d233-4514-856d-31a31225189b"
        },
        "item": {
          "id": "20c81f50-9474-418b-a415-b0ff2596a99e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "615759b0-6e21-497a-9416-b5e1bbb9e6ad",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "f3690127-1b18-45c2-b500-d7c18f09b45b",
        "cursor": {
          "ref": "3b623376-13e6-4383-bd3c-4aefa69c241a",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ab840e5-00e4-43d4-bdeb-dee9f1a9f083"
        },
        "item": {
          "id": "f3690127-1b18-45c2-b500-d7c18f09b45b",
          "name": "did_json"
        },
        "response": {
          "id": "1f60b386-f7fc-41a1-ae2f-01667976e048",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1563cd-eb1c-4193-8103-47e86eccd40a",
        "cursor": {
          "ref": "877d5450-a50c-4bfb-a721-701afece5e09",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f4bddfda-badb-494d-8e4f-6d1424651125"
        },
        "item": {
          "id": "ca1563cd-eb1c-4193-8103-47e86eccd40a",
          "name": "did:invalid"
        },
        "response": {
          "id": "21e87865-72a8-471d-a242-d31b0e1b1b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1563cd-eb1c-4193-8103-47e86eccd40a",
        "cursor": {
          "ref": "877d5450-a50c-4bfb-a721-701afece5e09",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f4bddfda-badb-494d-8e4f-6d1424651125"
        },
        "item": {
          "id": "ca1563cd-eb1c-4193-8103-47e86eccd40a",
          "name": "did:invalid"
        },
        "response": {
          "id": "21e87865-72a8-471d-a242-d31b0e1b1b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b676a6e3-a291-43ec-8513-c4aba8703d4d",
        "cursor": {
          "ref": "d389407e-d942-4cb1-9ee7-e37f07c61bee",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f8e06985-54ec-43c0-8e7d-f5a7ae38cc5f"
        },
        "item": {
          "id": "b676a6e3-a291-43ec-8513-c4aba8703d4d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "522c6cbf-24b2-4bfb-962d-6a09d075adc2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 197,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b458cad9-d58c-4539-bbde-251d510aba1c",
        "cursor": {
          "ref": "850859c4-9594-463f-b782-8629c3dc31f3",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c6e11149-57b6-444c-8e40-19a3a9bc7179"
        },
        "item": {
          "id": "b458cad9-d58c-4539-bbde-251d510aba1c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c9367b35-8975-454e-9f0c-7d919959750e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a8af68-3be5-4239-be85-93c803f549ba",
        "cursor": {
          "ref": "7a513fe3-36a5-4d15-a276-126f766ca4aa",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "db2d148b-114f-473c-b770-fe385f8cde3a"
        },
        "item": {
          "id": "03a8af68-3be5-4239-be85-93c803f549ba",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cb1ccd57-dbe6-4d89-8b8b-6fdc24d843f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b47d28-b995-4391-a35e-9d4bd6fff507",
        "cursor": {
          "ref": "c0663dbe-4186-4bb7-b140-c5a89be30481",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cda97e5a-a213-40b4-be97-ae82173c72e2"
        },
        "item": {
          "id": "15b47d28-b995-4391-a35e-9d4bd6fff507",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8977445a-df08-487f-b915-556839bb7a9c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b47d28-b995-4391-a35e-9d4bd6fff507",
        "cursor": {
          "ref": "c0663dbe-4186-4bb7-b140-c5a89be30481",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cda97e5a-a213-40b4-be97-ae82173c72e2"
        },
        "item": {
          "id": "15b47d28-b995-4391-a35e-9d4bd6fff507",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8977445a-df08-487f-b915-556839bb7a9c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6384db65-0cd8-4de4-8608-ba63f6dbdec5",
        "cursor": {
          "ref": "c84addf3-18a2-4722-9faf-ffe008b8d534",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7e8e904c-55d3-4336-9180-bd7687ebe0f1"
        },
        "item": {
          "id": "6384db65-0cd8-4de4-8608-ba63f6dbdec5",
          "name": "identifiers"
        },
        "response": {
          "id": "2ab46f65-943d-45fd-9ae7-e47e851e75b9",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cee431-0a27-4676-86d5-cba15d1659df",
        "cursor": {
          "ref": "98340c25-8ff9-43ba-b487-df540cbdcad8",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "00631602-e606-4215-b2b7-cf2df6e05300"
        },
        "item": {
          "id": "56cee431-0a27-4676-86d5-cba15d1659df",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "df78c413-6657-44c2-b8da-ab9c1cce53ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cee431-0a27-4676-86d5-cba15d1659df",
        "cursor": {
          "ref": "98340c25-8ff9-43ba-b487-df540cbdcad8",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "00631602-e606-4215-b2b7-cf2df6e05300"
        },
        "item": {
          "id": "56cee431-0a27-4676-86d5-cba15d1659df",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "df78c413-6657-44c2-b8da-ab9c1cce53ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168080c9-874e-42e5-83ed-d0fc18e11170",
        "cursor": {
          "ref": "1ad591ec-0d48-4e73-ade7-d6015569a665",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8422c2da-140f-4d5a-913d-6144bb3b2232"
        },
        "item": {
          "id": "168080c9-874e-42e5-83ed-d0fc18e11170",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c8f345ef-35b1-4426-9559-919e06dac78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9283bd0-115d-4be8-8131-30b77c851487",
        "cursor": {
          "ref": "88bfd5a8-846f-4729-a60d-1e310d952a1a",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "60aac9e6-85d9-4e09-bd89-93b60e0e7e41"
        },
        "item": {
          "id": "c9283bd0-115d-4be8-8131-30b77c851487",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6bd2c17c-5564-49a4-81dd-6a0846ae5421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7605c1-a17b-4f7e-9d9a-07c320236650",
        "cursor": {
          "ref": "00a328ed-44f6-42a0-a547-cbb03cd378ae",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8cabe902-af43-4e94-b236-c0f8bb0c3a0e"
        },
        "item": {
          "id": "3b7605c1-a17b-4f7e-9d9a-07c320236650",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5538704c-4809-406c-bafc-37c28a95f7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9528d2-b212-48b0-9b05-2cace085a8bc",
        "cursor": {
          "ref": "0bf3ded8-8a89-4f74-8814-407d4ee2894d",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0e9c3ccd-f913-4862-b2d6-055e59d0f5ef"
        },
        "item": {
          "id": "5b9528d2-b212-48b0-9b05-2cace085a8bc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "483e272f-46c7-403d-8112-70ed98ded99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324b7c99-6381-4ec8-9d31-8bb408d82d56",
        "cursor": {
          "ref": "9e4085e6-e4f0-4cd4-8d7b-9493728a383e",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "699b8f8e-33f3-48e5-8f15-030daf45c23e"
        },
        "item": {
          "id": "324b7c99-6381-4ec8-9d31-8bb408d82d56",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "afa99771-2259-4dc9-b304-202a1c0fb253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "befab64f-0721-489d-9d50-2e01befcb7dc",
        "cursor": {
          "ref": "68b1b026-844d-4ed8-acf3-5e738d7d6428",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1b1dacdd-7adf-4397-aecf-b49a59210856"
        },
        "item": {
          "id": "befab64f-0721-489d-9d50-2e01befcb7dc",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "61445562-e7c9-43cb-ac28-fc8e9ed7f0d0",
          "status": "Created",
          "code": 201,
          "responseTime": 525,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a76f6ee9-4dd7-402f-a8b6-7ef5e0fc7940",
        "cursor": {
          "ref": "9e382092-64e2-46d8-a56b-3ff7b82565c9",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0d18ea14-df64-4d0c-b4f0-6c617570318e"
        },
        "item": {
          "id": "a76f6ee9-4dd7-402f-a8b6-7ef5e0fc7940",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "23e7b9b1-ecaa-4180-95dc-2a967d7481da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cbeb28-0b77-4f54-8357-baae2d1d4499",
        "cursor": {
          "ref": "4597a38b-2757-4db2-a31b-edd91c10fbd7",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "89ad3c45-b133-48e2-8551-0d7df29b54c7"
        },
        "item": {
          "id": "e1cbeb28-0b77-4f54-8357-baae2d1d4499",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "88a45410-4c4e-45bf-8dd1-c41cd91ab4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96bb2bb-1ced-439e-a559-145ddb0c6e40",
        "cursor": {
          "ref": "8ea1f40d-bafe-4b6b-ae48-13e1f58a13eb",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "46a65910-ffc8-409b-bf4b-afabf1ef8c8d"
        },
        "item": {
          "id": "c96bb2bb-1ced-439e-a559-145ddb0c6e40",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d19525b0-81e7-409b-b68a-1e3d8e935299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56d51b9-f455-425d-936c-ec9959bb6a8e",
        "cursor": {
          "ref": "497e1e63-03c8-400a-8eea-5c237550257f",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9b6c2d16-26ee-4607-bd9b-fb7c9a107a82"
        },
        "item": {
          "id": "f56d51b9-f455-425d-936c-ec9959bb6a8e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5028b208-585a-49d1-b30c-9b87785e69ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2367a2f8-c616-4726-9310-5909838e5dc6",
        "cursor": {
          "ref": "87ef4dcf-ad1f-45fd-b7ec-2c6d2f4228c3",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2ddd2ac8-3338-4777-b8a5-b7d6e0788012"
        },
        "item": {
          "id": "2367a2f8-c616-4726-9310-5909838e5dc6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ce1f0f3e-18cc-41b6-bbab-b4b14b63afb5",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e9e22652-f77f-4482-88d3-a927354ddd07",
        "cursor": {
          "ref": "f11ab570-04f9-4016-a25b-29760b1fa3bf",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "af849c48-0e7d-465d-8205-c0d77055352d"
        },
        "item": {
          "id": "e9e22652-f77f-4482-88d3-a927354ddd07",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3cd03e88-c85f-4d53-b325-f2318fb555d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d9b2f6-967e-44f1-8eac-837fbe5d6895",
        "cursor": {
          "ref": "f349a761-a69f-4529-8c35-a5856d781d07",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "41d580e0-1022-438d-8e62-14d6a3a49cba"
        },
        "item": {
          "id": "e1d9b2f6-967e-44f1-8eac-837fbe5d6895",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "18891206-5438-4077-9352-bb90b02c051b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c3f9b4-b86d-49ee-9896-2c1a84e75e49",
        "cursor": {
          "ref": "4d4281b5-9dd5-42a4-a11e-90f2429f4a7e",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5b156f08-438a-492a-9224-e58b1d4d6b55"
        },
        "item": {
          "id": "f6c3f9b4-b86d-49ee-9896-2c1a84e75e49",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f1bdde70-8aef-43f9-b178-3c6bf21a71ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7113bb9-0f23-47e6-997c-a5aa72c92e8c",
        "cursor": {
          "ref": "af38c1ac-7e92-41c8-b633-0d1c6348399c",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a08f536e-6c62-40c3-a35e-b67de5bfb893"
        },
        "item": {
          "id": "b7113bb9-0f23-47e6-997c-a5aa72c92e8c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "64def3eb-9efc-49e0-ad4c-1b2bd3d93478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d0e523-5555-44f0-af73-44895a76494a",
        "cursor": {
          "ref": "f2d2802d-0961-4905-a8c8-1add46c3a043",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8a0f7d49-6a1f-4acb-bfd4-84dd1c24b07a"
        },
        "item": {
          "id": "91d0e523-5555-44f0-af73-44895a76494a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0934a9de-0bda-48f2-b886-4a69c422cc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe42a120-a42c-4601-806f-613f2e1dc797",
        "cursor": {
          "ref": "05cc6bad-0eac-45d7-8a89-a5fb47ca7d8e",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "acae7ea4-06ff-42ce-9ad0-6c0ff30128c6"
        },
        "item": {
          "id": "fe42a120-a42c-4601-806f-613f2e1dc797",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "46128796-eeaa-4897-9666-b4f9fe0740f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea6d2a1-2d41-45af-9c49-ea7391c47a20",
        "cursor": {
          "ref": "c26caf5c-9e35-485c-8276-4e6c12cb96fe",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5b5c720d-f572-4029-8b0a-f591ea42a704"
        },
        "item": {
          "id": "fea6d2a1-2d41-45af-9c49-ea7391c47a20",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b9b17e94-1e5d-4ac5-ae9e-974ae3f2f12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974df3de-3e5f-465d-abd8-1cb0da9f22ba",
        "cursor": {
          "ref": "ea86d2e5-6d0a-4bac-9182-c320a547fc74",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fe7ec320-bb3b-4780-82b8-233d6a0da4ab"
        },
        "item": {
          "id": "974df3de-3e5f-465d-abd8-1cb0da9f22ba",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bdd7d090-bf5a-46b4-897e-a570b5da1450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b59471-47f9-4937-8e98-d9a12ce58ed8",
        "cursor": {
          "ref": "25bbbab8-d2bc-4e51-841a-ef6a4ab15797",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6baf3f01-3029-455b-b42c-340de28b3af8"
        },
        "item": {
          "id": "e7b59471-47f9-4937-8e98-d9a12ce58ed8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d4917db8-bd8d-49f1-84ab-b5f833e84916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b29e9fa-6495-4a2a-a215-f665444d81bd",
        "cursor": {
          "ref": "5761aca5-5deb-4da4-85d5-316f917e1ba7",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3614729a-b86c-4b51-a8f9-b49d1665547c"
        },
        "item": {
          "id": "8b29e9fa-6495-4a2a-a215-f665444d81bd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "50760d31-4ca6-40f8-a043-d8ad7e0b85ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f84dc85-9240-4d18-bfc4-d32713e4b160",
        "cursor": {
          "ref": "e1cede68-2a23-4c66-8b10-249199cb0d45",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "60862b07-f84b-46bc-a41b-66a62d62f6b3"
        },
        "item": {
          "id": "4f84dc85-9240-4d18-bfc4-d32713e4b160",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0e1db114-f505-420c-926e-dc8f8e16b04f",
          "status": "Created",
          "code": 201,
          "responseTime": 417,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "19557f0d-906a-4d23-89c5-3481a4174ae1",
        "cursor": {
          "ref": "855532df-6a51-45c8-a4fc-4132473d44d6",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dcc438a3-aaa5-40e1-bc25-6d07e3f8f64f"
        },
        "item": {
          "id": "19557f0d-906a-4d23-89c5-3481a4174ae1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "336d976c-4f00-48ef-bd05-73fd754eb4cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709b1e0e-e5d8-48fe-9b8e-2374b46de871",
        "cursor": {
          "ref": "3ffe77bb-0a8e-49a1-bcdd-c36e6f61c730",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe6fcc41-7683-4cda-932f-11237ca665c1"
        },
        "item": {
          "id": "709b1e0e-e5d8-48fe-9b8e-2374b46de871",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9a0f505d-a424-4ce9-9eec-4d8d54f453b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7fe029-5475-44f6-879b-0baa1e74a2f1",
        "cursor": {
          "ref": "83cecb68-8408-4a55-abf3-34e7ff1944db",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0dadd8ad-6d21-43a7-b1a2-584419e64f19"
        },
        "item": {
          "id": "1e7fe029-5475-44f6-879b-0baa1e74a2f1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "203a226c-35aa-48a5-8acc-5c42decc4111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f521a3e0-84c3-4105-88db-fefca57f154c",
        "cursor": {
          "ref": "ebedc33f-10d8-47e4-9b55-1e37bbe218dc",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0c741f13-6164-43d4-bcad-af7db5ab70bf"
        },
        "item": {
          "id": "f521a3e0-84c3-4105-88db-fefca57f154c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "794f1852-4a30-45de-b275-779c32cfafaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4313eb14-a42c-4673-92d7-7e09a7c05ef1",
        "cursor": {
          "ref": "3c408b60-f7fc-41b9-a8f7-25bb63ac4cfb",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "143f902c-3c82-4bb4-b3d8-17b64c24d32c"
        },
        "item": {
          "id": "4313eb14-a42c-4673-92d7-7e09a7c05ef1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e47d698e-d224-42f0-96fb-206e0bfdbb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1006f1e-cc0c-4223-92ac-a8a0a50542dc",
        "cursor": {
          "ref": "9add0f88-bd20-427c-992b-8d4fec7f710f",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "db24c880-0572-431c-8403-8acb646ec175"
        },
        "item": {
          "id": "a1006f1e-cc0c-4223-92ac-a8a0a50542dc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d6e69165-6b9b-44c7-99cb-c8ee3c0150ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d13cc9-facc-4bd4-a635-d268feed6a65",
        "cursor": {
          "ref": "a84eda8a-1491-4d8d-822a-b1e8b5327357",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b2cd588d-1ef0-41d1-931f-52581dc7627e"
        },
        "item": {
          "id": "b2d13cc9-facc-4bd4-a635-d268feed6a65",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c1d1a56a-f27b-4e9a-8e27-f4d596f65deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0873a4-e27e-451a-a97f-4bc2278c352e",
        "cursor": {
          "ref": "46a92f30-c8e6-43a5-9ce7-ac7fec00d5c2",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a69d5127-78c1-4014-990d-e6b8f01d8e29"
        },
        "item": {
          "id": "2e0873a4-e27e-451a-a97f-4bc2278c352e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d7b03c74-58ce-4bd6-a4f9-781a4fd77d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43883799-4ff3-4bad-965e-5e258c3cc31a",
        "cursor": {
          "ref": "74979504-eaed-4c08-a2f9-dbf42e4c07e9",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3d6327ea-7a99-4292-be96-24e7c7e7eb48"
        },
        "item": {
          "id": "43883799-4ff3-4bad-965e-5e258c3cc31a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "09ec41fd-41e9-4590-ac00-6bc5a64514fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7925466-9219-4f1e-b782-1901cbc271aa",
        "cursor": {
          "ref": "b84638a2-1f7a-43c4-bc0b-43bfe3fcd27c",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f1ac9750-677d-47fc-8087-5a05848d517c"
        },
        "item": {
          "id": "b7925466-9219-4f1e-b782-1901cbc271aa",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d6cc3194-b53b-4e3c-ba23-63b70753ca7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1bce78-83af-4652-ba1d-8c64e03e6068",
        "cursor": {
          "ref": "a0226dc5-17da-44c0-81b4-259d0f711b75",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "266775f8-be58-422a-842f-d2e1469cebc4"
        },
        "item": {
          "id": "fb1bce78-83af-4652-ba1d-8c64e03e6068",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cd8506d8-74d8-47d4-842e-8d58e9c1e9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16a291d-efe4-47ee-9f4c-4f552f808f21",
        "cursor": {
          "ref": "78fa30ae-f05c-4dbe-b3f0-3f2992011fd4",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "77ecd0fa-7767-4696-869d-77b0ca5cd71c"
        },
        "item": {
          "id": "a16a291d-efe4-47ee-9f4c-4f552f808f21",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "dd880a7f-6839-4a49-8fca-d395842eda54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776959b2-f68c-4135-917e-b1370131d99d",
        "cursor": {
          "ref": "a50be7c0-aa84-4a26-b801-bbc9f54cc3aa",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "807a543c-a6a3-4d17-8813-bf40b2ecf70c"
        },
        "item": {
          "id": "776959b2-f68c-4135-917e-b1370131d99d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0a75dfd9-b114-43b7-8bf0-51af1603ef93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "839ca207-8587-4e81-b7a7-e15dac416ae4",
        "cursor": {
          "ref": "feefe30f-2a39-4936-9d32-ea930a2a2bd6",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "442c3670-9475-4e99-86d4-28f708999953"
        },
        "item": {
          "id": "839ca207-8587-4e81-b7a7-e15dac416ae4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e1ab3b4e-5ba3-4d00-ab37-9723ce171bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9477d47a-1087-4473-9e73-5cad86fdc67a",
        "cursor": {
          "ref": "e65904d4-d610-4cc8-b73b-2b01f4b67e3d",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2527008c-4f73-45d8-a97e-45c2bd6bb471"
        },
        "item": {
          "id": "9477d47a-1087-4473-9e73-5cad86fdc67a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "65c48cc8-5259-4f2a-a5e8-162b592dc701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba94180-d332-4d78-b333-1dd6b7e2b94d",
        "cursor": {
          "ref": "027feaa2-ec40-4c62-bc1a-b4b53ebf35cf",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3f92dbaa-8f14-4fb7-9455-75e28b89a47a"
        },
        "item": {
          "id": "6ba94180-d332-4d78-b333-1dd6b7e2b94d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6af4a0f0-95ff-4798-96c6-987043dd093d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6a1afd-817a-44aa-a2af-d9248f845dd8",
        "cursor": {
          "ref": "ed0a4708-fa1e-44ed-ad39-c92ded503f55",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b2700ad5-5d64-4a53-9019-559407ac71b6"
        },
        "item": {
          "id": "af6a1afd-817a-44aa-a2af-d9248f845dd8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5eacc733-a4e2-4d0b-917d-6603184b16a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7100583e-0597-45b6-87bc-010e7ad49bed",
        "cursor": {
          "ref": "e9e172dd-1461-4e73-99d5-e3948f3b9c63",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d155c42a-bfd0-421b-a2c0-20eb6880e501"
        },
        "item": {
          "id": "7100583e-0597-45b6-87bc-010e7ad49bed",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "71ac16b7-63c3-46f8-86c9-909716613d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a052a0a2-1780-4db8-9b3b-1b1f413f3328",
        "cursor": {
          "ref": "a078aba8-a320-4bab-af73-83c24bcbfe5f",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8b823697-bf82-452e-b7ec-252204e03b29"
        },
        "item": {
          "id": "a052a0a2-1780-4db8-9b3b-1b1f413f3328",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "41aae44d-b987-4b71-aab5-dcb5d04ec589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a8b184-3020-411d-8a32-f05d8e59da8c",
        "cursor": {
          "ref": "e6aa7ab7-0cbd-46c8-9e04-e4600d6e0d81",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "026436cb-dc52-45ae-be11-a4274b8c6ef3"
        },
        "item": {
          "id": "55a8b184-3020-411d-8a32-f05d8e59da8c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ae5241e1-b7d3-4c96-9577-a9839568c026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5e853d43-68c7-48b7-99b4-3ff9b00ba97d",
        "cursor": {
          "ref": "44ca92cb-004e-480b-a4f8-a1a50f7ebe14",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1afca7dd-8d4b-4d25-b0ae-c6c4b49495a1"
        },
        "item": {
          "id": "5e853d43-68c7-48b7-99b4-3ff9b00ba97d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "328e7da0-bc23-468b-b960-d43bd424cf8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6396e875-5c05-413f-b6f8-3b9da728f498",
        "cursor": {
          "ref": "614e1819-ce40-4314-ab3f-a05ef36ea79d",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7b0bf6a7-89af-4928-98cf-3e1350790edd"
        },
        "item": {
          "id": "6396e875-5c05-413f-b6f8-3b9da728f498",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "23ffe549-58ca-4593-bd11-4ed2edda5fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c662f33b-3a57-4012-bb97-1af60e777edf",
        "cursor": {
          "ref": "1a195b06-cb1c-492c-a150-f0b6c9d2f4a4",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0fcb9624-fef7-4f41-8c77-3e0a23a39a20"
        },
        "item": {
          "id": "c662f33b-3a57-4012-bb97-1af60e777edf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7c929a09-ad69-4fa0-a943-0ccb82b251a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71505ca7-337f-4158-8863-3f7e565d3957",
        "cursor": {
          "ref": "d601887f-2b8a-48e3-9d60-2f0cab86264b",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "55d59608-18a5-4d99-8021-3a3b008966ce"
        },
        "item": {
          "id": "71505ca7-337f-4158-8863-3f7e565d3957",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2fa5059b-b98f-4983-9467-12d2f08d41ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539bbbcb-6e35-4417-b4fa-ea3e7c15e73d",
        "cursor": {
          "ref": "a8b63b70-bf1b-49b8-9ba1-e05da5e8195d",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d6d4482f-412b-477f-8e18-39fd9926cafe"
        },
        "item": {
          "id": "539bbbcb-6e35-4417-b4fa-ea3e7c15e73d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e80f1a38-393a-4ea4-beb6-ea66f54b1e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686b9d52-8a6d-4d37-9196-6758230c224f",
        "cursor": {
          "ref": "e4a0881d-8aa5-407c-97b1-6a179110a54c",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f4a9aaee-fe16-4f00-b6c4-400c8cc69f95"
        },
        "item": {
          "id": "686b9d52-8a6d-4d37-9196-6758230c224f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e0d5d344-5f69-4bf2-a105-0e9afc2ca5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0e8add-6426-417d-b8c1-25349ae532f8",
        "cursor": {
          "ref": "841e3d13-76f4-47e6-92e5-e89ed4dcc5b3",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3ee11683-3137-47a1-a8a3-9eb1a42b173e"
        },
        "item": {
          "id": "3c0e8add-6426-417d-b8c1-25349ae532f8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2146da9f-3274-4255-bddb-1a2350092ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656e7a8d-2566-41b3-836b-e3188a49a02e",
        "cursor": {
          "ref": "72e9d67b-1740-43a8-aa65-9d6dbb43d8e3",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "562f2ef1-f302-4117-94f6-6e2c92523152"
        },
        "item": {
          "id": "656e7a8d-2566-41b3-836b-e3188a49a02e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cfa01364-7101-4be4-ad4e-d8fdd9bbb636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bf2633-8300-4a7b-bb10-d0f15565ff2b",
        "cursor": {
          "ref": "b4f12255-afe2-42c4-9f95-6847a9f0b326",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7eee22f2-1b8c-4e32-bd7d-63d3ede7474e"
        },
        "item": {
          "id": "55bf2633-8300-4a7b-bb10-d0f15565ff2b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "46cf5a02-2ebf-4551-ae81-2a52da67e2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330a52b7-ac40-4c30-a7c0-0e08f07b0911",
        "cursor": {
          "ref": "cec41163-6b81-4952-86cf-862f33ad09aa",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "53f14239-1ca0-4ce8-8a51-be0dc12f9ea1"
        },
        "item": {
          "id": "330a52b7-ac40-4c30-a7c0-0e08f07b0911",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fdf55ea9-f307-4ab3-9001-e97f843bc957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5349be-c4ae-416f-88ed-6878c88cc206",
        "cursor": {
          "ref": "6d0e5c86-6fe0-45d3-846d-ebfe3afe432d",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "02197c79-b904-4642-9aeb-5e702e9d9a57"
        },
        "item": {
          "id": "ff5349be-c4ae-416f-88ed-6878c88cc206",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9d41ab22-1610-40fb-b48d-c0c122c6af0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35b9d0a-d5d8-4b48-ad60-79b0b34100c8",
        "cursor": {
          "ref": "e063cc11-9806-4d65-96b1-83a70b7f4e52",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5e1d4370-560c-4a95-b21f-5a9608588394"
        },
        "item": {
          "id": "e35b9d0a-d5d8-4b48-ad60-79b0b34100c8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c3d555cb-62fa-4cfd-ac7e-320759dcfee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bd37af-7c20-4e44-beba-f037f8e51b55",
        "cursor": {
          "ref": "3350577d-727c-48ff-9870-41e9592d3d2a",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "01d06f83-3d7e-418a-8506-0b2799d3756a"
        },
        "item": {
          "id": "29bd37af-7c20-4e44-beba-f037f8e51b55",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "131ea77f-9c98-4acd-a5c7-b93f0cd60ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60abdae1-19ee-4937-925f-2f1667584b0f",
        "cursor": {
          "ref": "9c35ba6d-e1c1-4988-b5ab-e81b44561f4e",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "94378602-e142-41ee-9101-6d21332ddf27"
        },
        "item": {
          "id": "60abdae1-19ee-4937-925f-2f1667584b0f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "11a9af10-a2f2-4f7a-94f5-80793c34ed46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbb8ad8-5ae9-4786-81e8-6c4ade2f9681",
        "cursor": {
          "ref": "bf28c95c-a93b-4120-914b-a66637c520fc",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "03c0fe94-b04c-44e4-8da0-b6356f9ac0ad"
        },
        "item": {
          "id": "7bbb8ad8-5ae9-4786-81e8-6c4ade2f9681",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3bbcfecf-24f4-4895-a7de-c84f655a041d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92762512-1f50-40e7-a8d4-3b44d5adeb67",
        "cursor": {
          "ref": "6aea3170-3406-4f15-b187-5253aebf6d64",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "048d5c76-4aa3-413c-b478-c537dbbf3f9f"
        },
        "item": {
          "id": "92762512-1f50-40e7-a8d4-3b44d5adeb67",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "035118e8-b6c8-467c-897a-9e0e4f16f419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67d4bea-db7f-4668-8e4a-f08aa32f385b",
        "cursor": {
          "ref": "8862ac9b-23a4-40a7-b99e-b6007c71a088",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d74a5682-b6e6-459f-bee6-ee2680fdfa71"
        },
        "item": {
          "id": "b67d4bea-db7f-4668-8e4a-f08aa32f385b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "af745466-f8d3-44aa-948e-63445ce34f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c776f5-6214-40bc-ab8f-8f8485506265",
        "cursor": {
          "ref": "c64afe20-34a8-4cd7-b0d4-73b4e18a952c",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "331f05fe-3463-48c3-af23-b685afc40b2e"
        },
        "item": {
          "id": "13c776f5-6214-40bc-ab8f-8f8485506265",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ec474a56-f0c5-40d2-964c-b6dedd93b08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ae1e6f-8d56-4da6-87d4-488c048c038b",
        "cursor": {
          "ref": "e3ec0547-c0be-4cf2-90b8-d60737242b7d",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9d475a0b-b8a8-4168-a878-44880e3ce858"
        },
        "item": {
          "id": "d5ae1e6f-8d56-4da6-87d4-488c048c038b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "487ab26a-b9cb-4f6b-90a6-76ef5bfdac25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639ef980-4f99-4b68-80a4-9228463a4d7e",
        "cursor": {
          "ref": "17a5aeb0-3bdb-40e2-9d7e-dffa7f114d32",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "15993eb4-9b3f-47e4-9fb9-17071c1d4d23"
        },
        "item": {
          "id": "639ef980-4f99-4b68-80a4-9228463a4d7e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d16edfc8-1b65-4572-9827-46bbd9e82627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86815b3-92a1-4cf9-81aa-435704c73a28",
        "cursor": {
          "ref": "f2cafb8f-7acd-42f0-ab27-68013861cdcf",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3d18533a-54ad-4ff1-b9d6-70b1efe1ca51"
        },
        "item": {
          "id": "a86815b3-92a1-4cf9-81aa-435704c73a28",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "eae5df3d-1dba-44b8-80d3-9bbc0d54f7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9672511c-e025-4397-88d5-93908fc31b77",
        "cursor": {
          "ref": "ad2572dd-71f4-451d-bdec-53876f44a13e",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "eeff88ca-682a-41ed-a241-7c2c56bd7065"
        },
        "item": {
          "id": "9672511c-e025-4397-88d5-93908fc31b77",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "abcf3e56-29b7-4e88-9b19-42e50447d8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8971b4-68fc-4e5a-b4c3-8e84dc8ea7cc",
        "cursor": {
          "ref": "b82f3c78-302d-423d-9102-0218937df1cb",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8d0cebb5-56b6-4f06-b556-51fca34560dc"
        },
        "item": {
          "id": "1e8971b4-68fc-4e5a-b4c3-8e84dc8ea7cc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2b893feb-9abc-4a9a-ba75-167a6dd260a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f701dd8-4c37-4ba0-9534-52ee80a67d10",
        "cursor": {
          "ref": "d0b3c865-fd61-4ce2-8d06-901791383fbd",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "49f61e72-306f-415c-b1c8-4bd7250b95f3"
        },
        "item": {
          "id": "7f701dd8-4c37-4ba0-9534-52ee80a67d10",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a2768fd0-6fe0-4d73-ba23-33a2349dff10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6095c7bd-2fab-4bf4-b8ec-82b04bf21552",
        "cursor": {
          "ref": "75f521aa-c00c-49cb-aeb0-3d5777bcd5c1",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5176f1ee-e1c1-4abd-b1e9-414f3716a416"
        },
        "item": {
          "id": "6095c7bd-2fab-4bf4-b8ec-82b04bf21552",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "74f36248-1ffd-4c6c-b45b-bee2d14553b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef5c2e7-afe1-45ae-a2ee-c0b97f0b05cf",
        "cursor": {
          "ref": "546df3ef-1e59-447a-9f8b-f2d1046fe589",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2bde343f-2e91-49bf-9b05-12c7e42bd415"
        },
        "item": {
          "id": "4ef5c2e7-afe1-45ae-a2ee-c0b97f0b05cf",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "29fe3df0-c2ad-4b1b-8372-0b378602d285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb562fc4-15e5-46b1-859d-1d1e1acb1a34",
        "cursor": {
          "ref": "0b5df305-66d9-4147-86ff-d23a7844d35f",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9d371dec-5c4c-4efb-9267-cd874f53b3cd"
        },
        "item": {
          "id": "fb562fc4-15e5-46b1-859d-1d1e1acb1a34",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9d800cd8-903a-4508-8844-417b12a790c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901b27b9-1296-45f5-8a7a-a505f38663ae",
        "cursor": {
          "ref": "fbfb8e05-dbf0-49ef-bdde-290f6807aa57",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d8bdc807-d00b-4707-bac6-151d913d1c3e"
        },
        "item": {
          "id": "901b27b9-1296-45f5-8a7a-a505f38663ae",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c794ef39-dbd6-4901-a2cf-35c33dca86ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ae2212-21bd-4303-b4a8-c5e10fe1252d",
        "cursor": {
          "ref": "26a0590a-4ff4-4770-b46a-429cea70ae36",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a3441b52-b251-4267-b075-cc9d4e58f49c"
        },
        "item": {
          "id": "a5ae2212-21bd-4303-b4a8-c5e10fe1252d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b4aa1697-a15e-4a7b-8470-adbc8d0da3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baecacf5-e168-48f3-b24d-fd04ea9426ef",
        "cursor": {
          "ref": "e8881fcc-b9e4-4ccb-b8c1-6c65146fa15c",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f9f2e859-722c-40e9-8e73-b9f3b960053c"
        },
        "item": {
          "id": "baecacf5-e168-48f3-b24d-fd04ea9426ef",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e349ba0d-be89-4063-9e05-da5fee12dcdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ad6a82-dbd6-485b-9707-d22240ee1a52",
        "cursor": {
          "ref": "6b6d9554-8079-4e59-a161-3c7970b4560b",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e6140929-746a-4f95-be43-866890e1d44e"
        },
        "item": {
          "id": "84ad6a82-dbd6-485b-9707-d22240ee1a52",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b36aba9c-3b34-4f6f-8c30-1a1d59168e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d22d422-9730-498d-ac8e-c6f15d30eb9b",
        "cursor": {
          "ref": "3d956d2d-9c28-475c-9af6-a64308d6eaab",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d0b5e221-d30a-4bfa-99bd-5f7aee86db46"
        },
        "item": {
          "id": "0d22d422-9730-498d-ac8e-c6f15d30eb9b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0081b051-9af1-4dda-82af-2640f497ed7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb9f03b-5831-43a3-b563-70ce21d87542",
        "cursor": {
          "ref": "2a693308-65d4-4ca8-842f-40a3841c6c84",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5f7f26cd-ff6b-4bca-a61e-0d2fb62edda3"
        },
        "item": {
          "id": "acb9f03b-5831-43a3-b563-70ce21d87542",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a297c722-642d-4734-a1d8-e812f0ffe16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7715b08-d217-45d2-9bcb-52aac60e3038",
        "cursor": {
          "ref": "33e44a4d-e3b9-4743-a725-752315a4d65a",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2b1e8de0-7cfb-447d-b887-1f204a9f4929"
        },
        "item": {
          "id": "b7715b08-d217-45d2-9bcb-52aac60e3038",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "794b9a15-8daf-4155-b17f-4dbd6c526253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb614309-ddc2-45fc-9396-7b281ee1f4ff",
        "cursor": {
          "ref": "0e937525-a195-46f4-9a75-fc7eddc3220f",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8f0e9627-9b47-489b-9e7f-50b35849f629"
        },
        "item": {
          "id": "eb614309-ddc2-45fc-9396-7b281ee1f4ff",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "96455553-2783-4b09-8580-481590d494f3",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "af9b4e0d-ca57-4cc0-b2b3-a6615afcd776",
        "cursor": {
          "ref": "13d5685d-c3f7-4dfc-ab6f-0d27ad0c38d2",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0d993260-52a5-4071-b47b-94ca6da1208c"
        },
        "item": {
          "id": "af9b4e0d-ca57-4cc0-b2b3-a6615afcd776",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4911c10c-b3f9-4efe-b01f-78b2f91480a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdf66e6-79ff-48f6-9b56-cb2f1ea06982",
        "cursor": {
          "ref": "ca9e2a8e-573e-4895-afa7-2f67627d03fd",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "82da42ae-0253-487c-9cd9-6fa90df2631c"
        },
        "item": {
          "id": "8bdf66e6-79ff-48f6-9b56-cb2f1ea06982",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "42d4b9b8-5afb-4119-8b8b-ea7b21143ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f5c18b-4e75-406f-83a5-3da58cd19a33",
        "cursor": {
          "ref": "610f24cb-f889-45d6-8f60-f2e31814a624",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "84836c13-093c-4ab5-8bde-99270218c66c"
        },
        "item": {
          "id": "26f5c18b-4e75-406f-83a5-3da58cd19a33",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f3c32c6b-6d38-4dcf-b4a3-4ebc28d45836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376fa4d7-9e6b-4621-857b-83782562373a",
        "cursor": {
          "ref": "f5c912fa-f9db-486b-91a9-1dc67f422e98",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9afecfc0-32d3-49b1-8ea7-c825c59f4f5f"
        },
        "item": {
          "id": "376fa4d7-9e6b-4621-857b-83782562373a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0b3ae1f7-db60-4275-94c6-02d78896715a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2827d95-93cc-4f80-b939-91a06886c6d4",
        "cursor": {
          "ref": "8d721504-1232-4755-9354-c4a4e60be03e",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3169c22a-b1f4-401f-814d-f7f7b59b0da8"
        },
        "item": {
          "id": "a2827d95-93cc-4f80-b939-91a06886c6d4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "00a739fb-f4d2-4cb5-86f7-3406d53c69d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36da2730-da54-4445-80e8-84ba73fa9210",
        "cursor": {
          "ref": "e5ad40c0-a310-43fa-8ef7-98f61634f7a6",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "71cb1d5c-2454-4d1d-bb9f-16649a9f64d9"
        },
        "item": {
          "id": "36da2730-da54-4445-80e8-84ba73fa9210",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "90e617d7-7b1d-4419-8461-3616e50cbe2a",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "c5e4dd12-2295-456a-ae6f-053b4b66c828",
        "cursor": {
          "ref": "5da56ab8-610f-4b4d-bc97-56054c3b1731",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f1b68aae-e96e-4509-8821-c155409ed833"
        },
        "item": {
          "id": "c5e4dd12-2295-456a-ae6f-053b4b66c828",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5a415f48-de11-4998-9cca-f2d6118399e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785ab717-9607-477b-994e-280a30bd9302",
        "cursor": {
          "ref": "26269f29-960c-44eb-a9bb-4d50026924de",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1cee9dfc-cd67-4a18-b8cc-071ebea8f1dc"
        },
        "item": {
          "id": "785ab717-9607-477b-994e-280a30bd9302",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3df642f0-f6fd-499c-9515-9754dc97c385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad27163-fb63-4ce8-8e58-9963855e7bcd",
        "cursor": {
          "ref": "1e6b4075-b13a-4d66-890d-a23cd113779b",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "34acbf2c-79c5-4932-b0e7-5bed5f89efc3"
        },
        "item": {
          "id": "dad27163-fb63-4ce8-8e58-9963855e7bcd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9d2f8d30-dd89-4c3a-b920-eefccdaa8d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e0345b-8573-4772-b037-98e9106d0c12",
        "cursor": {
          "ref": "7b470bca-ef63-40ed-bae4-e23aeeec8c83",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "718f479e-0dc3-46e4-ad6f-d0bead155829"
        },
        "item": {
          "id": "05e0345b-8573-4772-b037-98e9106d0c12",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9deac41c-46a4-4497-a042-5c798d675313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6f487b-b186-47f5-9b39-2edfae55c748",
        "cursor": {
          "ref": "4c196937-5011-40b8-896d-a376a7f8a0a7",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1f372fe8-4813-469a-b6d2-cd37c58fce50"
        },
        "item": {
          "id": "ed6f487b-b186-47f5-9b39-2edfae55c748",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "61e4df35-1e4b-4269-b440-84758e472196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada7d6df-190e-460a-acbf-de95be364c77",
        "cursor": {
          "ref": "c0f3a267-8951-419d-9e95-5fbc903ec021",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "041bcdc6-f674-45c7-b7f0-182933a5850e"
        },
        "item": {
          "id": "ada7d6df-190e-460a-acbf-de95be364c77",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a84f05a8-808b-4768-afc0-f75e1f3786ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac5c788-af6d-4afb-82e4-6b74f3b432ee",
        "cursor": {
          "ref": "1b212fbf-2ab7-4342-bf91-740811196197",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3391c975-0823-4f29-996a-a0b806ba2519"
        },
        "item": {
          "id": "6ac5c788-af6d-4afb-82e4-6b74f3b432ee",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c6435bda-9260-45cd-a278-d60ef93c4fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e47b5d-1a1c-45dc-a6bd-dff33491ae54",
        "cursor": {
          "ref": "2ed90857-c661-4857-ab83-76bd00a321b4",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1e1a07dc-1ff8-4edf-b3ea-199ddeeb63f2"
        },
        "item": {
          "id": "a8e47b5d-1a1c-45dc-a6bd-dff33491ae54",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cc9a509f-f199-4eeb-b9eb-5b591c3c2cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e86e68-2270-4b79-9c51-210896cced69",
        "cursor": {
          "ref": "5a586289-c140-4e73-8e18-8505be561564",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e218a1d3-a2bd-4488-8ae1-325157423df2"
        },
        "item": {
          "id": "c8e86e68-2270-4b79-9c51-210896cced69",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b98d7cd2-238b-4eea-9cb4-02e4c32194ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "196d2a3f-bd32-433f-8eca-b1dd303cb538",
        "cursor": {
          "ref": "0fcaa162-6add-40c7-b348-90c03d96cf39",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "512dac3f-9ee6-4aad-9708-a5df9aad5837"
        },
        "item": {
          "id": "196d2a3f-bd32-433f-8eca-b1dd303cb538",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8a0e7381-be37-41d5-926f-2aff7816e34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e9979ea8-764a-4a3a-87d4-eaa28031e9ac",
        "cursor": {
          "ref": "ad9ea75b-6615-4e6a-901f-b176da654b98",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e560fa26-15a7-42fa-85ed-d07b56070e0c"
        },
        "item": {
          "id": "e9979ea8-764a-4a3a-87d4-eaa28031e9ac",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e91af8e1-61b5-4c45-8d30-9ff205ea213a",
          "status": "Created",
          "code": 201,
          "responseTime": 577,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "407d52bd-bcef-462b-b741-9956058ad294",
        "cursor": {
          "ref": "198e3517-5ab4-4c61-bd07-ff92ec05ab65",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "803b0923-acab-4f85-8f38-f99133fbeaf5"
        },
        "item": {
          "id": "407d52bd-bcef-462b-b741-9956058ad294",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "bfeef25d-35d8-4942-8338-f400345885cd",
          "status": "Created",
          "code": 201,
          "responseTime": 401,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f14cdc-fc3e-4000-8bc1-9102c33f4972",
        "cursor": {
          "ref": "ffe8ee39-4cea-4391-977e-0ed8d2037ada",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ebfd6ed7-16c9-4ff5-bb75-b323ddde9e95"
        },
        "item": {
          "id": "96f14cdc-fc3e-4000-8bc1-9102c33f4972",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "39df241a-8c63-487d-b072-27f3cc2e52ac",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a66a11-41d3-4185-aa4f-2f8d10d228c4",
        "cursor": {
          "ref": "fc6b1c1d-5be7-44ba-854f-8415d421560e",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4eb6a747-6ca3-4295-9131-2d5e3954c63f"
        },
        "item": {
          "id": "91a66a11-41d3-4185-aa4f-2f8d10d228c4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b381351c-c625-41c0-a6d5-7774ae577dea",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65eccb7-f7cc-4166-b511-800d4f27251a",
        "cursor": {
          "ref": "161550ee-d7f8-4262-8929-98e3a048a2d5",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6dbaab38-1c39-4a5f-9b0d-540df290b279"
        },
        "item": {
          "id": "e65eccb7-f7cc-4166-b511-800d4f27251a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "455209cb-097e-4da4-9d9d-fa542b54b53b",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6640eee-cdc3-49cb-9b28-8a75f0212c53",
        "cursor": {
          "ref": "6f0efc47-cda0-4eb8-bf0a-3edef9a35e76",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e2794b97-a126-47ba-acbc-b55d30972335"
        },
        "item": {
          "id": "e6640eee-cdc3-49cb-9b28-8a75f0212c53",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b491e6f3-5ab8-4296-8c1e-8f59be23316b",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb24f56-520a-48ee-8861-999ecd2b7c1b",
        "cursor": {
          "ref": "17c438f2-9e83-4f02-b47f-2a633017cc8b",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "770cba40-fd60-4288-b737-ffcd9a305d18"
        },
        "item": {
          "id": "afb24f56-520a-48ee-8861-999ecd2b7c1b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "449fb57d-ace2-41dd-be5d-2549a5ea1582",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "afb24f56-520a-48ee-8861-999ecd2b7c1b",
        "cursor": {
          "ref": "17c438f2-9e83-4f02-b47f-2a633017cc8b",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "770cba40-fd60-4288-b737-ffcd9a305d18"
        },
        "item": {
          "id": "afb24f56-520a-48ee-8861-999ecd2b7c1b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "449fb57d-ace2-41dd-be5d-2549a5ea1582",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "598559e2-ca5c-476c-a8b4-98aa043795d3",
        "cursor": {
          "ref": "28f14fd7-31a4-4597-a6d2-db7a3bf38fbf",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "641b0fba-035c-422d-a204-d3bfa4a4a834"
        },
        "item": {
          "id": "598559e2-ca5c-476c-a8b4-98aa043795d3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7a624dd0-3447-47b9-b1b5-91fd7cf95592",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "05b1311a-cab7-49cb-bcf4-197a4315b3d1",
        "cursor": {
          "ref": "3b151299-33bd-4e9d-9ead-c1fc8ae89403",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "916c255a-1c12-4f36-b258-4a97d3d259a4"
        },
        "item": {
          "id": "05b1311a-cab7-49cb-bcf4-197a4315b3d1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0eb9345c-f47f-4dce-95fe-20830fa1c499",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b96edbc5-2c47-4880-80a0-2a8cad1672fd",
        "cursor": {
          "ref": "386fd325-52af-4b79-b503-fe1a3c9a342d",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b3dc255f-7431-4b0d-b039-fab59bc7ee6e"
        },
        "item": {
          "id": "b96edbc5-2c47-4880-80a0-2a8cad1672fd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "586303b5-7fcf-46be-a26b-30ab8f3616a6",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "eec5b2d1-90fb-491d-b5ef-6dfe189978cd",
        "cursor": {
          "ref": "cb95bbca-467e-421c-a5a2-e50a37fa8b21",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "65464288-ab48-470c-b28c-987a6316df12"
        },
        "item": {
          "id": "eec5b2d1-90fb-491d-b5ef-6dfe189978cd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1240155e-e6dc-4c8b-a3cd-3519a7751e24",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "cee8076c-3fd3-4a1f-8623-0e65a8370033",
        "cursor": {
          "ref": "e7883af8-3fad-4522-84cf-dff69645c01c",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "01234165-a38f-41e5-a523-4c12cd26f2b5"
        },
        "item": {
          "id": "cee8076c-3fd3-4a1f-8623-0e65a8370033",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "edfd7288-d9dc-4b3c-9a55-e4ef2804a2d0",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "09655b29-686e-4b33-8457-22ed21f5dcd1",
        "cursor": {
          "ref": "e038dfda-4943-4704-bc6c-eab96b425f74",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "caee2be4-5387-4891-a92b-f8b410286066"
        },
        "item": {
          "id": "09655b29-686e-4b33-8457-22ed21f5dcd1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "00af8816-c793-4dbd-8a98-6356c212c051",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "fd0c6012-addd-44b9-84bf-af1ed887c9db",
        "cursor": {
          "ref": "ebe4f65c-99f4-4998-88b3-47a979f7b209",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1317c6ed-d41d-4cda-a833-c47cdf629f87"
        },
        "item": {
          "id": "fd0c6012-addd-44b9-84bf-af1ed887c9db",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4c5ffa5c-5d03-4852-950a-de58337090f2",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "86b871f7-aa10-42ca-a91c-b5a0e7677fd2",
        "cursor": {
          "ref": "70a79138-1c64-4bbd-b465-3ef05ca5ac3c",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6d87b991-690a-46a6-96a3-4effda8acd2e"
        },
        "item": {
          "id": "86b871f7-aa10-42ca-a91c-b5a0e7677fd2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "173f6f21-6363-4d8b-86d7-8314139f227f",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "32126590-7c0e-453b-94b5-4a5951948ef4",
        "cursor": {
          "ref": "05b02090-8ce5-4979-9368-eba44a5e0818",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2b7b6134-61d3-480d-b887-bd454b1057dd"
        },
        "item": {
          "id": "32126590-7c0e-453b-94b5-4a5951948ef4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e39af2ff-c4f1-4614-80bf-b6b6fe2a5b89",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b8c073b0-6b4d-4239-a0fc-651baf4e353f",
        "cursor": {
          "ref": "bac4e398-e086-4f2a-ade9-f82558b28889",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5711c103-2751-4c4f-8d63-046a6a401554"
        },
        "item": {
          "id": "b8c073b0-6b4d-4239-a0fc-651baf4e353f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5c943561-b5e6-40d8-ab76-b5739ed3f635",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "17facdb7-6cc2-450e-8ac7-c56028c91ac7",
        "cursor": {
          "ref": "258d9629-acb1-4cab-adc5-660d776da2d8",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "76d2209d-071d-4ca1-8e09-850324ea8850"
        },
        "item": {
          "id": "17facdb7-6cc2-450e-8ac7-c56028c91ac7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "31ee4a97-0e57-48d8-b108-7cc8778be975",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5b38f771-dea1-41bb-891c-79f164dc87d3",
        "cursor": {
          "ref": "6bf81a4f-876d-440a-a53c-f53ea5d0f00f",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c3f98de2-d1cd-4c33-b59c-facb4ce7225e"
        },
        "item": {
          "id": "5b38f771-dea1-41bb-891c-79f164dc87d3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ce4ef54c-50cf-42af-91d7-b371de805e98",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a61a1d78-d711-4124-8e7e-6ddfcc88c432",
        "cursor": {
          "ref": "0504fc75-0a1d-4763-9b17-c68973d1f0c6",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5def149e-05f0-420a-af98-1da3f5f2ebe5"
        },
        "item": {
          "id": "a61a1d78-d711-4124-8e7e-6ddfcc88c432",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "664cfd4b-c9da-47a4-b4a1-69a03a3e4e16",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "041f098b-0ee2-4fc5-a8be-4f3c5eae7c80",
        "cursor": {
          "ref": "d1badb67-5673-4e58-a2bd-f2ce5f43ae93",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "83ba69cf-f48a-4043-b107-a51c3beeefc5"
        },
        "item": {
          "id": "041f098b-0ee2-4fc5-a8be-4f3c5eae7c80",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9669d2cf-279e-4930-830b-bdf7cd9c8039",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "1c3c6cec-f58a-4be4-b9f9-2c2138131378",
        "cursor": {
          "ref": "865e86a0-d2ab-432b-b1c7-1e5a7d43c92e",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "aea1ac36-bc4e-497b-bfde-fbe7ed09f9d8"
        },
        "item": {
          "id": "1c3c6cec-f58a-4be4-b9f9-2c2138131378",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "35ebc87f-6abb-41f0-9e3c-16f23bb0b19b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "315543ee-82f0-44de-b9a8-6f98ffa015dc",
        "cursor": {
          "ref": "fd949536-42e7-4b8a-82cc-ca9a0256b36e",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9e8cd294-b5cf-4acb-aae7-c5879aeebe1c"
        },
        "item": {
          "id": "315543ee-82f0-44de-b9a8-6f98ffa015dc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8046a507-52fd-483a-b86a-88763ec96dbe",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "904cda40-85a5-4f01-86ba-3e57436ccdb1",
        "cursor": {
          "ref": "a6149e0b-9e1b-4e88-a76a-c2d904a5d7a5",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c74040a4-ca1b-4669-94c5-312fe1f6bd2c"
        },
        "item": {
          "id": "904cda40-85a5-4f01-86ba-3e57436ccdb1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b970b13c-9e9c-4d29-922f-cc3446dcec6d",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "fa19bdb2-eada-4e02-863a-ea1600cbd1d2",
        "cursor": {
          "ref": "3a49393e-15e6-47ac-85ee-b27beed64d0b",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "126e2f0d-f036-4fc0-a556-7917b0bc04ee"
        },
        "item": {
          "id": "fa19bdb2-eada-4e02-863a-ea1600cbd1d2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "125606ef-2134-4c6f-83d9-5ee6b9cdba5b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7ded5006-1c56-4abd-8699-9ec4cb9408cb",
        "cursor": {
          "ref": "d500a0f1-6941-4037-942f-c98b682631d6",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "20db1da0-487e-469b-a2b9-526685150dba"
        },
        "item": {
          "id": "7ded5006-1c56-4abd-8699-9ec4cb9408cb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "170cf024-def2-4a1b-be34-563dec08700a",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "01a0a35f-7df3-43d6-b0dc-a806d5879e81",
        "cursor": {
          "ref": "7729dd29-ba50-4160-aab4-fd79782ff0bc",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ece4958a-6841-42e5-83a5-37798d4866a1"
        },
        "item": {
          "id": "01a0a35f-7df3-43d6-b0dc-a806d5879e81",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2f5cbdcf-abba-4c3b-9920-2b0d6115b384",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7feb920d-bc8c-4a15-b343-1f17f5871240",
        "cursor": {
          "ref": "57decbc3-cefd-4578-a2b2-123f425b3d85",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d415028a-2299-478f-9d01-ae9a23d3f7a6"
        },
        "item": {
          "id": "7feb920d-bc8c-4a15-b343-1f17f5871240",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1090c3bf-91c7-4f0c-9fd2-671c3a826f5d",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "6b780d48-70bd-4d7c-8e19-d546e796ccc6",
        "cursor": {
          "ref": "a8bbd7da-5f27-436b-90cc-6304cb741055",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ce29b34d-a512-4f1e-bf84-24ddea46ebb6"
        },
        "item": {
          "id": "6b780d48-70bd-4d7c-8e19-d546e796ccc6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "88c8abd2-1feb-4bd4-95c8-dccb2458f245",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "750b4929-e41c-4273-8a00-6c72c444279a",
        "cursor": {
          "ref": "986233fb-5d35-49fb-a5d9-bf2b721f4213",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d9d0ca74-7198-452f-b6c8-71eeb6c03f87"
        },
        "item": {
          "id": "750b4929-e41c-4273-8a00-6c72c444279a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "260817e0-a374-40f2-8f86-889fbeadb2c0",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "791f59f5-955f-46e2-964d-b5d8903c49ef",
        "cursor": {
          "ref": "1fdbd2fd-432c-40fc-a093-da1e2ddaafe8",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7d273f0c-1224-4852-8a9c-d20311302272"
        },
        "item": {
          "id": "791f59f5-955f-46e2-964d-b5d8903c49ef",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "287e2d95-96ae-4529-99d5-32f31ffbd299",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "53a9834b-c4a8-4641-95f2-229f30282b7f",
        "cursor": {
          "ref": "438eecd5-c1bd-426f-afb0-88e05eb3158e",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1ee24db4-bf05-472f-ad08-25f2ee70819b"
        },
        "item": {
          "id": "53a9834b-c4a8-4641-95f2-229f30282b7f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "60e99837-b517-4f2f-a83e-7cadd3a981ec",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "44c43eea-6c24-42c1-8ba0-fdaa88cf79a3",
        "cursor": {
          "ref": "ac2e73d8-f45b-4b4c-baa0-3869d027b2f6",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bda913ae-7b81-40c2-adae-5aa9d87b8631"
        },
        "item": {
          "id": "44c43eea-6c24-42c1-8ba0-fdaa88cf79a3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "189539a0-a55b-4fe6-9f9d-4328c8e392be",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "0f938cfc-9fef-41ba-89fa-c07de0fe9c34",
        "cursor": {
          "ref": "fc3b25dc-2983-4bda-9454-2727553784d7",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "df38ad52-4a53-4f8e-8ede-93755a67fb7b"
        },
        "item": {
          "id": "0f938cfc-9fef-41ba-89fa-c07de0fe9c34",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "db572e8b-847a-4e78-8b09-42c9ce6a1435",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "8bc7d2f8-a2b3-4a94-9905-a693770a9aed",
        "cursor": {
          "ref": "99ad968a-9bcd-4dab-aa00-c9c7162e6bab",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "41ef8007-7e2b-4a3b-a3f6-fe8765f9dd91"
        },
        "item": {
          "id": "8bc7d2f8-a2b3-4a94-9905-a693770a9aed",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5a3ed74b-e099-4b56-906b-3ccf6c16134e",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "d634da80-2e83-4cf7-88c2-cb5eb826b949",
        "cursor": {
          "ref": "26aa1a30-2809-4c61-8c8b-b69d3c89945d",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b35fe8b7-2d0b-4e7c-b2a9-1ef0d2ec3aef"
        },
        "item": {
          "id": "d634da80-2e83-4cf7-88c2-cb5eb826b949",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "66dcdb13-09b5-4b34-91dc-4afd7c34d0f4",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e8f87b72-30d6-4d39-ae99-a4006987b2ae",
        "cursor": {
          "ref": "327d9aac-d70a-4add-ba2b-36a7ff49de48",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "36010274-c7b5-4ea4-ab2f-6dcd32cb753d"
        },
        "item": {
          "id": "e8f87b72-30d6-4d39-ae99-a4006987b2ae",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b7d3a96b-8cca-4136-968c-17e35fc25f9b",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "5ce66c5e-d189-47ea-995b-c2f7519249d8",
        "cursor": {
          "ref": "29982a3c-3d79-4f65-8446-47b80e406a4b",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "80986dcb-5ba4-47d1-b698-6310c2d951ab"
        },
        "item": {
          "id": "5ce66c5e-d189-47ea-995b-c2f7519249d8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "173478e3-17c7-4cfc-a74c-44df36e79821",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5103a296-7ad8-4707-acca-94af38e60643",
        "cursor": {
          "ref": "82db37d4-faa6-4acd-99bb-9899030c231d",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "99aaca0a-2960-4056-afc8-8f737254257e"
        },
        "item": {
          "id": "5103a296-7ad8-4707-acca-94af38e60643",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "43b9100c-3ffa-4555-8254-b071e414bc4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59703ec5-ef77-43ce-b31c-8a81ef15679f",
        "cursor": {
          "ref": "5adccc3e-5724-402a-83de-0a00dfda2234",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e499dcea-22a2-4679-a8e9-465c488b2bac"
        },
        "item": {
          "id": "59703ec5-ef77-43ce-b31c-8a81ef15679f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "bc1dbdfd-520b-416e-b1de-d9ac8eebf2a2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 75,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6090137-6b24-41e3-9f9c-2580cb2e4346",
        "cursor": {
          "ref": "70f6931d-c6c3-4088-b7be-af644688bfbd",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "512ad2f0-7a73-460d-89f6-c9253b731cb0"
        },
        "item": {
          "id": "c6090137-6b24-41e3-9f9c-2580cb2e4346",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d93764bb-27b2-4f3f-a741-e4e009137edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6090137-6b24-41e3-9f9c-2580cb2e4346",
        "cursor": {
          "ref": "70f6931d-c6c3-4088-b7be-af644688bfbd",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "512ad2f0-7a73-460d-89f6-c9253b731cb0"
        },
        "item": {
          "id": "c6090137-6b24-41e3-9f9c-2580cb2e4346",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d93764bb-27b2-4f3f-a741-e4e009137edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3593891c-cedc-48ed-afd9-a35a2f429a6e",
        "cursor": {
          "ref": "ef1c1456-8c75-43ff-962b-dc423bf5e57d",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4428b2c0-688c-4d21-8425-7d83d50a5dc9"
        },
        "item": {
          "id": "3593891c-cedc-48ed-afd9-a35a2f429a6e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fd198948-6761-4a61-bdbf-90465611a8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07214a31-97a8-4420-a354-22024b81c50d",
        "cursor": {
          "ref": "5ddc8b03-1ad2-4d9e-9627-23cfcfd6ebb3",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6f0abcaa-3598-4aa9-a210-4c6ea1148e1c"
        },
        "item": {
          "id": "07214a31-97a8-4420-a354-22024b81c50d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5eb9c3b1-02f2-4dc1-8860-4589c40bad15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c728eaae-1186-42cb-84c2-769fd55d55ed",
        "cursor": {
          "ref": "8f723f79-46c3-42ab-9141-022f158becac",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ae144f9e-e34b-465e-9bed-ad8718e3ea44"
        },
        "item": {
          "id": "c728eaae-1186-42cb-84c2-769fd55d55ed",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bd50e6bf-e4e7-4362-9e28-1abc93f162e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97915869-27a1-4439-a9d6-3ab2339de986",
        "cursor": {
          "ref": "af19142e-48b2-449f-ab11-c6463ce25304",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "dab499da-e746-4f5a-a673-deb48f3de9d5"
        },
        "item": {
          "id": "97915869-27a1-4439-a9d6-3ab2339de986",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "17a96e0e-950c-4af9-b329-35b0f1ebd232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba32ebfe-fb73-4fec-b7f1-766b9d1785ef",
        "cursor": {
          "ref": "3c7ecd2d-61e6-4661-8ddd-8226cee49637",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "93ef9bed-4e3b-4ce4-af31-9193742b47df"
        },
        "item": {
          "id": "ba32ebfe-fb73-4fec-b7f1-766b9d1785ef",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f0cd88bf-7b69-4e37-bf58-d06aef95ed5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d529cd19-50a5-4f05-8f35-a53db4f3ef88",
        "cursor": {
          "ref": "3778b808-3398-423c-b57c-d56f223a90df",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "af98dade-661c-4435-84b8-ab798455e927"
        },
        "item": {
          "id": "d529cd19-50a5-4f05-8f35-a53db4f3ef88",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "00c300e5-8cd1-4e1f-88db-4e57e2e9e8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 659,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285e07ee-3670-49f5-afa1-03dd9cb76fb2",
        "cursor": {
          "ref": "b9a8b334-d1c1-4bc1-a5d7-d90f43e07b77",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4eedebe3-32c0-4757-8d2f-5b0696eb65d8"
        },
        "item": {
          "id": "285e07ee-3670-49f5-afa1-03dd9cb76fb2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7468314e-34e5-4c97-9bf3-3dec781dd812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235e2622-78a7-4377-b9e6-0628c8c65f7a",
        "cursor": {
          "ref": "ccc1125b-83cf-40d4-9861-95cbe75e3506",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2fe17602-ab3d-4dc0-8bad-8c01a2a6cc70"
        },
        "item": {
          "id": "235e2622-78a7-4377-b9e6-0628c8c65f7a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d6731fe9-d0e7-4ad2-817b-867eb5e2b1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba19ae2e-113b-4d65-a7da-16d246e09139",
        "cursor": {
          "ref": "6058df29-a8cc-4160-98c3-de32eb194129",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b6767f5a-5adc-4503-9e1f-56bc80c0c7e2"
        },
        "item": {
          "id": "ba19ae2e-113b-4d65-a7da-16d246e09139",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e3c8c885-547e-44ee-accf-039df7b0de53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8717b3aa-7e38-4dfb-b5ca-89e04ee8a5c3",
        "cursor": {
          "ref": "00f832da-88f5-427e-b2ba-4af84ea13fc5",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "671b48cb-7c1b-416b-b0fd-9c0c0e27bc20"
        },
        "item": {
          "id": "8717b3aa-7e38-4dfb-b5ca-89e04ee8a5c3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a9c4d3d8-d1b1-43f3-83dc-70233b6af61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957c21b7-d4e1-4095-9570-0cbe70fea29f",
        "cursor": {
          "ref": "9a94be33-f4c1-4254-9aff-d15bbde5d647",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "35045e9a-eedf-4139-8ad1-5b65b315c435"
        },
        "item": {
          "id": "957c21b7-d4e1-4095-9570-0cbe70fea29f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1f115d7d-0fdf-4995-8914-543161be922e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d968d0fd-654c-4946-afe3-173d8f467e9f",
        "cursor": {
          "ref": "9f6bc5e7-c8c5-4243-8c94-5cf327cae4bf",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e877a758-4746-469c-a0e3-5913cde4538c"
        },
        "item": {
          "id": "d968d0fd-654c-4946-afe3-173d8f467e9f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b0960875-9285-4cd7-bf10-ef0a9c56c9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03738549-d6bf-4306-b210-cadd79669f13",
        "cursor": {
          "ref": "b66e2218-ce94-4ef4-9d32-35fc1c8cdace",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "987c7ba0-f0d1-4f83-afa3-29538f80639a"
        },
        "item": {
          "id": "03738549-d6bf-4306-b210-cadd79669f13",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7aa146e4-66b5-48fe-abe0-2a0f4fedd755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff08f7b-9526-41c7-82c8-bf694f9d9f12",
        "cursor": {
          "ref": "06873f15-eb90-4807-a530-cb7ab574cf34",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2b9a8234-c563-4ab0-b8d4-3b67e5c40acd"
        },
        "item": {
          "id": "eff08f7b-9526-41c7-82c8-bf694f9d9f12",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ca0a48b2-afea-4cfb-bb75-58ad8ef9e476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef30ace0-bccf-45da-a633-cdeb1780405e",
        "cursor": {
          "ref": "d7d77e44-d25b-4e84-bff9-811bdbaf90e5",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "55f2efcc-4ebb-4e5f-afa1-bc1c99fa9641"
        },
        "item": {
          "id": "ef30ace0-bccf-45da-a633-cdeb1780405e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e0114262-4519-4af5-ba1d-f23152b4fcbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6e49a3-50b1-429d-aa7f-dc01741f9671",
        "cursor": {
          "ref": "afa9aa6f-1aed-4e5f-a880-b70efd553f6c",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "03559120-0b09-424e-a671-7cfd419cf27f"
        },
        "item": {
          "id": "ab6e49a3-50b1-429d-aa7f-dc01741f9671",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0f0db679-2929-43d7-83e2-371ae6123ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7778d8-35f5-44bb-a93a-985cce53aa21",
        "cursor": {
          "ref": "7148437d-75fe-46fe-bbe9-6b95c0a135ec",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c165e1e2-0f20-4b33-90cc-e4485f2218d5"
        },
        "item": {
          "id": "bd7778d8-35f5-44bb-a93a-985cce53aa21",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b7089bb3-77b0-4293-8b04-54f6398a331c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ee82e6-ee1c-4f0b-ae9b-f4a7a2c0e991",
        "cursor": {
          "ref": "a90d7c8c-7f86-448e-b513-298072961597",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a0dd9a6b-77af-4956-9442-932ce9fd5ad7"
        },
        "item": {
          "id": "94ee82e6-ee1c-4f0b-ae9b-f4a7a2c0e991",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f052326b-7425-4d1e-838a-29cc73b97e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4e5e62-a13e-4e17-b89b-ea5c9e40de08",
        "cursor": {
          "ref": "6d609f8b-c2fc-432a-bd82-9194e6539037",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8f4ead1a-67e4-401b-b1d9-df6c44bf09c3"
        },
        "item": {
          "id": "cc4e5e62-a13e-4e17-b89b-ea5c9e40de08",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "402e89dd-1e6d-438b-95be-dc1f18a076c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786e300c-29f5-476f-b1c0-8152186c94d2",
        "cursor": {
          "ref": "87097d30-900b-4354-b537-96c6b15f7205",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "52cc010b-6e32-48db-9085-604afbcae9b3"
        },
        "item": {
          "id": "786e300c-29f5-476f-b1c0-8152186c94d2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e78b8eee-3426-42bb-aca0-2402d302b8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3ff63f-e83a-4b0e-b005-f1c7f4761ccc",
        "cursor": {
          "ref": "9061b2ee-c199-47a4-95be-7cf84a53862c",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c9ec351f-711a-4a79-b963-d896234ebfd4"
        },
        "item": {
          "id": "3d3ff63f-e83a-4b0e-b005-f1c7f4761ccc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "dc4d9712-16ee-4b65-967d-db32911296d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5cf696-cca9-4ce8-a0f6-f959c69c5be1",
        "cursor": {
          "ref": "3ace28ae-2e84-4240-8d4d-4599b7699633",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "60f85af4-10ea-4329-bbfc-d973b1792220"
        },
        "item": {
          "id": "3e5cf696-cca9-4ce8-a0f6-f959c69c5be1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a6915b3e-44b3-4619-aef8-2d7d723dd0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc588a3e-038f-4a92-b5f4-5e91c2a6b68d",
        "cursor": {
          "ref": "7924c3a6-4916-4b2c-8915-072126a03e12",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9b6c0a8c-f000-4a48-b0b3-f6ff4b846fec"
        },
        "item": {
          "id": "bc588a3e-038f-4a92-b5f4-5e91c2a6b68d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0b1409cb-6cb5-4bb9-a666-a0d7febd66e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0bf0c9-3dfd-43d9-9eef-0febb8ea2c69",
        "cursor": {
          "ref": "c008f240-90a8-4ef4-ab92-623f1a193989",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4f40b279-70c4-45eb-a748-980fb29c7f60"
        },
        "item": {
          "id": "5e0bf0c9-3dfd-43d9-9eef-0febb8ea2c69",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "164d90a0-2832-4364-849f-fec5469679cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b4145a-44d8-4d19-8efc-6bfbc5a9cf44",
        "cursor": {
          "ref": "ee19d718-1de7-4450-8834-6809e29ded6b",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dd7ed0c5-3ce2-4a7d-a729-da240f7a2cdc"
        },
        "item": {
          "id": "29b4145a-44d8-4d19-8efc-6bfbc5a9cf44",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bd6e4dc0-4edf-433d-8f5a-4bc1c72f9008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae1a000-f43d-4d2a-b37c-ac5dea6bb2ef",
        "cursor": {
          "ref": "761ae3ce-6ded-43a0-bfa3-1094e87b016a",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cc58b54f-739c-4f2d-b26a-2fce54855270"
        },
        "item": {
          "id": "9ae1a000-f43d-4d2a-b37c-ac5dea6bb2ef",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "80ca9889-92eb-4e17-8ca6-f678885b3981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0d9dfd-77a5-480f-90ab-56cdbe3f2bef",
        "cursor": {
          "ref": "4b1d1cfc-633d-4bed-b1c2-cf75c4076262",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e3b83a68-bef6-4464-9704-77ccbe728c70"
        },
        "item": {
          "id": "ed0d9dfd-77a5-480f-90ab-56cdbe3f2bef",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a7f45d1d-bb84-44c3-97b1-0a6c0bffbb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9218e3f-0ac0-4c48-b7d9-9db7de1ac796",
        "cursor": {
          "ref": "3c653355-08fa-4200-be11-b394847faaa1",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3c2d0039-0c54-469e-b0d2-12d36ad13b58"
        },
        "item": {
          "id": "f9218e3f-0ac0-4c48-b7d9-9db7de1ac796",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fcd7602d-8d74-445a-b8e3-9e0893606207",
          "status": "OK",
          "code": 200,
          "responseTime": 343,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f19aacb8-77fc-468b-aae5-60d5516431ba",
        "cursor": {
          "ref": "db1f2c84-e540-44e4-9789-f8253e810f63",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "39f23479-b8b7-45ce-9e05-712fff70bdfa"
        },
        "item": {
          "id": "f19aacb8-77fc-468b-aae5-60d5516431ba",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5ccd7414-8f28-4511-a173-4545e4f60416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067cb9c7-83ab-428d-a303-3343d7c9cfa8",
        "cursor": {
          "ref": "1106b680-1e85-4b77-843f-0f3c8e6908e7",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "53842dcb-a561-45af-9fa9-c2a6312c7f8b"
        },
        "item": {
          "id": "067cb9c7-83ab-428d-a303-3343d7c9cfa8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4ae42e91-0c88-4ed5-bca8-7703de45254b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c345a1-48f2-44a1-a1a5-43e6c2ecb706",
        "cursor": {
          "ref": "1d70cf29-df44-4712-8818-ef7cd1ca6133",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "472170cb-94db-4abc-959c-0ca84902ed85"
        },
        "item": {
          "id": "09c345a1-48f2-44a1-a1a5-43e6c2ecb706",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4c3ce71a-ea89-42fd-aa83-e9b6078f8026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ef5158-bc29-4c50-b320-c2c60867240c",
        "cursor": {
          "ref": "345c9262-c6ac-4d46-8215-5517613b5b7f",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "94bc093a-3326-4e49-8f52-faa3932e27bf"
        },
        "item": {
          "id": "c2ef5158-bc29-4c50-b320-c2c60867240c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "498608e0-4cd7-49c7-8f3b-ae7f7bb96414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815a2a64-8a46-4cf4-ade4-de0f5cc2fc69",
        "cursor": {
          "ref": "79408432-fecd-4719-a42f-07c3c224efd5",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2165daf0-545a-46f6-b83f-55cd0331b1a2"
        },
        "item": {
          "id": "815a2a64-8a46-4cf4-ade4-de0f5cc2fc69",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6cf92a09-ccb0-41b1-a610-35c17f54b050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd590b84-2d3b-4d5e-a5aa-0a49bc5daff2",
        "cursor": {
          "ref": "0d40ae3f-3b11-480f-acc9-5f926861daf2",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "166aecfa-ac7b-465b-a753-9a8f011fb800"
        },
        "item": {
          "id": "bd590b84-2d3b-4d5e-a5aa-0a49bc5daff2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bb2bc3cf-13c2-4194-8221-0a0e92bc2ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a75804e-e0fe-4ad2-9432-259344d076c8",
        "cursor": {
          "ref": "214072c0-8852-4ffc-b17c-daeb4e67e23c",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "183b39ff-9b42-432a-b233-690cf2074c0b"
        },
        "item": {
          "id": "7a75804e-e0fe-4ad2-9432-259344d076c8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "39ed8f91-3f7a-4afd-bf9b-d28dbefc932f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a291dad-d940-462b-880b-bdf17bb44041",
        "cursor": {
          "ref": "0e2a6378-76b4-4299-9812-f01f5088be12",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "695e6d32-c3f1-4204-9a38-2a1cd617614a"
        },
        "item": {
          "id": "5a291dad-d940-462b-880b-bdf17bb44041",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "dd68ec71-18cf-4f68-a56e-133bdc8b0835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce83a788-9dca-472d-9a7d-5b60480050d4",
        "cursor": {
          "ref": "47e072a9-e3a4-41f9-9068-fcc07ba1ad67",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1c0704bf-6762-430d-9ec5-c0fd62d7fa40"
        },
        "item": {
          "id": "ce83a788-9dca-472d-9a7d-5b60480050d4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1bb52b44-f72b-4318-8b0d-dd543f994c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399b5b2a-6761-41ab-bf3a-813ccab13b5e",
        "cursor": {
          "ref": "2dcd3015-a331-464f-843c-8675b1e09bda",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "69b86b60-a402-46db-a0e5-2ad624e55a73"
        },
        "item": {
          "id": "399b5b2a-6761-41ab-bf3a-813ccab13b5e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b35a675f-0096-4b4c-ae41-b21d30b0704f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a511e22-c9c2-439b-ba56-4ebda2bfb488",
        "cursor": {
          "ref": "c676331d-45ca-445f-8adf-3fd986c85f37",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "40cc91fb-b548-4985-a6ed-009324eee306"
        },
        "item": {
          "id": "8a511e22-c9c2-439b-ba56-4ebda2bfb488",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6da89454-629d-4dfe-b1f2-b990fa9cc9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67a8dbe-5712-4e87-aa54-3a5809460ce1",
        "cursor": {
          "ref": "344f68cb-754a-4233-9b54-4fd379b08014",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "669266a1-a62c-4c94-b62a-6b998bcd1d3a"
        },
        "item": {
          "id": "b67a8dbe-5712-4e87-aa54-3a5809460ce1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dbe85027-5ab3-4226-8adb-2da6dd827e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b97b408-f90a-4367-8a0e-07c1af81197e",
        "cursor": {
          "ref": "72376eb9-c55c-4780-aefc-cd3fd05ca3cc",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7628d4e9-7ea0-439f-a68c-24f12c0e4f89"
        },
        "item": {
          "id": "7b97b408-f90a-4367-8a0e-07c1af81197e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cdd82024-e749-416a-b66e-a9536dc9e22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa63e06-c82b-4e49-a395-0f4afcef8b91",
        "cursor": {
          "ref": "d0244e19-33a3-4832-870c-2111611ed122",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "25b21379-b756-4656-afe3-a61bff150d26"
        },
        "item": {
          "id": "4fa63e06-c82b-4e49-a395-0f4afcef8b91",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e84d11fb-c6a9-4033-99ee-c8a6cfb8296d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56661704-e2b5-420e-9f9b-4c716a581a0b",
        "cursor": {
          "ref": "182535f8-2047-4af2-90ba-bd69e624ef7f",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fd88db78-012c-4e20-99c3-31190a7e24f3"
        },
        "item": {
          "id": "56661704-e2b5-420e-9f9b-4c716a581a0b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1a5be9d2-78eb-471b-af60-4ad805d68dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc875003-528a-416e-a822-d066cc739fc9",
        "cursor": {
          "ref": "f8da0856-f8c7-4321-9fc8-4e74f3b8a8fb",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2bebc075-8bd4-4f9d-bbe4-414262d47e06"
        },
        "item": {
          "id": "dc875003-528a-416e-a822-d066cc739fc9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "387f8ff5-58b9-4be9-bdd9-328c5d316c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b588fd-7e97-4031-b83a-eb47fdec16a2",
        "cursor": {
          "ref": "b7654db0-2c76-4209-9ac9-2757cc4325e9",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4a2001b8-07b4-4e8c-8581-c59b22a9dc72"
        },
        "item": {
          "id": "56b588fd-7e97-4031-b83a-eb47fdec16a2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "aec33018-e42a-4ffd-89d2-2da810c01d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27421c2-48ea-4781-afd5-14f5c6161e02",
        "cursor": {
          "ref": "e7a1c4c3-07cb-403f-acea-ce2d2d2b2643",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f83a1c32-3aeb-4ebf-b747-f75fbadebfd9"
        },
        "item": {
          "id": "c27421c2-48ea-4781-afd5-14f5c6161e02",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9d5ab4cc-92e7-40be-88d4-b74953eacfa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca9975b-c501-4a22-a3e4-a0dc6c727340",
        "cursor": {
          "ref": "75c57447-dfe7-4970-9fdc-3b66ab0989db",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "14b58279-a35a-4f86-ba02-970ef84069c3"
        },
        "item": {
          "id": "2ca9975b-c501-4a22-a3e4-a0dc6c727340",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "097c8544-ae64-46de-8385-31d7f91c2a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d4a16b-5406-44f3-b842-5a2c03b9be1e",
        "cursor": {
          "ref": "5f4fb135-a897-4d0e-a352-b22b8b8f76fb",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6d4e63a2-e44b-41bf-b7c4-9adf8c7557ac"
        },
        "item": {
          "id": "d6d4a16b-5406-44f3-b842-5a2c03b9be1e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ade87a19-ff37-442a-a0a0-745eb3557973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a112f74a-ec35-448d-91bb-526320336816",
        "cursor": {
          "ref": "4da0e2a0-5130-4a09-a997-3b5b374d4931",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c4a7a00b-6455-4549-8f2d-6548ac2abcf7"
        },
        "item": {
          "id": "a112f74a-ec35-448d-91bb-526320336816",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fb40066c-1ea5-47e6-b9f9-dbaaa98a4136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de34a5b2-aba0-4f4d-91ac-12b56e9370a6",
        "cursor": {
          "ref": "108422eb-42f9-434b-ac12-eaec75b1b941",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "37c417c8-f6de-4660-8bcf-c681b6dcf910"
        },
        "item": {
          "id": "de34a5b2-aba0-4f4d-91ac-12b56e9370a6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2660e5bf-76bc-4c3b-ad09-637a641e8ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfef6d3-ba7a-4d51-9e34-bed581cc8eb1",
        "cursor": {
          "ref": "c1452161-96d4-4ff7-9fba-fa7ce41bbbc3",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3c5b50c0-fad3-4b2a-88aa-7e8b18205285"
        },
        "item": {
          "id": "9dfef6d3-ba7a-4d51-9e34-bed581cc8eb1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "07eaebc4-1664-45b2-976e-da7385424fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7b23c5-a91d-408d-a820-710116553b57",
        "cursor": {
          "ref": "f447fc98-9e4a-4d0c-bbef-84704ecf03d5",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ac96a01e-cf63-40a3-b404-1860709eef5b"
        },
        "item": {
          "id": "af7b23c5-a91d-408d-a820-710116553b57",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5c840e7c-76d8-486c-9aae-c0344b44ab88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11cc440d-aaf3-4a04-81d1-5f06968fcebf",
        "cursor": {
          "ref": "ac134d42-3042-429c-9839-3531309f1b30",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7a3e7bbb-ccb4-4b33-aedd-34b3347bfd00"
        },
        "item": {
          "id": "11cc440d-aaf3-4a04-81d1-5f06968fcebf",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "904dacde-27dc-43c9-86d3-20cfc9aa5e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd9e4de-10cb-496c-9ad3-e5a05089ce04",
        "cursor": {
          "ref": "cba48c53-c271-4a8c-806a-4c04dda3e84a",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ab513d75-5f03-4171-b61f-c9291132455a"
        },
        "item": {
          "id": "acd9e4de-10cb-496c-9ad3-e5a05089ce04",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "22739f18-8868-4b09-9ac3-32c7b5ada382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54905c30-c6fe-4efa-bd5b-1eff2b89fbeb",
        "cursor": {
          "ref": "80352b4f-f029-4f0e-85ee-0117033b32d4",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ed2319be-97d8-4e2a-8fab-d3501d744ed0"
        },
        "item": {
          "id": "54905c30-c6fe-4efa-bd5b-1eff2b89fbeb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bab8d219-33cc-42eb-8645-6a14aa5b0dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f37d34-c700-436e-af71-9b683471ec1f",
        "cursor": {
          "ref": "4e49ed6d-9303-41a2-8a2f-c0a298ffca12",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7fefc814-fe37-4069-b760-77f197cf43a8"
        },
        "item": {
          "id": "c4f37d34-c700-436e-af71-9b683471ec1f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a5fcadd2-e894-466c-b2c6-d46f6ef1ff91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d832fb-79bc-42ba-9676-c5242b20baca",
        "cursor": {
          "ref": "920d2668-dcb9-4825-a1b1-ccfe368d8ae0",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "dce11a02-5d69-4516-9a63-b6904231fef0"
        },
        "item": {
          "id": "27d832fb-79bc-42ba-9676-c5242b20baca",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cf1468b5-cdff-4f85-83d5-6339de3382da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ea6e0a-4e6a-4730-9b8f-8c6bee83d93b",
        "cursor": {
          "ref": "fb89ae98-5923-4140-972a-0b6b8972c48d",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bca13bd3-d1c9-48d8-bec5-98ec299ff13f"
        },
        "item": {
          "id": "f0ea6e0a-4e6a-4730-9b8f-8c6bee83d93b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "170d8ec1-3e01-43ef-905f-ff56362ac811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9a0121-5c69-46d6-a661-ca03ae4a47ba",
        "cursor": {
          "ref": "5bd7a0e6-72a0-4205-964b-1430ed06a947",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "47f2cf45-9dfb-44c1-b3ca-0da1f9326609"
        },
        "item": {
          "id": "3d9a0121-5c69-46d6-a661-ca03ae4a47ba",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3c7444d6-aed0-4813-9ffb-153a418f6c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1dceb4-e77b-4d4b-a2fa-b165032aacf2",
        "cursor": {
          "ref": "e3e9a986-6e61-40ef-9cd9-90162932d22f",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "00ef04c9-d453-4f18-8892-3845b05e5c73"
        },
        "item": {
          "id": "9b1dceb4-e77b-4d4b-a2fa-b165032aacf2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0c36afef-a024-40f7-863c-2d709b9551ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3874d8-ffa8-4b49-8b86-6eee07e56198",
        "cursor": {
          "ref": "4a784866-ce14-4116-a0a7-5b543873afe3",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0064aef6-d98b-48cb-8a73-4e39f0e69093"
        },
        "item": {
          "id": "4d3874d8-ffa8-4b49-8b86-6eee07e56198",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6c5a6b75-103b-44c9-8fe8-046a5af381d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3963bc-cf39-4c4d-8d4d-8aa977e2e87f",
        "cursor": {
          "ref": "52013cfe-f638-4c19-9310-bc9efa220e05",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "72c18aff-93e3-4a54-bce6-0d355d735c67"
        },
        "item": {
          "id": "3b3963bc-cf39-4c4d-8d4d-8aa977e2e87f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "df5df16e-0cfa-4686-8f72-2b567b276f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854c9590-45f1-4d1a-a710-9a4f96a7668c",
        "cursor": {
          "ref": "4c99ade6-5a6f-48d0-97b6-724d25a40496",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e1971ad8-58a6-4642-8dde-c40f8f67507a"
        },
        "item": {
          "id": "854c9590-45f1-4d1a-a710-9a4f96a7668c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f5289f74-f2dc-4ea5-b91d-9d8bceb61b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061bb344-f755-4f07-b225-73aaa62cb38f",
        "cursor": {
          "ref": "d1752c16-ff78-44c3-8edf-45e3f5bd2240",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "61d08170-2b64-48a5-bf9a-b3855a0f9932"
        },
        "item": {
          "id": "061bb344-f755-4f07-b225-73aaa62cb38f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "66234d68-db65-4552-b4c4-d87c579bdf5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b187c4c-18dd-4977-8f35-a59d4600d36d",
        "cursor": {
          "ref": "07b253f6-6c6c-432d-b134-d84df030171d",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f4821b47-ab66-4002-87a0-786f321c0b2d"
        },
        "item": {
          "id": "7b187c4c-18dd-4977-8f35-a59d4600d36d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "653f6660-fb74-4d3e-b4bc-87ef3afd452b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60fadf7-eac4-4671-9118-d3bbfd89a67a",
        "cursor": {
          "ref": "16e7f2d7-6092-4037-9442-c5867f05ee75",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8550a999-50d8-444d-8d7d-ed47e0c286f3"
        },
        "item": {
          "id": "a60fadf7-eac4-4671-9118-d3bbfd89a67a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "de0ca452-c412-4c20-bdf9-1027d2209f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb5105f-785d-481c-b4e1-8d5f09a30bb8",
        "cursor": {
          "ref": "b73e9ea8-79b2-438d-9670-9839be6230c3",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d668f155-2a92-45e1-9345-50d39c306d09"
        },
        "item": {
          "id": "4cb5105f-785d-481c-b4e1-8d5f09a30bb8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9eb149e0-70e7-4b41-b1e8-1d432f6b152c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daadb1d7-87e2-4a20-871b-cbefb9df55c6",
        "cursor": {
          "ref": "ce3f5bb1-f793-4c1d-b30b-b8a5e0d10ec1",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "897609db-7caf-4307-a56f-88e808806d23"
        },
        "item": {
          "id": "daadb1d7-87e2-4a20-871b-cbefb9df55c6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "85a0f140-7140-43d4-8143-5f546218647c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ad51e4-d5ca-4fad-966d-973ad747c2ca",
        "cursor": {
          "ref": "c72d0935-c98f-425e-8c30-36aeafd7a147",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "38eaf91c-7ec7-4758-be10-b3f9d78c38de"
        },
        "item": {
          "id": "a3ad51e4-d5ca-4fad-966d-973ad747c2ca",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d5de3400-bf94-403c-9a61-b3306c566952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdeb0415-6e9a-4391-804b-f1fae3f6af53",
        "cursor": {
          "ref": "91134ed1-0bd2-4fdf-8720-19815913c5d3",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "14e3ff2c-cfd4-4b55-9a90-e72cb6fe5a4a"
        },
        "item": {
          "id": "cdeb0415-6e9a-4391-804b-f1fae3f6af53",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "05ef91db-a16d-40c1-a8bc-d01a56312f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7813805d-bad2-412d-9bba-8bd529647885",
        "cursor": {
          "ref": "05c4d52c-5509-499d-806c-1a5024004423",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "dffdd32a-70aa-4510-8bee-463e0f7f2c92"
        },
        "item": {
          "id": "7813805d-bad2-412d-9bba-8bd529647885",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "06bcf16a-c935-4f9a-a0aa-b438008b4348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91495175-f790-4f4d-ad8c-365e25e6b653",
        "cursor": {
          "ref": "882dc878-7daa-4f05-8995-24ca5fd16765",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fcb6a7da-38c1-4c1e-ac70-83b6fe8232b3"
        },
        "item": {
          "id": "91495175-f790-4f4d-ad8c-365e25e6b653",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "653fd51b-b15a-4d05-846a-382f87002c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6a9427-bc9f-4555-97c5-65ba2d24bd9b",
        "cursor": {
          "ref": "79701a06-c870-4279-825f-16b129763490",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5bd1fe82-80e6-47b1-83f0-3f03fd5f9456"
        },
        "item": {
          "id": "ba6a9427-bc9f-4555-97c5-65ba2d24bd9b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "abfec905-a79b-4c6b-90b6-57a69c0c2faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d661d0ba-03da-4848-941b-d3eac8170c8b",
        "cursor": {
          "ref": "c61aab80-ebdb-4653-9eae-b7e58dd6242a",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6803012a-088f-4afc-b741-bb0e8ecb9d31"
        },
        "item": {
          "id": "d661d0ba-03da-4848-941b-d3eac8170c8b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8c0158dd-9692-4c6b-8839-9bc181a60dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff1aa59-1b42-490e-866c-a5e7446f9c6b",
        "cursor": {
          "ref": "409a5dde-b7f5-4a84-89d0-03efdc148da3",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "06d448db-3db2-4f97-9899-0147adfc37c6"
        },
        "item": {
          "id": "1ff1aa59-1b42-490e-866c-a5e7446f9c6b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "88a920d8-bcf3-4ad2-9023-9d8aac2371f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d222400-d446-46e1-9050-f5b11339eca0",
        "cursor": {
          "ref": "6ab2f7bd-8ead-4042-945c-8f8dadfb2587",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f4311c3a-469c-48c0-8d0f-d16d4403d00d"
        },
        "item": {
          "id": "5d222400-d446-46e1-9050-f5b11339eca0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a2db614b-abd9-48e3-a313-d96d0a3e2a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cec3a17-2326-4c62-811c-90d3a4aea719",
        "cursor": {
          "ref": "570c69f3-500b-45c0-a58b-d88caf7b5f29",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "499204b6-e0c2-482a-b64f-29c93c4f7a0d"
        },
        "item": {
          "id": "8cec3a17-2326-4c62-811c-90d3a4aea719",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f23415bd-95fb-4cfb-87fc-3b373c378ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd153dee-1bc1-46d9-8281-0d55ec8c97fa",
        "cursor": {
          "ref": "f8ca32cf-eb61-4705-ade2-cd2ca07bb9d0",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2d11951e-55f5-4229-9918-2b3f16e06336"
        },
        "item": {
          "id": "cd153dee-1bc1-46d9-8281-0d55ec8c97fa",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "753483c8-31fc-41db-8220-d7fcd02389af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ff5ec4-a07a-4428-b249-9b5b32a37b7e",
        "cursor": {
          "ref": "078267a2-3bec-418a-8b8b-1cd44f2808e7",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7bd1c766-cc63-4619-8725-3a5c5a5f917d"
        },
        "item": {
          "id": "71ff5ec4-a07a-4428-b249-9b5b32a37b7e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3d70e351-8669-45db-ac39-3f3ea7f261ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedfc021-cc38-4b4c-98b3-9161d2be5d46",
        "cursor": {
          "ref": "a39f736e-f47f-42be-8d57-2fc4e92c65a7",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ddfb51e4-fdca-40a8-811a-13f98d38fe97"
        },
        "item": {
          "id": "aedfc021-cc38-4b4c-98b3-9161d2be5d46",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "98633a57-4e19-4a00-bbdf-70570c6d5793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97069905-af6d-481f-82ae-c1ea8d760d66",
        "cursor": {
          "ref": "c83739e7-ddfa-4978-a911-99cc29083e62",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0cc61ab9-1ef7-4d58-9b70-60e51781d662"
        },
        "item": {
          "id": "97069905-af6d-481f-82ae-c1ea8d760d66",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1cac6ac7-dcdc-4505-8702-2db3176d0281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14e49ec-c4d9-4645-9ea8-ff5cfeca205f",
        "cursor": {
          "ref": "62e63bee-f192-41a9-b21e-322b45f1fdfd",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "80be193d-bfa2-4c49-bf10-272188b13d59"
        },
        "item": {
          "id": "a14e49ec-c4d9-4645-9ea8-ff5cfeca205f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "256796a0-6f2c-4b81-bad7-7761d108bb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f2645c-3c31-45cd-8541-7b06abca952c",
        "cursor": {
          "ref": "3c241e7e-f217-48bf-b019-d32f1b1f8593",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e3f425fb-7814-49d8-a624-6ed240cc2823"
        },
        "item": {
          "id": "66f2645c-3c31-45cd-8541-7b06abca952c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "be4bc086-adbb-4441-a752-03d765ef306a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813b2599-984f-4088-80ff-a8b9bd0ffae1",
        "cursor": {
          "ref": "06edbdcf-3faa-4419-914f-58a32a2d368e",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "45d25a4e-0cc1-4948-9d98-e6ecf65414bd"
        },
        "item": {
          "id": "813b2599-984f-4088-80ff-a8b9bd0ffae1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4a1a656c-19fa-40aa-b112-4fb1fdd5fcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1690a03e-2bfe-43f2-8b4e-fd90690bcad2",
        "cursor": {
          "ref": "ac242729-8f1b-48f9-93c5-f5c2d5206ed4",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3c6502a1-a4bb-4fdc-a14c-fcb941f007ce"
        },
        "item": {
          "id": "1690a03e-2bfe-43f2-8b4e-fd90690bcad2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2f9e0be5-84c7-407f-8492-b6bd6d3659df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b02302-18f5-42e5-afc2-e76a58da29aa",
        "cursor": {
          "ref": "26115b6b-e746-4a4b-9a92-5d368ef0a00b",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0e0f60eb-2293-4041-9d07-0f949c54d1bc"
        },
        "item": {
          "id": "98b02302-18f5-42e5-afc2-e76a58da29aa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d03d2c90-1933-4bd7-b258-82df86fa2985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90d050d-4581-4a16-9879-d3b458231e22",
        "cursor": {
          "ref": "3ba25f1c-03d5-4de3-9236-32c999ceb9a2",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f6775934-4924-4a2a-8ecd-c182e316d8e0"
        },
        "item": {
          "id": "c90d050d-4581-4a16-9879-d3b458231e22",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a48b0667-ab5c-4938-b51f-1acedc4f732a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7deea449-cded-4805-ac17-26f867c6f86a",
        "cursor": {
          "ref": "e8873c85-e8a2-431b-b0f8-7d0a0b7ee0d6",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ec08aa6b-2404-4869-8740-998dabadc82c"
        },
        "item": {
          "id": "7deea449-cded-4805-ac17-26f867c6f86a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b45c1569-6a72-4dd7-9701-a49f5bb6aa45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbddbfa-14e0-4c67-b5b6-2494fb33e205",
        "cursor": {
          "ref": "8eaa68c0-9dd3-407e-977e-5a9e61cc2441",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6334821f-ec97-40ba-8fcf-d6e2682fd701"
        },
        "item": {
          "id": "4bbddbfa-14e0-4c67-b5b6-2494fb33e205",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fecfdb97-f6b8-42de-9a98-e7eeba20cd3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad018a0-459d-4a1d-a38a-4de0c4e851c1",
        "cursor": {
          "ref": "cf0150f2-5a13-462a-afe3-dbb186cc47e7",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c6ff8c60-4543-411c-b4bf-cb2f81d9f710"
        },
        "item": {
          "id": "7ad018a0-459d-4a1d-a38a-4de0c4e851c1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4c609399-094a-4b75-b9f4-f7ea5cd2bbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42780fc-ba65-4ecd-ac43-d623fdfac61b",
        "cursor": {
          "ref": "1df8be02-ed26-49c6-902f-8ccb71aa3160",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "43007791-87f3-4f51-9332-6c33fe0a15ed"
        },
        "item": {
          "id": "b42780fc-ba65-4ecd-ac43-d623fdfac61b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7d19075c-50e2-47ac-8811-f55b47c6caa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fcc48b-e3f3-4570-85a7-2dc81c6ec98a",
        "cursor": {
          "ref": "a08f41eb-38a2-4f68-8b60-50182af6cf6d",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5e6ea9e4-93a8-478b-93e7-c83af326c3be"
        },
        "item": {
          "id": "97fcc48b-e3f3-4570-85a7-2dc81c6ec98a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b27245a4-7d8b-4395-b13a-6eee0f310ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a7af4a-b6ba-475d-9862-854c69eb7075",
        "cursor": {
          "ref": "0dd6c6d9-f9c5-47ee-b25a-7743f7b1c85a",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c17b1675-7936-48cb-97bc-97e98139e2b7"
        },
        "item": {
          "id": "26a7af4a-b6ba-475d-9862-854c69eb7075",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1ebfb07d-6bbb-4556-87dd-4deac1bcd13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5539467b-eb5c-49b5-844e-4d1a0a62ff15",
        "cursor": {
          "ref": "068cf5ab-49a8-4e30-8587-b4dfc681677d",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2cd51277-a49e-48ba-926c-2153ac36cdc2"
        },
        "item": {
          "id": "5539467b-eb5c-49b5-844e-4d1a0a62ff15",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e40e9036-5aa1-4d06-882d-b9dd388a5edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a0747b-aadf-4dc8-afed-16c4d9a5365b",
        "cursor": {
          "ref": "78e8eeb9-d514-4ed6-988a-dc384cc92a4b",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "39891ae3-014c-4bab-b4be-a270b4e419ad"
        },
        "item": {
          "id": "89a0747b-aadf-4dc8-afed-16c4d9a5365b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ea9c9932-289a-434a-90b3-5d39510476b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3277aedc-1741-408e-aad4-d406d2f8666e",
        "cursor": {
          "ref": "630e733f-60d1-423d-807f-f48e3e084621",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "eca47716-1c4b-4e65-8bf8-2c3c6ae2be34"
        },
        "item": {
          "id": "3277aedc-1741-408e-aad4-d406d2f8666e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2d480a06-eec5-41bb-be57-3aa3a649877b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cac0864-245f-478b-ac85-bd1d31395c14",
        "cursor": {
          "ref": "f510a32a-fa80-4edf-a4b2-43ab05460cfc",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "80cea4e3-ad47-4536-9d00-e443de3c7b12"
        },
        "item": {
          "id": "9cac0864-245f-478b-ac85-bd1d31395c14",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "301da12d-cd02-4a15-a731-63d4588b2ef8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044def4e-46d4-4fb5-bd99-2dd54d7a7266",
        "cursor": {
          "ref": "2b1c2142-29fe-4d76-93ea-6001b01e99dd",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f25525d5-de97-49fd-9dcc-a0ee85b1ee02"
        },
        "item": {
          "id": "044def4e-46d4-4fb5-bd99-2dd54d7a7266",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "22ce3c41-5628-4b8c-ae47-b3823e70783d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9206c6-18e6-42aa-8f49-f41f15896355",
        "cursor": {
          "ref": "78490ee5-0b8d-4475-816f-e2f93bb86ab4",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "69a86963-7689-44a4-962b-b861f60203df"
        },
        "item": {
          "id": "ba9206c6-18e6-42aa-8f49-f41f15896355",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fd6574eb-934c-49af-9811-2182581ef1d7",
          "status": "OK",
          "code": 200,
          "responseTime": 355,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81f7c05-a30e-4914-8161-667bb8ff1eda",
        "cursor": {
          "ref": "991d114b-d53f-4a19-88ca-5e5586a821a3",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2a5b3058-7721-423f-b866-10b3da195e53"
        },
        "item": {
          "id": "b81f7c05-a30e-4914-8161-667bb8ff1eda",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f1b990fd-48df-49e8-87b1-518684946d23",
          "status": "OK",
          "code": 200,
          "responseTime": 402,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f20d18-6b52-4201-9ea4-bf1a51b5e883",
        "cursor": {
          "ref": "231416f4-662c-4be1-b9ef-5a6370b7f6f3",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "88842a3a-2954-4940-8a94-fb9ecc0e4c38"
        },
        "item": {
          "id": "02f20d18-6b52-4201-9ea4-bf1a51b5e883",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "b9fe6470-e338-42f3-af12-0fabb236e332",
          "status": "OK",
          "code": 200,
          "responseTime": 500,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b3085b-4875-41f2-a71b-13dc505996e6",
        "cursor": {
          "ref": "29e65e1e-22ea-44cf-8a9d-bb433872b19a",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b55f1a44-3924-4b9b-8d5e-b2afa407702a"
        },
        "item": {
          "id": "e4b3085b-4875-41f2-a71b-13dc505996e6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "78bbe72a-d1d2-4a44-bb58-2444ecfa6179",
          "status": "OK",
          "code": 200,
          "responseTime": 412,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "75268514-af0c-45c8-80e8-718f731ca88b",
        "cursor": {
          "ref": "30a0478e-5d26-4069-94d7-dbd52903fa01",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7a72094a-0a8a-433e-8511-763997e4368e"
        },
        "item": {
          "id": "75268514-af0c-45c8-80e8-718f731ca88b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5f21ef8d-31a9-4d1b-ae33-65f071773b88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75268514-af0c-45c8-80e8-718f731ca88b",
        "cursor": {
          "ref": "30a0478e-5d26-4069-94d7-dbd52903fa01",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7a72094a-0a8a-433e-8511-763997e4368e"
        },
        "item": {
          "id": "75268514-af0c-45c8-80e8-718f731ca88b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5f21ef8d-31a9-4d1b-ae33-65f071773b88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75268514-af0c-45c8-80e8-718f731ca88b",
        "cursor": {
          "ref": "30a0478e-5d26-4069-94d7-dbd52903fa01",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7a72094a-0a8a-433e-8511-763997e4368e"
        },
        "item": {
          "id": "75268514-af0c-45c8-80e8-718f731ca88b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5f21ef8d-31a9-4d1b-ae33-65f071773b88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce65a035-3f8b-4505-80e3-61425f902ea3",
        "cursor": {
          "ref": "4b07aa1d-14ef-4150-a570-cd59a5ddb03e",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1f2e3305-fcb4-4531-ab53-8fe544e9755d"
        },
        "item": {
          "id": "ce65a035-3f8b-4505-80e3-61425f902ea3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9c3e2166-60d1-488e-8b1a-406337ceae53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a939fa3-ba9e-47e4-83df-9293fefaa94e",
        "cursor": {
          "ref": "0de73ee5-da7c-47f2-be9d-487589e65199",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "776ff4ad-1fab-43e3-8b0b-963fd45f5598"
        },
        "item": {
          "id": "5a939fa3-ba9e-47e4-83df-9293fefaa94e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a6fb1950-dac8-4a17-b976-7a555c2a05c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5a939fa3-ba9e-47e4-83df-9293fefaa94e",
        "cursor": {
          "ref": "0de73ee5-da7c-47f2-be9d-487589e65199",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "776ff4ad-1fab-43e3-8b0b-963fd45f5598"
        },
        "item": {
          "id": "5a939fa3-ba9e-47e4-83df-9293fefaa94e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a6fb1950-dac8-4a17-b976-7a555c2a05c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "200b2534-69e4-4398-affe-a7f5adfe0616",
        "cursor": {
          "ref": "e9d9d9fe-48a6-471d-9a20-0b4377c216d0",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "66278f2a-02ba-4b20-b225-96d2397e9692"
        },
        "item": {
          "id": "200b2534-69e4-4398-affe-a7f5adfe0616",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ba45021a-a64c-4d86-ac3e-8b90ec02c1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "17c75435-2711-4299-b84c-7995ad0011ff",
        "cursor": {
          "ref": "4d09ea4a-503d-48e5-9e97-b0bff126733a",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "689c8390-bdaa-42c2-a851-b1138c574ea8"
        },
        "item": {
          "id": "17c75435-2711-4299-b84c-7995ad0011ff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2196d83e-a7c6-43a1-b9fa-698f779b5197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "17c75435-2711-4299-b84c-7995ad0011ff",
        "cursor": {
          "ref": "4d09ea4a-503d-48e5-9e97-b0bff126733a",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "689c8390-bdaa-42c2-a851-b1138c574ea8"
        },
        "item": {
          "id": "17c75435-2711-4299-b84c-7995ad0011ff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2196d83e-a7c6-43a1-b9fa-698f779b5197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "74802c20-f7aa-4d47-ac4a-7ad8810cd86a",
        "cursor": {
          "ref": "7df7baf6-8ced-4cfd-906e-46c588c7cdc4",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3ad58fa9-6375-497c-bd4b-2bfad1f20355"
        },
        "item": {
          "id": "74802c20-f7aa-4d47-ac4a-7ad8810cd86a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a1fcabba-7eeb-4c2e-a0ad-d741b9a9659e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}